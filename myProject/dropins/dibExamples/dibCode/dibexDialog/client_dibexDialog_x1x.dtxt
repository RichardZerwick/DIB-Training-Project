System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/forms", "@angular/material/core", "rxjs/operators", "@angular/common", "@angular/material/button", "@angular/material/icon", "@ngbracket/ngx-layout/extended", "@angular/material/dialog", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, forms_1, core_2, shared_3, operators_1, core_3, common_1, shared_4, shared_5, button_1, icon_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, _c0, importsRequired, dibexDialogComponent, containerModules, fullDateTimeOptions, dibexDialogModule;
    var __moduleName = context_1 && context_1.id;
    function dibexDialogComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 19);
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i2 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                i5 = forms_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i3 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i6 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
            },
            function (i4_1) {
                i4 = i4_1;
            },
            function (i7_1) {
                i7 = i7_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i9_1) {
                i9 = i9_1;
            },
            function (i10_1) {
                i10 = i10_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexDialogComponent = class dibexDialogComponent extends shared_1.BaseComponent {
                httpClient;
                sd;
                cd;
                view = { container: { id: 244, name: 'dibexDialog', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'plain', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: [], recordStatus: 'create', debug: false, debugItem: false };
                clientData;
                allClientData;
                model;
                constructor(injector, httpClient, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexDialog');
                    this.containerName = 'dibexDialog'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { color: { itemId: 5986, type: 'text', fieldAlias: 'color', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, name: { itemId: 5987, type: 'text', fieldAlias: 'name', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, pet: { itemId: 5988, type: 'text', fieldAlias: 'pet', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, flower: { itemId: 5989, type: 'text', fieldAlias: 'flower', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, music: { itemId: 5990, type: 'text', fieldAlias: 'music', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, };
                    this.model.$formGroup.addControl('color', this.model.modelItems.color.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('pet', this.model.modelItems.pet.formControl);
                    this.model.$formGroup.addControl('flower', this.model.modelItems.flower.formControl);
                    this.model.$formGroup.addControl('music', this.model.modelItems.music.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnCloseDialog", actionType: "click", responseType: 'actions', submitUrl: "shared.action.close-dialog?containerName=self", itemAlias: "btnCloseDialog", waitForCompletion: false, containerName: "dibexDialog", handlers: [] }, this.clientData, { itemEventId: 'ie404-dib', itemId: '5985', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnCloseDialogServer", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Action/closeDialog", itemAlias: "btnCloseDialogServer", waitForCompletion: false, containerName: "dibexDialog", handlers: [] }, this.clientData, { itemEventId: 'ie405-dib', itemId: '6927', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.reloadContainer();
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexDialog', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexDialog' });
                    this.reloadSubcontainers();
                }
                static ɵfac = function dibexDialogComponent_Factory(t) { return new (t || dibexDialogComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexDialogComponent, selectors: [["dibex-dialog"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 32, vars: 15, consts: [["mode", "indeterminate", 4, "ngIf"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5983", "dibComponent", "dialogContent", 2, "width", "450px !important", "height", "160px !important", "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch"], [3, "dibPort"], ["id", "ci5987", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name"], ["id", "ci5986", "dibComponent", "inputColor", "appearance", "standard"], ["matInput", "", "type", "color", "formControlName", "color", "name", "color"], ["id", "ci5988", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "pet", "name", "pet"], ["id", "ci5989", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "flower", "name", "flower"], ["id", "ci5990", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "music", "name", "music"], ["id", "ci5984", "dibComponent", "dialogActions", 2, "width", "500px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex", "1 1 0%"], ["mat-raised-button", "", "color", "primary", "id", "ci5985", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnCloseDialog", "type", "button", 3, "containerPortId"], [1, "dibButtonCaption"], ["mat-raised-button", "", "color", "primary", "id", "ci6927", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnCloseDialogServer", "type", "button", 3, "containerPortId"], ["mode", "indeterminate"]], template: function dibexDialogComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵtemplate(0, dibexDialogComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexDialogComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "mat-dialog-content", 3);
                        i0.ɵɵelementContainerStart(4, 4);
                        i0.ɵɵelementStart(5, "mat-form-field", 5)(6, "mat-label");
                        i0.ɵɵtext(7, "name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(8, "input", 6);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(9, "mat-form-field", 7)(10, "mat-label");
                        i0.ɵɵtext(11, "Color");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(12, "input", 8);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(13, "mat-form-field", 9)(14, "mat-label");
                        i0.ɵɵtext(15, "Pet");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(16, "input", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(17, "mat-form-field", 11)(18, "mat-label");
                        i0.ɵɵtext(19, "Flower");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(20, "input", 12);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(21, "mat-form-field", 13)(22, "mat-label");
                        i0.ɵɵtext(23, "Music");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(24, "input", 14);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(25, "mat-dialog-actions", 15)(26, "button", 16)(27, "span", 17);
                        i0.ɵɵtext(28, "Close Dialog (Client-Side)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(29, "button", 18)(30, "span", 17);
                        i0.ɵɵtext(31, "Close Dialog (Server-Side)");
                        i0.ɵɵelementEnd()()()()();
                    } if (rf & 2) {
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(13, _c0, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5983");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "name");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Color");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Pet");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Flower");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Music");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Close Dialog (Client-Side)");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Close Dialog (Server-Side)");
                    } }, dependencies: [i3.NgClass, i3.NgIf, i4.DefaultClassDirective, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, i2.DibPortDirective, i2.DibListenersDirective, i2.DibRemoveFocusDirective, i6.MatButton, i7.MatDialogContent, i7.MatDialogActions, i8.MatFormField, i8.MatLabel, i9.MatInput, i10.MatProgressBar], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexDialog'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexDialogComponent.prototype, "reloadContainer", null);
            exports_1("dibexDialogComponent", dibexDialogComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexDialogComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-dialog', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><mat-dialog-content  id=ci5983 dibComponent=dialogContent   style="  width:450px !important;   height:160px !important;   display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  " ><ng-container [dibPort]="'5983'" ><mat-form-field id=ci5987 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'name'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field  id=ci5986 dibComponent=inputColor   style="  "  appearance=standard  ><mat-label >Color</mat-label><input   matInput   type=color   formControlName=color   name=color   [attr.aria-label]="'Color'" ></mat-form-field><mat-form-field id=ci5988 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Pet</mat-label><input   matInput  type=text   formControlName=pet   name=pet   [attr.aria-label]="'Pet'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci5989 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Flower</mat-label><input   matInput  type=text   formControlName=flower   name=flower   [attr.aria-label]="'Flower'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci5990 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Music</mat-label><input   matInput  type=text   formControlName=music   name=music   [attr.aria-label]="'Music'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></mat-dialog-content><mat-dialog-actions id=ci5984 dibComponent=dialogActions   style="  width:500px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex: 1 1 0%;  " ><button  mat-raised-button color=primary  id=ci5985 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnCloseDialog   style="  "  [attr.aria-label]="'Close Dialog (Client-Side)'"  type=button  ><span class=dibButtonCaption >Close Dialog (Client-Side)</span></button><button  mat-raised-button color=primary  id=ci6927 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnCloseDialogServer   style="  "  [attr.aria-label]="'Close Dialog (Server-Side)'"  type=button  ><span class=dibButtonCaption >Close Dialog (Server-Side)</span></button></mat-dialog-actions></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexDialogModule = class dibexDialogModule {
                static entry = dibexDialogComponent;
                static ɵfac = function dibexDialogModule_Factory(t) { return new (t || dibexDialogModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexDialogModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexDialogModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexDialogModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexDialogComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexDialogModule, { declarations: [dibexDialogComponent], imports: [common_1.CommonModule, shared_4.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule] }); })();
        }
    };
});
