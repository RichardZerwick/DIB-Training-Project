System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/forms", "@angular/material/core", "rxjs/operators", "@angular/common", "@angular/material/card", "@angular/material/tabs", "@angular/material/button", "@angular/material/icon", "@ngbracket/ngx-layout/extended", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, forms_1, core_2, shared_3, operators_1, core_3, common_1, shared_4, shared_5, card_1, tabs_1, button_1, icon_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, _c0, importsRequired, dibexPlainBasicsComponent, containerModules, fullDateTimeOptions, dibexPlainBasicsModule;
    var __moduleName = context_1 && context_1.id;
    function dibexPlainBasicsComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 28);
    } }
    function dibexPlainBasicsComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "app-tab-label", 29);
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("value", ctx_r2.getTabTitle("tabBaseContainer", "dibexPlainBasics.tabBaseContainer", "Base Containers"));
    } }
    function dibexPlainBasicsComponent_ng_template_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "app-tab-label", 30);
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵproperty("value", ctx_r4.getTabTitle("tabAdHoc", "dibexPlainBasics.tabAdHoc", "Ad Hoc Functions"));
    } }
    function dibexPlainBasicsComponent_mat_error_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPlainBasicsComponent_mat_error_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i2 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                i5 = forms_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i3 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i10 = card_1_1;
            },
            function (tabs_1_1) {
                tabs_1 = tabs_1_1;
                i11 = tabs_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i6 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
            },
            function (i4_1) {
                i4 = i4_1;
            },
            function (i7_1) {
                i7 = i7_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i9_1) {
                i9 = i9_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexPlainBasicsComponent = class dibexPlainBasicsComponent extends shared_1.BaseComponent {
                httpClient;
                sd;
                cd;
                view = { container: { id: 232, name: 'dibexPlainBasics', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "tabBaseContainer": [''], "tabAdHoc": [''], "_": ['dibDocsExampleHtml*5783'] }, dropin: 'plain', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: [], recordStatus: 'create', debug: false, debugItem: false };
                clientData;
                allClientData;
                model;
                constructor(injector, httpClient, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexPlainBasics');
                    this.containerName = 'dibexPlainBasics'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { name: { itemId: 5779, type: 'text', fieldAlias: 'name', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'name', default: '', dataType: 'text', contentType: 'text', changeUrl: false }, color: { itemId: 5780, type: 'text', fieldAlias: 'color', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'color', default: '', dataType: 'text', contentType: 'text', changeUrl: false }, };
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('color', this.model.modelItems.color.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnGreeting", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Events/greetingColor", itemAlias: "btnGreeting", waitForCompletion: false, containerName: "dibexPlainBasics", handlers: [] }, this.clientData, { itemEventId: 'ie309-dib', itemId: '5781', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.reloadContainer();
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexPlainBasics', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexPlainBasics' });
                    this.reloadSubcontainers();
                }
                static ɵfac = function dibexPlainBasicsComponent_Factory(t) { return new (t || dibexPlainBasicsComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexPlainBasicsComponent, selectors: [["dibex-plain-basics"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 42, vars: 17, consts: [["mode", "indeterminate", 4, "ngIf"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5783", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexPlainBasics", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci5773", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "flex-wrap", "nowrap"], [3, "dibPort"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch", "flex", "1 1 0%"], ["mat-stretch-tabs", "false", "id", "ci5774", "dibComponent", "tabs", "itemAlias", "tabs", "containerName", "dibexPlainBasics", "dibTabGoToParent", "", "dibAutoTabSelection", "5775,5778", "dibAutoTabSelectionAliases", "tabBaseContainer,tabAdHoc", 3, "portId", "container"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "nowrap"], ["tabReference5775", ""], ["mat-tab-label", ""], ["id", "ci5775", "dibComponent", "div", 2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "nowrap"], ["id", "ci5776", "dibComponent", "comment"], [1, "dib-comment"], ["id", "ci5777", "dibComponent", "img", "src", "/files/dropins/dibExamples/img/headerSample.png"], [2, "width", "700px !important", "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap"], ["tabReference5778", ""], ["id", "ci5778", "dibComponent", "div", 2, "width", "700px !important", "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap"], ["id", "ci5782", "dibComponent", "comment"], ["id", "ci5779", "dibComponent", "inputText", "item-alias", "name", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "name", "required", "true", "name", "name"], [4, "ngIf"], ["id", "ci5780", "dibComponent", "inputColor", "item-alias", "color", "appearance", "standard"], ["matInput", "", "type", "color", "formControlName", "color", "required", "true", "name", "color"], ["mat-raised-button", "", "color", "primary", "id", "ci5781", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnGreeting", "type", "button", 3, "containerPortId"], [1, "dibButtonCaption"], ["mode", "indeterminate"], ["tabPortId", "5775", "dibid", "tabBaseContainer__caption.5775", 3, "value"], ["tabPortId", "5778", "dibid", "tabAdHoc__caption.5778", 3, "value"]], template: function dibexPlainBasicsComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵtemplate(0, dibexPlainBasicsComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexPlainBasicsComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
                        i0.ɵɵelementContainer(4, 4);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(5, "mat-card", 5)(6, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(7, 7);
                        i0.ɵɵelementStart(8, "div", 8)(9, "mat-tab-group", 9)(10, "mat-tab", 10, 11);
                        i0.ɵɵtemplate(12, dibexPlainBasicsComponent_ng_template_12_Template, 1, 1, "ng-template", 12);
                        i0.ɵɵelementStart(13, "div", 13);
                        i0.ɵɵelementContainerStart(14, 7);
                        i0.ɵɵelementStart(15, "span", 14)(16, "div", 15);
                        i0.ɵɵtext(17, " The \"Plain\" container type is often used for the first container that is loaded in your app, the \"base container\".");
                        i0.ɵɵelement(18, "br");
                        i0.ɵɵtext(19, "Typically the base container will contain the application header with logo etc, and tabs and menu's to access the rest of the application (example below). ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(20, "img", 16);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(21, "mat-tab", 17, 18);
                        i0.ɵɵtemplate(23, dibexPlainBasicsComponent_ng_template_23_Template, 1, 1, "ng-template", 12);
                        i0.ɵɵelementStart(24, "div", 19);
                        i0.ɵɵelementContainerStart(25, 7);
                        i0.ɵɵelementStart(26, "span", 20)(27, "div", 15);
                        i0.ɵɵtext(28, " Another use is for gathering inputs for executing functions. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(29, "mat-form-field", 21)(30, "mat-label");
                        i0.ɵɵtext(31, "What is your name?");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(32, "input", 22);
                        i0.ɵɵtemplate(33, dibexPlainBasicsComponent_mat_error_33_Template, 2, 0, "mat-error", 23);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(34, "mat-form-field", 24)(35, "mat-label");
                        i0.ɵɵtext(36, "Choose a Color");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(37, "input", 25);
                        i0.ɵɵtemplate(38, dibexPlainBasicsComponent_mat_error_38_Template, 2, 0, "mat-error", 23);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(39, "button", 26)(40, "span", 27);
                        i0.ɵɵtext(41, "Greeting");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                    } if (rf & 2) {
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(15, _c0, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5783");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5773");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("portId", ctx.portId)("container", ctx);
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("dibPort", "5775");
                        i0.ɵɵadvance(11);
                        i0.ɵɵproperty("dibPort", "5778");
                        i0.ɵɵadvance(7);
                        i0.ɵɵattribute("aria-label", "What is your name?");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("name", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Choose a Color");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("color", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Greeting");
                    } }, dependencies: [i3.NgClass, i3.NgIf, i4.DefaultClassDirective, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.FormGroupDirective, i5.FormControlName, i2.TabLabelComponent, i2.DibPortDirective, i2.DibAutoTabSelectionDirective, i2.DibTabGoToParentDirective, i2.DibListenersDirective, i2.DibRemoveFocusDirective, i6.MatButton, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatInput, i9.MatProgressBar, i10.MatCard, i10.MatCardContent, i11.MatTabLabel, i11.MatTab, i11.MatTabGroup], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexPlainBasics'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexPlainBasicsComponent.prototype, "reloadContainer", null);
            exports_1("dibexPlainBasicsComponent", dibexPlainBasicsComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPlainBasicsComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-plain-basics', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5783 dibComponent=subcontainer   ><ng-container [dibPort]="'5783'" parentContainerName=dibexPlainBasics  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5773 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5773'" ><div style="display:flex; flex-direction:column; align-items: stretch; flex:1 1 0%"><mat-tab-group   mat-stretch-tabs=false  id=ci5774 dibComponent=tabs   style="  "  itemAlias=tabs  [portId]="portId" containerName=dibexPlainBasics  dibTabGoToParent   dibAutoTabSelection="5775,5778"  dibAutoTabSelectionAliases="tabBaseContainer,tabAdHoc"  [container]="this"  ><mat-tab   #tabReference5775  style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: nowrap;  "  ><ng-template mat-tab-label ><app-tab-label [value]="getTabTitle('tabBaseContainer', 'dibexPlainBasics.tabBaseContainer', 'Base Containers')" tabPortId=5775  dibid="tabBaseContainer__caption.5775"></app-tab-label></ng-template><div   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: nowrap;  " id=ci5775 dibComponent=div  ><ng-container [dibPort]="'5775'" ><span  id=ci5776 dibComponent=comment   style="  " ><div class=dib-comment > The "Plain" container type is often used for the first container that is loaded in your app, the "base container".<br>Typically the base container will contain the application header with logo etc, and tabs and menu's to access the rest of the application (example below).  </div></span><img  id=ci5777 dibComponent=img   style="  "  src="/files/dropins/dibExamples/img/headerSample.png" /></ng-container></div></mat-tab><mat-tab   #tabReference5778  style="  width:700px !important;   display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  "  ><ng-template mat-tab-label ><app-tab-label [value]="getTabTitle('tabAdHoc', 'dibexPlainBasics.tabAdHoc', 'Ad Hoc Functions')" tabPortId=5778  dibid="tabAdHoc__caption.5778"></app-tab-label></ng-template><div   style="  width:700px !important;   display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  " id=ci5778 dibComponent=div  ><ng-container [dibPort]="'5778'" ><span  id=ci5782 dibComponent=comment   style="  " ><div class=dib-comment > Another use is for gathering inputs for executing functions.  </div></span><mat-form-field id=ci5779 dibComponent=inputText   style="  "  item-alias=name   appearance=standard  ><mat-label >What is your name?</mat-label><input   matInput  type=text   formControlName=name   required=true  name=name   [attr.aria-label]="'What is your name?'" ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field  id=ci5780 dibComponent=inputColor   style="  "  item-alias=color   appearance=standard  ><mat-label >Choose a Color</mat-label><input   matInput   type=color   formControlName=color   required=true  name=color   [attr.aria-label]="'Choose a Color'" ><mat-error *ngIf="hasError('color','required',model.$formGroup)">Please enter a value</mat-error></mat-form-field><button  mat-raised-button color=primary  id=ci5781 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnGreeting   style="  "  [attr.aria-label]="'Greeting'"  type=button  ><span class=dibButtonCaption >Greeting</span></button></ng-container></div></mat-tab></mat-tab-group></div></ng-container></mat-card-content></mat-card></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, tabs_1.MatTabsModule, button_1.MatButtonModule, icon_1.MatIconModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexPlainBasicsModule = class dibexPlainBasicsModule {
                static entry = dibexPlainBasicsComponent;
                static ɵfac = function dibexPlainBasicsModule_Factory(t) { return new (t || dibexPlainBasicsModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexPlainBasicsModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexPlainBasicsModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPlainBasicsModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexPlainBasicsComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexPlainBasicsModule, { declarations: [dibexPlainBasicsComponent], imports: [common_1.CommonModule, shared_4.SharedModule, card_1.MatCardModule, tabs_1.MatTabsModule, button_1.MatButtonModule, icon_1.MatIconModule] }); })();
        }
    };
});
