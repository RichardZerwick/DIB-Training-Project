System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/autocomplete", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/datepicker", "@angular/material/form-field", "@angular/material/input", "@angular/cdk/text-field", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, autocomplete_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, _c0, _c1, _c2, _c3, _c4, _c5, _c6, importsRequired, dibexTestProjectGridComponent, containerModules, dibexTestProjectGridModule;
    var __moduleName = context_1 && context_1.id;
    function dibexTestProjectGridComponent_button_12_Template(rf, ctx) { if (rf & 1) {
        const _r34 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 45);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_button_12_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r34); const ctx_r33 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r33.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestProjectGridComponent_button_13_Template(rf, ctx) { if (rf & 1) {
        const _r36 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 47);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r36); const ctx_r35 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r35.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 48);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestProjectGridComponent_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r37 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r37.page.toRecord, "\u00A0of\u00A0", ctx_r37.page.records, "");
    } }
    function dibexTestProjectGridComponent_div_15_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r38.page.totalRecords, ")");
    } }
    function dibexTestProjectGridComponent_div_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 49);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_div_15_span_2_Template, 2, 2, "span", 42);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_div_15_span_4_Template, 2, 1, "span", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Projects: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexTestProjectGridComponent_th_25_Template(rf, ctx) { if (rf & 1) {
        const _r40 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 50)(1, "mat-checkbox", 51);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_th_25_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r40); const ctx_r39 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r39.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexTestProjectGridComponent_td_26_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 52)(1, "mat-checkbox", 53);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_26_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexTestProjectGridComponent_td_26_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r44); const row_r41 = restoredCtx.$implicit; const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r43.selection.toggle(row_r41) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r41 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r41));
    } }
    function dibexTestProjectGridComponent_td_28_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 55);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 56);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_28_ng_container_1_Template_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r50); const row_r48 = restoredCtx.ngIf; const ctx_r49 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r49.navigationService.goTo("dibexProjectForm", "main", "?primary_id=" + row_r48.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r49 })); });
        i0.ɵɵelement(4, "dib-icon", 57);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4159");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "Open Project Form and dont change URL")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestProjectGridComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_28_ng_container_1_Template, 5, 5, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r45 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r45);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r45.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 58);
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r52 = i0.ɵɵnextContext(2).index;
        const ctx_r55 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r55.findColumnDisplayValue(rowIndex_r52, "id", "none", "number"), "");
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r64 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r64); const ctx_r63 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r63.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 63);
        i0.ɵɵelement(2, "input", 64);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 42);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_td_31_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r51 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r56 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.hasError("id", "required", rowForm_r51));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.view.recordStatus == "update" && ctx_r56.notSaved("id", rowForm_r51));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.view.recordStatus == "update" && ctx_r56.isSaved("id", rowForm_r51));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.isInvalid("id", rowForm_r51));
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_td_31_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_31_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_31_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_31_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r51 = i0.ɵɵnextContext().$implicit;
        const ctx_r53 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r53.excelEditing == false && rowForm_r51.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r53.excelEditing == true || rowForm_r51.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r53.excelEditing == false && rowForm_r51.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_td_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_31_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r51 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r51);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r51.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_32_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_32_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_32_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r67 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r67.editorOpen);
    } }
    function dibexTestProjectGridComponent_th_32_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_32_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r74 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_th_32_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r74); const ctx_r73 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r73.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_32_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_32_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r76 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_th_32_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r76); const ctx_r75 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r75.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_th_32_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r76); const ctx_r77 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r77.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_th_32_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_th_32_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r69 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r69.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.view.recordStatus == "update" && ctx_r69.notSaved("id", ctx_r69.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.view.recordStatus == "update" && ctx_r69.isSaved("id", ctx_r69.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_th_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_32_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_th_32_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_th_32_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r79 = i0.ɵɵnextContext(2).index;
        const ctx_r82 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r82.findColumnDisplayValue(rowIndex_r79, "name", "none", "text"), "");
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r91 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r91); const ctx_r90 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r90.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r93 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 82)(2, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r93); const ctx_r92 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r92.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_td_34_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r93); const ctx_r94 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r94.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 42);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 42);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r78 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r83 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r83.hasError("name", "required", rowForm_r78));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r83.hasError("name", "maxlength", rowForm_r78));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r83.view.recordStatus == "update" && ctx_r83.notSaved("name", rowForm_r78));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r83.view.recordStatus == "update" && ctx_r83.isSaved("name", rowForm_r78));
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_td_34_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_34_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_34_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_34_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r78 = i0.ɵɵnextContext().$implicit;
        const ctx_r80 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r80.excelEditing == false && rowForm_r78.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r80.excelEditing == true || rowForm_r78.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r80.excelEditing == false && rowForm_r78.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_34_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r78 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r78);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r78.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_35_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_35_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_35_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r97 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r97.editorOpen);
    } }
    function dibexTestProjectGridComponent_th_35_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_35_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r104 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_th_35_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r104); const ctx_r103 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r103.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_35_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_35_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r106 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_th_35_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r106); const ctx_r105 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r105.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_th_35_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r106); const ctx_r107 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r107.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_th_35_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_th_35_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r99 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r99.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.view.recordStatus == "update" && ctx_r99.notSaved("name", ctx_r99.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.view.recordStatus == "update" && ctx_r99.isSaved("name", ctx_r99.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_35_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_th_35_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_th_35_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexTestProjectGridComponent_td_37_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r109 = i0.ɵɵnextContext(2).index;
        const ctx_r112 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r112.findColumnDisplayValue(rowIndex_r109, "client_id", "dropdown", "select"), "");
    } }
    function dibexTestProjectGridComponent_td_37_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r124 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_37_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r124); i0.ɵɵnextContext(); const _r116 = i0.ɵɵreference(3); const _r117 = i0.ɵɵreference(4); const rowForm_r108 = i0.ɵɵnextContext(2).$implicit; const ctx_r122 = i0.ɵɵnextContext(); ctx_r122.clearDropdown(rowForm_r108.get("client_id"), $event, ctx_r122.lists.list4186, _r116); return i0.ɵɵresetView(_r117.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_td_37_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_td_37_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r125 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r125.id == "0"))("value", item_r125)("innerHtml", item_r125.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_td_37_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r127 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 87, 88);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_37_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_td_37_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r127); const ctx_r126 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r126.lists.list4186.refresh()); });
        i0.ɵɵtemplate(8, dibexTestProjectGridComponent_td_37_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexTestProjectGridComponent_td_37_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r119 = i0.ɵɵreference(7);
        const rowForm_r108 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r113 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r119);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r113.showDropdownClearButton(rowForm_r108.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r113.dropdownValueTranslate.bind(ctx_r113, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r113.lists.list4186.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r113.lists.list4186.lastItems);
    } }
    function dibexTestProjectGridComponent_td_37_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_td_37_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_37_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_37_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_37_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r108 = i0.ɵɵnextContext().$implicit;
        const ctx_r110 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r110.excelEditing == false && rowForm_r108.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r110.excelEditing == true || rowForm_r108.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r110.excelEditing == false && rowForm_r108.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_37_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r108 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r108);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r108.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_38_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_38_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_38_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r130 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r130.editorOpen);
    } }
    function dibexTestProjectGridComponent_th_38_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_38_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r141 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_th_38_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r141); i0.ɵɵnextContext(); const _r134 = i0.ɵɵreference(5); const _r135 = i0.ɵɵreference(6); const ctx_r140 = i0.ɵɵnextContext(2); ctx_r140.clearDropdown(ctx_r140.model.modelItems.client_id.formControl, $event, ctx_r140.lists.list4186, _r134); return i0.ɵɵresetView(_r135.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_th_38_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_th_38_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r142 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r142.id == "0"))("value", item_r142)("innerHtml", item_r142.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_th_38_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r144 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 98, 88);
        i0.ɵɵtemplate(7, dibexTestProjectGridComponent_th_38_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_th_38_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r144); const ctx_r143 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r143.lists.list4186.refresh()); });
        i0.ɵɵtemplate(10, dibexTestProjectGridComponent_th_38_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexTestProjectGridComponent_th_38_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r137 = i0.ɵɵreference(9);
        const ctx_r132 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r132.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r137);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r132.showDropdownClearButton(ctx_r132.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r132.dropdownValueTranslate.bind(ctx_r132, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r132.lists.list4186.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r132.lists.list4186.lastItems);
    } }
    function dibexTestProjectGridComponent_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_38_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_th_38_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_th_38_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexTestProjectGridComponent_td_40_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r146 = i0.ɵɵnextContext(2).index;
        const ctx_r149 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r149.findColumnDisplayValue(rowIndex_r146, "project_leader_id", "dropdown", "select"), "");
    } }
    function dibexTestProjectGridComponent_td_40_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r161 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_40_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r161); i0.ɵɵnextContext(); const _r153 = i0.ɵɵreference(3); const _r154 = i0.ɵɵreference(4); const rowForm_r145 = i0.ɵɵnextContext(2).$implicit; const ctx_r159 = i0.ɵɵnextContext(); ctx_r159.clearDropdown(rowForm_r145.get("project_leader_id"), $event, ctx_r159.lists.list4187, _r153); return i0.ɵɵresetView(_r154.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_td_40_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_td_40_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r162 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r162.id == "0"))("value", item_r162)("innerHtml", item_r162.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_td_40_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r164 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 99, 100);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_40_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_td_40_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r164); const ctx_r163 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r163.lists.list4187.refresh()); });
        i0.ɵɵtemplate(8, dibexTestProjectGridComponent_td_40_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexTestProjectGridComponent_td_40_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r156 = i0.ɵɵreference(7);
        const rowForm_r145 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r150 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r156);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r150.showDropdownClearButton(rowForm_r145.get("project_leader_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r150.dropdownValueTranslate.bind(ctx_r150, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r150.lists.list4187.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r150.lists.list4187.lastItems);
    } }
    function dibexTestProjectGridComponent_td_40_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_td_40_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_40_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_40_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_40_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r145 = i0.ɵɵnextContext().$implicit;
        const ctx_r147 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r147.excelEditing == false && rowForm_r145.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r147.excelEditing == true || rowForm_r145.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r147.excelEditing == false && rowForm_r145.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_td_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_40_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r145 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r145);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r145.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_41_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Project Leader ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_41_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Project Leader");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_41_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r177 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_th_41_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r177); i0.ɵɵnextContext(); const _r170 = i0.ɵɵreference(5); const _r171 = i0.ɵɵreference(6); const ctx_r176 = i0.ɵɵnextContext(2); ctx_r176.clearDropdown(ctx_r176.model.modelItems.project_leader_id.formControl, $event, ctx_r176.lists.list4187, _r170); return i0.ɵɵresetView(_r171.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_th_41_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_th_41_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r178 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r178.id == "0"))("value", item_r178)("innerHtml", item_r178.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_th_41_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r180 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Project Leader");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 99, 100);
        i0.ɵɵtemplate(7, dibexTestProjectGridComponent_th_41_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_th_41_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r180); const ctx_r179 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r179.lists.list4187.refresh()); });
        i0.ɵɵtemplate(10, dibexTestProjectGridComponent_th_41_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexTestProjectGridComponent_th_41_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r173 = i0.ɵɵreference(9);
        const ctx_r169 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r169.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r173);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r169.showDropdownClearButton(ctx_r169.model.modelItems.project_leader_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r169.dropdownValueTranslate.bind(ctx_r169, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r169.lists.list4187.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r169.lists.list4187.lastItems);
    } }
    function dibexTestProjectGridComponent_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_41_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_th_41_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_th_41_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexTestProjectGridComponent_td_43_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r182 = i0.ɵɵnextContext(2).index;
        const ctx_r185 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r185.findColumnDisplayValue(rowIndex_r182, "notes", "none", "text"), "");
    } }
    function dibexTestProjectGridComponent_td_43_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r192 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_43_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r192); const ctx_r191 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r191.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_43_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_43_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r194 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 103)(2, "textarea", 104);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_td_43_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r194); const ctx_r193 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r193.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_td_43_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r194); const ctx_r195 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r195.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_43_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_43_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r181 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r186 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r186.view.recordStatus == "update" && ctx_r186.notSaved("notes", rowForm_r181));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r186.view.recordStatus == "update" && ctx_r186.isSaved("notes", rowForm_r181));
    } }
    function dibexTestProjectGridComponent_td_43_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_td_43_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_43_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_43_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_43_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r181 = i0.ɵɵnextContext().$implicit;
        const ctx_r183 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r183.excelEditing == false && rowForm_r181.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r183.excelEditing == true || rowForm_r181.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r183.excelEditing == false && rowForm_r181.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_td_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_43_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r181 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r181);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r181.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_44_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_44_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_44_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r204 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_th_44_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r204); const ctx_r203 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r203.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_44_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_44_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r206 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_th_44_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r206); const ctx_r205 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r205.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_th_44_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r206); const ctx_r207 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r207.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_th_44_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_th_44_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r200 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r200.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r200.view.recordStatus == "update" && ctx_r200.notSaved("notes", ctx_r200.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r200.view.recordStatus == "update" && ctx_r200.isSaved("notes", ctx_r200.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_44_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_th_44_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_th_44_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexTestProjectGridComponent_td_46_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r209 = i0.ɵɵnextContext(2).index;
        const ctx_r212 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r212.findColumnDisplayValue(rowIndex_r209, "updated", "none", "datetime"), "");
    } }
    function dibexTestProjectGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r220 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r220); const ctx_r219 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r219.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_td_46_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r222 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 107);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 108);
        i0.ɵɵelementStart(3, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r222); const ctx_r221 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r221.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r222); const ctx_r223 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r223.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 110);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r218 = i0.ɵɵreference(7);
        const rowForm_r208 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r213 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r218);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r218);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r213.view.recordStatus == "update" && ctx_r213.notSaved("updated", rowForm_r208));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r213.view.recordStatus == "update" && ctx_r213.isSaved("updated", rowForm_r208));
    } }
    function dibexTestProjectGridComponent_td_46_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_td_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_td_46_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_td_46_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_td_46_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r208 = i0.ɵɵnextContext().$implicit;
        const ctx_r210 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r210.excelEditing == false && rowForm_r208.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.excelEditing == true || rowForm_r208.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.excelEditing == false && rowForm_r208.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_td_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_46_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r208 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r208);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r208.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_47_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_47_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_47_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_th_47_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r232); const ctx_r231 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r231.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_47_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_th_47_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r234 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_th_47_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r234); const ctx_r233 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r233.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_th_47_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r234); const ctx_r235 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r235.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_th_47_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_th_47_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r228 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r228.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r228.view.recordStatus == "update" && ctx_r228.notSaved("updated", ctx_r228.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r228.view.recordStatus == "update" && ctx_r228.isSaved("updated", ctx_r228.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_th_47_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_th_47_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_th_47_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexTestProjectGridComponent_td_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r241 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 113);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_td_49_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r241); const row_r239 = restoredCtx.ngIf; const ctx_r240 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r240.navigationService.goTo("dibexProjectForm", "", "?primary_id=" + row_r239.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r240 })); });
        i0.ɵɵelement(2, "dib-icon", 57);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "Open Project Form and dont change URL")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestProjectGridComponent_td_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_td_49_ng_container_1_Template, 3, 4, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r236 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r236);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r236.getRawValue());
    } }
    function dibexTestProjectGridComponent_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 58);
    } }
    function dibexTestProjectGridComponent_th_52_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_th_52_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r22 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r22.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r22.busy);
    } }
    function dibexTestProjectGridComponent_th_54_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r243 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r243.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexTestProjectGridComponent_th_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 115);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_th_54_span_1_Template, 2, 1, "span", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r23.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r23.busy && ctx_r23.tableDataSource.data.length == 0);
    } }
    function dibexTestProjectGridComponent_ng_container_55_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 117);
    } }
    function dibexTestProjectGridComponent_ng_container_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_container_55_tr_1_Template, 1, 0, "tr", 116);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r244 = ctx.$implicit;
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r24.columnHeaders.getArray(column_r244).items$));
    } }
    function dibexTestProjectGridComponent_tr_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 118);
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r25.busy ? "visible" : "hidden"));
    } }
    function dibexTestProjectGridComponent_tr_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 118);
    } if (rf & 2) {
        const ctx_r26 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r26.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexTestProjectGridComponent_tr_58_Template(rf, ctx) { if (rf & 1) {
        const _r249 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 119);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_tr_58_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r249); const row_r246 = restoredCtx.$implicit; const ctx_r248 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r248.rowClick(row_r246, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r246 = ctx.$implicit;
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r27.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r27.isHighlighted(row_r246)));
    } }
    function dibexTestProjectGridComponent_60_ng_template_0_Template(rf, ctx) { }
    function dibexTestProjectGridComponent_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexTestProjectGridComponent_60_ng_template_0_Template, 0, 0, "ng-template", 120);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r31 = i0.ɵɵreference(65);
        i0.ɵɵproperty("ngTemplateOutlet", _r31);
    } }
    function dibexTestProjectGridComponent_mat_toolbar_63_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r255 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 126);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_mat_toolbar_63_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r255); const ctx_r254 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r254.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r251 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r251.numberOfSelectedItems + " ", "item", ctx_r251.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexTestProjectGridComponent_mat_toolbar_63_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_mat_toolbar_63_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_mat_toolbar_63_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r259 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 127);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_mat_toolbar_63_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r259); const ctx_r258 = i0.ɵɵnextContext(2); ctx_r258.gridShowClipboardDefault = !ctx_r258.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r258.gridShowClipboardDefault && ctx_r258.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_mat_toolbar_63_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 42);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_mat_toolbar_63_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 42);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r252 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r252.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r252.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r252.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexTestProjectGridComponent_mat_toolbar_63_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r262 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 128, 129);
        i0.ɵɵlistener("page", function dibexTestProjectGridComponent_mat_toolbar_63_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r262); const ctx_r261 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r261.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r253 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r253.page.totalRecords)("pageSize", ctx_r253.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexTestProjectGridComponent_mat_toolbar_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 121);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_mat_toolbar_63_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 122);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_mat_toolbar_63_button_3_Template, 4, 3, "button", 123);
        i0.ɵɵelement(4, "span", 124);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_mat_toolbar_63_mat_paginator_5_Template, 2, 4, "mat-paginator", 125);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r30.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r289 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 55);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 56);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_2_ng_container_1_Template_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r289); const row_r287 = restoredCtx.ngIf; const ctx_r288 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r288.navigationService.goTo("dibexProjectForm", "main", "?primary_id=" + row_r287.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r288 })); });
        i0.ɵɵelement(4, "dib-icon", 57);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4159");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "Open Project Form and dont change URL")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_2_ng_container_1_Template, 5, 5, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r284 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r284);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r284.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 58);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r291 = i0.ɵɵnextContext(2).index;
        const ctx_r294 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r294.findColumnDisplayValue(rowIndex_r291, "id", "none", "number"), "");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r302 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r302); const ctx_r301 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r301.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r304 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 63)(2, "input", 134);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r304); const ctx_r303 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r303.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r304); const ctx_r305 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r305.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 42);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r290 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r295 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r295.hasError("id", "required", rowForm_r290));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r295.view.recordStatus == "update" && ctx_r295.notSaved("id", rowForm_r290));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r295.view.recordStatus == "update" && ctx_r295.isSaved("id", rowForm_r290));
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r290 = i0.ɵɵnextContext().$implicit;
        const ctx_r292 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r292.excelEditing == false && rowForm_r290.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.excelEditing == true || rowForm_r290.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.excelEditing == false && rowForm_r290.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_5_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r290 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r290);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r290.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_6_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r308 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r308.editorOpen);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r315 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r315); const ctx_r314 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r314.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r317 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r317); const ctx_r316 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r316.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r317); const ctx_r318 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r318.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_ng_template_64_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r310 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r310.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r310.view.recordStatus == "update" && ctx_r310.notSaved("id", ctx_r310.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r310.view.recordStatus == "update" && ctx_r310.isSaved("id", ctx_r310.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_6_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_th_6_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_th_6_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r266 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r266.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r266.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r266.showSearch);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r320 = i0.ɵɵnextContext(2).index;
        const ctx_r323 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r323.findColumnDisplayValue(rowIndex_r320, "name", "none", "text"), "");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r332 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r332); const ctx_r331 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r331.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r334 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 82)(2, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r334); const ctx_r333 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r333.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r334); const ctx_r335 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r335.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 42);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 42);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r319 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r324 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r324.hasError("name", "required", rowForm_r319));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r324.hasError("name", "maxlength", rowForm_r319));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r324.view.recordStatus == "update" && ctx_r324.notSaved("name", rowForm_r319));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r324.view.recordStatus == "update" && ctx_r324.isSaved("name", rowForm_r319));
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r319 = i0.ɵɵnextContext().$implicit;
        const ctx_r321 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r321.excelEditing == false && rowForm_r319.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r321.excelEditing == true || rowForm_r319.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r321.excelEditing == false && rowForm_r319.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_8_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r319 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r319);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r319.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_9_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r338 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r338.editorOpen);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r345 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r345); const ctx_r344 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r344.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r347 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r347); const ctx_r346 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r346.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r347); const ctx_r348 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r348.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_ng_template_64_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r340 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r340.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.notSaved("name", ctx_r340.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.isSaved("name", ctx_r340.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_9_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_th_9_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_th_9_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r268 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r268.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.showSearch);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r350 = i0.ɵɵnextContext(2).index;
        const ctx_r353 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r353.findColumnDisplayValue(rowIndex_r350, "client_id", "dropdown", "select"), "");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r365 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r365); i0.ɵɵnextContext(); const _r357 = i0.ɵɵreference(3); const _r358 = i0.ɵɵreference(4); const rowForm_r349 = i0.ɵɵnextContext(2).$implicit; const ctx_r363 = i0.ɵɵnextContext(2); ctx_r363.clearDropdown(rowForm_r349.get("client_id"), $event, ctx_r363.lists.list4186, _r357); return i0.ɵɵresetView(_r358.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r366 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r366.id == "0"))("value", item_r366)("innerHtml", item_r366.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r368 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 87, 88);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r368); const ctx_r367 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r367.lists.list4186.refresh()); });
        i0.ɵɵtemplate(8, dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r360 = i0.ɵɵreference(7);
        const rowForm_r349 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r354 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r360);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r354.showDropdownClearButton(rowForm_r349.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r354.dropdownValueTranslate.bind(ctx_r354, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r354.lists.list4186.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r354.lists.list4186.lastItems);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r349 = i0.ɵɵnextContext().$implicit;
        const ctx_r351 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r351.excelEditing == false && rowForm_r349.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r351.excelEditing == true || rowForm_r349.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r351.excelEditing == false && rowForm_r349.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_11_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r349 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r349);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r349.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_12_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r371 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r371.editorOpen);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r382 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_th_12_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r382); i0.ɵɵnextContext(); const _r375 = i0.ɵɵreference(5); const _r376 = i0.ɵɵreference(6); const ctx_r381 = i0.ɵɵnextContext(3); ctx_r381.clearDropdown(ctx_r381.model.modelItems.client_id.formControl, $event, ctx_r381.lists.list4186, _r375); return i0.ɵɵresetView(_r376.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r383 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r383.id == "0"))("value", item_r383)("innerHtml", item_r383.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r385 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 98, 88);
        i0.ɵɵtemplate(7, dibexTestProjectGridComponent_ng_template_64_th_12_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_ng_template_64_th_12_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r385); const ctx_r384 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r384.lists.list4186.refresh()); });
        i0.ɵɵtemplate(10, dibexTestProjectGridComponent_ng_template_64_th_12_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexTestProjectGridComponent_ng_template_64_th_12_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r378 = i0.ɵɵreference(9);
        const ctx_r373 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r373.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r378);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r373.showDropdownClearButton(ctx_r373.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r373.dropdownValueTranslate.bind(ctx_r373, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r373.lists.list4186.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r373.lists.list4186.lastItems);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_12_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_th_12_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_th_12_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r270 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r270.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.showSearch);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r387 = i0.ɵɵnextContext(2).index;
        const ctx_r390 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r390.findColumnDisplayValue(rowIndex_r387, "project_leader_id", "dropdown", "select"), "");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r402 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r402); i0.ɵɵnextContext(); const _r394 = i0.ɵɵreference(3); const _r395 = i0.ɵɵreference(4); const rowForm_r386 = i0.ɵɵnextContext(2).$implicit; const ctx_r400 = i0.ɵɵnextContext(2); ctx_r400.clearDropdown(rowForm_r386.get("project_leader_id"), $event, ctx_r400.lists.list4187, _r394); return i0.ɵɵresetView(_r395.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r403 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r403.id == "0"))("value", item_r403)("innerHtml", item_r403.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r405 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 99, 100);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r405); const ctx_r404 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r404.lists.list4187.refresh()); });
        i0.ɵɵtemplate(8, dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r397 = i0.ɵɵreference(7);
        const rowForm_r386 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r391 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r397);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r391.showDropdownClearButton(rowForm_r386.get("project_leader_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r391.dropdownValueTranslate.bind(ctx_r391, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r391.lists.list4187.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r391.lists.list4187.lastItems);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r386 = i0.ɵɵnextContext().$implicit;
        const ctx_r388 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r388.excelEditing == false && rowForm_r386.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r388.excelEditing == true || rowForm_r386.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r388.excelEditing == false && rowForm_r386.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_14_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r386 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r386);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r386.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Project Leader ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Project Leader");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_15_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r418 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_th_15_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r418); i0.ɵɵnextContext(); const _r411 = i0.ɵɵreference(5); const _r412 = i0.ɵɵreference(6); const ctx_r417 = i0.ɵɵnextContext(3); ctx_r417.clearDropdown(ctx_r417.model.modelItems.project_leader_id.formControl, $event, ctx_r417.lists.list4187, _r411); return i0.ɵɵresetView(_r412.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_15_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_15_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r419 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r419.id == "0"))("value", item_r419)("innerHtml", item_r419.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r421 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Project Leader");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 99, 100);
        i0.ɵɵtemplate(7, dibexTestProjectGridComponent_ng_template_64_th_15_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexTestProjectGridComponent_ng_template_64_th_15_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r421); const ctx_r420 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r420.lists.list4187.refresh()); });
        i0.ɵɵtemplate(10, dibexTestProjectGridComponent_ng_template_64_th_15_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexTestProjectGridComponent_ng_template_64_th_15_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r414 = i0.ɵɵreference(9);
        const ctx_r410 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r410.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r414);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r410.showDropdownClearButton(ctx_r410.model.modelItems.project_leader_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r410.dropdownValueTranslate.bind(ctx_r410, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r410.lists.list4187.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r410.lists.list4187.lastItems);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_15_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_th_15_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_th_15_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r272 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r272.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r272.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r272.showSearch);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r423 = i0.ɵɵnextContext(2).index;
        const ctx_r426 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r426.findColumnDisplayValue(rowIndex_r423, "notes", "none", "text"), "");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r433 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r433); const ctx_r432 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r432.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r435 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 103)(2, "textarea", 104);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r435); const ctx_r434 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r434.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r435); const ctx_r436 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r436.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r422 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r427 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r427.view.recordStatus == "update" && ctx_r427.notSaved("notes", rowForm_r422));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r427.view.recordStatus == "update" && ctx_r427.isSaved("notes", rowForm_r422));
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r422 = i0.ɵɵnextContext().$implicit;
        const ctx_r424 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r424.excelEditing == false && rowForm_r422.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.excelEditing == true || rowForm_r422.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.excelEditing == false && rowForm_r422.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_17_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r422 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r422);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r422.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r445 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r445); const ctx_r444 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r444.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r447 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r447); const ctx_r446 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r446.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r447); const ctx_r448 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r448.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_ng_template_64_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r441 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r441.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r441.view.recordStatus == "update" && ctx_r441.notSaved("notes", ctx_r441.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r441.view.recordStatus == "update" && ctx_r441.isSaved("notes", ctx_r441.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_18_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_th_18_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_th_18_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r274 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r274.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r274.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r274.showSearch);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r450 = i0.ɵɵnextContext(2).index;
        const ctx_r453 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r453.findColumnDisplayValue(rowIndex_r450, "updated", "none", "datetime"), "");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r461 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r461); const ctx_r460 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r460.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r463 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 107);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 108);
        i0.ɵɵelementStart(3, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r463); const ctx_r462 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r462.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r463); const ctx_r464 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r464.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 110);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r459 = i0.ɵɵreference(7);
        const rowForm_r449 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r454 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r459);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r459);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.view.recordStatus == "update" && ctx_r454.notSaved("updated", rowForm_r449));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.view.recordStatus == "update" && ctx_r454.isSaved("updated", rowForm_r449));
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_span_5_Template, 1, 0, "span", 42);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r449 = i0.ɵɵnextContext().$implicit;
        const ctx_r451 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == true || rowForm_r449.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_20_ng_container_1_Template, 6, 3, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r449 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r449);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r449.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r473 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r473); const ctx_r472 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r472.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r475 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexTestProjectGridComponent_ng_template_64_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r475); const ctx_r474 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r474.searchGrid(false)); })("keydown.esc", function dibexTestProjectGridComponent_ng_template_64_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r475); const ctx_r476 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r476.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_ng_template_64_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r469 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r469.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.notSaved("updated", ctx_r469.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.isSaved("updated", ctx_r469.model.$formGroup));
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_th_21_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_th_21_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexTestProjectGridComponent_ng_template_64_th_21_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r276 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r276.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r276.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r276.showSearch);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r482 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 113);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_23_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r482); const row_r480 = restoredCtx.ngIf; const ctx_r481 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r481.navigationService.goTo("dibexProjectForm", "", "?primary_id=" + row_r480.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r481 })); });
        i0.ɵɵelement(2, "dib-icon", 57);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "Open Project Form and dont change URL")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 54);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_td_23_ng_container_1_Template, 3, 4, "ng-container", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r477 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r477);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r477.getRawValue());
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 58);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_26_Template(rf, ctx) { if (rf & 1) {
        const _r484 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 50)(1, "mat-checkbox", 135);
        i0.ɵɵlistener("change", function dibexTestProjectGridComponent_ng_template_64_th_26_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r484); const ctx_r483 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r483.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r279 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r279.masterIsChecked)("indeterminate", ctx_r279.masterIsIndeterminate);
    } }
    function dibexTestProjectGridComponent_ng_template_64_td_27_Template(rf, ctx) { if (rf & 1) {
        const _r488 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 136)(1, "mat-checkbox", 53);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_td_27_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexTestProjectGridComponent_ng_template_64_td_27_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r488); const row_r485 = restoredCtx.$implicit; const ctx_r487 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r487.selection.toggle(row_r485) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r485 = ctx.$implicit;
        const ctx_r280 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r280.isHighlighted(row_r485));
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_29_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 137);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_th_29_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r281 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r281.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r281.busy);
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_31_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r490 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r490.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexTestProjectGridComponent_ng_template_64_th_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 115);
        i0.ɵɵtemplate(1, dibexTestProjectGridComponent_ng_template_64_th_31_span_1_Template, 2, 1, "span", 42);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r282 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r282.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r282.busy && ctx_r282.tableDataSource.data.length == 0);
    } }
    function dibexTestProjectGridComponent_ng_template_64_tr_32_Template(rf, ctx) { if (rf & 1) {
        const _r493 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 138);
        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_ng_template_64_tr_32_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r493); const row_r491 = restoredCtx.$implicit; const ctx_r492 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r492.rowClick(row_r491, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r491 = ctx.$implicit;
        const ctx_r283 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r283.isHighlighted(row_r491)));
    } }
    function dibexTestProjectGridComponent_ng_template_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 130);
        i0.ɵɵelementContainerStart(1, 25);
        i0.ɵɵtemplate(2, dibexTestProjectGridComponent_ng_template_64_td_2_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(3, dibexTestProjectGridComponent_ng_template_64_th_3_Template, 1, 0, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 28);
        i0.ɵɵtemplate(5, dibexTestProjectGridComponent_ng_template_64_td_5_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(6, dibexTestProjectGridComponent_ng_template_64_th_6_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 29);
        i0.ɵɵtemplate(8, dibexTestProjectGridComponent_ng_template_64_td_8_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(9, dibexTestProjectGridComponent_ng_template_64_th_9_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 30);
        i0.ɵɵtemplate(11, dibexTestProjectGridComponent_ng_template_64_td_11_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(12, dibexTestProjectGridComponent_ng_template_64_th_12_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 31);
        i0.ɵɵtemplate(14, dibexTestProjectGridComponent_ng_template_64_td_14_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(15, dibexTestProjectGridComponent_ng_template_64_th_15_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 32);
        i0.ɵɵtemplate(17, dibexTestProjectGridComponent_ng_template_64_td_17_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(18, dibexTestProjectGridComponent_ng_template_64_th_18_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 33);
        i0.ɵɵtemplate(20, dibexTestProjectGridComponent_ng_template_64_td_20_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(21, dibexTestProjectGridComponent_ng_template_64_th_21_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 34);
        i0.ɵɵtemplate(23, dibexTestProjectGridComponent_ng_template_64_td_23_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(24, dibexTestProjectGridComponent_ng_template_64_th_24_Template, 1, 0, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 22);
        i0.ɵɵtemplate(26, dibexTestProjectGridComponent_ng_template_64_th_26_Template, 2, 2, "th", 23);
        i0.ɵɵtemplate(27, dibexTestProjectGridComponent_ng_template_64_td_27_Template, 2, 1, "td", 131);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 35);
        i0.ɵɵtemplate(29, dibexTestProjectGridComponent_ng_template_64_th_29_Template, 2, 2, "th", 132);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(30, 37);
        i0.ɵɵtemplate(31, dibexTestProjectGridComponent_ng_template_64_th_31_Template, 2, 2, "th", 38);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(32, dibexTestProjectGridComponent_ng_template_64_tr_32_Template, 1, 3, "tr", 133);
        i0.ɵɵpipe(33, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r32.selectionDataSource);
        i0.ɵɵadvance(32);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(33, 2, ctx_r32.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i20 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                i8 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i21 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i22 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i9 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i13 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i19 = card_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i7 = autocomplete_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            },
            function (i17_1) {
                i17 = i17_1;
            },
            function (i18_1) {
                i18 = i18_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "extra-node": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function () { return ["_dibBusy"]; };
            _c6 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexTestProjectGridComponent = class dibexTestProjectGridComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 166, name: 'dibexTestProjectGrid', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'client_id', 'project_leader_id', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'client_id', 'project_leader_id', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list4186 = new shared_3.DibList("/peff/Crud/componentlist?containerName=dibexTestProjectGrid&containerItemId=4186", null, null, 40);
                    this.lists.list4187 = new shared_3.DibList("/peff/Crud/componentlist?containerName=dibexTestProjectGrid&containerItemId=4187", null, null, 40);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexTestProjectGrid');
                    this.containerName = 'dibexTestProjectGrid'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 4184, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 4185, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, client_id: { itemId: 4186, type: 'select', fieldAlias: 'client_id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'change' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 4186 }, project_leader_id: { itemId: 4187, type: 'select', fieldAlias: 'project_leader_id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 4187 }, notes: { itemId: 4188, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, updated: { itemId: 4189, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('client_id', this.model.modelItems.client_id.formControl);
                    this.model.$formGroup.addControl('project_leader_id', this.model.modelItems.project_leader_id.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource4186 = this.lists.list4186.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange4186 = new Date().getTime();
                    let previousUrlChange4186;
                    let previousResponse4186;
                    this.lists.list4186.items = rxjs_1.combineLatest([this.lists.list4186.updatedList$, itemsUpdateSource4186]).pipe(operators_1.tap(() => { this.lists.list4186.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange4186 - new Date().getTime()) / 1000;
                        previousTimeChange4186 = new Date().getTime();
                        previousUrlChange4186 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse4186 = response;
                            this.lists.list4186.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list4186.items.subscribe(records => this.lists.list4186.lastItems = records);
                    this.lists.list4186.multiSelected = [];
                    this.lists.list4186.reset = function (isOpen) { if (isOpen) {
                        self.lists.list4186.updatedList$.next([]);
                        self.lists.list4186.searchForm.setValue('', { emitEvent: false });
                        self.lists.list4186.refresh();
                    }
                    else {
                        self.lists.list4186.searchForm.setValue('');
                        self.lists.list4186.updatedList$.next(self.lists.list4186.multiSelected);
                        self.model.modelItems.client_id.formControl.setValue(self.lists.list4186.multiSelected);
                    } };
                    this.lists.list4186.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list4186.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list4186.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list4186.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list4186.multiSelected.push(value);
                            }
                        }
                        lists.list4186.multiSelected = self.removeDuplicateIdsFromArray(lists.list4186.multiSelected);
                    };
                    const itemsUpdateSource4187 = this.lists.list4187.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange4187 = new Date().getTime();
                    let previousUrlChange4187;
                    let previousResponse4187;
                    this.lists.list4187.items = rxjs_1.combineLatest([this.lists.list4187.updatedList$, itemsUpdateSource4187]).pipe(operators_1.tap(() => { this.lists.list4187.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange4187 - new Date().getTime()) / 1000;
                        previousTimeChange4187 = new Date().getTime();
                        previousUrlChange4187 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse4187 = response;
                            this.lists.list4187.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list4187.items.subscribe(records => this.lists.list4187.lastItems = records);
                    this.lists.list4187.multiSelected = [];
                    this.lists.list4187.reset = function (isOpen) { if (isOpen) {
                        self.lists.list4187.updatedList$.next([]);
                        self.lists.list4187.searchForm.setValue('', { emitEvent: false });
                        self.lists.list4187.refresh();
                    }
                    else {
                        self.lists.list4187.searchForm.setValue('');
                        self.lists.list4187.updatedList$.next(self.lists.list4187.multiSelected);
                        self.model.modelItems.project_leader_id.formControl.setValue(self.lists.list4187.multiSelected);
                    } };
                    this.lists.list4187.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list4187.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list4187.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list4187.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list4187.multiSelected.push(value);
                            }
                        }
                        lists.list4187.multiSelected = self.removeDuplicateIdsFromArray(lists.list4187.multiSelected);
                    };
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'id', 'name', 'client_id', 'project_leader_id', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); this.lists.list4186.setupModel(this.model.modelItems.client_id.formControl); this.lists.list4187.setupModel(this.model.modelItems.project_leader_id.formControl); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() {
                    this.excelEditing = !this.excelEditing;
                    this.editorOpen = true;
                    if (this.excelEditing) {
                        this.editorOpen = false;
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                                control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => {
                                    if (!!control.controls.client_id.value.id == false) {
                                        return;
                                    }
                                    if (control.pristine == false) {
                                        this.submit$.next(control);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                    }
                }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexTestProjectGrid`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexTestProjectGrid`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexTestProjectGrid`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4184 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4185 };
                    formDefaultsConfigs['client_id'] = { contentType: "integer", type: "dropdown", defaultValue: "", listId: 4186 };
                    formDefaultsConfigs['project_leader_id'] = { contentType: "integer", type: "dropdown", defaultValue: "", listId: 4187 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 4188 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 4189 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4184, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 4185, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), client_id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "client_id", "dropdown", false, formDefaults['client_id'], 4186, "select"), { validators: [forms_2.Validators.required], updateOn: 'change' }), project_leader_id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "project_leader_id", "dropdown", false, formDefaults['project_leader_id'], 4187, "select"), { validators: [], updateOn: 'change' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 4188, "text"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 4189, "datetime"), { validators: [], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { this.lists.list4186.setupModel(formGroup.controls.client_id); this.lists.list4187.setupModel(formGroup.controls.project_leader_id); });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list4186.dispose();
                    this.lists.list4187.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexTestProjectGrid', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexTestProjectGrid' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexTestProjectGridComponent_Factory(t) { return new (t || dibexTestProjectGridComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexTestProjectGridComponent, selectors: [["dibex-test-project-grid"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 66, vars: 38, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci4149", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci4150", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4183", "dibComponent", "btnAuditTrail", "aria-label", "View audit trail of changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"], ["id", "ci4156", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci4154", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4152", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci4153", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci4151", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci4155", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci4157", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["matColumnDef", "name"], ["matColumnDef", "client_id"], ["matColumnDef", "project_leader_id"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "btnGridEdit"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexTestProjectGrid", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci4152", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4153", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci4155", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-mini-fab", "", "color", "primary", "id", "ci5870", "dibComponent", "btnGridEdit", "aria-label", "Open Project Form and dont change URL", "matTooltipClass", "dib-tooltip", "ng-click", "editRow()", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "edit"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4184", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "50", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4185", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["required", "true", "type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["auto4186trigger", "matAutocompleteTrigger", "input4186", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto4186", "matAutocomplete"], ["mode", "indeterminate", 4, "ngIf"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], ["mode", "indeterminate"], [3, "ngClass", "value", "innerHtml"], ["id", "ci4186", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["type", "text", "matInput", "", "formControlName", "project_leader_id", 3, "matAutocomplete"], ["auto4187trigger", "matAutocompleteTrigger", "input4187", ""], ["auto4187", "matAutocomplete"], ["id", "ci4187", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["dibComponent", "inputTextArea"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci4188", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matPrefix", "", 3, "for"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker4189", ""], ["id", "ci4189", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "btnGridEdit", "aria-label", "Open Project Form and dont change URL", "matTooltipClass", "dib-tooltip", "ng-click", "editRow()", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["mat-header-cell", "", 2, "height", "4px"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexTestProjectGridComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexTestProjectGridComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_Template_button_click_4_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_Template_button_click_6_listener() { return ctx.openAuditTrail("68", "", ""); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(8, "span", 8);
                        i0.ɵɵpipe(9, "safeHtml");
                        i0.ɵɵelementStart(10, "button", 9);
                        i0.ɵɵlistener("click", function dibexTestProjectGridComponent_Template_button_click_10_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(11, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(12, dibexTestProjectGridComponent_button_12_Template, 2, 4, "button", 11);
                        i0.ɵɵtemplate(13, dibexTestProjectGridComponent_button_13_Template, 2, 4, "button", 12);
                        i0.ɵɵelement(14, "span", 13);
                        i0.ɵɵtemplate(15, dibexTestProjectGridComponent_div_15_Template, 5, 3, "div", 14);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(16, "mat-card", 15)(17, "mat-card-content", 16);
                        i0.ɵɵelementContainerStart(18, 3);
                        i0.ɵɵelementStart(19, "div", 17, 18)(21, "form", 19);
                        i0.ɵɵelementContainerStart(22, 20);
                        i0.ɵɵelementStart(23, "table", 21);
                        i0.ɵɵelementContainerStart(24, 22);
                        i0.ɵɵtemplate(25, dibexTestProjectGridComponent_th_25_Template, 2, 2, "th", 23);
                        i0.ɵɵtemplate(26, dibexTestProjectGridComponent_td_26_Template, 2, 1, "td", 24);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(27, 25);
                        i0.ɵɵtemplate(28, dibexTestProjectGridComponent_td_28_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(29, dibexTestProjectGridComponent_th_29_Template, 1, 0, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(30, 28);
                        i0.ɵɵtemplate(31, dibexTestProjectGridComponent_td_31_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(32, dibexTestProjectGridComponent_th_32_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(33, 29);
                        i0.ɵɵtemplate(34, dibexTestProjectGridComponent_td_34_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(35, dibexTestProjectGridComponent_th_35_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(36, 30);
                        i0.ɵɵtemplate(37, dibexTestProjectGridComponent_td_37_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(38, dibexTestProjectGridComponent_th_38_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(39, 31);
                        i0.ɵɵtemplate(40, dibexTestProjectGridComponent_td_40_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(41, dibexTestProjectGridComponent_th_41_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(42, 32);
                        i0.ɵɵtemplate(43, dibexTestProjectGridComponent_td_43_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(44, dibexTestProjectGridComponent_th_44_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(45, 33);
                        i0.ɵɵtemplate(46, dibexTestProjectGridComponent_td_46_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(47, dibexTestProjectGridComponent_th_47_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(48, 34);
                        i0.ɵɵtemplate(49, dibexTestProjectGridComponent_td_49_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(50, dibexTestProjectGridComponent_th_50_Template, 1, 0, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(51, 35);
                        i0.ɵɵtemplate(52, dibexTestProjectGridComponent_th_52_Template, 2, 2, "th", 36);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(53, 37);
                        i0.ɵɵtemplate(54, dibexTestProjectGridComponent_th_54_Template, 2, 2, "th", 38);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(55, dibexTestProjectGridComponent_ng_container_55_Template, 3, 3, "ng-container", 39);
                        i0.ɵɵtemplate(56, dibexTestProjectGridComponent_tr_56_Template, 1, 3, "tr", 40);
                        i0.ɵɵtemplate(57, dibexTestProjectGridComponent_tr_57_Template, 1, 3, "tr", 40);
                        i0.ɵɵtemplate(58, dibexTestProjectGridComponent_tr_58_Template, 1, 4, "tr", 41);
                        i0.ɵɵpipe(59, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(60, dibexTestProjectGridComponent_60_Template, 1, 1, null, 42);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(61, "div", null, 43);
                        i0.ɵɵtemplate(63, dibexTestProjectGridComponent_mat_toolbar_63_Template, 6, 3, "mat-toolbar", 42);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(64, dibexTestProjectGridComponent_ng_template_64_Template, 34, 4, "ng-template", null, 44, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r29 = i0.ɵɵreference(62);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(34, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4149");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "View audit trail of changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(9, 30, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4157");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r29);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(32);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(36, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(37, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(59, 32, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibAutocompleteScrollToOnFocusDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatAutocomplete, i8.MatOption, i7.MatAutocompleteTrigger, i9.MatButton, i9.MatIconButton, i9.MatMiniFabButton, i10.MatCheckbox, i11.MatDatepickerToggle, i12.MatFormField, i12.MatLabel, i12.MatError, i12.MatPrefix, i12.MatSuffix, i13.MatIcon, i14.MatInput, i15.CdkTextareaAutosize, i16.MatProgressBar, i17.MatToolbar, i17.MatToolbarRow, i18.MatTooltip, i19.MatCard, i19.MatCardContent, i20.MatTable, i20.MatHeaderCellDef, i20.MatHeaderRowDef, i20.MatColumnDef, i20.MatCellDef, i20.MatRowDef, i20.MatHeaderCell, i20.MatCell, i20.MatHeaderRow, i20.MatRow, i21.MatSort, i21.MatSortHeader, i22.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexTestProjectGrid'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexTestProjectGridComponent.prototype, "reloadContainer", null);
            exports_1("dibexTestProjectGridComponent", dibexTestProjectGridComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestProjectGridComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-test-project-grid', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci4149 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4149'" ><button   mat-mini-fab color=primary  id=ci4150 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button   mat-mini-fab color=primary  id=ci4183 dibComponent=btnAuditTrail   style="  " aria-label="View audit trail of changes"  [matTooltip]="'View audit trail of changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="openAuditTrail('68','','')"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"></dib-icon></button><span  id=ci4156 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci4154 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4152 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4153 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci4151 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci4155 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Projects: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci4157 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4157'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexTestProjectGrid" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4159'" ><button mat-mini-fab color=primary  id=ci5870 dibComponent=btnGridEdit   (click)="navigationService.goTo(  'dibexProjectForm',  'main',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="Open Project Form and dont change URL"  [matTooltip]="'Open Project Form and dont change URL'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4184 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='50'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4185 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><input #auto4186trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input4186  [matAutocomplete]="auto4186"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list4186, auto4186trigger); input4186.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4186=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4186).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4186).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4186.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4186 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Client</mat-label><input #auto4186trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input4186  [matAutocomplete]="auto4186"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list4186, auto4186trigger); input4186.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4186=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4186).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4186).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4186.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=project_leader_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'project_leader_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><input #auto4187trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input4187  [matAutocomplete]="auto4187"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('project_leader_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('project_leader_id'),$event, lists.list4187, auto4187trigger); input4187.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4187=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list4187).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4187).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4187.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Project Leader  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Project Leader</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4187 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Project Leader</mat-label><input #auto4187trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input4187  [matAutocomplete]="auto4187"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.project_leader_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.project_leader_id.formControl, $event, lists.list4187, auto4187trigger); input4187.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4187=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list4187).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4187).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4187.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4188 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4189"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4189"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4189></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4189 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button mat-mini-fab color=primary  dibComponent=btnGridEdit   (click)="navigationService.goTo(  'dibexProjectForm',  '',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="Open Project Form and dont change URL"  [matTooltip]="'Open Project Form and dont change URL'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexTestProjectGrid><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4159'" ><button mat-mini-fab color=primary  id=ci5870 dibComponent=btnGridEdit   (click)="navigationService.goTo(  'dibexProjectForm',  'main',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="Open Project Form and dont change URL"  [matTooltip]="'Open Project Form and dont change URL'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4184 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='50'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4185 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><input #auto4186trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input4186  [matAutocomplete]="auto4186"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list4186, auto4186trigger); input4186.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4186=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4186).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4186).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4186.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4186 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Client</mat-label><input #auto4186trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input4186  [matAutocomplete]="auto4186"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list4186, auto4186trigger); input4186.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4186=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4186).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4186).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4186.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=project_leader_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'project_leader_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><input #auto4187trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input4187  [matAutocomplete]="auto4187"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('project_leader_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('project_leader_id'),$event, lists.list4187, auto4187trigger); input4187.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4187=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list4187).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4187).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4187.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Project Leader  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Project Leader</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4187 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Project Leader</mat-label><input #auto4187trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input4187  [matAutocomplete]="auto4187"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.project_leader_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.project_leader_id.formControl, $event, lists.list4187, auto4187trigger); input4187.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4187=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list4187).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4187).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4187.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4188 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4189"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4189"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4189></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4189 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button mat-mini-fab color=primary  dibComponent=btnGridEdit   (click)="navigationService.goTo(  'dibexProjectForm',  '',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="Open Project Form and dont change URL"  [matTooltip]="'Open Project Form and dont change URL'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule];
            dibexTestProjectGridModule = class dibexTestProjectGridModule {
                static entry = dibexTestProjectGridComponent;
                static ɵfac = function dibexTestProjectGridModule_Factory(t) { return new (t || dibexTestProjectGridModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexTestProjectGridModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexTestProjectGridModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestProjectGridModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexTestProjectGridComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexTestProjectGridModule, { declarations: [dibexTestProjectGridComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
