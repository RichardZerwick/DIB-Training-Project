System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/forms", "@angular/material/core", "@angular/router", "rxjs", "rxjs/operators", "@angular/common", "@angular/material/card", "@angular/material/button", "@angular/material/icon", "@angular/material/datepicker", "@angular/material/autocomplete", "@ngbracket/ngx-layout/extended", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, forms_1, core_2, shared_3, router_1, rxjs_1, operators_1, core_3, common_1, shared_4, shared_5, card_1, button_1, icon_1, datepicker_1, core_4, autocomplete_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, _c0, _c1, importsRequired, dibexClientDataComponent, containerModules, fullDateTimeOptions, dibexClientDataModule;
    var __moduleName = context_1 && context_1.id;
    function dibexClientDataComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 42);
    } }
    function dibexClientDataComponent_mat_error_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_error_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_20_Template(rf, ctx) { if (rf & 1) {
        const _r23 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 43);
        i0.ɵɵlistener("click", function dibexClientDataComponent_mat_icon_20_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r23); const ctx_r22 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r22.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 44);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_22_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 45);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_error_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_error_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_29_Template(rf, ctx) { if (rf & 1) {
        const _r25 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 43);
        i0.ɵɵlistener("click", function dibexClientDataComponent_mat_icon_29_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r25); const ctx_r24 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r24.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 44);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 45);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_39_Template(rf, ctx) { if (rf & 1) {
        const _r27 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 43);
        i0.ɵɵlistener("click", function dibexClientDataComponent_mat_icon_39_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r27); const ctx_r26 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r26.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 44);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_icon_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 45);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_mat_error_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientDataComponent_button_50_Template(rf, ctx) { if (rf & 1) {
        const _r29 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 46);
        i0.ɵɵlistener("click", function dibexClientDataComponent_button_50_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(); const _r16 = i0.ɵɵreference(48); const _r17 = i0.ɵɵreference(49); ctx_r28.clearDropdown(ctx_r28.model.modelItems.manager_id.formControl, $event, ctx_r28.lists.list5407, _r16); return i0.ɵɵresetView(_r17.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexClientDataComponent_mat_progress_bar_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 42);
    } }
    function dibexClientDataComponent_mat_option_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 47);
    } if (rf & 2) {
        const item_r30 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r30.id == "0"))("value", item_r30)("innerHtml", item_r30.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i1 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i2 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                i6 = forms_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
                core_4 = core_2_1;
                i8 = core_2_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
                i3 = router_1_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i16 = card_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i9 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i12 = icon_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i10 = datepicker_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i7 = autocomplete_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "extra-node": a0 }; };
            _c1 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexClientDataComponent = class dibexClientDataComponent extends shared_1.BaseComponent {
                crudService;
                httpClient;
                urlService;
                router;
                sd;
                cd;
                allClientData;
                model;
                clientData;
                htmlContent = '';
                view = { container: { id: 216, name: 'dibexClientData', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml", "dibexSimpleGrid"], refreshChildContainers: { "_": ['dibDocsExampleHtml*5388', 'dibexSimpleGrid*5403'] }, dropin: 'form', activeFilter: null, configs: { "clickedLast": "dibexSimpleGrid", "selected": "dibexSimpleGrid" }, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                constructor(injector, crudService, httpClient, urlService, router, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.crudService = crudService;
                    this.httpClient = httpClient;
                    this.urlService = urlService;
                    this.router = router;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list5407 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexClientData&containerItemId=5407", null, null, 40);
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexClientData');
                    this.containerName = 'dibexClientData'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { first_name: { itemId: 5404, type: 'text', fieldAlias: 'first_name', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required,
                                    forms_1.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'first_name', default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 5405, type: 'text', fieldAlias: 'last_name', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required,
                                    forms_1.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, join_date: { itemId: 5406, type: 'date', fieldAlias: 'join_date', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'join_date', default: '', dataType: 'date', contentType: 'date', changeUrl: false }, manager_id: { itemId: 5407, type: 'select', fieldAlias: 'manager_id', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: 'manager_id', default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 5407 }, };
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('join_date', this.model.modelItems.join_date.formControl);
                    this.model.$formGroup.addControl('manager_id', this.model.modelItems.manager_id.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnClientData", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/General/showClientData", itemAlias: "btnClientData", waitForCompletion: false, containerName: "dibexClientData", handlers: [] }, this.clientData, { itemEventId: 'ie258-dib', itemId: '5390', });
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource5407 = this.lists.list5407.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange5407 = new Date().getTime();
                    let previousUrlChange5407;
                    let previousResponse5407;
                    this.lists.list5407.items = rxjs_1.combineLatest([this.lists.list5407.updatedList$, itemsUpdateSource5407]).pipe(operators_1.tap(() => { this.lists.list5407.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange5407 - new Date().getTime()) / 1000;
                        previousTimeChange5407 = new Date().getTime();
                        previousUrlChange5407 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse5407 = response;
                            this.lists.list5407.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list5407.items.subscribe(records => this.lists.list5407.lastItems = records);
                    this.lists.list5407.multiSelected = [];
                    this.lists.list5407.reset = function (isOpen) { if (isOpen) {
                        self.lists.list5407.updatedList$.next([]);
                        self.lists.list5407.searchForm.setValue('', { emitEvent: false });
                        self.lists.list5407.refresh();
                    }
                    else {
                        self.lists.list5407.searchForm.setValue('');
                        self.lists.list5407.updatedList$.next(self.lists.list5407.multiSelected);
                        self.model.modelItems.manager_id.formControl.setValue(self.lists.list5407.multiSelected);
                    } };
                    this.lists.list5407.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list5407.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list5407.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list5407.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list5407.multiSelected.push(value);
                            }
                        }
                        lists.list5407.multiSelected = self.removeDuplicateIdsFromArray(lists.list5407.multiSelected);
                    };
                    lists = this.lists;
                    this.canRead = true;
                    this.canUpdate = true;
                    this.canCreate = true;
                    this.eventService.on(`reload${this.containerName}`).subscribe(_ => { });
                    this.setup();
                    this.reloadContainer();
                }
                setup() { this.setupPrimaryKeys(); this.setupDelete(); this.setupSubmit(); }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: this.primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: this.model.$formGroup }).pipe(operators_1.finalize(() => this.busy = false))), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success) {
                            if (this.view.recordStatus == 'create') {
                                this.primaryKeys$.next(response.records);
                            }
                            else {
                                this.primaryKeys$.next(response.records);
                            }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    })).subscribe();
                }
                onSubmit() { this.submit$.next(null); }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: this.primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false))), operators_1.tap(response => { if (response.success) {
                    this.primaryKeys$.next(response.records);
                } })).subscribe(); }
                deleteRecord() { this.messagingService.confirm({ title: 'Delete Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                    this.delete$.next(null);
                } }); }
                setupPrimaryKeys() {
                    this.primaryKeys$ = new rxjs_1.Subject();
                    this.position$ = new rxjs_1.Subject();
                    this.primaryKeys$
                        .pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(primaryKeys => {
                        this.view.recordStatus = 'create';
                        if (!!primaryKeys && Object.keys(primaryKeys).length > 0) {
                            this.view.recordStatus = 'update';
                        }
                        this.primaryKeys = primaryKeys;
                        this.updateUrl();
                        this.busy = true;
                    }), operators_1.switchMap(primaryKeys => {
                        if (this.canCreate || (!!primaryKeys === true && Object.keys(primaryKeys).length > 0)) {
                            return this.crudService.read(this.model.crudUrl, this.view.container.name, { primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { }));
                        }
                        this.busy = false;
                        return rxjs_1.empty();
                    }), operators_1.switchMap(response => {
                        this.busy = false;
                        if (response.success) {
                            this.model.$formGroup.reset();
                            if (Array.isArray(response.records) && response.records.length > 0) {
                                response.records = response.records[0];
                            }
                            if (this.view.recordStatus == 'update' && Array.isArray(response.records) && this.view.container.activeFilter !== null && this.view.container.activeFilter.length > 0) {
                                if (this.canCreate) {
                                    this.addRecord();
                                }
                            }
                            if (response.records.first_name !== undefined) {
                                this.setValue('first_name', response.records.first_name);
                            }
                            if (response.records.last_name !== undefined) {
                                this.setValue('last_name', response.records.last_name);
                            }
                            if (response.records.join_date !== undefined) {
                                this.setValue('join_date', this.getDate(response.records.join_date));
                            }
                            if (response.records.manager_id !== undefined) {
                                if (response.records.manager_id == null) {
                                    this.setValue('manager_id', null);
                                }
                                else {
                                    this.lists[`list5407`].multiSelected = [];
                                    if (response.records.manager_id_display_value == undefined) {
                                        this.setValue('manager_id', response.records.manager_id);
                                        if (typeof response.records.manager_id == 'object' && response.records.manager_id !== null) {
                                            this.lists[`list5407`].multiSelected = response.records.manager_id;
                                        }
                                    }
                                    else {
                                        this.setValue('manager_id', { 'id': response.records.manager_id, 'id_display_value': response.records.manager_id_display_value });
                                    }
                                }
                            }
                            this.model.updateFormDefaults(this);
                            this.portService.setUrlDefaults(false, this);
                            Object.keys(this.model.$formGroup.controls).forEach(field => { if (this.model.modelItems[field][this.view.recordStatus]) {
                                this.model.$formGroup.controls[field].enable();
                            }
                            else {
                                this.model.$formGroup.controls[field].disable();
                            } });
                            this.reloadSubcontainers();
                            return this.paging();
                        }
                    }), operators_1.tap((response) => { window.dispatchEvent(new Event('resize')); this.pagingInfo = response.records; if (response.records !== null && response.records.current !== null && response.records.current !== undefined)
                        this.position$.next(response.records.current.current); })).subscribe();
                }
                addRecord() {
                    if (this.containerNameOpenedByUrl()) {
                        const currentUrlInfo = this.urlService.parseCurrentUrl();
                        if (!!currentUrlInfo.params !== false) {
                            Object.keys(this.primaryKeys).forEach((key, value) => { delete currentUrlInfo.params[`primary_${key}`]; });
                            currentUrlInfo.params['record'] = 'new';
                        }
                        else {
                            currentUrlInfo.params = { record: 'new' };
                        }
                        Object.keys(currentUrlInfo.params).forEach((value) => { if (value.indexOf('primary_') !== -1) {
                            delete currentUrlInfo.params[value];
                        } });
                        this.navigationService.goTo(currentUrlInfo.containerName, currentUrlInfo.portAlias, currentUrlInfo.params);
                    }
                    this.primaryKeys$.next(null);
                }
                ngAfterViewInit() { super.ngAfterViewInit(); this.lists.list5407.setupModel(this.model.modelItems.manager_id.formControl); window.dispatchEvent(new Event('resize')); }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list5407.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                updateUrl() {
                    let currentUrlInfo = this.urlService.parseCurrentUrl();
                    if (!!this.primaryKeys
                        && currentUrlInfo.containerName == this.view.container.name
                        && Object.keys(this.primaryKeys).length > 0) {
                        let urlKeys = {};
                        if (!!currentUrlInfo.params) {
                            urlKeys = currentUrlInfo.params;
                        }
                        Object.keys(this.primaryKeys).forEach((key, value) => { delete urlKeys['record']; urlKeys[`primary_${key}`] = this.primaryKeys[key]; });
                        currentUrlInfo = this.urlService.parseCurrentUrl();
                        if (!this.navigationService.paramsEqual(urlKeys, currentUrlInfo.params)) {
                            this.navigationService.goTo(currentUrlInfo.containerName, currentUrlInfo.portAlias, urlKeys, { changeUrl: true, originContainer: this });
                        }
                    }
                }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexClientData', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexClientData' });
                    this.onLoad();
                }
                onLoad() {
                    if (!this.canRead && !this.canCreate)
                        return;
                    if (!this.canRead && this.canCreate) {
                        this.addRecord();
                        return;
                    }
                    let currentUrlInfo = this.urlService.parseCurrentUrl();
                    let primaryKeys = {};
                    if (currentUrlInfo.containerName == this.view.container.name) {
                        this.view.primaryKeys.forEach(key => { if (!!currentUrlInfo.params[`primary_${key}`]) {
                            primaryKeys[key] = currentUrlInfo.params[`primary_${key}`];
                        } });
                        if (Object.keys(primaryKeys).length > 0) {
                            this.primaryKeys$.next(primaryKeys);
                            return;
                        }
                        if (!!currentUrlInfo.params[`record`] && currentUrlInfo.params[`record`] == shared_2.FormPosition.New) {
                            this.paging().subscribe((result) => { this.pagingInfo = result.records; this.primaryKeys$.next(null); });
                            return;
                        }
                        if (!!currentUrlInfo.params[`record`] && currentUrlInfo.params[`record`] == shared_2.FormPosition.First) {
                            this.paging().subscribe((result) => { this.pagingInfo = result.records; this.goToRecord(shared_2.FormPosition.First); });
                            return;
                        }
                        if (!!currentUrlInfo.params[`record`] && currentUrlInfo.params[`record`] == shared_2.FormPosition.Last) {
                            this.paging().subscribe((result) => { this.pagingInfo = result.records; this.goToRecord(shared_2.FormPosition.Last); });
                            return;
                        }
                    }
                    if (Object.keys(primaryKeys).length == 0) {
                        this.recordPosition(1).subscribe((response) => { this.primaryKeys$.next(response.records); });
                        return;
                    }
                    this.primaryKeys$.next(primaryKeys);
                }
                goToRecord(formPosition) { if (!!this.pagingInfo && !!this.pagingInfo[formPosition])
                    this.primaryKeys$.next(this.pagingInfo[formPosition]); }
                recordPosition(position) { return this.crudService.recordPosition(`dibexClientData`, position, { clientData: this.clientData, activeFilter: this.view.container.activeFilter, }); }
                paging() {
                    if (!this.canRead)
                        return rxjs_1.of({ records: { current: { current: 1 } } });
                    if (!!this.primaryKeys == true && Object.keys(this.primaryKeys).length > 0) {
                        return this.crudService.recordInfo('dibexClientData', { primaryKeys: this.primaryKeys, activeFilter: this.view.container.activeFilter, clientData: this.clientData });
                    }
                    else {
                        return this.recordPosition(1).pipe(operators_1.switchMap((result) => this.crudService.recordInfo('dibexClientData', { primaryKeys: result.records, activeFilter: this.view.container.activeFilter, clientData: this.clientData }).pipe(operators_1.map((response) => {
                            if (response.records == null) {
                                return { records: { current: { current: 1 } } };
                            }
                            return response;
                        }))));
                    }
                }
                static ɵfac = function dibexClientDataComponent_Factory(t) { return new (t || dibexClientDataComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.CrudService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i1.UrlService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexClientDataComponent, selectors: [["dibex-client-data"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 81, vars: 42, consts: [["mode", "indeterminate", 4, "ngIf"], ["containerName", "dibexClientData", 2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5388", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexClientData", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci5408", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci5409", "dibComponent", "btnReload", "aria-label", "Refresh data using active filters", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci5410", "dibComponent", "formPaging"], ["dibComponentName", "formPager", "dibDropin", "form", "dibComponentLocation", "/peff/Template/component/dibexClientData?componentPath=pager&dropin=setNgxMaterial.form", 3, "dibComponentParent"], ["id", "ci5389", "dibComponent", "card", 2, "flex", "1 1 0%", "overflow", "auto !important"], [2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start"], ["id", "ci5404", "dibComponent", "inputText", "item-alias", "first_name", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "50", "required", "true", "name", "first_name"], [4, "ngIf"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["id", "ci5405", "dibComponent", "inputText", "appearance", "standard", 2, "background-color", "lightgray"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "50", "required", "true", "name", "last_name"], ["id", "ci5406", "dibComponent", "datePicker", "item-alias", "join_date", "appearance", "standard"], ["matInput", "", "formControlName", "join_date", "name", "join_date", 3, "matDatepicker", "placeholder", "focus"], ["matPrefix", "", 3, "for"], ["datePicker5406", ""], ["item-alias", "manager_id", "id", "ci5407", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "row", "flex", "1 1 0%", "align-self", "stretch"], ["appearance", "standard", 2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%"], ["type", "text", "matInput", "", "formControlName", "manager_id", 3, "matAutocomplete"], ["auto5407trigger", "matAutocompleteTrigger", "input5407", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto5407", "matAutocomplete"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["type", "button", "aria-label", "Link to page for dibexStaffForm", "mat-icon-button", "", 3, "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"], ["id", "ci5412", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex", "1 1 0%", "overflow", "auto !important"], ["mat-raised-button", "", "color", "primary", "id", "ci5390", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnClientData", "type", "button", 2, "margin", "0px 10px !important", "flex", "0 1 170px", 3, "containerPortId"], [1, "dibButtonCaption"], ["id", "ci5413", "dibComponent", "comment", 2, "flex", "1 1 0%", "font-size", "14px"], [1, "dib-comment"], ["id", "ci5403", "dibComponent", "subcontainer", 2, "margin", "10px !important", "padding", "10px !important", "flex", "1 1 0%", "border", "2px solid grey"], ["parentContainerName", "dibexClientData", "subContainerName", "dibexSimpleGrid", "subContainerId", "217", "dropinName", "grid", 3, "dibPort"], ["mode", "indeterminate"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], [3, "ngClass", "value", "innerHtml"]], template: function dibexClientDataComponent_Template(rf, ctx) { if (rf & 1) {
                        const _r31 = i0.ɵɵgetCurrentView();
                        i0.ɵɵtemplate(0, dibexClientDataComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexClientDataComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
                        i0.ɵɵelementContainer(4, 4);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(5, "div", 5);
                        i0.ɵɵelementContainerStart(6, 6);
                        i0.ɵɵelementStart(7, "button", 7);
                        i0.ɵɵlistener("click", function dibexClientDataComponent_Template_button_click_7_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(8, "dib-icon", 8);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(9, "div", 9);
                        i0.ɵɵelementContainer(10, 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(11, "mat-card", 11)(12, "mat-card-content", 12);
                        i0.ɵɵelementContainerStart(13, 6);
                        i0.ɵɵelementStart(14, "mat-form-field", 13)(15, "mat-label");
                        i0.ɵɵtext(16, "First Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(17, "input", 14);
                        i0.ɵɵtemplate(18, dibexClientDataComponent_mat_error_18_Template, 2, 0, "mat-error", 15);
                        i0.ɵɵtemplate(19, dibexClientDataComponent_mat_error_19_Template, 2, 0, "mat-error", 15);
                        i0.ɵɵtemplate(20, dibexClientDataComponent_mat_icon_20_Template, 2, 0, "mat-icon", 16);
                        i0.ɵɵtemplate(21, dibexClientDataComponent_mat_icon_21_Template, 2, 0, "mat-icon", 17);
                        i0.ɵɵtemplate(22, dibexClientDataComponent_mat_icon_22_Template, 2, 0, "mat-icon", 18);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(23, "mat-form-field", 19)(24, "mat-label");
                        i0.ɵɵtext(25, "Last Name (HAS NO ALIAS)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(26, "input", 20);
                        i0.ɵɵtemplate(27, dibexClientDataComponent_mat_error_27_Template, 2, 0, "mat-error", 15);
                        i0.ɵɵtemplate(28, dibexClientDataComponent_mat_error_28_Template, 2, 0, "mat-error", 15);
                        i0.ɵɵtemplate(29, dibexClientDataComponent_mat_icon_29_Template, 2, 0, "mat-icon", 16);
                        i0.ɵɵtemplate(30, dibexClientDataComponent_mat_icon_30_Template, 2, 0, "mat-icon", 17);
                        i0.ɵɵtemplate(31, dibexClientDataComponent_mat_icon_31_Template, 2, 0, "mat-icon", 18);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(32, "mat-form-field", 21)(33, "mat-label");
                        i0.ɵɵtext(34, "Join Date");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(35, "input", 22);
                        i0.ɵɵlistener("focus", function dibexClientDataComponent_Template_input_focus_35_listener() { i0.ɵɵrestoreView(_r31); const _r11 = i0.ɵɵreference(38); return i0.ɵɵresetView(_r11.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(36, "mat-datepicker-toggle", 23)(37, "mat-datepicker", null, 24);
                        i0.ɵɵtemplate(39, dibexClientDataComponent_mat_icon_39_Template, 2, 0, "mat-icon", 16);
                        i0.ɵɵtemplate(40, dibexClientDataComponent_mat_icon_40_Template, 2, 0, "mat-icon", 17);
                        i0.ɵɵtemplate(41, dibexClientDataComponent_mat_icon_41_Template, 2, 0, "mat-icon", 18);
                        i0.ɵɵtemplate(42, dibexClientDataComponent_mat_error_42_Template, 2, 0, "mat-error", 15);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(43, "div", 25)(44, "mat-form-field", 26)(45, "mat-label");
                        i0.ɵɵtext(46, "Manager");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(47, "input", 27, 28);
                        i0.ɵɵtemplate(50, dibexClientDataComponent_button_50_Template, 3, 0, "button", 29);
                        i0.ɵɵelementStart(51, "mat-autocomplete", 30, 31);
                        i0.ɵɵlistener("opened", function dibexClientDataComponent_Template_mat_autocomplete_opened_51_listener() { return ctx.lists.list5407.refresh(); });
                        i0.ɵɵtemplate(53, dibexClientDataComponent_mat_progress_bar_53_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵtemplate(54, dibexClientDataComponent_mat_option_54_Template, 1, 5, "mat-option", 32);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(55, "button", 33);
                        i0.ɵɵlistener("click", function dibexClientDataComponent_Template_button_click_55_listener($event) { return ctx.goToForDropdowns("dibexStaffForm", "main", true, "manager_id", "id", ctx.model, ctx.row, $event); });
                        i0.ɵɵelement(56, "dib-icon", 34);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(57, "div", 35);
                        i0.ɵɵelementContainerStart(58, 6);
                        i0.ɵɵelementStart(59, "button", 36)(60, "span", 37);
                        i0.ɵɵtext(61, "Show Client Data");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(62, "span", 38)(63, "div", 39);
                        i0.ɵɵtext(64, " Select a record in the grid, press F12, and view Client Data submitted in the Console->Network-tab when buttons are clicked.");
                        i0.ɵɵelement(65, "br");
                        i0.ɵɵtext(66, "This button's container has the following ");
                        i0.ɵɵelementStart(67, "b");
                        i0.ɵɵtext(68, "configs");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(69, " (see Pg2 in Designer) which includes ");
                        i0.ɵɵelementStart(70, "b");
                        i0.ɵɵtext(71, "clickedLast");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(72, " and ");
                        i0.ɵɵelementStart(73, "b");
                        i0.ɵɵtext(74, "selected");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(75, " Client Data of the child grid (dibexSimpleGrid):");
                        i0.ɵɵelement(76, "br");
                        i0.ɵɵelementStart(77, "b");
                        i0.ɵɵtext(78, "\"clickedLast\":\"dibexSimpleGrid\", \"selected\":\"dibexSimpleGrid\"");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(79, "div", 40);
                        i0.ɵɵelementContainer(80, 41);
                        i0.ɵɵelementEnd()()();
                    } if (rf & 2) {
                        const _r11 = i0.ɵɵreference(38);
                        const _r19 = i0.ɵɵreference(52);
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(40, _c1, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5388");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "5408");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Refresh data using active filters")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibComponentParent", ctx);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5389");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "First Name");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("first_name", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("first_name", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("first_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("first_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("first_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Last Name (HAS NO ALIAS)");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("last_name", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("last_name", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("last_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("last_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("last_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matDatepicker", _r11)("placeholder", "Join Date");
                        i0.ɵɵattribute("aria-label", "Join Date");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r11);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("join_date", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("join_date", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("join_date", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("join_date", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("matAutocomplete", _r19);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.showDropdownClearButton(ctx.model.modelItems.manager_id.formControl));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("displayWith", ctx.dropdownValueTranslate.bind(ctx, "manager_id"));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.lists.list5407.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", ctx.lists.list5407.lastItems);
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("dibPort", "5412");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Show Client Data");
                        i0.ɵɵadvance(21);
                        i0.ɵɵproperty("dibPort", "5403");
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.DefaultClassDirective, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.RequiredValidator, i6.MaxLengthValidator, i6.FormGroupDirective, i6.FormControlName, i1.DibIconComponent, i1.DibPortDirective, i1.DibAutocompleteScrollToOnFocusDirective, i1.DibListenersDirective, i1.DibComponentDirective, i1.DibRemoveFocusDirective, i7.MatAutocomplete, i8.MatOption, i7.MatAutocompleteTrigger, i9.MatButton, i9.MatIconButton, i9.MatMiniFabButton, i10.MatDatepicker, i10.MatDatepickerInput, i10.MatDatepickerToggle, i11.MatFormField, i11.MatLabel, i11.MatError, i11.MatPrefix, i11.MatSuffix, i12.MatIcon, i13.MatInput, i14.MatProgressBar, i15.MatTooltip, i16.MatCard, i16.MatCardContent], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexClientData'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexClientDataComponent.prototype, "reloadContainer", null);
            tslib_1.__decorate([
                shared_1.EventHandler('goToRecorddibexClientData'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [String]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexClientDataComponent.prototype, "goToRecord", null);
            tslib_1.__decorate([
                shared_1.EventHandler('recordPositiondibexClientData'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Number]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexClientDataComponent.prototype, "recordPosition", null);
            exports_1("dibexClientDataComponent", dibexClientDataComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexClientDataComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-client-data', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" containerName=dibexClientData  [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5388 dibComponent=subcontainer   ><ng-container [dibPort]="'5388'" parentContainerName=dibexClientData  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  " id=ci5408 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5408'" ><button   mat-mini-fab color=primary  id=ci5409 dibComponent=btnReload   style="  " aria-label="Refresh data using active filters"  [matTooltip]="'Refresh data using active filters'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><div  id=ci5410 dibComponent=formPaging   style="  bor" ><ng-container  dibComponentName=formPager   dibDropin=form   dibComponentLocation="/peff/Template/component/dibexClientData?componentPath=pager&dropin=setNgxMaterial.form"   [dibComponentParent]="this"  ></ng-container></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  overflow:auto !important;" id=ci5389 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;"  ><ng-container [dibPort]="'5389'" ><mat-form-field id=ci5404 dibComponent=inputText   style="  "  item-alias=first_name   appearance=standard  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'" ><mat-error *ngIf="hasError('first_name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',model.$formGroup)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('first_name', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci5405 dibComponent=inputText   style="  background-color:lightgray"  appearance=standard  ><mat-label >Last Name (HAS NO ALIAS)</mat-label><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name (HAS NO ALIAS)'" ><mat-error *ngIf="hasError('last_name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',model.$formGroup)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('last_name', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field  id=ci5406 dibComponent=datePicker   style="  "  item-alias=join_date   appearance=standard  ><mat-label>Join Date</mat-label><input   matInput [matDatepicker]="datePicker5406"   [placeholder]="'Join Date'"   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (focus)="datePicker5406.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker5406" ></mat-datepicker-toggle><mat-datepicker #datePicker5406 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('join_date', model.$formGroup)" matSuffix >priority_high</mat-icon><mat-error *ngIf="hasError('join_date','required',model.$formGroup)">Please enter a value</mat-error></mat-form-field><div   style="  display:flex; flex-direction: row;  flex: 1 1 0%;  align-self: stretch;  "  item-alias=manager_id  id=ci5407 dibComponent=autocomplete   ><mat-form-field style="display:flex; flex-direction:column; flex: 1 1 0%"  appearance=standard   ><mat-label>Manager</mat-label><input #auto5407trigger=matAutocompleteTrigger   type=text  matInput formControlName=manager_id   #input5407  [matAutocomplete]="auto5407"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.manager_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.manager_id.formControl, $event, lists.list5407, auto5407trigger); input5407.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5407=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'manager_id')"  (opened)="$any(lists.list5407).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5407).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5407.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field><button type=button  aria-label="Link to page for dibexStaffForm"  mat-icon-button  (click)="goToForDropdowns(  'dibexStaffForm',  'main',  true,  'manager_id',  'id',  model,  row,  $event  );"  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"></dib-icon></button></div></ng-container></mat-card-content></mat-card><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex: 1 1 0%;  overflow:auto !important;" id=ci5412 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5412'" ><button  mat-raised-button color=primary  id=ci5390 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientData   style="  margin:0px 10px !important;   flex: 0 1 170px;  "  [attr.aria-label]="'Show Client Data'"  type=button  ><span class=dibButtonCaption >Show Client Data</span></button><span  id=ci5413 dibComponent=comment   style="  flex: 1 1 0%;  font-size:14px;" ><div class=dib-comment > Select a record in the grid, press F12, and view Client Data submitted in the Console->Network-tab when buttons are clicked.<br>This button's container has the following <b>configs</b> (see Pg2 in Designer) which includes <b>clickedLast</b> and <b>selected</b> Client Data of the child grid (dibexSimpleGrid):<br><b>"clickedLast":"dibexSimpleGrid", "selected":"dibexSimpleGrid"</b></div></span></ng-container></div><div   style="  margin:10px !important;   padding:10px !important;  flex: 1 1 0%;  border: 2px solid grey" id=ci5403 dibComponent=subcontainer   ><ng-container [dibPort]="'5403'" parentContainerName=dibexClientData  subContainerName=dibexSimpleGrid  subContainerId=217  dropinName=grid ></ng-container></div></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.CrudService }, { type: i2.HttpClient }, { type: i1.UrlService }, { type: i3.Router }, { type: i0.ViewContainerRef }, { type: i1.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { reloadContainer: [], goToRecord: [], recordPosition: [] }); })();
            containerModules = [card_1.MatCardModule, button_1.MatButtonModule, icon_1.MatIconModule, datepicker_1.MatDatepickerModule, core_4.MatNativeDateModule, autocomplete_1.MatAutocompleteModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexClientDataModule = class dibexClientDataModule {
                static entry = dibexClientDataComponent;
                static ɵfac = function dibexClientDataModule_Factory(t) { return new (t || dibexClientDataModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexClientDataModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexClientDataModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexClientDataModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexClientDataComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexClientDataModule, { declarations: [dibexClientDataComponent], imports: [common_1.CommonModule, shared_4.SharedModule, card_1.MatCardModule, button_1.MatButtonModule, icon_1.MatIconModule, datepicker_1.MatDatepickerModule, core_4.MatNativeDateModule, autocomplete_1.MatAutocompleteModule] }); })();
        }
    };
});
