System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/forms", "@angular/material/core", "rxjs/operators", "@angular/common", "@angular/material/card", "@angular/material/datepicker", "@angular/material/button", "@angular/material/icon", "@ngbracket/ngx-layout/extended", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, forms_1, core_2, shared_3, operators_1, core_3, common_1, shared_4, shared_5, card_1, datepicker_1, core_4, button_1, icon_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, _c0, importsRequired, dibexLayoutFlexComponent, containerModules, fullDateTimeOptions, dibexLayoutFlexModule;
    var __moduleName = context_1 && context_1.id;
    function dibexLayoutFlexComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 179);
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i2 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                i5 = forms_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
                core_4 = core_2_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i3 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i11 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i7 = datepicker_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i6 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
            },
            function (i4_1) {
                i4 = i4_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i9_1) {
                i9 = i9_1;
            },
            function (i10_1) {
                i10 = i10_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexLayoutFlexComponent = class dibexLayoutFlexComponent extends shared_1.BaseComponent {
                httpClient;
                sd;
                cd;
                view = { container: { id: 197, name: 'dibexLayoutFlex', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml", "dibexFlexInPractice"], refreshChildContainers: { "_": ['dibDocsExampleHtml*4747', 'dibexFlexInPractice*4878'] }, dropin: 'plain', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: [], recordStatus: 'create', debug: false, debugItem: false };
                clientData;
                allClientData;
                model;
                constructor(injector, httpClient, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexLayoutFlex');
                    this.containerName = 'dibexLayoutFlex'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { firstName: { itemId: 4755, type: 'text', fieldAlias: 'firstName', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, dob: { itemId: 4756, type: 'date', fieldAlias: 'dob', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, firstName1: { itemId: 4760, type: 'text', fieldAlias: 'firstName1', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, dob1: { itemId: 4761, type: 'date', fieldAlias: 'dob1', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, firstName2: { itemId: 4774, type: 'text', fieldAlias: 'firstName2', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, dob2: { itemId: 4775, type: 'date', fieldAlias: 'dob2', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, firstName11: { itemId: 4806, type: 'text', fieldAlias: 'firstName11', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, dob11: { itemId: 4807, type: 'date', fieldAlias: 'dob11', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, firstName5: { itemId: 4831, type: 'text', fieldAlias: 'firstName5', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, dob5: { itemId: 4832, type: 'date', fieldAlias: 'dob5', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, };
                    this.model.$formGroup.addControl('firstName', this.model.modelItems.firstName.formControl);
                    this.model.$formGroup.addControl('dob', this.model.modelItems.dob.formControl);
                    this.model.$formGroup.addControl('firstName1', this.model.modelItems.firstName1.formControl);
                    this.model.$formGroup.addControl('dob1', this.model.modelItems.dob1.formControl);
                    this.model.$formGroup.addControl('firstName2', this.model.modelItems.firstName2.formControl);
                    this.model.$formGroup.addControl('dob2', this.model.modelItems.dob2.formControl);
                    this.model.$formGroup.addControl('firstName11', this.model.modelItems.firstName11.formControl);
                    this.model.$formGroup.addControl('dob11', this.model.modelItems.dob11.formControl);
                    this.model.$formGroup.addControl('firstName5', this.model.modelItems.firstName5.formControl);
                    this.model.$formGroup.addControl('dob5', this.model.modelItems.dob5.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.setInnerHtml('element1', `1`);
                    this.setInnerHtml('element2', `2`);
                    this.setInnerHtml('element3', `3`);
                    this.setInnerHtml('span', `<i>Note, using stretch in the vertical direction is normally useful for layout items, eg div, card or subcontainer etc.</i>`);
                    this.setInnerHtml('span1', `<i>Note, the defaults of <b>Align-Main-X (justify-content)</b> and <b>Align-Cross-X (align-items)</b> (see below) if left blank are <b>start</b> and <b>stretch</b> respectively,<br>which is why the items above are stretched across the width of the page.
<br>Normally one would give the card/section they are in a fixed or max-width (eg width: 200px),<br>and have more cards/sections next to one another.</i>`);
                    this.setInnerHtml('span2', `<i>*** Note, the orange dashed line denotes the parent div's border</i>`);
                    this.setInnerHtml('element7', `1`);
                    this.setInnerHtml('element8', `2`);
                    this.setInnerHtml('element9', `3`);
                    this.setInnerHtml('element4', `1`);
                    this.setInnerHtml('element', `1`);
                    this.setInnerHtml('element10', `2`);
                    this.setInnerHtml('element11', `3`);
                    this.setInnerHtml('span3', `<i>Resize the browser window, and see how they adjust</i>`);
                    this.setInnerHtml('textNormal', `Hello there`);
                    this.setInnerHtml('textBig', `Maestro`);
                    this.setInnerHtml('textSmall', `Let me introduce myself.`);
                    this.setInnerHtml('textNormal2', `I am DIB.`);
                    this.setInnerHtml('element12', `Books`);
                    this.setInnerHtml('textNormal1', `Hello there`);
                    this.setInnerHtml('textBig1', `Maestro`);
                    this.setInnerHtml('textSmall1', `Let me introduce myself.`);
                    this.setInnerHtml('textNormal3', `I am DIB.`);
                    this.setInnerHtml('span2A', `<b>flex:2 0 100px</b>
<br><i>grow if possible (twice as much as other items that may grow),&nbsp;don't shrink below 100px</i>`);
                    this.setInnerHtml('span2B', `<b>flex:1 1 auto; width:100px</b>
<br><i>grow if possible, shrink if necessary (but ideally not below 100px)</i>`);
                    this.setInnerHtml('span2C', `<b>flex:0 0 200px</b>
<br><i>fixed width of 200px, don't grow or shrink</i>`);
                    this.setInnerHtml('span3A', `<b>flex: 0 1 auto; width: auto;</b>
<br><i>don't grow; shrink to size of content (a 300px blue line)</i>
<hr style="width: 300px; height: 4px; background: blue; margin: 2px 0px;">`);
                    this.setInnerHtml('span3B', `<b>flex:1 0 20%</b>
<br><i>grow if possible, don't shrink below 20%</i>`);
                    this.setInnerHtml('span3C', `<b>flex:1 0 100%</b>
<br><i>base is 100% which is not available - take what it can get</i>`);
                    this.setInnerHtml('span1A', `<b>flex:1 1 150px</b>
<br><i>grow if possible, shrink if necessary (but ideally not below 150px)</i>`);
                    this.setInnerHtml('span1B', `<b>flex:1 1 0%</b>
<br><i>grow if possible, shrink if necessary as much as is needed</i>`);
                    this.setInnerHtml('span1C', `<b>flex:1 1 20%</b>
<br><i>grow if possible, shrink if necessary (but ideally not below 20% of parent width)</i>`);
                    this.setInnerHtml('span5', `<i>Notice how item widths are forced to fit them in</i>`);
                    this.setInnerHtml('element14', `Pencils`);
                    this.setInnerHtml('element13', `Chairs`);
                    this.setInnerHtml('element1', `1`);
                    this.setInnerHtml('element2', `2`);
                    this.setInnerHtml('element3', `3`);
                    this.setInnerHtml('span', `<i>Note, using stretch in the vertical direction is normally useful for layout items, eg div, card or subcontainer etc.</i>`);
                    this.setInnerHtml('span1', `<i>Note, the defaults of <b>Align-Main-X (justify-content)</b> and <b>Align-Cross-X (align-items)</b> (see below) if left blank are <b>start</b> and <b>stretch</b> respectively,<br>which is why the items above are stretched across the width of the page.
<br>Normally one would give the card/section they are in a fixed or max-width (eg width: 200px),<br>and have more cards/sections next to one another.</i>`);
                    this.setInnerHtml('span2', `<i>*** Note, the orange dashed line denotes the parent div's border</i>`);
                    this.setInnerHtml('element7', `1`);
                    this.setInnerHtml('element8', `2`);
                    this.setInnerHtml('element9', `3`);
                    this.setInnerHtml('element4', `1`);
                    this.setInnerHtml('element', `1`);
                    this.setInnerHtml('element10', `2`);
                    this.setInnerHtml('element11', `3`);
                    this.setInnerHtml('span3', `<i>Resize the browser window, and see how they adjust</i>`);
                    this.setInnerHtml('textNormal', `Hello there`);
                    this.setInnerHtml('textBig', `Maestro`);
                    this.setInnerHtml('textSmall', `Let me introduce myself.`);
                    this.setInnerHtml('textNormal2', `I am DIB.`);
                    this.setInnerHtml('element12', `Books`);
                    this.setInnerHtml('textNormal1', `Hello there`);
                    this.setInnerHtml('textBig1', `Maestro`);
                    this.setInnerHtml('textSmall1', `Let me introduce myself.`);
                    this.setInnerHtml('textNormal3', `I am DIB.`);
                    this.setInnerHtml('span2A', `<b>flex:2 0 100px</b>
<br><i>grow if possible (twice as much as other items that may grow),&nbsp;don't shrink below 100px</i>`);
                    this.setInnerHtml('span2B', `<b>flex:1 1 auto; width:100px</b>
<br><i>grow if possible, shrink if necessary (but ideally not below 100px)</i>`);
                    this.setInnerHtml('span2C', `<b>flex:0 0 200px</b>
<br><i>fixed width of 200px, don't grow or shrink</i>`);
                    this.setInnerHtml('span3A', `<b>flex: 0 1 auto; width: auto;</b>
<br><i>don't grow; shrink to size of content (a 300px blue line)</i>
<hr style="width: 300px; height: 4px; background: blue; margin: 2px 0px;">`);
                    this.setInnerHtml('span3B', `<b>flex:1 0 20%</b>
<br><i>grow if possible, don't shrink below 20%</i>`);
                    this.setInnerHtml('span3C', `<b>flex:1 0 100%</b>
<br><i>base is 100% which is not available - take what it can get</i>`);
                    this.setInnerHtml('span1A', `<b>flex:1 1 150px</b>
<br><i>grow if possible, shrink if necessary (but ideally not below 150px)</i>`);
                    this.setInnerHtml('span1B', `<b>flex:1 1 0%</b>
<br><i>grow if possible, shrink if necessary as much as is needed</i>`);
                    this.setInnerHtml('span1C', `<b>flex:1 1 20%</b>
<br><i>grow if possible, shrink if necessary (but ideally not below 20% of parent width)</i>`);
                    this.setInnerHtml('span5', `<i>Notice how item widths are forced to fit them in</i>`);
                    this.setInnerHtml('element14', `Pencils`);
                    this.setInnerHtml('element13', `Chairs`);
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.reloadContainer();
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexLayoutFlex', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexLayoutFlex' });
                    this.reloadSubcontainers();
                }
                static ɵfac = function dibexLayoutFlexComponent_Factory(t) { return new (t || dibexLayoutFlexComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexLayoutFlexComponent, selectors: [["dibex-layout-flex"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 675, vars: 193, consts: [["mode", "indeterminate", 4, "ngIf"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci4747", "dibComponent", "subcontainer", 2, "flex", "1 1 auto"], ["parentContainerName", "dibexLayoutFlex", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci5053", "dibComponent", "comment", 2, "margin", "10px"], [1, "dib-comment"], ["target", "_blank", "href", "https://yoksel.github.io/flex-cheatsheet/#section-flex-basis"], ["id", "ci4752", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], [3, "dibPort"], ["id", "ci4753", "dibComponent", "comment"], ["id", "ci4763", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4758", "dibComponent", "comment"], ["id", "ci4759", "dibComponent", "div", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap", "flex", "1 1 0%", "border", "1px dashed orange"], ["id", "ci4760", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "firstName1", "name", "firstName1"], ["datepicker", "", "id", "ci4761", "dibComponent", "datePicker", "appearance", "standard"], ["matInput", "", "formControlName", "dob1", "name", "dob1", 3, "matDatepicker", "placeholder", "focus"], ["matPrefix", "", 3, "for"], ["datePicker4761", ""], ["mat-raised-button", "", "color", "primary", "id", "ci4762", "dibComponent", "button", "type", "button"], [1, "dibButtonCaption"], ["id", "ci4782", "dibComponent", "span", 2, "margin", "10px 0px !important", "color", "orange", "font-weight", "bold", 3, "innerHtml"], ["id", "ci4765", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4764", "dibComponent", "comment"], ["id", "ci4754", "dibComponent", "div", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap", "flex", "1 1 0%", "border", "1px dashed orange"], ["id", "ci4755", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "firstName", "name", "firstName"], ["datepicker", "", "id", "ci4756", "dibComponent", "datePicker", "appearance", "standard"], ["matInput", "", "formControlName", "dob", "name", "dob", 3, "matDatepicker", "placeholder", "focus"], ["datePicker4756", ""], ["mat-raised-button", "", "color", "primary", "id", "ci4757", "dibComponent", "button", "type", "button"], ["id", "ci4781", "dibComponent", "span", 2, "margin", "10px 0px !important", 3, "innerHtml"], ["id", "ci4766", "dibComponent", "card", 2, "flex", "1 1 0%"], ["id", "ci4767", "dibComponent", "comment"], ["id", "ci4772", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4777", "dibComponent", "comment"], ["id", "ci4773", "dibComponent", "div", 2, "width", "auto !important", "height", "300px !important", "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "center", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4774", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "firstName2", "name", "firstName2"], ["datepicker", "", "id", "ci4775", "dibComponent", "datePicker", "appearance", "standard"], ["matInput", "", "formControlName", "dob2", "name", "dob2", 3, "matDatepicker", "placeholder", "focus"], ["datePicker4775", ""], ["mat-raised-button", "", "color", "primary", "id", "ci4776", "dibComponent", "button", "type", "button"], ["id", "ci4768", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4769", "dibComponent", "comment"], ["id", "ci4770", "dibComponent", "div", 2, "width", "auto !important", "height", "150px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-end", "align-items", "stretch", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4771", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4778", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4779", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4780", "dibComponent", "span", 2, "margin", "10px 0px !important", 3, "innerHtml"], ["id", "ci4810", "dibComponent", "comment"], ["id", "ci4789", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4790", "dibComponent", "comment"], ["id", "ci4791", "dibComponent", "div", 2, "width", "auto !important", "height", "100px !important", "display", "flex", "flex-direction", "row", "justify-content", "space-around", "align-items", "flex-start", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4792", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4793", "dibComponent", "button", "type", "button", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue"], ["id", "ci4794", "dibComponent", "button", "type", "button", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue"], ["id", "ci4783", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4784", "dibComponent", "comment"], ["id", "ci4785", "dibComponent", "div", 2, "width", "auto !important", "height", "100px !important", "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "center", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4786", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4787", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4788", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4795", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4796", "dibComponent", "comment"], ["id", "ci4797", "dibComponent", "div", 2, "width", "auto !important", "height", "100px !important", "display", "flex", "flex-direction", "row", "justify-content", "space-evenly", "align-items", "flex-end", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4798", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4799", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4800", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4809", "dibComponent", "span", 2, "margin", "10px 0px !important", 3, "innerHtml"], ["id", "ci4816", "dibComponent", "comment"], ["id", "ci4811", "dibComponent", "section", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "row", "gap", "20px", "flex-wrap", "nowrap"], ["id", "ci4839", "dibComponent", "column", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap", "flex", "1 1 0%"], ["id", "ci4812", "dibComponent", "comment", 2, "align-self", "flex-start"], ["id", "ci4813", "dibComponent", "div", 2, "width", "auto !important", "height", "100px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "baseline", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4814", "dibComponent", "span", 3, "innerHtml"], ["id", "ci4815", "dibComponent", "span", 2, "font-size", "2.5em", "font-family", "cursive", 3, "innerHtml"], ["id", "ci4817", "dibComponent", "span", 2, "font-size", "0.7em", 3, "innerHtml"], ["id", "ci4818", "dibComponent", "span", 3, "innerHtml"], ["id", "ci4840", "dibComponent", "column", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap", "flex", "1 1 0%"], ["id", "ci4841", "dibComponent", "comment", 2, "align-self", "flex-start"], ["id", "ci4842", "dibComponent", "div", 2, "width", "auto !important", "height", "100px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4843", "dibComponent", "span", 3, "innerHtml"], ["id", "ci4844", "dibComponent", "span", 2, "font-size", "2.5em", "font-family", "cursive", 3, "innerHtml"], ["id", "ci4845", "dibComponent", "span", 2, "font-size", "0.7em", 3, "innerHtml"], ["id", "ci4846", "dibComponent", "span", 3, "innerHtml"], ["id", "ci4801", "dibComponent", "card", 2, "flex", "1 1 0%"], ["id", "ci4802", "dibComponent", "comment"], ["id", "ci4803", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4804", "dibComponent", "comment"], ["id", "ci4805", "dibComponent", "div", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%", "border", "1px dashed orange"], ["id", "ci4806", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "firstName11", "name", "firstName11"], ["datepicker", "", "id", "ci4807", "dibComponent", "datePicker", "appearance", "standard"], ["matInput", "", "formControlName", "dob11", "name", "dob11", 3, "matDatepicker", "placeholder", "focus"], ["datePicker4807", ""], ["mat-raised-button", "", "color", "primary", "id", "ci4808", "dibComponent", "button", "type", "button"], ["id", "ci4820", "dibComponent", "card", 2, "flex", "1 1 0%"], ["id", "ci4821", "dibComponent", "comment"], ["id", "ci4950", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "wrap", "flex", "1 1 0%", "overflow", "auto !important"], ["id", "ci4951", "dibComponent", "section", 2, "flex", "1 1 0%", "overflow", "auto !important"], [2, "display", "flex", "flex-direction", "column", "gap", "10px", "flex-wrap", "nowrap"], ["id", "ci4952", "dibComponent", "comment"], ["id", "ci4944", "dibComponent", "div", 2, "width", "500px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap", "border", "1px dashed orange"], ["mat-raised-button", "", "color", "primary", "id", "ci4945", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4949", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4948", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4947", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4946", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["id", "ci4953", "dibComponent", "span", 3, "innerHtml"], ["id", "ci4822", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4823", "dibComponent", "comment"], ["id", "ci4824", "dibComponent", "div", 2, "width", "500px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "20px 5px", "flex-wrap", "wrap", "flex", "1 1 0%", "border", "1px dashed orange"], ["mat-raised-button", "", "color", "primary", "id", "ci4825", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4943", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4942", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4941", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4940", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["id", "ci4954", "dibComponent", "card", 2, "flex", "1 1 0%", "overflow", "auto !important"], ["id", "ci4955", "dibComponent", "comment"], ["id", "ci4956", "dibComponent", "section"], ["id", "ci4957", "dibComponent", "comment"], ["id", "ci4958", "dibComponent", "div", 2, "width", "500px !important", "height", "200px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "wrap", "align-content", "flex-end", "border", "1px dashed orange"], ["mat-raised-button", "", "color", "primary", "id", "ci4959", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4963", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4962", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4961", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci4960", "dibComponent", "button", "type", "button", 2, "width", "200px !important"], ["id", "ci4819", "dibComponent", "comment", 2, "align-self", "center"], ["id", "ci4847", "dibComponent", "card", 2, "flex", "1 1 0%"], ["id", "ci4848", "dibComponent", "comment"], ["target", "_blank", "href", "https://developer.mozilla.org/en-US/docs/Web/CSS/flex"], ["id", "ci4849", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4854", "dibComponent", "comment", 2, "align-self", "center"], ["id", "ci4859", "dibComponent", "div", 2, "width", "auto !important", "height", "60px !important", "display", "flex", "flex-direction", "row", "gap", "10px", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4860", "dibComponent", "span", 2, "flex", "1 1 150px", "background", "green", 3, "innerHtml"], ["id", "ci4861", "dibComponent", "span", 2, "flex", "1 1 0%", "background", "lightblue", 3, "innerHtml"], ["id", "ci4862", "dibComponent", "span", 2, "flex", "1 1 20%", "background", "red", 3, "innerHtml"], ["id", "ci4850", "dibComponent", "div", 2, "width", "auto !important", "height", "60px !important", "display", "flex", "flex-direction", "row", "gap", "10px", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4851", "dibComponent", "span", 2, "flex", "2 1 100px", "background", "green", 3, "innerHtml"], ["id", "ci4852", "dibComponent", "span", 2, "width", "100px !important", "flex", "1 1 auto", "background", "lightblue", 3, "innerHtml"], ["id", "ci4853", "dibComponent", "span", 2, "flex", "0 1 200px", "background", "red", 3, "innerHtml"], ["id", "ci4855", "dibComponent", "div", 2, "width", "auto !important", "height", "60px !important", "display", "flex", "flex-direction", "row", "gap", "10px", "flex-wrap", "nowrap", "border", "1px dashed orange"], ["id", "ci4856", "dibComponent", "span", 2, "width", "auto !important", "flex", "0 1 auto", "background", "green", 3, "innerHtml"], ["id", "ci4857", "dibComponent", "span", 2, "flex", "1 1 20%", "background", "lightblue", 3, "innerHtml"], ["id", "ci4858", "dibComponent", "span", 2, "flex", "1 1 100%", "background", "red", 3, "innerHtml"], ["id", "ci4826", "dibComponent", "card", 2, "flex", "1 1 0%"], ["id", "ci4827", "dibComponent", "comment"], ["target", "_blank", "href", "https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"], ["id", "ci4828", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4829", "dibComponent", "comment"], ["id", "ci4830", "dibComponent", "div", 2, "width", "auto !important", "height", "150px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["id", "ci4831", "dibComponent", "inputText", "appearance", "standard", 2, "align-self", "flex-end"], ["matInput", "", "type", "text", "formControlName", "firstName5", "name", "firstName5"], ["datepicker", "", "id", "ci4832", "dibComponent", "datePicker", "appearance", "standard"], ["matInput", "", "formControlName", "dob5", "name", "dob5", 3, "matDatepicker", "placeholder", "focus"], ["datePicker4832", ""], ["id", "ci4833", "dibComponent", "span", 2, "padding", "20px !important", "align-self", "stretch", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4965", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4964", "dibComponent", "span", 2, "padding", "20px !important", "background-color", "lightblue", "border", "2px solid cadetblue", 3, "innerHtml"], ["id", "ci4834", "dibComponent", "card", 2, "flex", "1 1 0%"], ["id", "ci4835", "dibComponent", "comment"], ["target", "_blank", "href", "https://developer.mozilla.org/en-US/docs/Web/CSS/order"], ["id", "ci4836", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci4837", "dibComponent", "div", 2, "width", "auto !important", "height", "150px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap", "flex", "0 1 auto", "border", "1px dashed orange"], ["mat-raised-button", "", "color", "primary", "id", "ci4838", "dibComponent", "button", "type", "button", 2, "order", "3"], ["mat-raised-button", "", "color", "primary", "id", "ci4971", "dibComponent", "button", "type", "button", 2, "order", "-1"], ["mat-raised-button", "", "color", "primary", "id", "ci4970", "dibComponent", "button", "type", "button"], ["mat-raised-button", "", "color", "primary", "id", "ci4969", "dibComponent", "button", "type", "button"], ["mat-raised-button", "", "color", "primary", "id", "ci4968", "dibComponent", "button", "type", "button", 2, "order", "-2"], ["mat-raised-button", "", "color", "primary", "id", "ci4967", "dibComponent", "button", "type", "button", 2, "order", "1"], ["mat-raised-button", "", "color", "primary", "id", "ci4966", "dibComponent", "button", "type", "button", 2, "order", "1"], ["id", "ci4863", "dibComponent", "card", 2, "flex", "1 1 0%"], ["id", "ci4864", "dibComponent", "comment", 2, "align-self", "center"], ["id", "ci4878", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexLayoutFlex", "subContainerName", "dibexFlexInPractice", "subContainerId", "198", "dropinName", "form", 3, "dibPort"], ["mode", "indeterminate"]], template: function dibexLayoutFlexComponent_Template(rf, ctx) { if (rf & 1) {
                        const _r6 = i0.ɵɵgetCurrentView();
                        i0.ɵɵtemplate(0, dibexLayoutFlexComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexLayoutFlexComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
                        i0.ɵɵelementContainer(4, 4);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(5, "span", 5)(6, "div", 6)(7, "b");
                        i0.ɵɵtext(8, "NOTE, this tutorial together with the design of this container showcases how FlexBox is implemented within DIB and provides basic guidelines.");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(9, "br");
                        i0.ɵɵtext(10, "Use the links under Resources above to learn more about Flexbox. Recommended starting place: ");
                        i0.ɵɵelementStart(11, "a", 7);
                        i0.ɵɵtext(12, "https://yoksel.github.io/flex-cheatsheet/#section-flex-basis");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(13, "mat-card", 8)(14, "mat-card-header")(15, "mat-card-title");
                        i0.ɵɵtext(16, "Direction (set on parent item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(17, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(18, 10);
                        i0.ɵɵelementStart(19, "span", 11)(20, "div", 6)(21, "b");
                        i0.ɵɵtext(22, "Direction (CSS: flex-direction)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(23, "br");
                        i0.ɵɵtext(24, "A parent layout item, like a div or card, can have their (direct/immediate) children");
                        i0.ɵɵelement(25, "br");
                        i0.ɵɵtext(26, "arranged either horizontally (row) or vertically (column) within. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(27, "mat-card", 12)(28, "mat-card-content", 9)(29, "span", 13)(30, "div", 6)(31, "b");
                        i0.ɵɵtext(32, "flex-direction:row");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(33, "div", 14);
                        i0.ɵɵelementContainerStart(34, 10);
                        i0.ɵɵelementStart(35, "mat-form-field", 15)(36, "mat-label");
                        i0.ɵɵtext(37, "First Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(38, "input", 16);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(39, "mat-form-field", 17)(40, "mat-label");
                        i0.ɵɵtext(41, "DOB");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(42, "input", 18);
                        i0.ɵɵlistener("focus", function dibexLayoutFlexComponent_Template_input_focus_42_listener() { i0.ɵɵrestoreView(_r6); const _r1 = i0.ɵɵreference(45); return i0.ɵɵresetView(_r1.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(43, "mat-datepicker-toggle", 19)(44, "mat-datepicker", null, 20);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(46, "button", 21)(47, "span", 22);
                        i0.ɵɵtext(48, "Do Nothing");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(49, "span", 23);
                        i0.ɵɵpipe(50, "safeHtml");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(51, "mat-card", 24)(52, "mat-card-content", 9)(53, "span", 25)(54, "div", 6)(55, "b");
                        i0.ɵɵtext(56, "flex-direction:column");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(57, "div", 26);
                        i0.ɵɵelementContainerStart(58, 10);
                        i0.ɵɵelementStart(59, "mat-form-field", 27)(60, "mat-label");
                        i0.ɵɵtext(61, "First Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(62, "input", 28);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(63, "mat-form-field", 29)(64, "mat-label");
                        i0.ɵɵtext(65, "DOB");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(66, "input", 30);
                        i0.ɵɵlistener("focus", function dibexLayoutFlexComponent_Template_input_focus_66_listener() { i0.ɵɵrestoreView(_r6); const _r2 = i0.ɵɵreference(69); return i0.ɵɵresetView(_r2.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(67, "mat-datepicker-toggle", 19)(68, "mat-datepicker", null, 31);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(70, "button", 32)(71, "span", 22);
                        i0.ɵɵtext(72, "Do Nothing");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(73, "span", 33);
                        i0.ɵɵpipe(74, "safeHtml");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(75, "mat-card", 34)(76, "mat-card-header")(77, "mat-card-title");
                        i0.ɵɵtext(78, "Align Main-X / Align Cross-X (set on parent item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(79, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(80, 10);
                        i0.ɵɵelementStart(81, "span", 35)(82, "div", 6);
                        i0.ɵɵelement(83, "br");
                        i0.ɵɵelementStart(84, "b");
                        i0.ɵɵtext(85, "Align-Main-X (CSS: justify-content)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(86, "br");
                        i0.ɵɵtext(87, "Along the main axis/direction set by ");
                        i0.ɵɵelementStart(88, "b");
                        i0.ɵɵtext(89, "flex-direction");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(90, "(see above),the position of child items can be set with one of:");
                        i0.ɵɵelement(91, "br");
                        i0.ɵɵelementStart(92, "b");
                        i0.ɵɵtext(93, "flex-start | center | flex-end | space-around | space-between | space-evenly");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(94, "br");
                        i0.ɵɵtext(95, "The default if not specified is ");
                        i0.ɵɵelementStart(96, "b");
                        i0.ɵɵtext(97, "flex-start");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(98, "br")(99, "br");
                        i0.ɵɵelementStart(100, "b");
                        i0.ɵɵtext(101, "Align-cross-X (CSS: align-items)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(102, "br");
                        i0.ɵɵtext(103, "Along the cross/perpendicular axis, child items can be positioned using one of:");
                        i0.ɵɵelement(104, "br");
                        i0.ɵɵelementStart(105, "b");
                        i0.ɵɵtext(106, "flex-start | center | flex-end | stretch | baseline");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(107, "br");
                        i0.ɵɵtext(108, "The default if not specified is ");
                        i0.ɵɵelementStart(109, "b");
                        i0.ɵɵtext(110, "stretch");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(111, "mat-card", 36)(112, "mat-card-content", 9)(113, "span", 37)(114, "div", 6)(115, "b");
                        i0.ɵɵtext(116, "flex-direction:column; justify-content:flex-start; align-items:center");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(117, "div", 38);
                        i0.ɵɵelementContainerStart(118, 10);
                        i0.ɵɵelementStart(119, "mat-form-field", 39)(120, "mat-label");
                        i0.ɵɵtext(121, "First Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(122, "input", 40);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(123, "mat-form-field", 41)(124, "mat-label");
                        i0.ɵɵtext(125, "DOB");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(126, "input", 42);
                        i0.ɵɵlistener("focus", function dibexLayoutFlexComponent_Template_input_focus_126_listener() { i0.ɵɵrestoreView(_r6); const _r3 = i0.ɵɵreference(129); return i0.ɵɵresetView(_r3.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(127, "mat-datepicker-toggle", 19)(128, "mat-datepicker", null, 43);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(130, "button", 44)(131, "span", 22);
                        i0.ɵɵtext(132, "Do Nothing");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(133, "mat-card", 45)(134, "mat-card-content", 9)(135, "span", 46)(136, "div", 6)(137, "b");
                        i0.ɵɵtext(138, "flex-direction:row; justify-content:flex-end; align-items:stretch");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(139, "div", 47);
                        i0.ɵɵelementContainerStart(140, 10);
                        i0.ɵɵelement(141, "span", 48);
                        i0.ɵɵpipe(142, "safeHtml");
                        i0.ɵɵelement(143, "span", 49);
                        i0.ɵɵpipe(144, "safeHtml");
                        i0.ɵɵelement(145, "span", 50);
                        i0.ɵɵpipe(146, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(147, "span", 51);
                        i0.ɵɵpipe(148, "safeHtml");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(149, "span", 52)(150, "div", 6);
                        i0.ɵɵtext(151, " The following three are rarely used in database applications.");
                        i0.ɵɵelement(152, "br");
                        i0.ɵɵtext(153, "The total amount of white space is calculated and then distributed between and/or around elements. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(154, "mat-card", 53)(155, "mat-card-content", 9)(156, "span", 54)(157, "div", 6)(158, "b");
                        i0.ɵɵtext(159, "flex-direction:row; justify-content:space-around; align-items:flex-start");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(160, "div", 55);
                        i0.ɵɵelementContainerStart(161, 10);
                        i0.ɵɵelement(162, "span", 56);
                        i0.ɵɵpipe(163, "safeHtml");
                        i0.ɵɵelement(164, "button", 57)(165, "button", 58);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(166, "mat-card", 59)(167, "mat-card-content", 9)(168, "span", 60)(169, "div", 6)(170, "b");
                        i0.ɵɵtext(171, "flex-direction:row; justify-content:space-between; align-items: center");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(172, "div", 61);
                        i0.ɵɵelementContainerStart(173, 10);
                        i0.ɵɵelement(174, "span", 62);
                        i0.ɵɵpipe(175, "safeHtml");
                        i0.ɵɵelement(176, "span", 63);
                        i0.ɵɵpipe(177, "safeHtml");
                        i0.ɵɵelement(178, "span", 64);
                        i0.ɵɵpipe(179, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(180, "mat-card", 65)(181, "mat-card-content", 9)(182, "span", 66)(183, "div", 6)(184, "b");
                        i0.ɵɵtext(185, "flex-direction:row; justify-content:space-evenly; align-items: flex-end");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(186, "div", 67);
                        i0.ɵɵelementContainerStart(187, 10);
                        i0.ɵɵelement(188, "span", 68);
                        i0.ɵɵpipe(189, "safeHtml");
                        i0.ɵɵelement(190, "span", 69);
                        i0.ɵɵpipe(191, "safeHtml");
                        i0.ɵɵelement(192, "span", 70);
                        i0.ɵɵpipe(193, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(194, "span", 71);
                        i0.ɵɵpipe(195, "safeHtml");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(196, "span", 72)(197, "div", 6);
                        i0.ɵɵelement(198, "br");
                        i0.ɵɵtext(199, "The ");
                        i0.ɵɵelementStart(200, "b");
                        i0.ɵɵtext(201, "baseline");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(202, " option was made for aligning text with different fonts and font-sizes on the same 'baseline'; also rarely used in database applications. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(203, "mat-card", 73)(204, "mat-card-content", 74)(205, "div", 75);
                        i0.ɵɵelementContainerStart(206, 10);
                        i0.ɵɵelementStart(207, "span", 76)(208, "div", 6)(209, "b");
                        i0.ɵɵtext(210, "flex-direction:row; justify-content:flex-start; align-items:baseline");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(211, "div", 77);
                        i0.ɵɵelementContainerStart(212, 10);
                        i0.ɵɵelement(213, "span", 78);
                        i0.ɵɵpipe(214, "safeHtml");
                        i0.ɵɵelement(215, "span", 79);
                        i0.ɵɵpipe(216, "safeHtml");
                        i0.ɵɵelement(217, "span", 80);
                        i0.ɵɵpipe(218, "safeHtml");
                        i0.ɵɵelement(219, "span", 81);
                        i0.ɵɵpipe(220, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(221, "div", 82);
                        i0.ɵɵelementContainerStart(222, 10);
                        i0.ɵɵelementStart(223, "span", 83)(224, "div", 6);
                        i0.ɵɵtext(225, " As opposed to: ");
                        i0.ɵɵelementStart(226, "b");
                        i0.ɵɵtext(227, "flex-direction:row; justify-content:flex-start; align-items:flex-start");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(228, "div", 84);
                        i0.ɵɵelementContainerStart(229, 10);
                        i0.ɵɵelement(230, "span", 85);
                        i0.ɵɵpipe(231, "safeHtml");
                        i0.ɵɵelement(232, "span", 86);
                        i0.ɵɵpipe(233, "safeHtml");
                        i0.ɵɵelement(234, "span", 87);
                        i0.ɵɵpipe(235, "safeHtml");
                        i0.ɵɵelement(236, "span", 88);
                        i0.ɵɵpipe(237, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(238, "mat-card", 89)(239, "mat-card-header")(240, "mat-card-title");
                        i0.ɵɵtext(241, "Gap (set on parent item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(242, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(243, 10);
                        i0.ɵɵelementStart(244, "span", 90)(245, "div", 6)(246, "b");
                        i0.ɵɵtext(247, "Gap (CSS: gap)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(248, "br");
                        i0.ɵɵtext(249, "Set a gap between items in the main direction.");
                        i0.ɵɵelement(250, "br");
                        i0.ɵɵtext(251, "The size of the gap can be set using % | px | vw | vh.");
                        i0.ɵɵelement(252, "br");
                        i0.ɵɵtext(253, "Option 1: single value for both directions, eg. ");
                        i0.ɵɵelementStart(254, "b");
                        i0.ɵɵtext(255, "gap:10px");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(256, "br");
                        i0.ɵɵtext(257, "Option 2: gap-between-rows gap-between-columns, eg. ");
                        i0.ɵɵelementStart(258, "b");
                        i0.ɵɵtext(259, "gap:10vh 5%");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(260, "i");
                        i0.ɵɵtext(261, "see ");
                        i0.ɵɵelementStart(262, "b");
                        i0.ɵɵtext(263, "wrap");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(264, " below...");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(265, "mat-card", 91)(266, "mat-card-content", 9)(267, "span", 92)(268, "div", 6)(269, "b");
                        i0.ɵɵtext(270, "flex-direction:row; gap:10px");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(271, "div", 93);
                        i0.ɵɵelementContainerStart(272, 10);
                        i0.ɵɵelementStart(273, "mat-form-field", 94)(274, "mat-label");
                        i0.ɵɵtext(275, "First Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(276, "input", 95);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(277, "mat-form-field", 96)(278, "mat-label");
                        i0.ɵɵtext(279, "DOB");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(280, "input", 97);
                        i0.ɵɵlistener("focus", function dibexLayoutFlexComponent_Template_input_focus_280_listener() { i0.ɵɵrestoreView(_r6); const _r4 = i0.ɵɵreference(283); return i0.ɵɵresetView(_r4.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(281, "mat-datepicker-toggle", 19)(282, "mat-datepicker", null, 98);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(284, "button", 99)(285, "span", 22);
                        i0.ɵɵtext(286, "Do Nothing");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(287, "mat-card", 100)(288, "mat-card-header")(289, "mat-card-title");
                        i0.ɵɵtext(290, "Wrap (set on parent item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(291, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(292, 10);
                        i0.ɵɵelementStart(293, "span", 101)(294, "div", 6)(295, "b");
                        i0.ɵɵtext(296, "Wrap (CSS: flex-wrap)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(297, "br");
                        i0.ɵɵtext(298, "Allow child items to wrap to the next row/column when they don't fit inside the parent item.\nOptions: ");
                        i0.ɵɵelementStart(299, "b");
                        i0.ɵɵtext(300, "wrap | nowrap | wrap-reverse");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(301, "br");
                        i0.ɵɵelementStart(302, "b");
                        i0.ɵɵtext(303, "NOTE:");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(304, "\u00A0 this is often used to build responsive websites, where for eg. sections that are in a row are automatically forced below one another on smaller screens. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(305, "div", 102);
                        i0.ɵɵelementContainerStart(306, 10);
                        i0.ɵɵelementStart(307, "mat-card", 103)(308, "mat-card-content", 104)(309, "span", 105)(310, "div", 6)(311, "b");
                        i0.ɵɵtext(312, "width: 500px; flex-direction:row; flex-wrap:nowrap; gap:10px");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(313, "div", 106);
                        i0.ɵɵelementContainerStart(314, 10);
                        i0.ɵɵelementStart(315, "button", 107)(316, "span", 22);
                        i0.ɵɵtext(317, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(318, "button", 108)(319, "span", 22);
                        i0.ɵɵtext(320, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(321, "button", 109)(322, "span", 22);
                        i0.ɵɵtext(323, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(324, "button", 110)(325, "span", 22);
                        i0.ɵɵtext(326, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(327, "button", 111)(328, "span", 22);
                        i0.ɵɵtext(329, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(330, "span", 112);
                        i0.ɵɵpipe(331, "safeHtml");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(332, "mat-card", 113)(333, "mat-card-content", 104)(334, "span", 114)(335, "div", 6)(336, "b");
                        i0.ɵɵtext(337, "width: 500px; flex-direction:row; flex-wrap:wrap; gap:20px 5px");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(338, "div", 115);
                        i0.ɵɵelementContainerStart(339, 10);
                        i0.ɵɵelementStart(340, "button", 116)(341, "span", 22);
                        i0.ɵɵtext(342, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(343, "button", 117)(344, "span", 22);
                        i0.ɵɵtext(345, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(346, "button", 118)(347, "span", 22);
                        i0.ɵɵtext(348, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(349, "button", 119)(350, "span", 22);
                        i0.ɵɵtext(351, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(352, "button", 120)(353, "span", 22);
                        i0.ɵɵtext(354, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(355, "mat-card", 121)(356, "mat-card-header")(357, "mat-card-title");
                        i0.ɵɵtext(358, "Align Content (set on parent item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(359, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(360, 10);
                        i0.ɵɵelementStart(361, "span", 122)(362, "div", 6)(363, "b");
                        i0.ɵɵtext(364, "Align Content (CSS: align-content)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(365, "br");
                        i0.ɵɵtext(366, "Align lines of items (only) when ");
                        i0.ɵɵelementStart(367, "b");
                        i0.ɵɵtext(368, "wrap");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(369, " causes extra lines, similar to how justify-content aligns individual items within the main-axis. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(370, "mat-card", 123)(371, "mat-card-content")(372, "span", 124)(373, "div", 6)(374, "b");
                        i0.ɵɵtext(375, "width: 500px; height: 200px; align-content:flex-end; flex-direction:row; flex-wrap:wrap; gap:10px");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(376, "div", 125);
                        i0.ɵɵelementContainerStart(377, 10);
                        i0.ɵɵelementStart(378, "button", 126)(379, "span", 22);
                        i0.ɵɵtext(380, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(381, "button", 127)(382, "span", 22);
                        i0.ɵɵtext(383, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(384, "button", 128)(385, "span", 22);
                        i0.ɵɵtext(386, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(387, "button", 129)(388, "span", 22);
                        i0.ɵɵtext(389, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(390, "button", 130)(391, "span", 22);
                        i0.ɵɵtext(392, "width: 200px");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(393, "span", 131)(394, "div", 6)(395, "b");
                        i0.ɵɵtext(396, "Note, the following directives are all set in attributes of child items.");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(397, "mat-card", 132)(398, "mat-card-header")(399, "mat-card-title");
                        i0.ɵɵtext(400, "Flex Base, Grow & Shrink (set on child item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(401, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(402, 10);
                        i0.ɵɵelementStart(403, "span", 133)(404, "div", 6)(405, "b");
                        i0.ɵɵtext(406, "Flex Grow, Flex Shrink, Flex Base (CSS: flex)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(407, "br");
                        i0.ɵɵtext(408, "Sizes a single element in the main direction set by its parent, steered by the three arguments:");
                        i0.ɵɵelement(409, "br");
                        i0.ɵɵelementStart(410, "b");
                        i0.ɵɵtext(411, "flex: grow shrink base");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(412, "br")(413, "br");
                        i0.ɵɵelementStart(414, "b");
                        i0.ɵɵtext(415, "base");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(416, " - the base size of the item along the main direction.");
                        i0.ɵɵelement(417, "br");
                        i0.ɵɵelementStart(418, "b");
                        i0.ɵɵtext(419, "grow");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(420, " and ");
                        i0.ɵɵelementStart(421, "b");
                        i0.ɵɵtext(422, "shrink");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(423, " - proportional decimal values/weights by which items grow to fill available space, or shrink to keep all items within parent borders.");
                        i0.ɵɵelement(424, "br")(425, "br");
                        i0.ɵɵelementStart(426, "b");
                        i0.ɵɵtext(427, "base");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(428, " can be one of the following:");
                        i0.ɵɵelementStart(429, "ul")(430, "li");
                        i0.ɵɵtext(431, "a fixed value measured by ");
                        i0.ɵɵelementStart(432, "b");
                        i0.ɵɵtext(433, "px | % | calc | em | rem | vw | vh");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(434, "li")(435, "b");
                        i0.ɵɵtext(436, "auto");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(437, " - use the item's width/height property (depending on main direction)");
                        i0.ɵɵelement(438, "br");
                        i0.ɵɵtext(439, "if the corresponding width/height value is also set to ");
                        i0.ɵɵelementStart(440, "b");
                        i0.ɵɵtext(441, "auto");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(442, " then the item's content determines the base value");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(443, "b");
                        i0.ɵɵtext(444, "How does it work?");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(445, "br")(446, "br");
                        i0.ɵɵtext(447, "Firstly, items are given their base width.");
                        i0.ɵɵelement(448, "br");
                        i0.ɵɵtext(449, "Then, if there is space left within the parent,");
                        i0.ɵɵelement(450, "br");
                        i0.ɵɵtext(451, "\u00A0\u00A0 - each item with ");
                        i0.ɵɵelementStart(452, "b");
                        i0.ɵɵtext(453, "grow");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(454, " not 0 is allocated available space in proportion to this relative value");
                        i0.ɵɵelement(455, "br");
                        i0.ɵɵtext(456, "\u00A0\u00A0 - ie, 'fill space if available, proportionally'");
                        i0.ɵɵelement(457, "br");
                        i0.ɵɵtext(458, "else if items overlap their parent\u2019s borders, ");
                        i0.ɵɵelement(459, "br");
                        i0.ɵɵtext(460, "\u00A0\u00A0 - each item with ");
                        i0.ɵɵelementStart(461, "b");
                        i0.ɵɵtext(462, "shrink");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(463, " not 0 and ");
                        i0.ɵɵelementStart(464, "b");
                        i0.ɵɵtext(465, "grow");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(466, " = 0 is shrunk proportionally to keep all items within borders.");
                        i0.ɵɵelement(467, "br");
                        i0.ɵɵtext(468, "\u00A0\u00A0 - ie, 'shrink if necessary, proportionally'");
                        i0.ɵɵelement(469, "br")(470, "br");
                        i0.ɵɵelementStart(471, "b");
                        i0.ɵɵtext(472, "Notes:");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(473, "ul")(474, "li");
                        i0.ɵɵtext(475, "The weights are relative to other items\u2019 ");
                        i0.ɵɵelementStart(476, "b");
                        i0.ɵɵtext(477, "grow");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(478, " and ");
                        i0.ɵɵelementStart(479, "b");
                        i0.ɵɵtext(480, "shrink");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(481, " values.");
                        i0.ɵɵelement(482, "br");
                        i0.ɵɵtext(483, "If for eg. item A\u2019s ");
                        i0.ɵɵelementStart(484, "b");
                        i0.ɵɵtext(485, "grow");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(486, " value is 1, B\u2019s is 2, then for each 100px extra allocated to A, B gets 200px. Same for ");
                        i0.ɵɵelementStart(487, "b");
                        i0.ɵɵtext(488, "shrink");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(489, ".");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(490, "li");
                        i0.ɵɵtext(491, "If any of base, grow or shrink values are specified in Dropinbase, then defaults are set for other values that are not specified:");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(492, "ul")(493, "li");
                        i0.ɵɵtext(494, "The default for ");
                        i0.ɵɵelementStart(495, "b");
                        i0.ɵɵtext(496, "grow");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(497, " is 0");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(498, "li");
                        i0.ɵɵtext(499, "The default for ");
                        i0.ɵɵelementStart(500, "b");
                        i0.ɵɵtext(501, "shrink");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(502, " is 1");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(503, "li");
                        i0.ɵɵtext(504, "The default for ");
                        i0.ɵɵelementStart(505, "b");
                        i0.ɵɵtext(506, "base");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(507, " is 0%");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(508, "li");
                        i0.ɵɵtext(509, "Setting an item's ");
                        i0.ɵɵelementStart(510, "b");
                        i0.ɵɵtext(511, "width/height");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(512, " has no effect unless base is ");
                        i0.ɵɵelementStart(513, "b");
                        i0.ɵɵtext(514, "auto");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(515, ".");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(516, "li");
                        i0.ɵɵtext(517, "Setting ");
                        i0.ɵɵelementStart(518, "b");
                        i0.ɵɵtext(519, "max-width/max-height/min-width/min-height");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(520, " prevents it from growing/shrinking further.");
                        i0.ɵɵelement(521, "br");
                        i0.ɵɵtext(522, "If a group of large items all have ");
                        i0.ɵɵelementStart(523, "b");
                        i0.ɵɵtext(524, "shrink");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(525, " = 0, they will overlap their parent's borders.");
                        i0.ɵɵelement(526, "br");
                        i0.ɵɵtext(527, "You could set the parent\u2019s css overflow attribute to make scroll bars appear (overflow:auto),or hide the overlapping content (overflow:hidden).");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(528, "br");
                        i0.ɵɵtext(529, "More info: ");
                        i0.ɵɵelementStart(530, "a", 134);
                        i0.ɵɵtext(531, "https://developer.mozilla.org/en-US/docs/Web/CSS/flex");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(532, "mat-card", 135)(533, "mat-card-content", 104)(534, "span", 136)(535, "div", 6)(536, "b");
                        i0.ɵɵtext(537, "Note, all examples below are valid for flex-direction:column as well");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(538, "div", 137);
                        i0.ɵɵelementContainerStart(539, 10);
                        i0.ɵɵelement(540, "span", 138);
                        i0.ɵɵpipe(541, "safeHtml");
                        i0.ɵɵelement(542, "span", 139);
                        i0.ɵɵpipe(543, "safeHtml");
                        i0.ɵɵelement(544, "span", 140);
                        i0.ɵɵpipe(545, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(546, "div", 141);
                        i0.ɵɵelementContainerStart(547, 10);
                        i0.ɵɵelement(548, "span", 142);
                        i0.ɵɵpipe(549, "safeHtml");
                        i0.ɵɵelement(550, "span", 143);
                        i0.ɵɵpipe(551, "safeHtml");
                        i0.ɵɵelement(552, "span", 144);
                        i0.ɵɵpipe(553, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(554, "div", 145);
                        i0.ɵɵelementContainerStart(555, 10);
                        i0.ɵɵelement(556, "span", 146);
                        i0.ɵɵpipe(557, "safeHtml");
                        i0.ɵɵelement(558, "span", 147);
                        i0.ɵɵpipe(559, "safeHtml");
                        i0.ɵɵelement(560, "span", 148);
                        i0.ɵɵpipe(561, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(562, "mat-card", 149)(563, "mat-card-header")(564, "mat-card-title");
                        i0.ɵɵtext(565, "Align Self (set on child item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(566, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(567, 10);
                        i0.ɵɵelementStart(568, "span", 150)(569, "div", 6)(570, "b");
                        i0.ɵɵtext(571, "Align Self (CSS: align-self)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(572, "br");
                        i0.ɵɵtext(573, "This setting on the item overrides the ");
                        i0.ɵɵelementStart(574, "b");
                        i0.ɵɵtext(575, "cross-axis");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(576, " alignment set by ");
                        i0.ɵɵelementStart(577, "b");
                        i0.ɵɵtext(578, "Align Cross-X (align-items)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(579, " on the parent, for this item only.");
                        i0.ɵɵelement(580, "br");
                        i0.ɵɵtext(581, "Options: flex-start | center | flex-end | baseline | stretch.");
                        i0.ɵɵelement(582, "br");
                        i0.ɵɵtext(583, "More info: ");
                        i0.ɵɵelementStart(584, "a", 151);
                        i0.ɵɵtext(585, "https://developer.mozilla.org/en-US/docs/Web/CSS/align-self");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(586, "mat-card", 152)(587, "mat-card-content", 9)(588, "span", 153)(589, "div", 6);
                        i0.ɵɵtext(590, " Default child item alignment: flex-start");
                        i0.ɵɵelement(591, "br");
                        i0.ɵɵtext(592, "On First Name: ");
                        i0.ɵɵelementStart(593, "b");
                        i0.ɵɵtext(594, "align-self:flex-end");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(595, "br");
                        i0.ɵɵtext(596, "On Books: ");
                        i0.ɵɵelementStart(597, "b");
                        i0.ɵɵtext(598, "align-self:stretch");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(599, "div", 154);
                        i0.ɵɵelementContainerStart(600, 10);
                        i0.ɵɵelementStart(601, "mat-form-field", 155)(602, "mat-label");
                        i0.ɵɵtext(603, "First Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(604, "input", 156);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(605, "mat-form-field", 157)(606, "mat-label");
                        i0.ɵɵtext(607, "DOB");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(608, "input", 158);
                        i0.ɵɵlistener("focus", function dibexLayoutFlexComponent_Template_input_focus_608_listener() { i0.ɵɵrestoreView(_r6); const _r5 = i0.ɵɵreference(611); return i0.ɵɵresetView(_r5.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(609, "mat-datepicker-toggle", 19)(610, "mat-datepicker", null, 159);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(612, "span", 160);
                        i0.ɵɵpipe(613, "safeHtml");
                        i0.ɵɵelement(614, "span", 161);
                        i0.ɵɵpipe(615, "safeHtml");
                        i0.ɵɵelement(616, "span", 162);
                        i0.ɵɵpipe(617, "safeHtml");
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(618, "mat-card", 163)(619, "mat-card-header")(620, "mat-card-title");
                        i0.ɵɵtext(621, "Order (set on child item)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(622, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(623, 10);
                        i0.ɵɵelementStart(624, "span", 164)(625, "div", 6)(626, "b");
                        i0.ɵɵtext(627, "Order (CSS: order)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(628, "br");
                        i0.ɵɵtext(629, "Override the default/source order of items. ");
                        i0.ɵɵelement(630, "br");
                        i0.ɵɵtext(631, "Items with a lower order number come first.");
                        i0.ɵɵelement(632, "br");
                        i0.ɵɵtext(633, "For items with the same order no, priority is given to the source order.");
                        i0.ɵɵelement(634, "br");
                        i0.ɵɵtext(635, "More info: ");
                        i0.ɵɵelementStart(636, "a", 165);
                        i0.ɵɵtext(637, "https://developer.mozilla.org/en-US/docs/Web/CSS/order");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(638, "mat-card", 166)(639, "mat-card-content", 9)(640, "div", 167);
                        i0.ɵɵelementContainerStart(641, 10);
                        i0.ɵɵelementStart(642, "button", 168)(643, "span", 22);
                        i0.ɵɵtext(644, "3");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(645, "button", 169)(646, "span", 22);
                        i0.ɵɵtext(647, "-1");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(648, "button", 170)(649, "span", 22);
                        i0.ɵɵtext(650, "0");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(651, "button", 171)(652, "span", 22);
                        i0.ɵɵtext(653, "(not set)");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(654, "button", 172)(655, "span", 22);
                        i0.ɵɵtext(656, "-2");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(657, "button", 173)(658, "span", 22);
                        i0.ɵɵtext(659, "1");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(660, "button", 174)(661, "span", 22);
                        i0.ɵɵtext(662, "1");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(663, "mat-card", 175)(664, "mat-card-header")(665, "mat-card-title");
                        i0.ɵɵtext(666, "In Practice");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(667, "mat-card-content", 9);
                        i0.ɵɵelementContainerStart(668, 10);
                        i0.ɵɵelementStart(669, "span", 176)(670, "div", 6)(671, "b");
                        i0.ɵɵtext(672, "Using the above, we can easily construct layouts, with the added benefit of auto-sizing for different window sizes");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(673, "div", 177);
                        i0.ɵɵelementContainer(674, 178);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                    } if (rf & 2) {
                        const _r1 = i0.ɵɵreference(45);
                        const _r2 = i0.ɵɵreference(69);
                        const _r3 = i0.ɵɵreference(129);
                        const _r4 = i0.ɵɵreference(283);
                        const _r5 = i0.ɵɵreference(611);
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(191, _c0, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4747");
                        i0.ɵɵadvance(14);
                        i0.ɵɵproperty("dibPort", "4752");
                        i0.ɵɵadvance(16);
                        i0.ɵɵproperty("dibPort", "4759");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "First Name");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matDatepicker", _r1)("placeholder", "DOB");
                        i0.ɵɵattribute("aria-label", "DOB");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "Do Nothing");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(50, 121, ctx.getHtml("span2")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(9);
                        i0.ɵɵproperty("dibPort", "4754");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "First Name");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matDatepicker", _r2)("placeholder", "DOB");
                        i0.ɵɵattribute("aria-label", "DOB");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r2);
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "Do Nothing");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(74, 123, ctx.getHtml("span1")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("dibPort", "4766");
                        i0.ɵɵadvance(38);
                        i0.ɵɵproperty("dibPort", "4773");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "First Name");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matDatepicker", _r3)("placeholder", "DOB");
                        i0.ɵɵattribute("aria-label", "DOB");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r3);
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "Do Nothing");
                        i0.ɵɵadvance(10);
                        i0.ɵɵproperty("dibPort", "4770");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(142, 125, ctx.getHtml("element1")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(144, 127, ctx.getHtml("element2")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(146, 129, ctx.getHtml("element3")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(148, 131, ctx.getHtml("span")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(14);
                        i0.ɵɵproperty("dibPort", "4791");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(163, 133, ctx.getHtml("element4")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(11);
                        i0.ɵɵproperty("dibPort", "4785");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(175, 135, ctx.getHtml("element7")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(177, 137, ctx.getHtml("element8")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(179, 139, ctx.getHtml("element9")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(9);
                        i0.ɵɵproperty("dibPort", "4797");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(189, 141, ctx.getHtml("element")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(191, 143, ctx.getHtml("element10")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(193, 145, ctx.getHtml("element11")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(195, 147, ctx.getHtml("span3")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(12);
                        i0.ɵɵproperty("dibPort", "4839");
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("dibPort", "4813");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(214, 149, ctx.getHtml("textNormal")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(216, 151, ctx.getHtml("textBig")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(218, 153, ctx.getHtml("textSmall")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(220, 155, ctx.getHtml("textNormal2")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4840");
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("dibPort", "4842");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(231, 157, ctx.getHtml("textNormal1")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(233, 159, ctx.getHtml("textBig1")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(235, 161, ctx.getHtml("textSmall1")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(237, 163, ctx.getHtml("textNormal3")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("dibPort", "4801");
                        i0.ɵɵadvance(29);
                        i0.ɵɵproperty("dibPort", "4805");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "First Name");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matDatepicker", _r4)("placeholder", "DOB");
                        i0.ɵɵattribute("aria-label", "DOB");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r4);
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "Do Nothing");
                        i0.ɵɵadvance(8);
                        i0.ɵɵproperty("dibPort", "4820");
                        i0.ɵɵadvance(14);
                        i0.ɵɵproperty("dibPort", "4950");
                        i0.ɵɵadvance(8);
                        i0.ɵɵproperty("dibPort", "4944");
                        i0.ɵɵadvance(1);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(331, 165, ctx.getHtml("span5")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(9);
                        i0.ɵɵproperty("dibPort", "4824");
                        i0.ɵɵadvance(1);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(8);
                        i0.ɵɵproperty("dibPort", "4954");
                        i0.ɵɵadvance(17);
                        i0.ɵɵproperty("dibPort", "4958");
                        i0.ɵɵadvance(1);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "width: 200px");
                        i0.ɵɵadvance(12);
                        i0.ɵɵproperty("dibPort", "4847");
                        i0.ɵɵadvance(137);
                        i0.ɵɵproperty("dibPort", "4859");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(541, 167, ctx.getHtml("span1A")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(543, 169, ctx.getHtml("span1B")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(545, 171, ctx.getHtml("span1C")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4850");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(549, 173, ctx.getHtml("span2A")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(551, 175, ctx.getHtml("span2B")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(553, 177, ctx.getHtml("span2C")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4855");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(557, 179, ctx.getHtml("span3A")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(559, 181, ctx.getHtml("span3B")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(561, 183, ctx.getHtml("span3C")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("dibPort", "4826");
                        i0.ɵɵadvance(33);
                        i0.ɵɵproperty("dibPort", "4830");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "First Name");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matDatepicker", _r5)("placeholder", "DOB");
                        i0.ɵɵattribute("aria-label", "DOB");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r5);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(613, 185, ctx.getHtml("element12")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(615, 187, ctx.getHtml("element13")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(617, 189, ctx.getHtml("element14")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("dibPort", "4834");
                        i0.ɵɵadvance(18);
                        i0.ɵɵproperty("dibPort", "4837");
                        i0.ɵɵadvance(1);
                        i0.ɵɵattribute("aria-label", "3");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "-1");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "0");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "(not set)");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "-2");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "1");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "1");
                        i0.ɵɵadvance(8);
                        i0.ɵɵproperty("dibPort", "4863");
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("dibPort", "4878");
                    } }, dependencies: [i3.NgClass, i3.NgIf, i4.DefaultClassDirective, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, i2.DibPortDirective, i2.DibRemoveFocusDirective, i6.MatButton, i7.MatDatepicker, i7.MatDatepickerInput, i7.MatDatepickerToggle, i8.MatFormField, i8.MatLabel, i8.MatPrefix, i9.MatInput, i10.MatProgressBar, i11.MatCard, i11.MatCardContent, i11.MatCardHeader, i11.MatCardTitle, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexLayoutFlex'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexLayoutFlexComponent.prototype, "reloadContainer", null);
            exports_1("dibexLayoutFlexComponent", dibexLayoutFlexComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexLayoutFlexComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-layout-flex', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 auto;  " id=ci4747 dibComponent=subcontainer   ><ng-container [dibPort]="'4747'" parentContainerName=dibexLayoutFlex  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><span  id=ci5053 dibComponent=comment   style="  margin: 10px;" ><div class=dib-comment ><b>NOTE, this tutorial together with the design of this container showcases how FlexBox is implemented within DIB and provides basic guidelines.</b><br>Use the links under Resources above to learn more about Flexbox. Recommended starting place: <a target='_blank' href='https://yoksel.github.io/flex-cheatsheet/#section-flex-basis'>https://yoksel.github.io/flex-cheatsheet/#section-flex-basis</a></div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4752 dibComponent=card  ><mat-card-header ><mat-card-title >Direction (set on parent item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4752'" ><span  id=ci4753 dibComponent=comment   style="  " ><div class=dib-comment ><b>Direction (CSS: flex-direction)</b><br>A parent layout item, like a div or card, can have their (direct/immediate) children<br>arranged either horizontally (row) or vertically (column) within.  </div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4763 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4758 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:row</b></div></span><div   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  flex: 1 1 0%;  border: 1px dashed orange" id=ci4759 dibComponent=div  ><ng-container [dibPort]="'4759'" ><mat-form-field id=ci4760 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=firstName1   name=firstName1   [attr.aria-label]="'First Name'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4761 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>DOB</mat-label><input   matInput [matDatepicker]="datePicker4761"   [placeholder]="'DOB'"   formControlName=dob1   name=dob1   [attr.aria-label]="'DOB'"  (focus)="datePicker4761.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker4761" ></mat-datepicker-toggle><mat-datepicker #datePicker4761 ></mat-datepicker></mat-form-field><button  mat-raised-button color=primary  id=ci4762 dibComponent=button   style="  "  [attr.aria-label]="'Do Nothing'"  type=button  ><span class=dibButtonCaption >Do Nothing</span></button></ng-container></div><span  id=ci4782 dibComponent=span   style="  margin:10px 0px !important;   color: orange; font-weight:bold"  [innerHtml]="getHtml('span2') | safeHtml" ></span></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4765 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4764 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:column</b></div></span><div   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  flex: 1 1 0%;  border: 1px dashed orange" id=ci4754 dibComponent=div  ><ng-container [dibPort]="'4754'" ><mat-form-field id=ci4755 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=firstName   name=firstName   [attr.aria-label]="'First Name'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4756 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>DOB</mat-label><input   matInput [matDatepicker]="datePicker4756"   [placeholder]="'DOB'"   formControlName=dob   name=dob   [attr.aria-label]="'DOB'"  (focus)="datePicker4756.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker4756" ></mat-datepicker-toggle><mat-datepicker #datePicker4756 ></mat-datepicker></mat-form-field><button  mat-raised-button color=primary  id=ci4757 dibComponent=button   style="  "  [attr.aria-label]="'Do Nothing'"  type=button  ><span class=dibButtonCaption >Do Nothing</span></button></ng-container></div><span  id=ci4781 dibComponent=span   style="  margin:10px 0px !important;   "  [innerHtml]="getHtml('span1') | safeHtml" ></span></mat-card-content></mat-card></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4766 dibComponent=card  ><mat-card-header ><mat-card-title >Align Main-X / Align Cross-X (set on parent item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4766'" ><span  id=ci4767 dibComponent=comment   style="  " ><div class=dib-comment ><br><b>Align-Main-X (CSS: justify-content)</b><br>Along the main axis/direction set by <b>flex-direction</b>(see above),the position of child items can be set with one of:<br><b>flex-start | center | flex-end | space-around | space-between | space-evenly</b><br>The default if not specified is <b>flex-start</b><br><br><b>Align-cross-X (CSS: align-items)</b><br>Along the cross/perpendicular axis, child items can be positioned using one of:<br><b>flex-start | center | flex-end | stretch | baseline</b><br>The default if not specified is <b>stretch</b></div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4772 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4777 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:column; justify-content:flex-start; align-items:center</b></div></span><div   style="  width:auto !important;   height:300px !important;   display:flex; flex-direction: column;  justify-content: flex-start;  align-items: center;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4773 dibComponent=div  ><ng-container [dibPort]="'4773'" ><mat-form-field id=ci4774 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=firstName2   name=firstName2   [attr.aria-label]="'First Name'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4775 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>DOB</mat-label><input   matInput [matDatepicker]="datePicker4775"   [placeholder]="'DOB'"   formControlName=dob2   name=dob2   [attr.aria-label]="'DOB'"  (focus)="datePicker4775.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker4775" ></mat-datepicker-toggle><mat-datepicker #datePicker4775 ></mat-datepicker></mat-form-field><button  mat-raised-button color=primary  id=ci4776 dibComponent=button   style="  "  [attr.aria-label]="'Do Nothing'"  type=button  ><span class=dibButtonCaption >Do Nothing</span></button></ng-container></div></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4768 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4769 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:row; justify-content:flex-end; align-items:stretch</b></div></span><div   style="  width:auto !important;   height:150px !important;   display:flex; flex-direction: row;  justify-content: flex-end;  align-items: stretch;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4770 dibComponent=div  ><ng-container [dibPort]="'4770'" ><span  id=ci4771 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element1') | safeHtml" ></span><span  id=ci4778 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element2') | safeHtml" ></span><span  id=ci4779 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element3') | safeHtml" ></span></ng-container></div><span  id=ci4780 dibComponent=span   style="  margin:10px 0px !important;   "  [innerHtml]="getHtml('span') | safeHtml" ></span></mat-card-content></mat-card><span  id=ci4810 dibComponent=comment   style="  " ><div class=dib-comment > The following three are rarely used in database applications.<br>The total amount of white space is calculated and then distributed between and/or around elements.  </div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4789 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4790 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:row; justify-content:space-around; align-items:flex-start</b></div></span><div   style="  width:auto !important;   height:100px !important;   display:flex; flex-direction: row;  justify-content: space-around;  align-items: flex-start;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4791 dibComponent=div  ><ng-container [dibPort]="'4791'" ><span  id=ci4792 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element4') | safeHtml" ></span><button id=ci4793 dibComponent=button   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  type=button  ></button><button id=ci4794 dibComponent=button   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  type=button  ></button></ng-container></div></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4783 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4784 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:row; justify-content:space-between; align-items: center</b></div></span><div   style="  width:auto !important;   height:100px !important;   display:flex; flex-direction: row;  justify-content: space-between;  align-items: center;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4785 dibComponent=div  ><ng-container [dibPort]="'4785'" ><span  id=ci4786 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element7') | safeHtml" ></span><span  id=ci4787 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element8') | safeHtml" ></span><span  id=ci4788 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element9') | safeHtml" ></span></ng-container></div></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4795 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4796 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:row; justify-content:space-evenly; align-items: flex-end</b></div></span><div   style="  width:auto !important;   height:100px !important;   display:flex; flex-direction: row;  justify-content: space-evenly;  align-items: flex-end;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4797 dibComponent=div  ><ng-container [dibPort]="'4797'" ><span  id=ci4798 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element') | safeHtml" ></span><span  id=ci4799 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element10') | safeHtml" ></span><span  id=ci4800 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element11') | safeHtml" ></span></ng-container></div><span  id=ci4809 dibComponent=span   style="  margin:10px 0px !important;   "  [innerHtml]="getHtml('span3') | safeHtml" ></span></mat-card-content></mat-card><span  id=ci4816 dibComponent=comment   style="  " ><div class=dib-comment ><br>The <b>baseline</b> option was made for aligning text with different fonts and font-sizes on the same 'baseline'; also rarely used in database applications.  </div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4811 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: row;  gap: 20px;  flex-wrap: nowrap;"  ><div   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci4839 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4839'" ><span  id=ci4812 dibComponent=comment   style="  align-self: flex-start;  " ><div class=dib-comment ><b>flex-direction:row; justify-content:flex-start; align-items:baseline</b></div></span><div   style="  width:auto !important;   height:100px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: baseline;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4813 dibComponent=div  ><ng-container [dibPort]="'4813'" ><span  id=ci4814 dibComponent=span   style="  "  [innerHtml]="getHtml('textNormal') | safeHtml" ></span><span  id=ci4815 dibComponent=span   style="  font-size:2.5em;font-family:cursive;"  [innerHtml]="getHtml('textBig') | safeHtml" ></span><span  id=ci4817 dibComponent=span   style="  font-size:0.7em;"  [innerHtml]="getHtml('textSmall') | safeHtml" ></span><span  id=ci4818 dibComponent=span   style="  "  [innerHtml]="getHtml('textNormal2') | safeHtml" ></span></ng-container></div></ng-container></div><div   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci4840 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4840'" ><span  id=ci4841 dibComponent=comment   style="  align-self: flex-start;  " ><div class=dib-comment > As opposed to: <b>flex-direction:row; justify-content:flex-start; align-items:flex-start</b></div></span><div   style="  width:auto !important;   height:100px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4842 dibComponent=div  ><ng-container [dibPort]="'4842'" ><span  id=ci4843 dibComponent=span   style="  "  [innerHtml]="getHtml('textNormal1') | safeHtml" ></span><span  id=ci4844 dibComponent=span   style="  font-size:2.5em;font-family:cursive;"  [innerHtml]="getHtml('textBig1') | safeHtml" ></span><span  id=ci4845 dibComponent=span   style="  font-size:0.7em;"  [innerHtml]="getHtml('textSmall1') | safeHtml" ></span><span  id=ci4846 dibComponent=span   style="  "  [innerHtml]="getHtml('textNormal3') | safeHtml" ></span></ng-container></div></ng-container></div></mat-card-content></mat-card></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4801 dibComponent=card  ><mat-card-header ><mat-card-title >Gap (set on parent item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4801'" ><span  id=ci4802 dibComponent=comment   style="  " ><div class=dib-comment ><b>Gap (CSS: gap)</b><br>Set a gap between items in the main direction.<br>The size of the gap can be set using % | px | vw | vh.<br>Option 1: single value for both directions, eg. <b>gap:10px</b><br>Option 2: gap-between-rows gap-between-columns, eg. <b>gap:10vh 5%</b><i>see <b>wrap</b> below...</i></div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4803 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4804 dibComponent=comment   style="  " ><div class=dib-comment ><b>flex-direction:row; gap:10px</b></div></span><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  border: 1px dashed orange" id=ci4805 dibComponent=div  ><ng-container [dibPort]="'4805'" ><mat-form-field id=ci4806 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=firstName11   name=firstName11   [attr.aria-label]="'First Name'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4807 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>DOB</mat-label><input   matInput [matDatepicker]="datePicker4807"   [placeholder]="'DOB'"   formControlName=dob11   name=dob11   [attr.aria-label]="'DOB'"  (focus)="datePicker4807.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker4807" ></mat-datepicker-toggle><mat-datepicker #datePicker4807 ></mat-datepicker></mat-form-field><button  mat-raised-button color=primary  id=ci4808 dibComponent=button   style="  "  [attr.aria-label]="'Do Nothing'"  type=button  ><span class=dibButtonCaption >Do Nothing</span></button></ng-container></div></mat-card-content></mat-card></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4820 dibComponent=card  ><mat-card-header ><mat-card-title >Wrap (set on parent item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4820'" ><span  id=ci4821 dibComponent=comment   style="  " ><div class=dib-comment ><b>Wrap (CSS: flex-wrap)</b><br>Allow child items to wrap to the next row/column when they don't fit inside the parent item.
Options: <b>wrap | nowrap | wrap-reverse</b><br><b>NOTE:</b>&nbsp; this is often used to build responsive websites, where for eg. sections that are in a row are automatically forced below one another on smaller screens.  </div></span><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: wrap;  flex: 1 1 0%;  overflow:auto !important;" id=ci4950 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4950'" ><mat-card   style="  flex: 1 1 0%;  overflow:auto !important;" id=ci4951 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  gap: 10px;  flex-wrap: nowrap;"  ><span  id=ci4952 dibComponent=comment   style="  " ><div class=dib-comment ><b>width: 500px; flex-direction:row; flex-wrap:nowrap; gap:10px</b></div></span><div   style="  width:500px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  border: 1px dashed orange;" id=ci4944 dibComponent=div  ><ng-container [dibPort]="'4944'" ><button  mat-raised-button color=primary  id=ci4945 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4949 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4948 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4947 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4946 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button></ng-container></div><span  id=ci4953 dibComponent=span   style="  "  [innerHtml]="getHtml('span5') | safeHtml" ></span></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4822 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  gap: 10px;  flex-wrap: nowrap;"  ><span  id=ci4823 dibComponent=comment   style="  " ><div class=dib-comment ><b>width: 500px; flex-direction:row; flex-wrap:wrap; gap:20px 5px</b></div></span><div   style="  width:500px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 20px 5px;  flex-wrap: wrap;  flex: 1 1 0%;  border: 1px dashed orange" id=ci4824 dibComponent=div  ><ng-container [dibPort]="'4824'" ><button  mat-raised-button color=primary  id=ci4825 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4943 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4942 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4941 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4940 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button></ng-container></div></mat-card-content></mat-card></ng-container></div></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  overflow:auto !important;" id=ci4954 dibComponent=card  ><mat-card-header ><mat-card-title >Align Content (set on parent item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4954'" ><span  id=ci4955 dibComponent=comment   style="  " ><div class=dib-comment ><b>Align Content (CSS: align-content)</b><br>Align lines of items (only) when <b>wrap</b> causes extra lines, similar to how justify-content aligns individual items within the main-axis.  </div></span><mat-card   style="  " id=ci4956 dibComponent=section  ><mat-card-content   style="  "  ><span  id=ci4957 dibComponent=comment   style="  " ><div class=dib-comment ><b>width: 500px; height: 200px; align-content:flex-end; flex-direction:row; flex-wrap:wrap; gap:10px</b></div></span><div   style="  width:500px !important;   height:200px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: wrap; align-content: flex-end;  border: 1px dashed orange" id=ci4958 dibComponent=div  ><ng-container [dibPort]="'4958'" ><button  mat-raised-button color=primary  id=ci4959 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4963 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4962 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4961 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button><button  mat-raised-button color=primary  id=ci4960 dibComponent=button   style="  width:200px !important;   "  [attr.aria-label]="'width: 200px'"  type=button  ><span class=dibButtonCaption >width: 200px</span></button></ng-container></div></mat-card-content></mat-card></ng-container></mat-card-content></mat-card><span  id=ci4819 dibComponent=comment   style="  align-self: center;  " ><div class=dib-comment ><b>Note, the following directives are all set in attributes of child items.</b></div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4847 dibComponent=card  ><mat-card-header ><mat-card-title >Flex Base, Grow & Shrink (set on child item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4847'" ><span  id=ci4848 dibComponent=comment   style="  " ><div class=dib-comment ><b>Flex Grow, Flex Shrink, Flex Base (CSS: flex)</b><br>Sizes a single element in the main direction set by its parent, steered by the three arguments:<br><b>flex: grow shrink base</b><br><br><b>base</b> - the base size of the item along the main direction.<br><b>grow</b> and <b>shrink</b> - proportional decimal values/weights by which items grow to fill available space, or shrink to keep all items within parent borders.<br><br><b>base</b> can be one of the following:<ul><li>a fixed value measured by <b>px | % | calc | em | rem | vw | vh</b></li><li><b>auto</b> - use the item's width/height property (depending on main direction)<br>if the corresponding width/height value is also set to <b>auto</b> then the item's content determines the base value</li></ul><b>How does it work?</b><br><br>Firstly, items are given their base width.<br>Then, if there is space left within the parent,<br>&nbsp;&nbsp; - each item with <b>grow</b> not 0 is allocated available space in proportion to this relative value<br>&nbsp;&nbsp; - ie, 'fill space if available, proportionally'<br>else if items overlap their parent’s borders, <br>&nbsp;&nbsp; - each item with <b>shrink</b> not 0 and <b>grow</b> = 0 is shrunk proportionally to keep all items within borders.<br>&nbsp;&nbsp; - ie, 'shrink if necessary, proportionally'<br><br><b>Notes:</b><ul><li>The weights are relative to other items’ <b>grow</b> and <b>shrink</b> values.<br>If for eg. item A’s <b>grow</b> value is 1, B’s is 2, then for each 100px extra allocated to A, B gets 200px. Same for <b>shrink</b>.</li><li>If any of base, grow or shrink values are specified in Dropinbase, then defaults are set for other values that are not specified:</li><ul><li>The default for <b>grow</b> is 0</li><li>The default for <b>shrink</b> is 1</li><li>The default for <b>base</b> is 0%</li></ul><li>Setting an item's <b>width/height</b> has no effect unless base is <b>auto</b>.</li><li>Setting <b>max-width/max-height/min-width/min-height</b> prevents it from growing/shrinking further.<br>If a group of large items all have <b>shrink</b> = 0, they will overlap their parent's borders.<br>You could set the parent’s css overflow attribute to make scroll bars appear (overflow:auto),or hide the overlapping content (overflow:hidden).</li></ul><br>More info: <a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/CSS/flex'>https://developer.mozilla.org/en-US/docs/Web/CSS/flex</a></div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4849 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  gap: 10px;  flex-wrap: nowrap;"  ><span  id=ci4854 dibComponent=comment   style="  align-self: center;  " ><div class=dib-comment ><b>Note, all examples below are valid for flex-direction:column as well</b></div></span><div   style="  width:auto !important;   height:60px !important;   display:flex; flex-direction: row;  gap: 10px;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4859 dibComponent=div  ><ng-container [dibPort]="'4859'" ><span  id=ci4860 dibComponent=span   style="  flex: 1 1 150px;  background: green"  [innerHtml]="getHtml('span1A') | safeHtml" ></span><span  id=ci4861 dibComponent=span   style="  flex: 1 1 0%;  background: lightblue"  [innerHtml]="getHtml('span1B') | safeHtml" ></span><span  id=ci4862 dibComponent=span   style="  flex: 1 1 20%;  background: red"  [innerHtml]="getHtml('span1C') | safeHtml" ></span></ng-container></div><div   style="  width:auto !important;   height:60px !important;   display:flex; flex-direction: row;  gap: 10px;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4850 dibComponent=div  ><ng-container [dibPort]="'4850'" ><span  id=ci4851 dibComponent=span   style="  flex: 2 1 100px;  background: green"  [innerHtml]="getHtml('span2A') | safeHtml" ></span><span  id=ci4852 dibComponent=span   style="  width:100px !important;   flex: 1 1 auto;  background: lightblue"  [innerHtml]="getHtml('span2B') | safeHtml" ></span><span  id=ci4853 dibComponent=span   style="  flex: 0 1 200px;  background: red"  [innerHtml]="getHtml('span2C') | safeHtml" ></span></ng-container></div><div   style="  width:auto !important;   height:60px !important;   display:flex; flex-direction: row;  gap: 10px;  flex-wrap: nowrap;  border: 1px dashed orange" id=ci4855 dibComponent=div  ><ng-container [dibPort]="'4855'" ><span  id=ci4856 dibComponent=span   style="  width:auto !important;   flex: 0 1 auto;  background: green"  [innerHtml]="getHtml('span3A') | safeHtml" ></span><span  id=ci4857 dibComponent=span   style="  flex: 1 1 20%;  background: lightblue"  [innerHtml]="getHtml('span3B') | safeHtml" ></span><span  id=ci4858 dibComponent=span   style="  flex: 1 1 100%;  background: red"  [innerHtml]="getHtml('span3C') | safeHtml" ></span></ng-container></div></mat-card-content></mat-card></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4826 dibComponent=card  ><mat-card-header ><mat-card-title >Align Self (set on child item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4826'" ><span  id=ci4827 dibComponent=comment   style="  " ><div class=dib-comment ><b>Align Self (CSS: align-self)</b><br>This setting on the item overrides the <b>cross-axis</b> alignment set by <b>Align Cross-X (align-items)</b> on the parent, for this item only.<br>Options: flex-start | center | flex-end | baseline | stretch.<br>More info: <a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/CSS/align-self'>https://developer.mozilla.org/en-US/docs/Web/CSS/align-self</a></div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4828 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><span  id=ci4829 dibComponent=comment   style="  " ><div class=dib-comment > Default child item alignment: flex-start<br>On First Name: <b>align-self:flex-end</b><br>On Books: <b>align-self:stretch</b></div></span><div   style="  width:auto !important;   height:150px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4830 dibComponent=div  ><ng-container [dibPort]="'4830'" ><mat-form-field id=ci4831 dibComponent=inputText   style="  align-self: flex-end;  "  appearance=standard  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=firstName5   name=firstName5   [attr.aria-label]="'First Name'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4832 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>DOB</mat-label><input   matInput [matDatepicker]="datePicker4832"   [placeholder]="'DOB'"   formControlName=dob5   name=dob5   [attr.aria-label]="'DOB'"  (focus)="datePicker4832.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker4832" ></mat-datepicker-toggle><mat-datepicker #datePicker4832 ></mat-datepicker></mat-form-field><span  id=ci4833 dibComponent=span   style="  padding:20px !important;  align-self: stretch;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element12') | safeHtml" ></span><span  id=ci4965 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element13') | safeHtml" ></span><span  id=ci4964 dibComponent=span   style="  padding:20px !important;  background-color:lightblue; border: 2px solid cadetblue;"  [innerHtml]="getHtml('element14') | safeHtml" ></span></ng-container></div></mat-card-content></mat-card></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4834 dibComponent=card  ><mat-card-header ><mat-card-title >Order (set on child item)</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4834'" ><span  id=ci4835 dibComponent=comment   style="  " ><div class=dib-comment ><b>Order (CSS: order)</b><br>Override the default/source order of items. <br>Items with a lower order number come first.<br>For items with the same order no, priority is given to the source order.<br>More info: <a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/CSS/order'>https://developer.mozilla.org/en-US/docs/Web/CSS/order</a></div></span><mat-card   style="  flex: 1 1 0%;  " id=ci4836 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><div   style="  width:auto !important;   height:150px !important;   display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  flex: 0 1 auto;  border: 1px dashed orange" id=ci4837 dibComponent=div  ><ng-container [dibPort]="'4837'" ><button  mat-raised-button color=primary  id=ci4838 dibComponent=button   style="  order: 3;  "  [attr.aria-label]="'3'"  type=button  ><span class=dibButtonCaption >3</span></button><button  mat-raised-button color=primary  id=ci4971 dibComponent=button   style="  order: -1;  "  [attr.aria-label]="'-1'"  type=button  ><span class=dibButtonCaption >-1</span></button><button  mat-raised-button color=primary  id=ci4970 dibComponent=button   style="  "  [attr.aria-label]="'0'"  type=button  ><span class=dibButtonCaption >0</span></button><button  mat-raised-button color=primary  id=ci4969 dibComponent=button   style="  "  [attr.aria-label]="'(not set)'"  type=button  ><span class=dibButtonCaption >(not set)</span></button><button  mat-raised-button color=primary  id=ci4968 dibComponent=button   style="  order: -2;  "  [attr.aria-label]="'-2'"  type=button  ><span class=dibButtonCaption >-2</span></button><button  mat-raised-button color=primary  id=ci4967 dibComponent=button   style="  order: 1;  "  [attr.aria-label]="'1'"  type=button  ><span class=dibButtonCaption >1</span></button><button  mat-raised-button color=primary  id=ci4966 dibComponent=button   style="  order: 1;  "  [attr.aria-label]="'1'"  type=button  ><span class=dibButtonCaption >1</span></button></ng-container></div></mat-card-content></mat-card></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci4863 dibComponent=card  ><mat-card-header ><mat-card-title >In Practice</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4863'" ><span  id=ci4864 dibComponent=comment   style="  align-self: center;  " ><div class=dib-comment ><b>Using the above, we can easily construct layouts, with the added benefit of auto-sizing for different window sizes</b></div></span><div   style="  flex: 1 1 0%;  " id=ci4878 dibComponent=subcontainer   ><ng-container [dibPort]="'4878'" parentContainerName=dibexLayoutFlex  subContainerName=dibexFlexInPractice  subContainerId=198  dropinName=form ></ng-container></div></ng-container></mat-card-content></mat-card></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_4.MatNativeDateModule, button_1.MatButtonModule, icon_1.MatIconModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexLayoutFlexModule = class dibexLayoutFlexModule {
                static entry = dibexLayoutFlexComponent;
                static ɵfac = function dibexLayoutFlexModule_Factory(t) { return new (t || dibexLayoutFlexModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexLayoutFlexModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexLayoutFlexModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexLayoutFlexModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexLayoutFlexComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexLayoutFlexModule, { declarations: [dibexLayoutFlexComponent], imports: [common_1.CommonModule, shared_4.SharedModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_4.MatNativeDateModule, button_1.MatButtonModule, icon_1.MatIconModule] }); })();
        }
    };
});
