System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/autocomplete", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/datepicker", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, autocomplete_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, _c0, _c1, _c2, _c3, _c4, _c5, _c6, importsRequired, dibexDefaultValuesGridServerComponent, containerModules, dibexDefaultValuesGridServerModule;
    var __moduleName = context_1 && context_1.id;
    function dibexDefaultValuesGridServerComponent_button_16_Template(rf, ctx) { if (rf & 1) {
        const _r34 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 48);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_button_16_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r34); const ctx_r33 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r33.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDefaultValuesGridServerComponent_button_17_Template(rf, ctx) { if (rf & 1) {
        const _r36 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 50);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_button_17_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r36); const ctx_r35 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r35.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDefaultValuesGridServerComponent_div_19_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r37 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r37.page.toRecord, "\u00A0of\u00A0", ctx_r37.page.records, "");
    } }
    function dibexDefaultValuesGridServerComponent_div_19_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r38.page.totalRecords, ")");
    } }
    function dibexDefaultValuesGridServerComponent_div_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 52);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_div_19_span_2_Template, 2, 2, "span", 45);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_div_19_span_4_Template, 2, 1, "span", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Default Values Grid Server: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexDefaultValuesGridServerComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        const _r40 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 53)(1, "mat-checkbox", 54);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_th_29_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r40); const ctx_r39 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r39.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexDefaultValuesGridServerComponent_td_30_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 55)(1, "mat-checkbox", 56);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_30_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexDefaultValuesGridServerComponent_td_30_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r44); const row_r41 = restoredCtx.$implicit; const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r43.selection.toggle(row_r41) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r41 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r41));
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r46 = i0.ɵɵnextContext(2).index;
        const ctx_r49 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r49.findColumnDisplayValue(rowIndex_r46, "id", "none", "number"), "");
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r58 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r58); const ctx_r57 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r57.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 62);
        i0.ɵɵelement(2, "input", 63);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r45 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r50 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.hasError("id", "required", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.view.recordStatus == "update" && ctx_r50.notSaved("id", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.view.recordStatus == "update" && ctx_r50.isSaved("id", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.isInvalid("id", rowForm_r45));
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r45 = i0.ɵɵnextContext().$implicit;
        const ctx_r47 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == false && rowForm_r45.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == true || rowForm_r45.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == false && rowForm_r45.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_32_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r45 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r45);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r45.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_33_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_33_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r61 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r61.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r68 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r68); const ctx_r67 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r67.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r70 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r69 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r69.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r71 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r71.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r63 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r63.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r63.view.recordStatus == "update" && ctx_r63.notSaved("id", ctx_r63.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r63.view.recordStatus == "update" && ctx_r63.isSaved("id", ctx_r63.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_33_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_th_33_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_th_33_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r73 = i0.ɵɵnextContext(2).index;
        const ctx_r76 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r76.findColumnDisplayValue(rowIndex_r73, "client_id", "dropdown", "select"), "");
    } }
    function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r88 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r88); i0.ɵɵnextContext(); const _r80 = i0.ɵɵreference(3); const _r81 = i0.ɵɵreference(4); const rowForm_r72 = i0.ɵɵnextContext(2).$implicit; const ctx_r86 = i0.ɵɵnextContext(); ctx_r86.clearDropdown(rowForm_r72.get("client_id"), $event, ctx_r86.lists.list6167, _r80); return i0.ɵɵresetView(_r81.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r89 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r89.id == "0"))("value", item_r89)("innerHtml", item_r89.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r91 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 82);
        i0.ɵɵelement(2, "input", 83, 84);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_button_5_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(6, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r91); const ctx_r90 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r90.lists.list6167.refresh()); });
        i0.ɵɵtemplate(8, dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(9, dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r83 = i0.ɵɵreference(7);
        const rowForm_r72 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r77 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r83);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r77.showDropdownClearButton(rowForm_r72.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r77.dropdownValueTranslate.bind(ctx_r77, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r77.lists.list6167.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r77.lists.list6167.lastItems);
    } }
    function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_4_Template, 10, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_35_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r72 = i0.ɵɵnextContext().$implicit;
        const ctx_r74 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == false && rowForm_r72.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == true || rowForm_r72.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == false && rowForm_r72.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_35_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r72 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r72);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r72.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_36_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_36_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_36_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r94 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r94.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_th_36_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_36_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r105 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_th_36_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r105); i0.ɵɵnextContext(); const _r98 = i0.ɵɵreference(5); const _r99 = i0.ɵɵreference(6); const ctx_r104 = i0.ɵɵnextContext(2); ctx_r104.clearDropdown(ctx_r104.model.modelItems.client_id.formControl, $event, ctx_r104.lists.list6167, _r98); return i0.ɵɵresetView(_r99.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexDefaultValuesGridServerComponent_th_36_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexDefaultValuesGridServerComponent_th_36_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r106 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r106.id == "0"))("value", item_r106)("innerHtml", item_r106.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexDefaultValuesGridServerComponent_th_36_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r108 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 93)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 94, 84);
        i0.ɵɵtemplate(7, dibexDefaultValuesGridServerComponent_th_36_div_4_button_7_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(8, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexDefaultValuesGridServerComponent_th_36_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r108); const ctx_r107 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r107.lists.list6167.refresh()); });
        i0.ɵɵtemplate(10, dibexDefaultValuesGridServerComponent_th_36_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(11, dibexDefaultValuesGridServerComponent_th_36_div_4_mat_option_11_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r101 = i0.ɵɵreference(9);
        const ctx_r96 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r96.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r101);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r96.showDropdownClearButton(ctx_r96.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r96.dropdownValueTranslate.bind(ctx_r96, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r96.lists.list6167.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r96.lists.list6167.lastItems);
    } }
    function dibexDefaultValuesGridServerComponent_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_36_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_th_36_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_th_36_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r110 = i0.ɵɵnextContext(2).index;
        const ctx_r113 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r113.findColumnDisplayValue(rowIndex_r110, "first_name", "none", "text"), "");
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r122 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r122); const ctx_r121 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r121.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r124 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r124); const ctx_r123 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r123.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r124); const ctx_r125 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r125.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r109 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r114 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r114.hasError("first_name", "required", rowForm_r109));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r114.hasError("first_name", "maxlength", rowForm_r109));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r114.view.recordStatus == "update" && ctx_r114.notSaved("first_name", rowForm_r109));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r114.view.recordStatus == "update" && ctx_r114.isSaved("first_name", rowForm_r109));
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r109 = i0.ɵɵnextContext().$implicit;
        const ctx_r111 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r111.excelEditing == false && rowForm_r109.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r111.excelEditing == true || rowForm_r109.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r111.excelEditing == false && rowForm_r109.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_38_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r109 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r109);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r109.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_39_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_39_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_39_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r128 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r128.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_th_39_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_39_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r135 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_th_39_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r135); const ctx_r134 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r134.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_39_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_39_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r137 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_th_39_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r137); const ctx_r136 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r136.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_th_39_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r137); const ctx_r138 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r138.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_th_39_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_th_39_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r130 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r130.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r130.view.recordStatus == "update" && ctx_r130.notSaved("first_name", ctx_r130.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r130.view.recordStatus == "update" && ctx_r130.isSaved("first_name", ctx_r130.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_39_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_th_39_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_th_39_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r140 = i0.ɵɵnextContext(2).index;
        const ctx_r143 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r143.findColumnDisplayValue(rowIndex_r140, "last_name", "none", "text"), "");
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r152 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r152); const ctx_r151 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r151.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r154 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r154); const ctx_r153 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r153.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r154); const ctx_r155 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r155.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r139 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r144 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r144.hasError("last_name", "required", rowForm_r139));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r144.hasError("last_name", "maxlength", rowForm_r139));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r144.view.recordStatus == "update" && ctx_r144.notSaved("last_name", rowForm_r139));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r144.view.recordStatus == "update" && ctx_r144.isSaved("last_name", rowForm_r139));
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_td_41_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r139 = i0.ɵɵnextContext().$implicit;
        const ctx_r141 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r141.excelEditing == false && rowForm_r139.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r141.excelEditing == true || rowForm_r139.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r141.excelEditing == false && rowForm_r139.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_td_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_41_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r139 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r139);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r139.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_42_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_42_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_42_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r158 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r158.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_th_42_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_42_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r165 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_th_42_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r165); const ctx_r164 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r164.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_42_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_42_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r167 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_th_42_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r167); const ctx_r166 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r166.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_th_42_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r167); const ctx_r168 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r168.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_th_42_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_th_42_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r160 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r160.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r160.view.recordStatus == "update" && ctx_r160.notSaved("last_name", ctx_r160.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r160.view.recordStatus == "update" && ctx_r160.isSaved("last_name", ctx_r160.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_th_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_42_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_th_42_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_th_42_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r170 = i0.ɵɵnextContext(2).index;
        const ctx_r173 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r173.findColumnDisplayValue(rowIndex_r170, "notes", "none", "text"), "");
    } }
    function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 250 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r181 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r181); const ctx_r180 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r180.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r183 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r183); const ctx_r182 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r182.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r183); const ctx_r184 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r184.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r169 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r174 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.hasError("notes", "maxlength", rowForm_r169));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.view.recordStatus == "update" && ctx_r174.notSaved("notes", rowForm_r169));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.view.recordStatus == "update" && ctx_r174.isSaved("notes", rowForm_r169));
    } }
    function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_td_44_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_44_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r169 = i0.ɵɵnextContext().$implicit;
        const ctx_r171 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r171.excelEditing == false && rowForm_r169.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r171.excelEditing == true || rowForm_r169.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r171.excelEditing == false && rowForm_r169.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_td_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_44_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r169 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r169);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r169.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_45_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_45_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_45_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r193 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_th_45_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r193); const ctx_r192 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r192.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_45_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_45_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r195 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_th_45_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r195); const ctx_r194 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r194.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_th_45_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r195); const ctx_r196 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r196.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_th_45_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_th_45_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r189 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r189.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r189.view.recordStatus == "update" && ctx_r189.notSaved("notes", ctx_r189.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r189.view.recordStatus == "update" && ctx_r189.isSaved("notes", ctx_r189.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_th_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_45_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_th_45_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_th_45_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r198 = i0.ɵɵnextContext(2).index;
        const ctx_r201 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r201.findColumnDisplayValue(rowIndex_r198, "updated", "none", "datetime"), "");
    } }
    function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r209 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r209); const ctx_r208 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r208.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r211 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 105);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 106);
        i0.ɵɵelementStart(3, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r211); const ctx_r210 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r210.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r211); const ctx_r212 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r212.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 108);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r207 = i0.ɵɵreference(7);
        const rowForm_r197 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r202 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r207);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r207);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r202.view.recordStatus == "update" && ctx_r202.notSaved("updated", rowForm_r197));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r202.view.recordStatus == "update" && ctx_r202.isSaved("updated", rowForm_r197));
    } }
    function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_td_47_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_4_Template, 8, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_td_47_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r197 = i0.ɵɵnextContext().$implicit;
        const ctx_r199 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r199.excelEditing == false && rowForm_r197.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r199.excelEditing == true || rowForm_r197.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r199.excelEditing == false && rowForm_r197.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_td_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_47_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r197 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r197);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r197.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_48_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_48_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_48_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r221 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_th_48_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r221); const ctx_r220 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r220.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_48_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_th_48_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r223 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_th_48_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r223); const ctx_r222 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r222.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_th_48_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r223); const ctx_r224 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r224.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_th_48_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_th_48_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r217 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r217.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r217.view.recordStatus == "update" && ctx_r217.notSaved("updated", ctx_r217.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r217.view.recordStatus == "update" && ctx_r217.isSaved("updated", ctx_r217.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_th_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_th_48_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_th_48_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_th_48_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_td_50_ng_container_1_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 113);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_50_ng_container_1_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r232); const rowForm_r225 = i0.ɵɵnextContext(2).$implicit; const ctx_r230 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r230.editRow(rowForm_r225)); });
        i0.ɵɵelement(1, "dib-icon", 114);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDefaultValuesGridServerComponent_td_50_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 111);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_td_50_ng_container_1_button_3_Template, 2, 4, "button", 112);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r228 = ctx.ngIf;
        const rowForm_r225 = i0.ɵɵnextContext().$implicit;
        const ctx_r227 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "6679");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r228.__new == true || ctx_r227.excelEditing == true && ctx_r227.gridExcelEditingAutoSave == false && rowForm_r225.dirty == true);
    } }
    function dibexDefaultValuesGridServerComponent_td_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_50_ng_container_1_Template, 4, 2, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r225 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r225);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r225.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 70);
    } }
    function dibexDefaultValuesGridServerComponent_td_53_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        const _r241 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 116);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_td_53_ng_container_1_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r241); const rowForm_r234 = i0.ɵɵnextContext(2).$implicit; const ctx_r239 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r239.editRow(rowForm_r234)); });
        i0.ɵɵelement(1, "dib-icon", 114);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDefaultValuesGridServerComponent_td_53_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_53_ng_container_1_button_1_Template, 2, 4, "button", 115);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r237 = ctx.ngIf;
        const rowForm_r234 = i0.ɵɵnextContext().$implicit;
        const ctx_r236 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r237.__new == true || ctx_r236.excelEditing == true && ctx_r236.gridExcelEditingAutoSave == false && rowForm_r234.dirty == true);
    } }
    function dibexDefaultValuesGridServerComponent_td_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_td_53_ng_container_1_Template, 2, 1, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r234 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r234);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r234.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_th_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 70);
    } }
    function dibexDefaultValuesGridServerComponent_th_56_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexDefaultValuesGridServerComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 117);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_th_56_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r22 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r22.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r22.busy);
    } }
    function dibexDefaultValuesGridServerComponent_th_58_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r244 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r244.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexDefaultValuesGridServerComponent_th_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 118);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_th_58_span_1_Template, 2, 1, "span", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r23.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r23.busy && ctx_r23.tableDataSource.data.length == 0);
    } }
    function dibexDefaultValuesGridServerComponent_ng_container_59_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 120);
    } }
    function dibexDefaultValuesGridServerComponent_ng_container_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_container_59_tr_1_Template, 1, 0, "tr", 119);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r245 = ctx.$implicit;
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r24.columnHeaders.getArray(column_r245).items$));
    } }
    function dibexDefaultValuesGridServerComponent_tr_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 121);
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r25.busy ? "visible" : "hidden"));
    } }
    function dibexDefaultValuesGridServerComponent_tr_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 121);
    } if (rf & 2) {
        const ctx_r26 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r26.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexDefaultValuesGridServerComponent_tr_62_Template(rf, ctx) { if (rf & 1) {
        const _r250 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 122);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_tr_62_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r250); const row_r247 = restoredCtx.$implicit; const ctx_r249 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r249.rowClick(row_r247, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r247 = ctx.$implicit;
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r27.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r27.isHighlighted(row_r247)));
    } }
    function dibexDefaultValuesGridServerComponent_64_ng_template_0_Template(rf, ctx) { }
    function dibexDefaultValuesGridServerComponent_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexDefaultValuesGridServerComponent_64_ng_template_0_Template, 0, 0, "ng-template", 123);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r31 = i0.ɵɵreference(69);
        i0.ɵɵproperty("ngTemplateOutlet", _r31);
    } }
    function dibexDefaultValuesGridServerComponent_mat_toolbar_67_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r256 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 129);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_mat_toolbar_67_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r256); const ctx_r255 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r255.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r252 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r252.numberOfSelectedItems + " ", "item", ctx_r252.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexDefaultValuesGridServerComponent_mat_toolbar_67_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_mat_toolbar_67_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_mat_toolbar_67_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r260 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 130);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_mat_toolbar_67_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r260); const ctx_r259 = i0.ɵɵnextContext(2); ctx_r259.gridShowClipboardDefault = !ctx_r259.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r259.gridShowClipboardDefault && ctx_r259.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_mat_toolbar_67_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 45);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_mat_toolbar_67_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 45);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r253 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r253.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r253.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r253.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexDefaultValuesGridServerComponent_mat_toolbar_67_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r263 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 131, 132);
        i0.ɵɵlistener("page", function dibexDefaultValuesGridServerComponent_mat_toolbar_67_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r263); const ctx_r262 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r262.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r254 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r254.page.totalRecords)("pageSize", ctx_r254.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexDefaultValuesGridServerComponent_mat_toolbar_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 124);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_mat_toolbar_67_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 125);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_mat_toolbar_67_button_3_Template, 4, 3, "button", 126);
        i0.ɵɵelement(4, "span", 127);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_mat_toolbar_67_mat_paginator_5_Template, 2, 4, "mat-paginator", 128);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r30.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r286 = i0.ɵɵnextContext(2).index;
        const ctx_r289 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r289.findColumnDisplayValue(rowIndex_r286, "id", "none", "number"), "");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r297 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r297); const ctx_r296 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r296.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r299 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 62)(2, "input", 137);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r299); const ctx_r298 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r298.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r299); const ctx_r300 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r300.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r285 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r290 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r290.hasError("id", "required", rowForm_r285));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r290.view.recordStatus == "update" && ctx_r290.notSaved("id", rowForm_r285));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r290.view.recordStatus == "update" && ctx_r290.isSaved("id", rowForm_r285));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r285 = i0.ɵɵnextContext().$implicit;
        const ctx_r287 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r287.excelEditing == false && rowForm_r285.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r287.excelEditing == true || rowForm_r285.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r287.excelEditing == false && rowForm_r285.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r285 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r285);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r285.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r303 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r303.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r310 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r310); const ctx_r309 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r309.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r312 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r312); const ctx_r311 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r311.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r312); const ctx_r313 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r313.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r305 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r305.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r305.view.recordStatus == "update" && ctx_r305.notSaved("id", ctx_r305.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r305.view.recordStatus == "update" && ctx_r305.isSaved("id", ctx_r305.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_th_3_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r265 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r265.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r315 = i0.ɵɵnextContext(2).index;
        const ctx_r318 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r318.findColumnDisplayValue(rowIndex_r315, "client_id", "dropdown", "select"), "");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r330 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r330); i0.ɵɵnextContext(); const _r322 = i0.ɵɵreference(3); const _r323 = i0.ɵɵreference(4); const rowForm_r314 = i0.ɵɵnextContext(2).$implicit; const ctx_r328 = i0.ɵɵnextContext(2); ctx_r328.clearDropdown(rowForm_r314.get("client_id"), $event, ctx_r328.lists.list6167, _r322); return i0.ɵɵresetView(_r323.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r331 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r331.id == "0"))("value", item_r331)("innerHtml", item_r331.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r333 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 82);
        i0.ɵɵelement(2, "input", 83, 84);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_button_5_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(6, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r333); const ctx_r332 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r332.lists.list6167.refresh()); });
        i0.ɵɵtemplate(8, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(9, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r325 = i0.ɵɵreference(7);
        const rowForm_r314 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r319 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r325);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r319.showDropdownClearButton(rowForm_r314.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r319.dropdownValueTranslate.bind(ctx_r319, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r319.lists.list6167.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r319.lists.list6167.lastItems);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_4_Template, 10, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r314 = i0.ɵɵnextContext().$implicit;
        const ctx_r316 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r316.excelEditing == false && rowForm_r314.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.excelEditing == true || rowForm_r314.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.excelEditing == false && rowForm_r314.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r314 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r314);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r314.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r336 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r336.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r347 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r347); i0.ɵɵnextContext(); const _r340 = i0.ɵɵreference(5); const _r341 = i0.ɵɵreference(6); const ctx_r346 = i0.ɵɵnextContext(3); ctx_r346.clearDropdown(ctx_r346.model.modelItems.client_id.formControl, $event, ctx_r346.lists.list6167, _r340); return i0.ɵɵresetView(_r341.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r348 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r348.id == "0"))("value", item_r348)("innerHtml", item_r348.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r350 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 93)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 94, 84);
        i0.ɵɵtemplate(7, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_button_7_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(8, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r350); const ctx_r349 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r349.lists.list6167.refresh()); });
        i0.ɵɵtemplate(10, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(11, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_mat_option_11_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r343 = i0.ɵɵreference(9);
        const ctx_r338 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r338.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r343);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r338.showDropdownClearButton(ctx_r338.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r338.dropdownValueTranslate.bind(ctx_r338, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r338.lists.list6167.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r338.lists.list6167.lastItems);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r267 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r267.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r352 = i0.ɵɵnextContext(2).index;
        const ctx_r355 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r355.findColumnDisplayValue(rowIndex_r352, "first_name", "none", "text"), "");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r364 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r364); const ctx_r363 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r363.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r366 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r366); const ctx_r365 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r365.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r366); const ctx_r367 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r367.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r351 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r356 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r356.hasError("first_name", "required", rowForm_r351));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r356.hasError("first_name", "maxlength", rowForm_r351));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r356.view.recordStatus == "update" && ctx_r356.notSaved("first_name", rowForm_r351));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r356.view.recordStatus == "update" && ctx_r356.isSaved("first_name", rowForm_r351));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r351 = i0.ɵɵnextContext().$implicit;
        const ctx_r353 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r353.excelEditing == false && rowForm_r351.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r353.excelEditing == true || rowForm_r351.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r353.excelEditing == false && rowForm_r351.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r351 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r351);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r351.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r370 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r370.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r377 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r377); const ctx_r376 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r376.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r379 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r379); const ctx_r378 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r378.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r379); const ctx_r380 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r380.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r372 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r372.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r372.view.recordStatus == "update" && ctx_r372.notSaved("first_name", ctx_r372.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r372.view.recordStatus == "update" && ctx_r372.isSaved("first_name", ctx_r372.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_th_9_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r269 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r269.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r269.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r269.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r382 = i0.ɵɵnextContext(2).index;
        const ctx_r385 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r385.findColumnDisplayValue(rowIndex_r382, "last_name", "none", "text"), "");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r394 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r394); const ctx_r393 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r393.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r396 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r396); const ctx_r395 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r395.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r396); const ctx_r397 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r397.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r381 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r386 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r386.hasError("last_name", "required", rowForm_r381));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r386.hasError("last_name", "maxlength", rowForm_r381));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r386.view.recordStatus == "update" && ctx_r386.notSaved("last_name", rowForm_r381));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r386.view.recordStatus == "update" && ctx_r386.isSaved("last_name", rowForm_r381));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r381 = i0.ɵɵnextContext().$implicit;
        const ctx_r383 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r383.excelEditing == false && rowForm_r381.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r383.excelEditing == true || rowForm_r381.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r383.excelEditing == false && rowForm_r381.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r381 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r381);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r381.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r400 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r400.editorOpen);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r407 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r407); const ctx_r406 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r406.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r409 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r409); const ctx_r408 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r408.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r409); const ctx_r410 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r410.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r402 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r402.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r402.view.recordStatus == "update" && ctx_r402.notSaved("last_name", ctx_r402.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r402.view.recordStatus == "update" && ctx_r402.isSaved("last_name", ctx_r402.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_th_12_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r271 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r271.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r271.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r271.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r412 = i0.ɵɵnextContext(2).index;
        const ctx_r415 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r415.findColumnDisplayValue(rowIndex_r412, "notes", "none", "text"), "");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 250 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r423 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r423); const ctx_r422 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r422.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r425 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r425); const ctx_r424 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r424.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r425); const ctx_r426 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r426.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r411 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r416 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r416.hasError("notes", "maxlength", rowForm_r411));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r416.view.recordStatus == "update" && ctx_r416.notSaved("notes", rowForm_r411));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r416.view.recordStatus == "update" && ctx_r416.isSaved("notes", rowForm_r411));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r411 = i0.ɵɵnextContext().$implicit;
        const ctx_r413 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r413.excelEditing == false && rowForm_r411.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r413.excelEditing == true || rowForm_r411.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r413.excelEditing == false && rowForm_r411.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r411 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r411);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r411.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r435 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r435); const ctx_r434 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r434.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r437 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r437); const ctx_r436 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r436.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r437); const ctx_r438 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r438.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r431 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r431.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r431.view.recordStatus == "update" && ctx_r431.notSaved("notes", ctx_r431.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r431.view.recordStatus == "update" && ctx_r431.isSaved("notes", ctx_r431.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_th_15_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r273 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r273.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r273.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r273.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r440 = i0.ɵɵnextContext(2).index;
        const ctx_r443 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r443.findColumnDisplayValue(rowIndex_r440, "updated", "none", "datetime"), "");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r451 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r451); const ctx_r450 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r450.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r453 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 105);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 106);
        i0.ɵɵelementStart(3, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r453); const ctx_r452 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r452.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r453); const ctx_r454 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r454.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 108);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r449 = i0.ɵɵreference(7);
        const rowForm_r439 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r444 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r449);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r449);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r444.view.recordStatus == "update" && ctx_r444.notSaved("updated", rowForm_r439));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r444.view.recordStatus == "update" && ctx_r444.isSaved("updated", rowForm_r439));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_4_Template, 8, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r439 = i0.ɵɵnextContext().$implicit;
        const ctx_r441 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r441.excelEditing == false && rowForm_r439.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r441.excelEditing == true || rowForm_r439.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r441.excelEditing == false && rowForm_r439.get("__edit").value === false);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_17_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r439 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r439);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r439.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r463 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r463); const ctx_r462 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r462.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r465 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r465); const ctx_r464 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r464.searchGrid(false)); })("keydown.esc", function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r465); const ctx_r466 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r466.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r459 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r459.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r459.view.recordStatus == "update" && ctx_r459.notSaved("updated", ctx_r459.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r459.view.recordStatus == "update" && ctx_r459.isSaved("updated", ctx_r459.model.$formGroup));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexDefaultValuesGridServerComponent_ng_template_68_th_18_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r275 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r275.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.showSearch);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_20_ng_container_1_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r474 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 113);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_20_ng_container_1_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r474); const rowForm_r467 = i0.ɵɵnextContext(2).$implicit; const ctx_r472 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r472.editRow(rowForm_r467)); });
        i0.ɵɵelement(1, "dib-icon", 114);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 111);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_td_20_ng_container_1_button_3_Template, 2, 4, "button", 112);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r470 = ctx.ngIf;
        const rowForm_r467 = i0.ɵɵnextContext().$implicit;
        const ctx_r469 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "6679");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r470.__new == true || ctx_r469.excelEditing == true && ctx_r469.gridExcelEditingAutoSave == false && rowForm_r467.dirty == true);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_20_ng_container_1_Template, 4, 2, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r467 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r467);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r467.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 70);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_23_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        const _r483 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 116);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_23_ng_container_1_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r483); const rowForm_r476 = i0.ɵɵnextContext(2).$implicit; const ctx_r481 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r481.editRow(rowForm_r476)); });
        i0.ɵɵelement(1, "dib-icon", 114);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_23_ng_container_1_button_1_Template, 2, 4, "button", 115);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r479 = ctx.ngIf;
        const rowForm_r476 = i0.ɵɵnextContext().$implicit;
        const ctx_r478 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r479.__new == true || ctx_r478.excelEditing == true && ctx_r478.gridExcelEditingAutoSave == false && rowForm_r476.dirty == true);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_td_23_ng_container_1_Template, 2, 1, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r476 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r476);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r476.getRawValue());
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 70);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_26_Template(rf, ctx) { if (rf & 1) {
        const _r486 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 53)(1, "mat-checkbox", 138);
        i0.ɵɵlistener("change", function dibexDefaultValuesGridServerComponent_ng_template_68_th_26_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r486); const ctx_r485 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r485.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r280 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r280.masterIsChecked)("indeterminate", ctx_r280.masterIsIndeterminate);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_td_27_Template(rf, ctx) { if (rf & 1) {
        const _r490 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 139)(1, "mat-checkbox", 56);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_td_27_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexDefaultValuesGridServerComponent_ng_template_68_td_27_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r490); const row_r487 = restoredCtx.$implicit; const ctx_r489 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r489.selection.toggle(row_r487) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r487 = ctx.$implicit;
        const ctx_r281 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r281.isHighlighted(row_r487));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_29_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 140);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_th_29_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r282 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r282.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r282.busy);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_31_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r492 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r492.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_th_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 118);
        i0.ɵɵtemplate(1, dibexDefaultValuesGridServerComponent_ng_template_68_th_31_span_1_Template, 2, 1, "span", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r283 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r283.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r283.busy && ctx_r283.tableDataSource.data.length == 0);
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_tr_32_Template(rf, ctx) { if (rf & 1) {
        const _r495 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 141);
        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_ng_template_68_tr_32_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r495); const row_r493 = restoredCtx.$implicit; const ctx_r494 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r494.rowClick(row_r493, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r493 = ctx.$implicit;
        const ctx_r284 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r284.isHighlighted(row_r493)));
    } }
    function dibexDefaultValuesGridServerComponent_ng_template_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 133);
        i0.ɵɵelementContainerStart(1, 28);
        i0.ɵɵtemplate(2, dibexDefaultValuesGridServerComponent_ng_template_68_td_2_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(3, dibexDefaultValuesGridServerComponent_ng_template_68_th_3_Template, 5, 3, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 31);
        i0.ɵɵtemplate(5, dibexDefaultValuesGridServerComponent_ng_template_68_td_5_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(6, dibexDefaultValuesGridServerComponent_ng_template_68_th_6_Template, 5, 3, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 32);
        i0.ɵɵtemplate(8, dibexDefaultValuesGridServerComponent_ng_template_68_td_8_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(9, dibexDefaultValuesGridServerComponent_ng_template_68_th_9_Template, 5, 3, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 33);
        i0.ɵɵtemplate(11, dibexDefaultValuesGridServerComponent_ng_template_68_td_11_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(12, dibexDefaultValuesGridServerComponent_ng_template_68_th_12_Template, 5, 3, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 34);
        i0.ɵɵtemplate(14, dibexDefaultValuesGridServerComponent_ng_template_68_td_14_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(15, dibexDefaultValuesGridServerComponent_ng_template_68_th_15_Template, 5, 3, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 35);
        i0.ɵɵtemplate(17, dibexDefaultValuesGridServerComponent_ng_template_68_td_17_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(18, dibexDefaultValuesGridServerComponent_ng_template_68_th_18_Template, 5, 3, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 36);
        i0.ɵɵtemplate(20, dibexDefaultValuesGridServerComponent_ng_template_68_td_20_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(21, dibexDefaultValuesGridServerComponent_ng_template_68_th_21_Template, 1, 0, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 37);
        i0.ɵɵtemplate(23, dibexDefaultValuesGridServerComponent_ng_template_68_td_23_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(24, dibexDefaultValuesGridServerComponent_ng_template_68_th_24_Template, 1, 0, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 25);
        i0.ɵɵtemplate(26, dibexDefaultValuesGridServerComponent_ng_template_68_th_26_Template, 2, 2, "th", 26);
        i0.ɵɵtemplate(27, dibexDefaultValuesGridServerComponent_ng_template_68_td_27_Template, 2, 1, "td", 134);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 38);
        i0.ɵɵtemplate(29, dibexDefaultValuesGridServerComponent_ng_template_68_th_29_Template, 2, 2, "th", 135);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(30, 40);
        i0.ɵɵtemplate(31, dibexDefaultValuesGridServerComponent_ng_template_68_th_31_Template, 2, 2, "th", 41);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(32, dibexDefaultValuesGridServerComponent_ng_template_68_tr_32_Template, 1, 3, "tr", 136);
        i0.ɵɵpipe(33, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r32.selectionDataSource);
        i0.ɵɵadvance(32);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(33, 2, ctx_r32.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i19 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                i8 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i20 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i21 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i9 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i13 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i18 = card_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i7 = autocomplete_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            },
            function (i17_1) {
                i17 = i17_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "extra-node": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function () { return ["_dibBusy"]; };
            _c6 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexDefaultValuesGridServerComponent = class dibexDefaultValuesGridServerComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 254, name: 'dibexDefaultValuesGridServer', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'client_id', 'first_name', 'last_name', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'client_id', 'first_name', 'last_name', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list6167 = new shared_3.DibList("/peff/Crud/componentlist?containerName=dibexDefaultValuesGridServer&containerItemId=6167", null, null, 40);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexDefaultValuesGridServer');
                    this.containerName = 'dibexDefaultValuesGridServer'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 6166, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, client_id: { itemId: 6167, type: 'select', fieldAlias: 'client_id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'change' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 6167 }, first_name: { itemId: 6168, type: 'text', fieldAlias: 'first_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 6169, type: 'text', fieldAlias: 'last_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, notes: { itemId: 6170, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(250)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, updated: { itemId: 6171, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('client_id', this.model.modelItems.client_id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource6167 = this.lists.list6167.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6167 = new Date().getTime();
                    let previousUrlChange6167;
                    let previousResponse6167;
                    this.lists.list6167.items = rxjs_1.combineLatest([this.lists.list6167.updatedList$, itemsUpdateSource6167]).pipe(operators_1.tap(() => { this.lists.list6167.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6167 - new Date().getTime()) / 1000;
                        previousTimeChange6167 = new Date().getTime();
                        previousUrlChange6167 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6167 = response;
                            this.lists.list6167.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6167.items.subscribe(records => this.lists.list6167.lastItems = records);
                    this.lists.list6167.multiSelected = [];
                    this.lists.list6167.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6167.updatedList$.next([]);
                        self.lists.list6167.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6167.refresh();
                    }
                    else {
                        self.lists.list6167.searchForm.setValue('');
                        self.lists.list6167.updatedList$.next(self.lists.list6167.multiSelected);
                        self.model.modelItems.client_id.formControl.setValue(self.lists.list6167.multiSelected);
                    } };
                    this.lists.list6167.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6167.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6167.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6167.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6167.multiSelected.push(value);
                            }
                        }
                        lists.list6167.multiSelected = self.removeDuplicateIdsFromArray(lists.list6167.multiSelected);
                    };
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['columnHeader', 'id', 'client_id', 'first_name', 'last_name', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); this.lists.list6167.setupModel(this.model.modelItems.client_id.formControl); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() {
                    this.excelEditing = !this.excelEditing;
                    this.editorOpen = true;
                    if (this.excelEditing) {
                        this.editorOpen = false;
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                                control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => {
                                    if (!!control.controls.client_id.value.id == false) {
                                        return;
                                    }
                                    if (control.pristine == false) {
                                        this.submit$.next(control);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                    }
                }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexDefaultValuesGridServer`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexDefaultValuesGridServer`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexDefaultValuesGridServer`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 6166 };
                    formDefaultsConfigs['client_id'] = { contentType: "integer", type: "dropdown", defaultValue: "", listId: 6167 };
                    formDefaultsConfigs['first_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 6168 };
                    formDefaultsConfigs['last_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 6169 };
                    formDefaultsConfigs['notes'] = { contentType: "text", type: "none", defaultValue: "", listId: 6170 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 6171 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 6166, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), client_id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "client_id", "dropdown", false, formDefaults['client_id'], 6167, "select"), { validators: [forms_2.Validators.required], updateOn: 'change' }), first_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "first_name", "none", false, formDefaults['first_name'], 6168, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(35)], updateOn: 'blur' }), last_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "last_name", "none", false, formDefaults['last_name'], 6169, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(35)], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 6170, "text"), { validators: [forms_2.Validators.maxLength(250)], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 6171, "datetime"), { validators: [], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { this.lists.list6167.setupModel(formGroup.controls.client_id); });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list6167.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexDefaultValuesGridServer', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexDefaultValuesGridServer' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexDefaultValuesGridServerComponent_Factory(t) { return new (t || dibexDefaultValuesGridServerComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexDefaultValuesGridServerComponent, selectors: [["dibex-default-values-grid-server"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 70, vars: 43, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci6154", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%"], [3, "dibPort"], ["color", "accent", "mat-raised-button", "", "id", "ci6194", "dibComponent", "btnGridInlineAdd", "aria-label", "Add new record inside the grid", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/add.svg"], [1, "dibButtonCaption"], ["mat-mini-fab", "", "color", "accent", "id", "ci6155", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci6156", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci6162", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci6160", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci6158", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci6159", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci6157", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci6161", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci6163", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "client_id"], ["matColumnDef", "first_name"], ["matColumnDef", "last_name"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "columnHeader"], ["matColumnDef", "btnGridInlineSave"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexDefaultValuesGridServer", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci6158", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci6159", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci6161", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci6166", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%", "align-self", "stretch"], ["required", "true", "type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["auto6167trigger", "matAutocompleteTrigger", "input6167", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto6167", "matAutocomplete"], ["mode", "indeterminate", 4, "ngIf"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], ["mode", "indeterminate"], [3, "ngClass", "value", "innerHtml"], ["id", "ci6167", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%", "align-self", "stretch"], ["type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "35", "required", "true", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci6168", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "35", "required", "true", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci6169", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "last_name", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "notes", "maxlength", "250", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci6170", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matPrefix", "", 3, "for"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker6171", ""], ["id", "ci6171", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "columnHeader"], ["mat-mini-fab", "", "color", "primary", "id", "ci6680", "dibComponent", "btnGridInlineSave", "style", "  ", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci6680", "dibComponent", "btnGridInlineSave", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "save"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "btnGridInlineSave", "style", "  ", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "btnGridInlineSave", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["mat-header-cell", "", 2, "height", "4px"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexDefaultValuesGridServerComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexDefaultValuesGridServerComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_Template_button_click_4_listener() { return ctx.inlineAddNewRow(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementStart(6, "span", 6);
                        i0.ɵɵtext(7, "Add Inline Record");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(8, "button", 7);
                        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_Template_button_click_8_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(9, "dib-icon", 8);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(10, "button", 9);
                        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_Template_button_click_10_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(11, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(12, "span", 11);
                        i0.ɵɵpipe(13, "safeHtml");
                        i0.ɵɵelementStart(14, "button", 12);
                        i0.ɵɵlistener("click", function dibexDefaultValuesGridServerComponent_Template_button_click_14_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(15, "dib-icon", 13);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(16, dibexDefaultValuesGridServerComponent_button_16_Template, 2, 4, "button", 14);
                        i0.ɵɵtemplate(17, dibexDefaultValuesGridServerComponent_button_17_Template, 2, 4, "button", 15);
                        i0.ɵɵelement(18, "span", 16);
                        i0.ɵɵtemplate(19, dibexDefaultValuesGridServerComponent_div_19_Template, 5, 3, "div", 17);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(20, "mat-card", 18)(21, "mat-card-content", 19);
                        i0.ɵɵelementContainerStart(22, 3);
                        i0.ɵɵelementStart(23, "div", 20, 21)(25, "form", 22);
                        i0.ɵɵelementContainerStart(26, 23);
                        i0.ɵɵelementStart(27, "table", 24);
                        i0.ɵɵelementContainerStart(28, 25);
                        i0.ɵɵtemplate(29, dibexDefaultValuesGridServerComponent_th_29_Template, 2, 2, "th", 26);
                        i0.ɵɵtemplate(30, dibexDefaultValuesGridServerComponent_td_30_Template, 2, 1, "td", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(31, 28);
                        i0.ɵɵtemplate(32, dibexDefaultValuesGridServerComponent_td_32_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(33, dibexDefaultValuesGridServerComponent_th_33_Template, 5, 3, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(34, 31);
                        i0.ɵɵtemplate(35, dibexDefaultValuesGridServerComponent_td_35_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(36, dibexDefaultValuesGridServerComponent_th_36_Template, 5, 3, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(37, 32);
                        i0.ɵɵtemplate(38, dibexDefaultValuesGridServerComponent_td_38_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(39, dibexDefaultValuesGridServerComponent_th_39_Template, 5, 3, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(40, 33);
                        i0.ɵɵtemplate(41, dibexDefaultValuesGridServerComponent_td_41_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(42, dibexDefaultValuesGridServerComponent_th_42_Template, 5, 3, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(43, 34);
                        i0.ɵɵtemplate(44, dibexDefaultValuesGridServerComponent_td_44_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(45, dibexDefaultValuesGridServerComponent_th_45_Template, 5, 3, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(46, 35);
                        i0.ɵɵtemplate(47, dibexDefaultValuesGridServerComponent_td_47_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(48, dibexDefaultValuesGridServerComponent_th_48_Template, 5, 3, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(49, 36);
                        i0.ɵɵtemplate(50, dibexDefaultValuesGridServerComponent_td_50_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(51, dibexDefaultValuesGridServerComponent_th_51_Template, 1, 0, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(52, 37);
                        i0.ɵɵtemplate(53, dibexDefaultValuesGridServerComponent_td_53_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(54, dibexDefaultValuesGridServerComponent_th_54_Template, 1, 0, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(55, 38);
                        i0.ɵɵtemplate(56, dibexDefaultValuesGridServerComponent_th_56_Template, 2, 2, "th", 39);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(57, 40);
                        i0.ɵɵtemplate(58, dibexDefaultValuesGridServerComponent_th_58_Template, 2, 2, "th", 41);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(59, dibexDefaultValuesGridServerComponent_ng_container_59_Template, 3, 3, "ng-container", 42);
                        i0.ɵɵtemplate(60, dibexDefaultValuesGridServerComponent_tr_60_Template, 1, 3, "tr", 43);
                        i0.ɵɵtemplate(61, dibexDefaultValuesGridServerComponent_tr_61_Template, 1, 3, "tr", 43);
                        i0.ɵɵtemplate(62, dibexDefaultValuesGridServerComponent_tr_62_Template, 1, 4, "tr", 44);
                        i0.ɵɵpipe(63, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(64, dibexDefaultValuesGridServerComponent_64_Template, 1, 1, null, 45);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(65, "div", null, 46);
                        i0.ɵɵtemplate(67, dibexDefaultValuesGridServerComponent_mat_toolbar_67_Template, 6, 3, "mat-toolbar", 45);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(68, dibexDefaultValuesGridServerComponent_ng_template_68_Template, 34, 4, "ng-template", null, 47, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r29 = i0.ɵɵreference(66);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(39, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6154");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Add new record inside the grid")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵattribute("aria-label", "Add Inline Record");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(13, 35, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6163");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r29);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(32);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(41, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(42, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(63, 37, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibAutocompleteScrollToOnFocusDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatAutocomplete, i8.MatOption, i7.MatAutocompleteTrigger, i9.MatButton, i9.MatIconButton, i9.MatMiniFabButton, i10.MatCheckbox, i11.MatDatepickerToggle, i12.MatFormField, i12.MatLabel, i12.MatError, i12.MatPrefix, i12.MatSuffix, i13.MatIcon, i14.MatInput, i15.MatProgressBar, i16.MatToolbar, i16.MatToolbarRow, i17.MatTooltip, i18.MatCard, i18.MatCardContent, i19.MatTable, i19.MatHeaderCellDef, i19.MatHeaderRowDef, i19.MatColumnDef, i19.MatCellDef, i19.MatRowDef, i19.MatHeaderCell, i19.MatCell, i19.MatHeaderRow, i19.MatRow, i20.MatSort, i20.MatSortHeader, i21.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexDefaultValuesGridServer'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexDefaultValuesGridServerComponent.prototype, "reloadContainer", null);
            exports_1("dibexDefaultValuesGridServerComponent", dibexDefaultValuesGridServerComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexDefaultValuesGridServerComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-default-values-grid-server', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  " id=ci6154 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6154'" ><button color=accent  mat-raised-button id=ci6194 dibComponent=btnGridInlineAdd   style="  " aria-label="Add new record inside the grid"  [matTooltip]="'Add new record inside the grid'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="inlineAddNewRow()"  [attr.aria-label]="'Add Inline Record'"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/add.svg"></dib-icon><span class=dibButtonCaption >Add Inline Record</span></button><button mat-mini-fab color=accent  id=ci6155 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"  [matTooltip]="'Delete selected record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button   mat-mini-fab color=primary  id=ci6156 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><span  id=ci6162 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci6160 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci6158 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci6159 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci6157 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci6161 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Default Values Grid Server: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci6163 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'6163'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexDefaultValuesGridServer" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6166 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><input #auto6167trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input6167  [matAutocomplete]="auto6167"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list6167, auto6167trigger); input6167.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto6167=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list6167).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list6167).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6167.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci6167 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><mat-label>Client</mat-label><input #auto6167trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input6167  [matAutocomplete]="auto6167"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list6167, auto6167trigger); input6167.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto6167=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list6167).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list6167).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6167.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='35'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6168 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='35'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6169 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=notes   maxlength='250'  name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('notes','maxlength',rowForm)">Please enter 250 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6170 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker6171"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker6171"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker6171></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6171 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><ng-container [dibPort]="'6679'" ><button   mat-mini-fab color=primary  id=ci6680 dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridInlineSave  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button   mat-mini-fab color=primary  dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexDefaultValuesGridServer><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6166 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><input #auto6167trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input6167  [matAutocomplete]="auto6167"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list6167, auto6167trigger); input6167.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto6167=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list6167).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list6167).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6167.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci6167 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><mat-label>Client</mat-label><input #auto6167trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input6167  [matAutocomplete]="auto6167"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list6167, auto6167trigger); input6167.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto6167=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list6167).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list6167).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6167.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='35'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6168 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='35'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6169 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=notes   maxlength='250'  name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('notes','maxlength',rowForm)">Please enter 250 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6170 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker6171"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker6171"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker6171></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6171 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><ng-container [dibPort]="'6679'" ><button   mat-mini-fab color=primary  id=ci6680 dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridInlineSave  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button   mat-mini-fab color=primary  dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule];
            dibexDefaultValuesGridServerModule = class dibexDefaultValuesGridServerModule {
                static entry = dibexDefaultValuesGridServerComponent;
                static ɵfac = function dibexDefaultValuesGridServerModule_Factory(t) { return new (t || dibexDefaultValuesGridServerModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexDefaultValuesGridServerModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexDefaultValuesGridServerModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexDefaultValuesGridServerModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexDefaultValuesGridServerComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexDefaultValuesGridServerModule, { declarations: [dibexDefaultValuesGridServerComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
