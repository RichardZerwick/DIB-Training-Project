System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/forms", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/common", "@angular/material/card", "@angular/material/autocomplete", "@angular/material/select", "@angular/material/button", "@angular/material/icon", "@ngbracket/ngx-layout/extended", "@angular/cdk/scrolling", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "ngx-mat-select-search", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, forms_1, core_2, shared_3, rxjs_1, operators_1, core_3, common_1, shared_4, shared_5, card_1, autocomplete_1, select_1, button_1, icon_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, _c0, _c1, _c2, _c3, importsRequired, dibexComponentsSelectsComponent, containerModules, fullDateTimeOptions, dibexComponentsSelectsModule;
    var __moduleName = context_1 && context_1.id;
    function dibexComponentsSelectsComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 64);
    } }
    function dibexComponentsSelectsComponent_mat_option_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r25 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r25.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r25.id_display_value, "");
    } }
    function dibexComponentsSelectsComponent_mat_progress_bar_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 64);
    } }
    function dibexComponentsSelectsComponent_mat_option_51_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span", 67);
    } if (rf & 2) {
        const item_r26 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵproperty("innerHtml", item_r26.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexComponentsSelectsComponent_mat_option_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 65);
        i0.ɵɵtemplate(1, dibexComponentsSelectsComponent_mat_option_51_span_1_Template, 1, 1, "span", 66);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r26 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r26);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", item_r26.id_display_value);
    } }
    function dibexComponentsSelectsComponent_button_61_Template(rf, ctx) { if (rf & 1) {
        const _r30 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 68);
        i0.ɵɵlistener("click", function dibexComponentsSelectsComponent_button_61_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r30); const ctx_r29 = i0.ɵɵnextContext(); const _r4 = i0.ɵɵreference(59); const _r5 = i0.ɵɵreference(60); ctx_r29.clearDropdown(ctx_r29.model.modelItems.autocomplete.formControl, $event, ctx_r29.lists.list6299, _r4); return i0.ɵɵresetView(_r5.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexComponentsSelectsComponent_mat_progress_bar_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 64);
    } }
    function dibexComponentsSelectsComponent_mat_option_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 69);
    } if (rf & 2) {
        const item_r31 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c2, item_r31.id == "0"))("value", item_r31)("innerHtml", item_r31.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexComponentsSelectsComponent_button_74_Template(rf, ctx) { if (rf & 1) {
        const _r33 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 68);
        i0.ɵɵlistener("click", function dibexComponentsSelectsComponent_button_74_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r33); const ctx_r32 = i0.ɵɵnextContext(); const _r10 = i0.ɵɵreference(72); const _r11 = i0.ɵɵreference(73); ctx_r32.clearDropdown(ctx_r32.model.modelItems.autocompleteCustomList.formControl, $event, ctx_r32.lists.list6846, _r10); return i0.ɵɵresetView(_r11.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexComponentsSelectsComponent_mat_progress_bar_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 64);
    } }
    function dibexComponentsSelectsComponent_mat_option_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 69);
    } if (rf & 2) {
        const item_r34 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c2, item_r34.id == "0"))("value", item_r34)("innerHtml", item_r34.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexComponentsSelectsComponent_mat_progress_bar_99_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 64);
    } }
    function dibexComponentsSelectsComponent_mat_option_106_Template(rf, ctx) { if (rf & 1) {
        const _r38 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-option", 70, 71);
        i0.ɵɵlistener("onSelectionChange", function dibexComponentsSelectsComponent_mat_option_106_Template_mat_option_onSelectionChange_0_listener($event) { i0.ɵɵrestoreView(_r38); const ctx_r37 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r37.lists.list6306.onSelectionChange($event)); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r35 = ctx.$implicit;
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵproperty("hidden", !!ctx_r19.lists.list6306.busy)("value", item_r35);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", item_r35.id_display_value, "");
    } }
    function dibexComponentsSelectsComponent_mat_option_136_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 65);
        i0.ɵɵelement(1, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r39 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r39.id);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("innerHtml", item_r39.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexComponentsSelectsComponent_mat_progress_bar_171_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 64);
    } }
    function dibexComponentsSelectsComponent_mat_option_172_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span", 67);
    } if (rf & 2) {
        const item_r40 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵproperty("innerHtml", item_r40.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexComponentsSelectsComponent_mat_option_172_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 65);
        i0.ɵɵtemplate(1, dibexComponentsSelectsComponent_mat_option_172_span_1_Template, 1, 1, "span", 66);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r40 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r40);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", item_r40.id_display_value);
    } }
    function dibexComponentsSelectsComponent_mat_progress_bar_178_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 64);
    } }
    function dibexComponentsSelectsComponent_mat_option_179_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span", 67);
    } if (rf & 2) {
        const item_r43 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵproperty("innerHtml", item_r43.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexComponentsSelectsComponent_mat_option_179_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 65);
        i0.ɵɵtemplate(1, dibexComponentsSelectsComponent_mat_option_179_span_1_Template, 1, 1, "span", 66);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r43 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r43);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", item_r43.id_display_value);
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i2 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                i6 = forms_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
                i8 = core_2_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i3 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i7 = autocomplete_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i14 = select_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i9 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (i4_1) {
                i4 = i4_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = ["cdk6306"];
            _c1 = ["cdkMatOption6306"];
            _c2 = function (a0) { return { "extra-node": a0 }; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexComponentsSelectsComponent = class dibexComponentsSelectsComponent extends shared_1.BaseComponent {
                httpClient;
                sd;
                cd;
                cdkVirtualScrollViewPort6306;
                listOptions6306;
                view = { container: { id: 260, name: 'dibexComponentsSelects', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*6307'] }, dropin: 'plain', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: [], recordStatus: 'create', debug: false, debugItem: false };
                clientData;
                allClientData;
                model;
                constructor(injector, httpClient, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list6301 = new shared_2.DibMenu("/dropins/dibExamples/CustomCrud/getTree?containerItemId=6301&containerName=dibexComponentsSelects&rootMenuId=6301", null, null);
                    this.lists.list6299 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexComponentsSelects&containerItemId=6299", null, null, 50);
                    this.lists.list6304 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexComponentsSelects&containerItemId=6304", null, null, 40);
                    this.lists.list6306 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexComponentsSelects&containerItemId=6306", null, null, 40);
                    this.lists.list6844 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexComponentsSelects&containerItemId=6844", null, null, 40);
                    this.lists.list6845 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexComponentsSelects&containerItemId=6845", 'dibexComponentsSelects_clientContactId', null, 40);
                    this.lists.list6846 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexComponentsSelects&containerItemId=6846", null, null, 40);
                    this.lists.list7172 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexComponentsSelects&containerItemId=7172", null, null, 40);
                    this.lists.list6300 = new shared_2.DibEnumList(this.translationService, this.eventService, 'selectEnum', ['a', 'b', 'c'], false);
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexComponentsSelects');
                    this.containerName = 'dibexComponentsSelects'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { autocomplete: { itemId: 6299, type: 'select', fieldAlias: 'autocomplete', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 6299 }, selectEnum: { itemId: 6300, type: 'text', fieldAlias: 'selectEnum', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['a', 'b', 'c'] }, autocompleteTree: { itemId: 6301, type: 'select', fieldAlias: 'autocompleteTree', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false }, select: { itemId: 6304, type: 'select', fieldAlias: 'select', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 6304 }, selectMulti: { itemId: 6306, type: 'multiselect', fieldAlias: 'selectMulti', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: 'selectMulti', default: '', dataType: 'multiselect', contentType: 'integer', changeUrl: false,
                            listId: 6306 }, infoAutoComplete: { itemId: 6840, type: 'none', fieldAlias: 'infoAutoComplete', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'none', contentType: '', changeUrl: false }, clientId: { itemId: 6844, type: 'select', fieldAlias: 'clientId', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: 'clientId', default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 6844 }, clientContactId: { itemId: 6845, type: 'select', fieldAlias: 'clientContactId', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 6845 }, autocompleteCustomList: { itemId: 6846, type: 'select', fieldAlias: 'autocompleteCustomList', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 6846 }, selectSearch: { itemId: 7172, type: 'select', fieldAlias: 'selectSearch', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 7172 }, };
                    this.model.$formGroup.addControl('autocomplete', this.model.modelItems.autocomplete.formControl);
                    this.model.$formGroup.addControl('selectEnum', this.model.modelItems.selectEnum.formControl);
                    this.model.$formGroup.addControl('autocompleteTree', this.model.modelItems.autocompleteTree.formControl);
                    this.model.$formGroup.addControl('select', this.model.modelItems.select.formControl);
                    this.model.$formGroup.addControl('selectMulti', this.model.modelItems.selectMulti.formControl);
                    this.model.$formGroup.addControl('infoAutoComplete', this.model.modelItems.infoAutoComplete.formControl);
                    this.model.$formGroup.addControl('clientId', this.model.modelItems.clientId.formControl);
                    this.model.$formGroup.addControl('clientContactId', this.model.modelItems.clientContactId.formControl);
                    this.model.$formGroup.addControl('autocompleteCustomList', this.model.modelItems.autocompleteCustomList.formControl);
                    this.model.$formGroup.addControl('selectSearch', this.model.modelItems.selectSearch.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.setInnerHtml('infoSelect', `<i><b>select</b> based on a SQL query, dibexqsClient</i>`);
                    this.setInnerHtml('infoAutoComplete', `<i><b>autocomplete</b> based on a foreign-key reference</i>`);
                    this.setInnerHtml('infoAutoCompleteCustom', `<i><b>autocomplete</b> based on a custom Crud Store Controller (Pg3 in Designer)</i>`);
                    this.setInnerHtml('infoSelect', `<i><b>select</b> based on a SQL query, dibexqsClient</i>`);
                    this.setInnerHtml('infoAutoComplete', `<i><b>autocomplete</b> based on a foreign-key reference</i>`);
                    this.setInnerHtml('infoAutoCompleteCustom', `<i><b>autocomplete</b> based on a custom Crud Store Controller (Pg3 in Designer)</i>`);
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnClientData", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/General/showClientData", itemAlias: "btnClientData", waitForCompletion: false, containerName: "dibexComponentsSelects", handlers: [] }, this.clientData, { itemEventId: 'ie389-dib', itemId: '6849', });
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource6299 = this.lists.list6299.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6299 = new Date().getTime();
                    let previousUrlChange6299;
                    let previousResponse6299;
                    this.lists.list6299.items = rxjs_1.combineLatest([this.lists.list6299.updatedList$, itemsUpdateSource6299]).pipe(operators_1.tap(() => { this.lists.list6299.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6299 - new Date().getTime()) / 1000;
                        previousTimeChange6299 = new Date().getTime();
                        previousUrlChange6299 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6299 = response;
                            this.lists.list6299.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6299.items.subscribe(records => this.lists.list6299.lastItems = records);
                    this.lists.list6299.multiSelected = [];
                    this.lists.list6299.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6299.updatedList$.next([]);
                        self.lists.list6299.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6299.refresh();
                    }
                    else {
                        self.lists.list6299.searchForm.setValue('');
                        self.lists.list6299.updatedList$.next(self.lists.list6299.multiSelected);
                        self.model.modelItems.autocomplete.formControl.setValue(self.lists.list6299.multiSelected);
                    } };
                    this.lists.list6299.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6299.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6299.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6299.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6299.multiSelected.push(value);
                            }
                        }
                        lists.list6299.multiSelected = self.removeDuplicateIdsFromArray(lists.list6299.multiSelected);
                    };
                    const itemsUpdateSource6301 = this.lists.list6301.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6301 = new Date().getTime();
                    let previousUrlChange6301;
                    let previousResponse6301;
                    this.lists.list6301.items = rxjs_1.combineLatest([this.lists.list6301.updatedList$, itemsUpdateSource6301]).pipe(operators_1.tap(() => { this.lists.list6301.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6301 - new Date().getTime()) / 1000;
                        previousTimeChange6301 = new Date().getTime();
                        previousUrlChange6301 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6301 = response;
                            this.lists.list6301.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            window.dispatchEvent(new Event('resize'));
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6301.items.subscribe(records => this.lists.list6301.lastItems = records);
                    this.lists.list6301.multiSelected = [];
                    this.lists.list6301.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6301.updatedList$.next([]);
                        self.lists.list6301.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6301.refresh();
                    }
                    else {
                        self.lists.list6301.searchForm.setValue('');
                        self.lists.list6301.updatedList$.next(self.lists.list6301.multiSelected);
                        self.model.modelItems.autocompleteTree.formControl.setValue(self.lists.list6301.multiSelected);
                    } };
                    this.lists.list6301.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6301.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6301.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6301.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6301.multiSelected.push(value);
                            }
                        }
                        lists.list6301.multiSelected = self.removeDuplicateIdsFromArray(lists.list6301.multiSelected);
                    };
                    const itemsUpdateSource6304 = this.lists.list6304.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6304 = new Date().getTime();
                    let previousUrlChange6304;
                    let previousResponse6304;
                    this.lists.list6304.items = rxjs_1.combineLatest([this.lists.list6304.updatedList$, itemsUpdateSource6304]).pipe(operators_1.tap(() => { this.lists.list6304.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6304 - new Date().getTime()) / 1000;
                        previousTimeChange6304 = new Date().getTime();
                        previousUrlChange6304 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6304 = response;
                            this.lists.list6304.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6304.items.subscribe(records => this.lists.list6304.lastItems = records);
                    this.lists.list6304.multiSelected = [];
                    this.lists.list6304.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6304.updatedList$.next([]);
                        self.lists.list6304.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6304.refresh();
                    }
                    else {
                        self.lists.list6304.searchForm.setValue('');
                        self.lists.list6304.updatedList$.next(self.lists.list6304.multiSelected);
                        self.model.modelItems.select.formControl.setValue(self.lists.list6304.multiSelected);
                    } };
                    this.lists.list6304.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6304.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6304.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6304.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6304.multiSelected.push(value);
                            }
                        }
                        lists.list6304.multiSelected = self.removeDuplicateIdsFromArray(lists.list6304.multiSelected);
                    };
                    const itemsUpdateSource6306 = this.lists.list6306.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6306 = new Date().getTime();
                    let previousUrlChange6306;
                    let previousResponse6306;
                    this.lists.list6306.items = rxjs_1.combineLatest([this.lists.list6306.updatedList$, itemsUpdateSource6306]).pipe(operators_1.tap(() => { this.lists.list6306.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6306 - new Date().getTime()) / 1000;
                        previousTimeChange6306 = new Date().getTime();
                        previousUrlChange6306 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6306 = response;
                            this.lists.list6306.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6306.items.subscribe(records => this.lists.list6306.lastItems = records);
                    this.lists.list6306.multiSelected = [];
                    this.lists.list6306.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6306.updatedList$.next([]);
                        self.cdkVirtualScrollViewPort6306.scrollToIndex(5);
                        self.cdkVirtualScrollViewPort6306.scrollToIndex(0);
                        self.cdkVirtualScrollViewPort6306.checkViewportSize();
                        self.lists.list6306.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6306.refresh();
                    }
                    else {
                        self.lists.list6306.searchForm.setValue('');
                        self.lists.list6306.updatedList$.next(self.lists.list6306.multiSelected);
                        self.model.modelItems.selectMulti.formControl.setValue(self.lists.list6306.multiSelected);
                    } };
                    this.lists.list6306.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6306.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6306.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6306.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6306.multiSelected.push(value);
                            }
                        }
                        lists.list6306.multiSelected = self.removeDuplicateIdsFromArray(lists.list6306.multiSelected);
                    };
                    const itemsUpdateSource6844 = this.lists.list6844.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6844 = new Date().getTime();
                    let previousUrlChange6844;
                    let previousResponse6844;
                    this.lists.list6844.items = rxjs_1.combineLatest([this.lists.list6844.updatedList$, itemsUpdateSource6844]).pipe(operators_1.tap(() => { this.lists.list6844.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6844 - new Date().getTime()) / 1000;
                        previousTimeChange6844 = new Date().getTime();
                        previousUrlChange6844 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6844 = response;
                            this.lists.list6844.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6844.items.subscribe(records => this.lists.list6844.lastItems = records);
                    this.lists.list6844.multiSelected = [];
                    this.lists.list6844.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6844.updatedList$.next([]);
                        self.lists.list6844.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6844.refresh();
                    }
                    else {
                        self.lists.list6844.searchForm.setValue('');
                        self.lists.list6844.updatedList$.next(self.lists.list6844.multiSelected);
                        self.model.modelItems.clientId.formControl.setValue(self.lists.list6844.multiSelected);
                    } };
                    this.lists.list6844.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6844.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6844.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6844.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6844.multiSelected.push(value);
                            }
                        }
                        lists.list6844.multiSelected = self.removeDuplicateIdsFromArray(lists.list6844.multiSelected);
                    };
                    const itemsUpdateSource6845 = this.lists.list6845.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6845 = new Date().getTime();
                    let previousUrlChange6845;
                    let previousResponse6845;
                    this.lists.list6845.items = rxjs_1.combineLatest([this.lists.list6845.updatedList$, itemsUpdateSource6845]).pipe(operators_1.tap(() => { this.lists.list6845.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6845 - new Date().getTime()) / 1000;
                        previousTimeChange6845 = new Date().getTime();
                        previousUrlChange6845 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6845 = response;
                            this.lists.list6845.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6845.items.subscribe(records => this.lists.list6845.lastItems = records);
                    this.lists.list6845.multiSelected = [];
                    this.lists.list6845.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6845.updatedList$.next([]);
                        self.lists.list6845.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6845.refresh();
                    }
                    else {
                        self.lists.list6845.searchForm.setValue('');
                        self.lists.list6845.updatedList$.next(self.lists.list6845.multiSelected);
                        self.model.modelItems.clientContactId.formControl.setValue(self.lists.list6845.multiSelected);
                    } };
                    this.lists.list6845.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6845.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6845.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6845.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6845.multiSelected.push(value);
                            }
                        }
                        lists.list6845.multiSelected = self.removeDuplicateIdsFromArray(lists.list6845.multiSelected);
                    };
                    const itemsUpdateSource6846 = this.lists.list6846.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6846 = new Date().getTime();
                    let previousUrlChange6846;
                    let previousResponse6846;
                    this.lists.list6846.items = rxjs_1.combineLatest([this.lists.list6846.updatedList$, itemsUpdateSource6846]).pipe(operators_1.tap(() => { this.lists.list6846.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6846 - new Date().getTime()) / 1000;
                        previousTimeChange6846 = new Date().getTime();
                        previousUrlChange6846 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6846 = response;
                            this.lists.list6846.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6846.items.subscribe(records => this.lists.list6846.lastItems = records);
                    this.lists.list6846.multiSelected = [];
                    this.lists.list6846.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6846.updatedList$.next([]);
                        self.lists.list6846.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6846.refresh();
                    }
                    else {
                        self.lists.list6846.searchForm.setValue('');
                        self.lists.list6846.updatedList$.next(self.lists.list6846.multiSelected);
                        self.model.modelItems.autocompleteCustomList.formControl.setValue(self.lists.list6846.multiSelected);
                    } };
                    this.lists.list6846.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6846.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6846.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6846.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6846.multiSelected.push(value);
                            }
                        }
                        lists.list6846.multiSelected = self.removeDuplicateIdsFromArray(lists.list6846.multiSelected);
                    };
                    const itemsUpdateSource7172 = this.lists.list7172.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange7172 = new Date().getTime();
                    let previousUrlChange7172;
                    let previousResponse7172;
                    this.lists.list7172.items = rxjs_1.combineLatest([this.lists.list7172.updatedList$, itemsUpdateSource7172]).pipe(operators_1.tap(() => { this.lists.list7172.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange7172 - new Date().getTime()) / 1000;
                        previousTimeChange7172 = new Date().getTime();
                        previousUrlChange7172 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse7172 = response;
                            this.lists.list7172.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list7172.items.subscribe(records => this.lists.list7172.lastItems = records);
                    this.lists.list7172.multiSelected = [];
                    this.lists.list7172.reset = function (isOpen) { if (isOpen) {
                        self.lists.list7172.updatedList$.next([]);
                        self.lists.list7172.searchForm.setValue('', { emitEvent: false });
                        self.lists.list7172.refresh();
                    }
                    else {
                        self.lists.list7172.searchForm.setValue('');
                        self.lists.list7172.updatedList$.next(self.lists.list7172.multiSelected);
                        self.model.modelItems.selectSearch.formControl.setValue(self.lists.list7172.multiSelected);
                    } };
                    this.lists.list7172.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list7172.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list7172.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list7172.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list7172.multiSelected.push(value);
                            }
                        }
                        lists.list7172.multiSelected = self.removeDuplicateIdsFromArray(lists.list7172.multiSelected);
                    };
                    lists = this.lists;
                    this.reloadContainer();
                }
                ngAfterViewInit() {
                    super.ngAfterViewInit();
                    this.lists.list6299.setupModel(this.model.modelItems.autocomplete.formControl);
                    this.lists.list6304.setupModel(this.model.modelItems.select.formControl);
                    this.lists.list6306.setupModel(this.model.modelItems.selectMulti.formControl);
                    this.lists.list6844.setupModel(this.model.modelItems.clientId.formControl);
                    this.lists.list6845.setupModel(this.model.modelItems.clientContactId.formControl);
                    this.lists.list6846.setupModel(this.model.modelItems.autocompleteCustomList.formControl);
                    this.lists.list7172.setupModel(this.model.modelItems.selectSearch.formControl);
                    this.sd
                        .scrolled().pipe(operators_1.takeUntil(this.onDestroy)).pipe(operators_1.filter(scrollable => this.cdkVirtualScrollViewPort6306 === scrollable)).subscribe(() => { this.refreshMultiSelectedItems(this.listOptions6306, this.lists.list6306, this.cd); });
                    this.lists.list6306.items.pipe(operators_1.takeUntil(this.onDestroy)).subscribe((items) => { this.refreshMultiSelectedItems(this.listOptions6306, this.lists.list6306, this.cd); });
                    window.dispatchEvent(new Event('resize'));
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list6299.dispose();
                    this.lists.list6304.dispose();
                    this.lists.list6306.dispose();
                    this.lists.list6844.dispose();
                    this.lists.list6845.dispose();
                    this.lists.list6846.dispose();
                    this.lists.list7172.dispose();
                    this.lists.list6300.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexComponentsSelects', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexComponentsSelects' });
                    this.reloadSubcontainers();
                }
                static ɵfac = function dibexComponentsSelectsComponent_Factory(t) { return new (t || dibexComponentsSelectsComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexComponentsSelectsComponent, selectors: [["dibex-components-selects"]], viewQuery: function dibexComponentsSelectsComponent_Query(rf, ctx) { if (rf & 1) {
                        i0.ɵɵviewQuery(_c0, 5);
                        i0.ɵɵviewQuery(_c1, 5);
                    } if (rf & 2) {
                        let _t;
                        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewPort6306 = _t.first);
                        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOptions6306 = _t);
                    } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 181, vars: 69, consts: [["mode", "indeterminate", 4, "ngIf"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci6307", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexComponentsSelects", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci6837", "dibComponent", "card", 2, "width", "1000px !important", "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px"], [3, "dibPort"], ["id", "ci6838", "dibComponent", "comment", 2, "margin", "10px 0px !important"], [1, "dib-comment"], ["id", "ci6300", "dibComponent", "selectEnum", "appearance", "standard", 2, "width", "200px !important", "display", "flex", "flex-direction", "column"], ["formControlName", "selectEnum"], [3, "value", 4, "ngFor", "ngForOf"], ["id", "ci6303", "dibComponent", "card", 2, "width", "1000px !important", "flex", "1 1 0%"], ["id", "ci6302", "dibComponent", "comment", 2, "margin", "10px 0px !important", "max-width", "1000px"], ["id", "ci6839", "dibComponent", "span", 3, "innerHtml"], ["id", "ci6304", "dibComponent", "select", "appearance", "standard", 2, "width", "250px !important", "display", "flex", "flex-direction", "column"], ["formControlName", "select", 3, "compareWith", "openedChange"], ["id", "ci6840", "dibComponent", "span", 3, "innerHtml"], ["id", "ci6299", "dibComponent", "autocomplete", "appearance", "standard", 2, "width", "250px !important", "display", "flex", "flex-direction", "column", "flex", "1 1 0%", "align-self", "stretch"], ["type", "text", "matInput", "", "formControlName", "autocomplete", 3, "matAutocomplete"], ["auto6299trigger", "matAutocompleteTrigger", "input6299", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto6299", "matAutocomplete"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["id", "ci6841", "dibComponent", "span", 3, "innerHtml"], ["id", "ci6846", "dibComponent", "autocomplete", "appearance", "standard", 2, "width", "250px !important", "display", "flex", "flex-direction", "column", "flex", "1 1 0%", "align-self", "stretch"], ["type", "text", "matInput", "", "formControlName", "autocompleteCustomList", 3, "matAutocomplete"], ["auto6846trigger", "matAutocompleteTrigger", "input6846", ""], ["auto6846", "matAutocomplete"], ["id", "ci6305", "dibComponent", "card", 2, "width", "1000px !important", "flex", "1 1 0%"], ["id", "ci6848", "dibComponent", "comment", 2, "margin", "10px 0px !important"], ["item-alias", "selectMulti", "id", "ci6306", "dibComponent", "selectMulti", "appearance", "standard", 2, "width", "270px !important", "display", "flex", "flex-direction", "column"], ["multiple", "", "formControlName", "selectMulti", "panelClass", "dib-combo-panel", 3, "compareWith", "openedChange"], ["select6306", ""], [2, "width", "100%"], ["autocomplete", "off", "aria-label", "Search", "matInput", "", 3, "placeholder", "formControl"], [2, "display", "flex", "flex-direction", "row"], [2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%"], ["itemSize", "10"], ["cdk6306", ""], [3, "hidden", "value", "onSelectionChange", 4, "cdkVirtualFor", "cdkVirtualForOf"], [2, "display", "flex", "flex-direction", "column", "padding", "0px 6px"], ["aria-label", "Close", "matTooltip", "Close", "matTooltipClass", "dib-tooltip", 3, "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "close"], ["aria-label", "Clear", "matTooltip", "Clear", "matTooltipClass", "dib-tooltip", 3, "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "layers_clear"], ["mat-raised-button", "", "color", "primary", "id", "ci6849", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnClientData", "type", "button", 2, "width", "170px !important", 3, "containerPortId"], [1, "dibButtonCaption"], ["id", "ci7171", "dibComponent", "card", 2, "width", "1000px !important", "flex", "1 1 0%"], ["id", "ci7173", "dibComponent", "comment", 2, "margin", "10px 0px !important"], ["id", "ci7172", "dibComponent", "selectSearch", 2, "width", "300px !important", "display", "flex", "flex-direction", "row"], ["appearance", "standard", 2, "flex", "1 1 0%"], [3, "formControl"], ["id", "ci6298", "dibComponent", "card", 2, "width", "1000px !important", "flex", "1 1 0%"], ["id", "ci6847", "dibComponent", "comment", 2, "margin", "10px 0px !important"], ["id", "ci6301", "dibComponent", "autocompleteTree", "formControlName", "autocompleteTree", "clearIcon", "", "label", "autocompleteTree", 2, "width", "400px !important", "flex", "1 1 0%", 3, "treeService", "showDropdownClearButton", "clearSelection", "opened"], ["id", "ci6842", "dibComponent", "section", 2, "width", "1000px !important", "overflow", "auto !important"], ["id", "ci6843", "dibComponent", "comment"], ["id", "ci6844", "dibComponent", "select", "item-alias", "clientId", "appearance", "standard", 2, "width", "300px !important", "display", "flex", "flex-direction", "column"], ["formControlName", "clientId", 3, "compareWith", "openedChange"], ["id", "ci6845", "dibComponent", "select", "dib-active-filter", "dibexComponentsSelects_clientContactId", "dib-container-filter-settings", "{  'dibexComponentsSelects_clientContactId' : 'alias_self_clientId'}", "appearance", "standard", 2, "width", "300px !important", "display", "flex", "flex-direction", "column"], ["formControlName", "clientContactId", 3, "compareWith", "openedChange"], ["mode", "indeterminate"], [3, "value"], [3, "innerHtml", 4, "ngIf"], [3, "innerHtml"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], [3, "ngClass", "value", "innerHtml"], [3, "hidden", "value", "onSelectionChange"], ["cdkMatOption6306", ""]], template: function dibexComponentsSelectsComponent_Template(rf, ctx) { if (rf & 1) {
                        const _r46 = i0.ɵɵgetCurrentView();
                        i0.ɵɵtemplate(0, dibexComponentsSelectsComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexComponentsSelectsComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
                        i0.ɵɵelementContainer(4, 4);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(5, "mat-card", 5)(6, "mat-card-header")(7, "mat-card-title");
                        i0.ɵɵtext(8, "selectEnum");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(9, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(10, 7);
                        i0.ɵɵelementStart(11, "span", 8)(12, "div", 9);
                        i0.ɵɵtext(13, " Presents a fixed/hard-coded list of items.");
                        i0.ɵɵelement(14, "br");
                        i0.ɵɵtext(15, "Configure the list in the Designer on Pg2 in the Value List field. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(16, "mat-form-field", 10)(17, "mat-label");
                        i0.ɵɵtext(18, "selectEnum");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(19, "mat-select", 11);
                        i0.ɵɵtemplate(20, dibexComponentsSelectsComponent_mat_option_20_Template, 2, 2, "mat-option", 12);
                        i0.ɵɵpipe(21, "async");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(22, "mat-card", 13)(23, "mat-card-header")(24, "mat-card-title");
                        i0.ɵɵtext(25, "select and autocomplete");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(26, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(27, 7);
                        i0.ɵɵelementStart(28, "span", 14)(29, "div", 9);
                        i0.ɵɵtext(30, " These two components are most often used. They both obtain their data lists from the server.");
                        i0.ɵɵelement(31, "br");
                        i0.ɵɵtext(32, "The differences are that ");
                        i0.ɵɵelementStart(33, "b");
                        i0.ɵɵtext(34, "select");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(35, " is easier to use, but cannot be searched/filtered with user input. It therefore has a limited list of items, by default a max of 40 (configure the max with Item Setting ");
                        i0.ɵɵelementStart(36, "b");
                        i0.ɵɵtext(37, "selectLimit");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(38, ").");
                        i0.ɵɵelement(39, "br")(40, "br");
                        i0.ɵɵtext(41, "There are three possible configurations for the data list. ");
                        i0.ɵɵelement(42, "br");
                        i0.ɵɵtext(43, "See the Configuration-tab above for more info. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(44, "span", 15);
                        i0.ɵɵpipe(45, "safeHtml");
                        i0.ɵɵelementStart(46, "mat-form-field", 16)(47, "mat-label");
                        i0.ɵɵtext(48, "select");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(49, "mat-select", 17);
                        i0.ɵɵlistener("openedChange", function dibexComponentsSelectsComponent_Template_mat_select_openedChange_49_listener($event) { return ctx.lists.list6304.refresh($event); });
                        i0.ɵɵtemplate(50, dibexComponentsSelectsComponent_mat_progress_bar_50_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵtemplate(51, dibexComponentsSelectsComponent_mat_option_51_Template, 2, 2, "mat-option", 12);
                        i0.ɵɵpipe(52, "async");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(53, "span", 18);
                        i0.ɵɵpipe(54, "safeHtml");
                        i0.ɵɵelementStart(55, "mat-form-field", 19)(56, "mat-label");
                        i0.ɵɵtext(57, "autocomplete");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(58, "input", 20, 21);
                        i0.ɵɵtemplate(61, dibexComponentsSelectsComponent_button_61_Template, 3, 0, "button", 22);
                        i0.ɵɵelementStart(62, "mat-autocomplete", 23, 24);
                        i0.ɵɵlistener("opened", function dibexComponentsSelectsComponent_Template_mat_autocomplete_opened_62_listener() { return ctx.lists.list6299.refresh(); });
                        i0.ɵɵtemplate(64, dibexComponentsSelectsComponent_mat_progress_bar_64_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵtemplate(65, dibexComponentsSelectsComponent_mat_option_65_Template, 1, 5, "mat-option", 25);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(66, "span", 26);
                        i0.ɵɵpipe(67, "safeHtml");
                        i0.ɵɵelementStart(68, "mat-form-field", 27)(69, "mat-label");
                        i0.ɵɵtext(70, "autocomplete - Custom PHP List");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(71, "input", 28, 29);
                        i0.ɵɵtemplate(74, dibexComponentsSelectsComponent_button_74_Template, 3, 0, "button", 22);
                        i0.ɵɵelementStart(75, "mat-autocomplete", 23, 30);
                        i0.ɵɵlistener("opened", function dibexComponentsSelectsComponent_Template_mat_autocomplete_opened_75_listener() { return ctx.lists.list6846.refresh(); });
                        i0.ɵɵtemplate(77, dibexComponentsSelectsComponent_mat_progress_bar_77_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵtemplate(78, dibexComponentsSelectsComponent_mat_option_78_Template, 1, 5, "mat-option", 25);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(79, "mat-card", 31)(80, "mat-card-header")(81, "mat-card-title");
                        i0.ɵɵtext(82, "selectMulti");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(83, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(84, 7);
                        i0.ɵɵelementStart(85, "span", 32)(86, "div", 9);
                        i0.ɵɵtext(87, " Use ");
                        i0.ɵɵelementStart(88, "b");
                        i0.ɵɵtext(89, "selectMulti");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(90, " when more than one item in the list must be selected.");
                        i0.ɵɵelement(91, "br");
                        i0.ɵɵtext(92, "The result can be submitted in Client Data. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(93, "mat-form-field", 33)(94, "mat-label");
                        i0.ɵɵtext(95, "selectMulti");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(96, "mat-select", 34, 35);
                        i0.ɵɵlistener("openedChange", function dibexComponentsSelectsComponent_Template_mat_select_openedChange_96_listener($event) { return ctx.lists.list6306.reset($event, ctx.model.modelItems.selectMulti.formControl); });
                        i0.ɵɵelementStart(98, "mat-optgroup");
                        i0.ɵɵtemplate(99, dibexComponentsSelectsComponent_mat_progress_bar_99_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(100, "mat-form-field", 36);
                        i0.ɵɵelement(101, "input", 37);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(102, "div", 38)(103, "div", 39)(104, "cdk-virtual-scroll-viewport", 40, 41);
                        i0.ɵɵtemplate(106, dibexComponentsSelectsComponent_mat_option_106_Template, 3, 3, "mat-option", 42);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(107, "div", 43)(108, "span", 44);
                        i0.ɵɵlistener("click", function dibexComponentsSelectsComponent_Template_span_click_108_listener() { i0.ɵɵrestoreView(_r46); const _r16 = i0.ɵɵreference(97); return i0.ɵɵresetView(_r16.toggle()); });
                        i0.ɵɵelement(109, "dib-icon", 45);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(110, "span", 46);
                        i0.ɵɵlistener("click", function dibexComponentsSelectsComponent_Template_span_click_110_listener() { i0.ɵɵrestoreView(_r46); const _r16 = i0.ɵɵreference(97); ctx.lists.list6306.multiSelected = []; return i0.ɵɵresetView(_r16.toggle()); });
                        i0.ɵɵelement(111, "dib-icon", 47);
                        i0.ɵɵelementEnd()()()()();
                        i0.ɵɵelementStart(112, "button", 48)(113, "span", 49);
                        i0.ɵɵtext(114, "Show Client Data");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(115, "mat-card", 50)(116, "mat-card-header")(117, "mat-card-title");
                        i0.ɵɵtext(118, "selectSearch");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(119, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(120, 7);
                        i0.ɵɵelementStart(121, "span", 51)(122, "div", 9)(123, "b");
                        i0.ɵɵtext(124, "selectSearch");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(125, " has the same look and behaviour as ");
                        i0.ɵɵelementStart(126, "b");
                        i0.ɵɵtext(127, "select");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(128, ", but with added filter capability. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(129, "div", 52)(130, "mat-form-field", 53)(131, "mat-label");
                        i0.ɵɵtext(132, "selectSearch");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(133, "mat-select")(134, "mat-option");
                        i0.ɵɵelement(135, "ngx-mat-select-search", 54);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(136, dibexComponentsSelectsComponent_mat_option_136_Template, 2, 2, "mat-option", 12);
                        i0.ɵɵpipe(137, "async");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(138, "mat-card", 55)(139, "mat-card-header")(140, "mat-card-title");
                        i0.ɵɵtext(141, "autoCompleteTree");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(142, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(143, 7);
                        i0.ɵɵelementStart(144, "span", 56)(145, "div", 9);
                        i0.ɵɵtext(146, " Facilitates the display of recursive data of infinite depth.\nThe server-side code can return either the whole tree structure, or parts of it.\nThe 'leaf' attribute determines if a drill-down icon is displayed next to a node.\nSee the JSON result in the Console, and the PHP code for more info: ");
                        i0.ɵɵelementStart(147, "b");
                        i0.ɵɵtext(148, "/dropins/dibExamples/controllers/CustomCrudController.php");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(149, "autocomplete-tree", 57);
                        i0.ɵɵlistener("clearSelection", function dibexComponentsSelectsComponent_Template_autocomplete_tree_clearSelection_149_listener($event) { return ctx.clearDropdown(ctx.model.modelItems.autocompleteTree.formControl, $event.event, ctx.lists.list6301, $event.trigger); })("opened", function dibexComponentsSelectsComponent_Template_autocomplete_tree_opened_149_listener() { return ctx.lists.list6301.refresh(); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(150, "mat-card", 58)(151, "mat-card-header")(152, "mat-card-title");
                        i0.ɵɵtext(153, "Filters and Refresh Item");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(154, "mat-card-content", 6)(155, "span", 59)(156, "div", 9);
                        i0.ɵɵtext(157, " Dropdowns can be filtered with Client Data.");
                        i0.ɵɵelement(158, "br");
                        i0.ɵɵtext(159, "This is useful if you have dependent dropdowns - where a dropdown's value filters a successive dropdown.");
                        i0.ɵɵelement(160, "br");
                        i0.ɵɵtext(161, "Note, the ");
                        i0.ɵɵelementStart(162, "b");
                        i0.ɵɵtext(163, "select");
                        i0.ɵɵelementEnd();
                        i0.ɵɵtext(164, " component is easier to use than autocompletes, but it does not refresh its list with each use.");
                        i0.ɵɵelement(165, "br");
                        i0.ɵɵtext(166, "When you select a Client below, a change event refreshes the Client Contact list. ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(167, "mat-form-field", 60)(168, "mat-label");
                        i0.ɵɵtext(169, "Client");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(170, "mat-select", 61);
                        i0.ɵɵlistener("openedChange", function dibexComponentsSelectsComponent_Template_mat_select_openedChange_170_listener($event) { return ctx.lists.list6844.refresh($event); });
                        i0.ɵɵtemplate(171, dibexComponentsSelectsComponent_mat_progress_bar_171_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵtemplate(172, dibexComponentsSelectsComponent_mat_option_172_Template, 2, 2, "mat-option", 12);
                        i0.ɵɵpipe(173, "async");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(174, "mat-form-field", 62)(175, "mat-label");
                        i0.ɵɵtext(176, "Related Client Contact");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(177, "mat-select", 63);
                        i0.ɵɵlistener("openedChange", function dibexComponentsSelectsComponent_Template_mat_select_openedChange_177_listener($event) { return ctx.lists.list6845.refresh($event); });
                        i0.ɵɵtemplate(178, dibexComponentsSelectsComponent_mat_progress_bar_178_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵtemplate(179, dibexComponentsSelectsComponent_mat_option_179_Template, 2, 2, "mat-option", 12);
                        i0.ɵɵpipe(180, "async");
                        i0.ɵɵelementEnd()()()()()();
                    } if (rf & 2) {
                        const _r7 = i0.ɵɵreference(63);
                        const _r13 = i0.ɵɵreference(76);
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(67, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6307");
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("dibPort", "6837");
                        i0.ɵɵadvance(10);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(21, 51, ctx.lists.list6300.items));
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("dibPort", "6303");
                        i0.ɵɵadvance(17);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(45, 53, ctx.getHtml("infoSelect")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("compareWith", ctx.selectCompareFn);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6304.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(52, 55, ctx.lists.list6304.items));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(54, 57, ctx.getHtml("infoAutoComplete")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("matAutocomplete", _r7);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.showDropdownClearButton(ctx.model.modelItems.autocomplete.formControl));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("displayWith", ctx.dropdownValueTranslate.bind(ctx, "autocomplete"));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6299.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", ctx.lists.list6299.lastItems);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(67, 59, ctx.getHtml("infoAutoCompleteCustom")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("matAutocomplete", _r13);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.showDropdownClearButton(ctx.model.modelItems.autocompleteCustomList.formControl));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("displayWith", ctx.dropdownValueTranslate.bind(ctx, "autocompleteCustomList"));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6846.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", ctx.lists.list6846.lastItems);
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("dibPort", "6305");
                        i0.ɵɵadvance(12);
                        i0.ɵɵproperty("compareWith", ctx.selectCompareFn);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6306.busy);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("placeholder", ctx.translate("global.dropdown.Search", "Search"))("formControl", ctx.lists.list6306.searchForm);
                        i0.ɵɵadvance(3);
                        i0.ɵɵstyleProp("height", 4 * 48, "px");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("cdkVirtualForOf", ctx.lists.list6306.lastItems);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Show Client Data");
                        i0.ɵɵadvance(8);
                        i0.ɵɵproperty("dibPort", "7171");
                        i0.ɵɵadvance(15);
                        i0.ɵɵproperty("formControl", ctx.lists.list7172.searchForm);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(137, 61, ctx.lists.list7172.items));
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("dibPort", "6298");
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("treeService", ctx.lists.list6301)("showDropdownClearButton", ctx.showDropdownClearButton(ctx.model.modelItems.autocompleteTree.formControl));
                        i0.ɵɵadvance(21);
                        i0.ɵɵproperty("compareWith", ctx.selectCompareFn);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6844.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(173, 63, ctx.lists.list6844.items));
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("compareWith", ctx.selectCompareFn);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6845.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(180, 65, ctx.lists.list6845.items));
                    } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.DefaultClassDirective, i5.CdkFixedSizeVirtualScroll, i5.CdkVirtualForOf, i5.CdkVirtualScrollViewport, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormControlDirective, i6.FormGroupDirective, i6.FormControlName, i2.AutocompleteTreeComponent, i2.DibIconComponent, i2.DibPortDirective, i2.DibAutocompleteScrollToOnFocusDirective, i2.DibListenersDirective, i2.DibRemoveFocusDirective, i7.MatAutocomplete, i8.MatOption, i8.MatOptgroup, i7.MatAutocompleteTrigger, i9.MatButton, i9.MatIconButton, i10.MatFormField, i10.MatLabel, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatSelect, i15.MatSelectSearchComponent, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i17.MatCardHeader, i17.MatCardTitle, i3.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexComponentsSelects'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexComponentsSelectsComponent.prototype, "reloadContainer", null);
            exports_1("dibexComponentsSelectsComponent", dibexComponentsSelectsComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexComponentsSelectsComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-components-selects', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci6307 dibComponent=subcontainer   ><ng-container [dibPort]="'6307'" parentContainerName=dibexComponentsSelects  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><mat-card   style="  width:1000px !important;   flex: 1 1 0%;  " id=ci6837 dibComponent=card  ><mat-card-header ><mat-card-title >selectEnum</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><ng-container [dibPort]="'6837'" ><span  id=ci6838 dibComponent=comment   style="  margin:10px 0px !important;   " ><div class=dib-comment > Presents a fixed/hard-coded list of items.<br>Configure the list in the Designer on Pg2 in the Value List field.  </div></span><mat-form-field  id=ci6300 dibComponent=selectEnum   style="  width:200px !important;   display:flex; flex-direction: column;  "  appearance=standard   ><mat-label>selectEnum</mat-label><mat-select formControlName=selectEnum    ><mat-option *ngFor="let item of lists.list6300.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></ng-container></mat-card-content></mat-card><mat-card   style="  width:1000px !important;   flex: 1 1 0%;  " id=ci6303 dibComponent=card  ><mat-card-header ><mat-card-title >select and autocomplete</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><ng-container [dibPort]="'6303'" ><span  id=ci6302 dibComponent=comment   style="  margin:10px 0px !important;   max-width: 1000px" ><div class=dib-comment > These two components are most often used. They both obtain their data lists from the server.<br>The differences are that <b>select</b> is easier to use, but cannot be searched/filtered with user input. It therefore has a limited list of items, by default a max of 40 (configure the max with Item Setting <b>selectLimit</b>).<br><br>There are three possible configurations for the data list. <br>See the Configuration-tab above for more info.  </div></span><span  id=ci6839 dibComponent=span   style="  "  [innerHtml]="getHtml('infoSelect') | safeHtml" ></span><mat-form-field  id=ci6304 dibComponent=select   style="  width:250px !important;   display:flex; flex-direction: column;  "  appearance=standard   ><mat-label>select</mat-label><mat-select [compareWith]="selectCompareFn"   formControlName=select    (openedChange)="lists.list6304.refresh($event)"  ><mat-progress-bar *ngIf="$any(lists.list6304).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6304.items | async" [value]="item" ><span *ngIf="item.id_display_value"   [innerHtml]="item.id_display_value"  ></span></mat-option></mat-select></mat-form-field><span  id=ci6840 dibComponent=span   style="  "  [innerHtml]="getHtml('infoAutoComplete') | safeHtml" ></span><mat-form-field  id=ci6299 dibComponent=autocomplete   style="  width:250px !important;   display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  appearance=standard   ><mat-label>autocomplete</mat-label><input #auto6299trigger=matAutocompleteTrigger   type=text  matInput formControlName=autocomplete   #input6299  [matAutocomplete]="auto6299"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.autocomplete.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.autocomplete.formControl, $event, lists.list6299, auto6299trigger); input6299.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto6299=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'autocomplete')"  (opened)="$any(lists.list6299).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list6299).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6299.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field><span  id=ci6841 dibComponent=span   style="  "  [innerHtml]="getHtml('infoAutoCompleteCustom') | safeHtml" ></span><mat-form-field  id=ci6846 dibComponent=autocomplete   style="  width:250px !important;   display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  appearance=standard   ><mat-label>autocomplete - Custom PHP List</mat-label><input #auto6846trigger=matAutocompleteTrigger   type=text  matInput formControlName=autocompleteCustomList   #input6846  [matAutocomplete]="auto6846"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.autocompleteCustomList.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.autocompleteCustomList.formControl, $event, lists.list6846, auto6846trigger); input6846.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto6846=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'autocompleteCustomList')"  (opened)="$any(lists.list6846).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list6846).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6846.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></ng-container></mat-card-content></mat-card><mat-card   style="  width:1000px !important;   flex: 1 1 0%;  " id=ci6305 dibComponent=card  ><mat-card-header ><mat-card-title >selectMulti</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><ng-container [dibPort]="'6305'" ><span  id=ci6848 dibComponent=comment   style="  margin:10px 0px !important;   " ><div class=dib-comment > Use <b>selectMulti</b> when more than one item in the list must be selected.<br>The result can be submitted in Client Data.  </div></span><mat-form-field style="display:flex; flex-direction:column; flex: 1 1 0%"  style="  width:270px !important;   display:flex; flex-direction: column;  "  item-alias=selectMulti  id=ci6306 dibComponent=selectMulti   appearance=standard   ><mat-label>selectMulti</mat-label><mat-select #select6306 multiple [compareWith]="selectCompareFn"   formControlName=selectMulti    panelClass=dib-combo-panel    (openedChange)="lists.list6306.reset($event,model.modelItems.selectMulti.formControl)"  ><mat-optgroup ><mat-progress-bar *ngIf="lists.list6306.busy" mode=indeterminate ></mat-progress-bar><mat-form-field style="width:100%;"><input autocomplete=off  [placeholder]="translate('global.dropdown.Search','Search')" aria-label=Search  matInput   [formControl]="lists.list6306.searchForm"></mat-form-field></mat-optgroup><div style="display: flex; flex-direction: row"><div style="display: flex; flex-direction: column;flex: 1 1 0%;"><cdk-virtual-scroll-viewport #cdk6306 itemSize=10  [style.height.px]=4*48><mat-option #cdkMatOption6306 (onSelectionChange)="lists.list6306.onSelectionChange($event)" [hidden]="!!lists.list6306.busy"  *cdkVirtualFor="let item of lists.list6306.lastItems" [value]="item"> {{item.id_display_value}}</mat-option></cdk-virtual-scroll-viewport></div><div style="display:flex;flex-direction:column; padding:0px 6px"><span (click)="select6306.toggle()"  aria-label=Close   matTooltip=Close   [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ><dib-icon src=close ></dib-icon></span><span (click)="lists.list6306.multiSelected = [];select6306.toggle()"  aria-label=Clear   matTooltip=Clear   [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ><dib-icon src=layers_clear ></dib-icon></span></div></div></mat-select></mat-form-field><button  mat-raised-button color=primary  id=ci6849 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientData   style="  width:170px !important;   "  [attr.aria-label]="'Show Client Data'"  type=button  ><span class=dibButtonCaption >Show Client Data</span></button></ng-container></mat-card-content></mat-card><mat-card   style="  width:1000px !important;   flex: 1 1 0%;  " id=ci7171 dibComponent=card  ><mat-card-header ><mat-card-title >selectSearch</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><ng-container [dibPort]="'7171'" ><span  id=ci7173 dibComponent=comment   style="  margin:10px 0px !important;   " ><div class=dib-comment ><b>selectSearch</b> has the same look and behaviour as <b>select</b>, but with added filter capability.  </div></span><div   style="  width:300px !important;   display:flex; flex-direction: row;  " id=ci7172 dibComponent=selectSearch  ><mat-form-field style="flex: 1 1 0%"  appearance=standard   ><mat-label>selectSearch</mat-label><mat-select ><mat-option><ngx-mat-select-search [formControl]="lists.list7172.searchForm"></ngx-mat-select-search></mat-option><mat-option *ngFor="let item of lists.list7172.items | async" [value]="item.id"><span [innerHtml]="item.id_display_value"  ></span></mat-option></mat-select></mat-form-field></div></ng-container></mat-card-content></mat-card><mat-card   style="  width:1000px !important;   flex: 1 1 0%;  " id=ci6298 dibComponent=card  ><mat-card-header ><mat-card-title >autoCompleteTree</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><ng-container [dibPort]="'6298'" ><span  id=ci6847 dibComponent=comment   style="  margin:10px 0px !important;   " ><div class=dib-comment > Facilitates the display of recursive data of infinite depth.
The server-side code can return either the whole tree structure, or parts of it.
The 'leaf' attribute determines if a drill-down icon is displayed next to a node.
See the JSON result in the Console, and the PHP code for more info: <b>/dropins/dibExamples/controllers/CustomCrudController.php</b></div></span><autocomplete-tree id=ci6301 dibComponent=autocompleteTree   style="  width:400px !important;   flex: 1 1 0%;  "  formControlName=autocompleteTree   [treeService]="lists.list6301"  [showDropdownClearButton] = "showDropdownClearButton(model.modelItems.autocompleteTree.formControl)"   (clearSelection)="clearDropdown(model.modelItems.autocompleteTree.formControl,$event.event, lists.list6301, $event.trigger)"  (opened)="$any(lists.list6301).refresh()"  clearIcon=""  label=autocompleteTree  ></autocomplete-tree></ng-container></mat-card-content></mat-card><mat-card   style="  width:1000px !important;   overflow:auto !important;" id=ci6842 dibComponent=section  ><mat-card-header ><mat-card-title >Filters and Refresh Item</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><span  id=ci6843 dibComponent=comment   style="  " ><div class=dib-comment > Dropdowns can be filtered with Client Data.<br>This is useful if you have dependent dropdowns - where a dropdown's value filters a successive dropdown.<br>Note, the <b>select</b> component is easier to use than autocompletes, but it does not refresh its list with each use.<br>When you select a Client below, a change event refreshes the Client Contact list.  </div></span><mat-form-field  id=ci6844 dibComponent=select   style="  width:300px !important;   display:flex; flex-direction: column;  "  item-alias=clientId   appearance=standard   ><mat-label>Client</mat-label><mat-select [compareWith]="selectCompareFn"   formControlName=clientId    (openedChange)="lists.list6844.refresh($event)"  ><mat-progress-bar *ngIf="$any(lists.list6844).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6844.items | async" [value]="item" ><span *ngIf="item.id_display_value"   [innerHtml]="item.id_display_value"  ></span></mat-option></mat-select></mat-form-field><mat-form-field  id=ci6845 dibComponent=select   dib-active-filter='dibexComponentsSelects_clientContactId'  dib-container-filter-settings="{  'dibexComponentsSelects_clientContactId' : 'alias_self_clientId'}"  style="  width:300px !important;   display:flex; flex-direction: column;  "  appearance=standard   ><mat-label>Related Client Contact</mat-label><mat-select [compareWith]="selectCompareFn"   formControlName=clientContactId    (openedChange)="lists.list6845.refresh($event)"  ><mat-progress-bar *ngIf="$any(lists.list6845).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6845.items | async" [value]="item" ><span *ngIf="item.id_display_value"   [innerHtml]="item.id_display_value"  ></span></mat-option></mat-select></mat-form-field></mat-card-content></mat-card></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { cdkVirtualScrollViewPort6306: [{
                        type: core_1.ViewChild,
                        args: ["cdk6306", { static: false }]
                    }], listOptions6306: [{
                        type: core_1.ViewChildren,
                        args: ["cdkMatOption6306"]
                    }], reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, select_1.MatSelectModule, button_1.MatButtonModule, icon_1.MatIconModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexComponentsSelectsModule = class dibexComponentsSelectsModule {
                static entry = dibexComponentsSelectsComponent;
                static ɵfac = function dibexComponentsSelectsModule_Factory(t) { return new (t || dibexComponentsSelectsModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexComponentsSelectsModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexComponentsSelectsModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexComponentsSelectsModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexComponentsSelectsComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexComponentsSelectsModule, { declarations: [dibexComponentsSelectsComponent], imports: [common_1.CommonModule, shared_4.SharedModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, select_1.MatSelectModule, button_1.MatButtonModule, icon_1.MatIconModule] }); })();
        }
    };
});
