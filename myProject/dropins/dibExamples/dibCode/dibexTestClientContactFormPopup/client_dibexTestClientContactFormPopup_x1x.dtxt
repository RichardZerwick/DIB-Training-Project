System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/forms", "@angular/material/core", "@angular/router", "rxjs", "rxjs/operators", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/autocomplete", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, forms_1, core_2, shared_3, router_1, rxjs_1, operators_1, core_3, common_1, shared_4, shared_5, button_1, icon_1, card_1, autocomplete_1, datepicker_1, core_4, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, _c0, _c1, importsRequired, dibexTestClientContactFormPopupComponent, containerModules, fullDateTimeOptions, dibexTestClientContactFormPopupModule;
    var __moduleName = context_1 && context_1.id;
    function dibexTestClientContactFormPopupComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 56);
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_24_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_24_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r49.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_25_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_button_34_Template(rf, ctx) { if (rf & 1) {
        const _r52 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 60);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_button_34_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r52); const ctx_r51 = i0.ɵɵnextContext(); const _r5 = i0.ɵɵreference(32); const _r6 = i0.ɵɵreference(33); ctx_r51.clearDropdown(ctx_r51.model.modelItems.client_id.formControl, $event, ctx_r51.lists.list6276, _r5); return i0.ɵɵresetView(_r6.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestClientContactFormPopupComponent_mat_progress_bar_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 56);
    } }
    function dibexTestClientContactFormPopupComponent_mat_option_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 61);
    } if (rf & 2) {
        const item_r53 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r53.id == "0"))("value", item_r53)("innerHtml", item_r53.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_47_Template(rf, ctx) { if (rf & 1) {
        const _r55 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_47_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r55); const ctx_r54 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r54.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_58_Template(rf, ctx) { if (rf & 1) {
        const _r57 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_58_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r57); const ctx_r56 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r56.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_66_Template(rf, ctx) { if (rf & 1) {
        const _r59 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_66_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r59); const ctx_r58 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r58.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_73_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 150 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_74_Template(rf, ctx) { if (rf & 1) {
        const _r61 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_74_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r61); const ctx_r60 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r60.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_76_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_83_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_84_Template(rf, ctx) { if (rf & 1) {
        const _r63 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_84_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r63); const ctx_r62 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r62.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_85_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_86_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_91_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_92_Template(rf, ctx) { if (rf & 1) {
        const _r65 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_92_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r65); const ctx_r64 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r64.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_93_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_94_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_102_Template(rf, ctx) { if (rf & 1) {
        const _r67 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_102_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r67); const ctx_r66 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r66.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_103_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_104_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_error_109_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 250 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_110_Template(rf, ctx) { if (rf & 1) {
        const _r69 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_110_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r69); const ctx_r68 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r68.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_111_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_112_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_118_Template(rf, ctx) { if (rf & 1) {
        const _r71 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 57);
        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_mat_icon_118_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r71); const ctx_r70 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r70.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_119_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactFormPopupComponent_mat_icon_120_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i1 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i2 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                i6 = forms_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
                core_4 = core_2_1;
                i9 = core_2_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
                i3 = router_1_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i10 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i13 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i8 = autocomplete_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i11 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i7_1) {
                i7 = i7_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "extra-node": a0 }; };
            _c1 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexTestClientContactFormPopupComponent = class dibexTestClientContactFormPopupComponent extends shared_1.BaseComponent {
                crudService;
                httpClient;
                urlService;
                router;
                sd;
                cd;
                allClientData;
                model;
                clientData;
                htmlContent = '';
                view = { container: { id: 258, name: 'dibexTestClientContactFormPopup', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'form', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                constructor(injector, crudService, httpClient, urlService, router, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.crudService = crudService;
                    this.httpClient = httpClient;
                    this.urlService = urlService;
                    this.router = router;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list6276 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexTestClientContactFormPopup&containerItemId=6276", null, null, 40);
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexTestClientContactFormPopup');
                    this.containerName = 'dibexTestClientContactFormPopup'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 6275, type: 'number', fieldAlias: 'id', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, client_id: { itemId: 6276, type: 'select', fieldAlias: 'client_id', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required], updateOn: 'change' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 6276 }, first_name: { itemId: 6277, type: 'text', fieldAlias: 'first_name', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required,
                                    forms_1.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 6278, type: 'text', fieldAlias: 'last_name', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.required,
                                    forms_1.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, position: { itemId: 6279, type: 'text', fieldAlias: 'position', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 6280, type: 'text', fieldAlias: 'email', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.maxLength(150)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, phone_w: { itemId: 6281, type: 'text', fieldAlias: 'phone_w', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, mobile: { itemId: 6282, type: 'text', fieldAlias: 'mobile', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, resigned: { itemId: 6283, type: 'date', fieldAlias: 'resigned', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, notes: { itemId: 6284, type: 'text', fieldAlias: 'notes', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [forms_1.Validators.maxLength(250)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, updated: { itemId: 6285, type: 'datetime', fieldAlias: 'updated', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('client_id', this.model.modelItems.client_id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('position', this.model.modelItems.position.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('phone_w', this.model.modelItems.phone_w.formControl);
                    this.model.$formGroup.addControl('mobile', this.model.modelItems.mobile.formControl);
                    this.model.$formGroup.addControl('resigned', this.model.modelItems.resigned.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource6276 = this.lists.list6276.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6276 = new Date().getTime();
                    let previousUrlChange6276;
                    let previousResponse6276;
                    this.lists.list6276.items = rxjs_1.combineLatest([this.lists.list6276.updatedList$, itemsUpdateSource6276]).pipe(operators_1.tap(() => { this.lists.list6276.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6276 - new Date().getTime()) / 1000;
                        previousTimeChange6276 = new Date().getTime();
                        previousUrlChange6276 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6276 = response;
                            this.lists.list6276.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6276.items.subscribe(records => this.lists.list6276.lastItems = records);
                    this.lists.list6276.multiSelected = [];
                    this.lists.list6276.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6276.updatedList$.next([]);
                        self.lists.list6276.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6276.refresh();
                    }
                    else {
                        self.lists.list6276.searchForm.setValue('');
                        self.lists.list6276.updatedList$.next(self.lists.list6276.multiSelected);
                        self.model.modelItems.client_id.formControl.setValue(self.lists.list6276.multiSelected);
                    } };
                    this.lists.list6276.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6276.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6276.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6276.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6276.multiSelected.push(value);
                            }
                        }
                        lists.list6276.multiSelected = self.removeDuplicateIdsFromArray(lists.list6276.multiSelected);
                    };
                    lists = this.lists;
                    this.canRead = true;
                    this.canUpdate = true;
                    this.canCreate = true;
                    this.eventService.on(`reload${this.containerName}`).subscribe(_ => { });
                    this.setup();
                    this.reloadContainer();
                }
                setup() { this.setupPrimaryKeys(); this.setupDelete(); this.setupSubmit(); }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: this.primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: this.model.$formGroup }).pipe(operators_1.finalize(() => this.busy = false))), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success) {
                            if (this.view.recordStatus == 'create') {
                                this.primaryKeys$.next(response.records);
                            }
                            else {
                                this.primaryKeys$.next(response.records);
                            }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    })).subscribe();
                }
                onSubmit() { this.submit$.next(null); }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: this.primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false))), operators_1.tap(response => { if (response.success) {
                    this.primaryKeys$.next(response.records);
                } })).subscribe(); }
                deleteRecord() { this.messagingService.confirm({ title: 'Delete Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                    this.delete$.next(null);
                } }); }
                setupPrimaryKeys() {
                    this.primaryKeys$ = new rxjs_1.Subject();
                    this.position$ = new rxjs_1.Subject();
                    this.primaryKeys$
                        .pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(primaryKeys => {
                        this.view.recordStatus = 'create';
                        if (!!primaryKeys && Object.keys(primaryKeys).length > 0) {
                            this.view.recordStatus = 'update';
                        }
                        this.primaryKeys = primaryKeys;
                        this.updateUrl();
                        this.busy = true;
                    }), operators_1.switchMap(primaryKeys => {
                        if (this.canCreate || (!!primaryKeys === true && Object.keys(primaryKeys).length > 0)) {
                            return this.crudService.read(this.model.crudUrl, this.view.container.name, { primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { }));
                        }
                        this.busy = false;
                        return rxjs_1.empty();
                    }), operators_1.switchMap(response => {
                        this.busy = false;
                        if (response.success) {
                            this.model.$formGroup.reset();
                            if (Array.isArray(response.records) && response.records.length > 0) {
                                response.records = response.records[0];
                            }
                            if (this.view.recordStatus == 'update' && Array.isArray(response.records) && this.view.container.activeFilter !== null && this.view.container.activeFilter.length > 0) {
                                if (this.canCreate) {
                                    this.addRecord();
                                }
                            }
                            if (response.records.id !== undefined) {
                                this.setValue('id', response.records.id);
                            }
                            if (response.records.client_id !== undefined) {
                                if (response.records.client_id == null) {
                                    this.setValue('client_id', null);
                                }
                                else {
                                    this.lists[`list6276`].multiSelected = [];
                                    if (response.records.client_id_display_value == undefined) {
                                        this.setValue('client_id', response.records.client_id);
                                        if (typeof response.records.client_id == 'object' && response.records.client_id !== null) {
                                            this.lists[`list6276`].multiSelected = response.records.client_id;
                                        }
                                    }
                                    else {
                                        this.setValue('client_id', { 'id': response.records.client_id, 'id_display_value': response.records.client_id_display_value });
                                    }
                                }
                            }
                            if (response.records.first_name !== undefined) {
                                this.setValue('first_name', response.records.first_name);
                            }
                            if (response.records.last_name !== undefined) {
                                this.setValue('last_name', response.records.last_name);
                            }
                            if (response.records.position !== undefined) {
                                this.setValue('position', response.records.position);
                            }
                            if (response.records.email !== undefined) {
                                this.setValue('email', response.records.email);
                            }
                            if (response.records.phone_w !== undefined) {
                                this.setValue('phone_w', response.records.phone_w);
                            }
                            if (response.records.mobile !== undefined) {
                                this.setValue('mobile', response.records.mobile);
                            }
                            if (response.records.resigned !== undefined) {
                                this.setValue('resigned', this.getDate(response.records.resigned));
                            }
                            if (response.records.notes !== undefined) {
                                this.setValue('notes', response.records.notes);
                            }
                            if (response.records.updated !== undefined) {
                                this.setValue('updated', this.getDate(response.records.updated));
                            }
                            this.model.updateFormDefaults(this);
                            this.portService.setUrlDefaults(false, this);
                            Object.keys(this.model.$formGroup.controls).forEach(field => { if (this.model.modelItems[field][this.view.recordStatus]) {
                                this.model.$formGroup.controls[field].enable();
                            }
                            else {
                                this.model.$formGroup.controls[field].disable();
                            } });
                            this.reloadSubcontainers();
                            return this.paging();
                        }
                    }), operators_1.tap((response) => { window.dispatchEvent(new Event('resize')); this.pagingInfo = response.records; if (response.records !== null && response.records.current !== null && response.records.current !== undefined)
                        this.position$.next(response.records.current.current); })).subscribe();
                }
                addRecord() {
                    if (this.containerNameOpenedByUrl()) {
                        const currentUrlInfo = this.urlService.parseCurrentUrl();
                        if (!!currentUrlInfo.params !== false) {
                            Object.keys(this.primaryKeys).forEach((key, value) => { delete currentUrlInfo.params[`primary_${key}`]; });
                            currentUrlInfo.params['record'] = 'new';
                        }
                        else {
                            currentUrlInfo.params = { record: 'new' };
                        }
                        Object.keys(currentUrlInfo.params).forEach((value) => { if (value.indexOf('primary_') !== -1) {
                            delete currentUrlInfo.params[value];
                        } });
                        this.navigationService.goTo(currentUrlInfo.containerName, currentUrlInfo.portAlias, currentUrlInfo.params);
                    }
                    this.primaryKeys$.next(null);
                }
                ngAfterViewInit() { super.ngAfterViewInit(); this.lists.list6276.setupModel(this.model.modelItems.client_id.formControl); window.dispatchEvent(new Event('resize')); }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list6276.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                updateUrl() {
                    let currentUrlInfo = this.urlService.parseCurrentUrl();
                    if (!!this.primaryKeys
                        && currentUrlInfo.containerName == this.view.container.name
                        && Object.keys(this.primaryKeys).length > 0) {
                        let urlKeys = {};
                        if (!!currentUrlInfo.params) {
                            urlKeys = currentUrlInfo.params;
                        }
                        Object.keys(this.primaryKeys).forEach((key, value) => { delete urlKeys['record']; urlKeys[`primary_${key}`] = this.primaryKeys[key]; });
                        currentUrlInfo = this.urlService.parseCurrentUrl();
                        if (!this.navigationService.paramsEqual(urlKeys, currentUrlInfo.params)) {
                            this.navigationService.goTo(currentUrlInfo.containerName, currentUrlInfo.portAlias, urlKeys, { changeUrl: true, originContainer: this });
                        }
                    }
                }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexTestClientContactFormPopup', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexTestClientContactFormPopup' });
                    this.onLoad();
                }
                onLoad() {
                    if (!this.canRead && !this.canCreate)
                        return;
                    if (!this.canRead && this.canCreate) {
                        this.addRecord();
                        return;
                    }
                    let currentUrlInfo = this.urlService.parseCurrentUrl();
                    let primaryKeys = {};
                    if (currentUrlInfo.containerName == this.view.container.name) {
                        this.view.primaryKeys.forEach(key => { if (!!currentUrlInfo.params[`primary_${key}`]) {
                            primaryKeys[key] = currentUrlInfo.params[`primary_${key}`];
                        } });
                        if (Object.keys(primaryKeys).length > 0) {
                            this.primaryKeys$.next(primaryKeys);
                            return;
                        }
                        if (!!currentUrlInfo.params[`record`] && currentUrlInfo.params[`record`] == shared_2.FormPosition.New) {
                            this.paging().subscribe((result) => { this.pagingInfo = result.records; this.primaryKeys$.next(null); });
                            return;
                        }
                        if (!!currentUrlInfo.params[`record`] && currentUrlInfo.params[`record`] == shared_2.FormPosition.First) {
                            this.paging().subscribe((result) => { this.pagingInfo = result.records; this.goToRecord(shared_2.FormPosition.First); });
                            return;
                        }
                        if (!!currentUrlInfo.params[`record`] && currentUrlInfo.params[`record`] == shared_2.FormPosition.Last) {
                            this.paging().subscribe((result) => { this.pagingInfo = result.records; this.goToRecord(shared_2.FormPosition.Last); });
                            return;
                        }
                    }
                    if (Object.keys(primaryKeys).length == 0) {
                        this.recordPosition(1).subscribe((response) => { this.primaryKeys$.next(response.records); });
                        return;
                    }
                    this.primaryKeys$.next(primaryKeys);
                }
                goToRecord(formPosition) { if (!!this.pagingInfo && !!this.pagingInfo[formPosition])
                    this.primaryKeys$.next(this.pagingInfo[formPosition]); }
                recordPosition(position) { return this.crudService.recordPosition(`dibexTestClientContactFormPopup`, position, { clientData: this.clientData, activeFilter: this.view.container.activeFilter, }); }
                paging() {
                    if (!this.canRead)
                        return rxjs_1.of({ records: { current: { current: 1 } } });
                    if (!!this.primaryKeys == true && Object.keys(this.primaryKeys).length > 0) {
                        return this.crudService.recordInfo('dibexTestClientContactFormPopup', { primaryKeys: this.primaryKeys, activeFilter: this.view.container.activeFilter, clientData: this.clientData });
                    }
                    else {
                        return this.recordPosition(1).pipe(operators_1.switchMap((result) => this.crudService.recordInfo('dibexTestClientContactFormPopup', { primaryKeys: result.records, activeFilter: this.view.container.activeFilter, clientData: this.clientData }).pipe(operators_1.map((response) => {
                            if (response.records == null) {
                                return { records: { current: { current: 1 } } };
                            }
                            return response;
                        }))));
                    }
                }
                static ɵfac = function dibexTestClientContactFormPopupComponent_Factory(t) { return new (t || dibexTestClientContactFormPopupComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.CrudService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i1.UrlService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexTestClientContactFormPopupComponent, selectors: [["dibex-test-client-contact-form-popup"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 123, vars: 83, consts: [["mode", "indeterminate", 4, "ngIf"], ["containerName", "dibexTestClientContactFormPopup", 2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci6265", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci6266", "dibComponent", "btnSave", "aria-label", "Save record", "matTooltipClass", "dib-tooltip", "type", "submit", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/save.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci6267", "dibComponent", "btnReload", "aria-label", "Restore saved data", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci6274", "dibComponent", "btnAuditTrail", "aria-label", "View audit trail of changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"], ["id", "ci6268", "dibComponent", "span", 2, "width", "250px !important", 3, "innerHtml"], ["id", "ci6269", "dibComponent", "formPaging"], ["dibComponentName", "formPager", "dibDropin", "form", "dibComponentLocation", "/peff/Template/component/dibexTestClientContactFormPopup?componentPath=pager&dropin=setNgxMaterial.form", 3, "dibComponentParent"], ["id", "ci6270", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%", "max-width", "1300px"], ["id", "ci6271", "dibComponent", "section", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "flex-wrap", "nowrap"], ["id", "ci6275", "dibComponent", "inputNumber", "item-alias", "id", "appearance", "standard"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], [4, "ngIf"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["id", "ci6276", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "row", "flex", "1 1 0%", "align-self", "stretch"], ["appearance", "standard", 2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%"], ["required", "true", "type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["auto6276trigger", "matAutocompleteTrigger", "input6276", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto6276", "matAutocomplete"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["type", "button", "aria-label", "Link to page for dibexDefaultValuesServer", "mat-icon-button", "", 3, "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"], ["id", "ci6277", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "35", "required", "true", "name", "first_name"], ["id", "ci6273", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci6278", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "35", "required", "true", "name", "last_name"], ["id", "ci6279", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "position", "maxlength", "50", "name", "position"], ["id", "ci6280", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "150", "name", "email"], ["id", "ci6272", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci6281", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "phone_w", "maxlength", "35", "name", "phone_w"], ["id", "ci6282", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "mobile", "maxlength", "35", "name", "mobile"], ["id", "ci6283", "dibComponent", "datePicker", "appearance", "standard"], ["matInput", "", "formControlName", "resigned", "name", "resigned", 3, "matDatepicker", "placeholder", "focus"], ["matPrefix", "", 3, "for"], ["datePicker6283", ""], ["id", "ci6284", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "notes", "maxlength", "250", "name", "notes"], ["id", "ci6285", "dibComponent", "timeDatePicker", "appearance", "standard"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker"], ["picker6285", ""], ["mode", "indeterminate"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], [3, "ngClass", "value", "innerHtml"]], template: function dibexTestClientContactFormPopupComponent_Template(rf, ctx) { if (rf & 1) {
                        const _r72 = i0.ɵɵgetCurrentView();
                        i0.ɵɵtemplate(0, dibexTestClientContactFormPopupComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexTestClientContactFormPopupComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
                        i0.ɵɵelementContainerStart(4, 4);
                        i0.ɵɵelementStart(5, "button", 5);
                        i0.ɵɵelement(6, "dib-icon", 6);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(7, "button", 7);
                        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_Template_button_click_7_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(8, "dib-icon", 8);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(9, "button", 9);
                        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_Template_button_click_9_listener() { return ctx.openAuditTrail("67", "", ""); });
                        i0.ɵɵelement(10, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(11, "span", 11);
                        i0.ɵɵpipe(12, "safeHtml");
                        i0.ɵɵelementStart(13, "div", 12);
                        i0.ɵɵelementContainer(14, 13);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(15, "div", 14);
                        i0.ɵɵelementContainerStart(16, 4);
                        i0.ɵɵelementStart(17, "mat-card", 15)(18, "mat-card-content", 16)(19, "mat-form-field", 17)(20, "mat-label");
                        i0.ɵɵtext(21, "Id");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(22, "input", 18);
                        i0.ɵɵtemplate(23, dibexTestClientContactFormPopupComponent_mat_error_23_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(24, dibexTestClientContactFormPopupComponent_mat_icon_24_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(25, dibexTestClientContactFormPopupComponent_mat_icon_25_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(26, dibexTestClientContactFormPopupComponent_mat_icon_26_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(27, "div", 23)(28, "mat-form-field", 24)(29, "mat-label");
                        i0.ɵɵtext(30, "Client");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(31, "input", 25, 26);
                        i0.ɵɵtemplate(34, dibexTestClientContactFormPopupComponent_button_34_Template, 3, 0, "button", 27);
                        i0.ɵɵelementStart(35, "mat-autocomplete", 28, 29);
                        i0.ɵɵlistener("opened", function dibexTestClientContactFormPopupComponent_Template_mat_autocomplete_opened_35_listener() { return ctx.lists.list6276.refresh(); });
                        i0.ɵɵtemplate(37, dibexTestClientContactFormPopupComponent_mat_progress_bar_37_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵtemplate(38, dibexTestClientContactFormPopupComponent_mat_option_38_Template, 1, 5, "mat-option", 30);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(39, "button", 31);
                        i0.ɵɵlistener("click", function dibexTestClientContactFormPopupComponent_Template_button_click_39_listener($event) { return ctx.goToForDropdowns("dibexDefaultValuesServer", "main", true, "client_id", "id", ctx.model, ctx.row, $event); });
                        i0.ɵɵelement(40, "dib-icon", 32);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(41, "mat-form-field", 33)(42, "mat-label");
                        i0.ɵɵtext(43, "First Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(44, "input", 34);
                        i0.ɵɵtemplate(45, dibexTestClientContactFormPopupComponent_mat_error_45_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(46, dibexTestClientContactFormPopupComponent_mat_error_46_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(47, dibexTestClientContactFormPopupComponent_mat_icon_47_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(48, dibexTestClientContactFormPopupComponent_mat_icon_48_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(49, dibexTestClientContactFormPopupComponent_mat_icon_49_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(50, "mat-card", 35)(51, "mat-card-content", 16)(52, "mat-form-field", 36)(53, "mat-label");
                        i0.ɵɵtext(54, "Last Name");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(55, "input", 37);
                        i0.ɵɵtemplate(56, dibexTestClientContactFormPopupComponent_mat_error_56_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(57, dibexTestClientContactFormPopupComponent_mat_error_57_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(58, dibexTestClientContactFormPopupComponent_mat_icon_58_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(59, dibexTestClientContactFormPopupComponent_mat_icon_59_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(60, dibexTestClientContactFormPopupComponent_mat_icon_60_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(61, "mat-form-field", 38)(62, "mat-label");
                        i0.ɵɵtext(63, "Position");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(64, "input", 39);
                        i0.ɵɵtemplate(65, dibexTestClientContactFormPopupComponent_mat_error_65_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(66, dibexTestClientContactFormPopupComponent_mat_icon_66_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(67, dibexTestClientContactFormPopupComponent_mat_icon_67_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(68, dibexTestClientContactFormPopupComponent_mat_icon_68_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(69, "mat-form-field", 40)(70, "mat-label");
                        i0.ɵɵtext(71, "Email");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(72, "input", 41);
                        i0.ɵɵtemplate(73, dibexTestClientContactFormPopupComponent_mat_error_73_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(74, dibexTestClientContactFormPopupComponent_mat_icon_74_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(75, dibexTestClientContactFormPopupComponent_mat_icon_75_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(76, dibexTestClientContactFormPopupComponent_mat_icon_76_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(77, "mat-card", 42)(78, "mat-card-content", 16)(79, "mat-form-field", 43)(80, "mat-label");
                        i0.ɵɵtext(81, "Phone W");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(82, "input", 44);
                        i0.ɵɵtemplate(83, dibexTestClientContactFormPopupComponent_mat_error_83_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(84, dibexTestClientContactFormPopupComponent_mat_icon_84_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(85, dibexTestClientContactFormPopupComponent_mat_icon_85_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(86, dibexTestClientContactFormPopupComponent_mat_icon_86_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(87, "mat-form-field", 45)(88, "mat-label");
                        i0.ɵɵtext(89, "Mobile");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(90, "input", 46);
                        i0.ɵɵtemplate(91, dibexTestClientContactFormPopupComponent_mat_error_91_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(92, dibexTestClientContactFormPopupComponent_mat_icon_92_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(93, dibexTestClientContactFormPopupComponent_mat_icon_93_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(94, dibexTestClientContactFormPopupComponent_mat_icon_94_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(95, "mat-form-field", 47)(96, "mat-label");
                        i0.ɵɵtext(97, "Resigned");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(98, "input", 48);
                        i0.ɵɵlistener("focus", function dibexTestClientContactFormPopupComponent_Template_input_focus_98_listener() { i0.ɵɵrestoreView(_r72); const _r37 = i0.ɵɵreference(101); return i0.ɵɵresetView(_r37.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(99, "mat-datepicker-toggle", 49)(100, "mat-datepicker", null, 50);
                        i0.ɵɵtemplate(102, dibexTestClientContactFormPopupComponent_mat_icon_102_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(103, dibexTestClientContactFormPopupComponent_mat_icon_103_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(104, dibexTestClientContactFormPopupComponent_mat_icon_104_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(105, "mat-form-field", 51)(106, "mat-label");
                        i0.ɵɵtext(107, "Notes");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(108, "input", 52);
                        i0.ɵɵtemplate(109, dibexTestClientContactFormPopupComponent_mat_error_109_Template, 2, 0, "mat-error", 19);
                        i0.ɵɵtemplate(110, dibexTestClientContactFormPopupComponent_mat_icon_110_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(111, dibexTestClientContactFormPopupComponent_mat_icon_111_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(112, dibexTestClientContactFormPopupComponent_mat_icon_112_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(113, "mat-form-field", 53);
                        i0.ɵɵelement(114, "mat-datepicker-toggle", 49);
                        i0.ɵɵelementStart(115, "mat-label");
                        i0.ɵɵtext(116, "Updated");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(117, "input", 54);
                        i0.ɵɵtemplate(118, dibexTestClientContactFormPopupComponent_mat_icon_118_Template, 2, 0, "mat-icon", 20);
                        i0.ɵɵtemplate(119, dibexTestClientContactFormPopupComponent_mat_icon_119_Template, 2, 0, "mat-icon", 21);
                        i0.ɵɵtemplate(120, dibexTestClientContactFormPopupComponent_mat_icon_120_Template, 2, 0, "mat-icon", 22);
                        i0.ɵɵelement(121, "ngx-mat-datetime-picker", null, 55);
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()();
                    } if (rf & 2) {
                        const _r8 = i0.ɵɵreference(36);
                        const _r37 = i0.ɵɵreference(101);
                        const _r48 = i0.ɵɵreference(122);
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(81, _c1, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6265");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Save record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Restore saved data")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "View audit trail of changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(12, 79, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibComponentParent", ctx);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "6270");
                        i0.ɵɵadvance(6);
                        i0.ɵɵattribute("aria-label", "Id");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("id", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("id", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("id", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("id", ctx.model.$formGroup));
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("matAutocomplete", _r8);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.showDropdownClearButton(ctx.model.modelItems.client_id.formControl));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("displayWith", ctx.dropdownValueTranslate.bind(ctx, "client_id"));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6276.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngForOf", ctx.lists.list6276.lastItems);
                        i0.ɵɵadvance(6);
                        i0.ɵɵattribute("aria-label", "First Name");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("first_name", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("first_name", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("first_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("first_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("first_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(6);
                        i0.ɵɵattribute("aria-label", "Last Name");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("last_name", "required", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("last_name", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("last_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("last_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("last_name", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Position");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("position", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("position", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("position", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("position", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Email");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("email", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("email", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("email", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("email", ctx.model.$formGroup));
                        i0.ɵɵadvance(6);
                        i0.ɵɵattribute("aria-label", "Phone W");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("phone_w", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("phone_w", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("phone_w", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("phone_w", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Mobile");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("mobile", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("mobile", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("mobile", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("mobile", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("matDatepicker", _r37)("placeholder", "Resigned");
                        i0.ɵɵattribute("aria-label", "Resigned");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r37);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("resigned", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("resigned", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("resigned", ctx.model.$formGroup));
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "Notes");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.hasError("notes", "maxlength", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("notes", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("notes", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("notes", ctx.model.$formGroup));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("for", _r48);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngxMatDatetimePicker", _r48);
                        i0.ɵɵattribute("aria-label", "Updated");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.notSaved("updated", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.view.recordStatus == "update" && ctx.isSaved("updated", ctx.model.$formGroup));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.isInvalid("updated", ctx.model.$formGroup));
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.DefaultClassDirective, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NumberValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.RequiredValidator, i6.MaxLengthValidator, i6.FormGroupDirective, i6.FormControlName, i1.DibIconComponent, i1.DibPortDirective, i1.DibAutocompleteScrollToOnFocusDirective, i1.DibComponentDirective, i1.DibRemoveFocusDirective, i7.NgxMatDatetimepicker, i7.NgxMatDatepickerInput, i8.MatAutocomplete, i9.MatOption, i8.MatAutocompleteTrigger, i10.MatIconButton, i10.MatMiniFabButton, i11.MatDatepicker, i11.MatDatepickerInput, i11.MatDatepickerToggle, i12.MatFormField, i12.MatLabel, i12.MatError, i12.MatPrefix, i12.MatSuffix, i13.MatIcon, i14.MatInput, i15.MatProgressBar, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i1.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexTestClientContactFormPopup'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexTestClientContactFormPopupComponent.prototype, "reloadContainer", null);
            tslib_1.__decorate([
                shared_1.EventHandler('goToRecorddibexTestClientContactFormPopup'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [String]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexTestClientContactFormPopupComponent.prototype, "goToRecord", null);
            tslib_1.__decorate([
                shared_1.EventHandler('recordPositiondibexTestClientContactFormPopup'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Number]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexTestClientContactFormPopupComponent.prototype, "recordPosition", null);
            exports_1("dibexTestClientContactFormPopupComponent", dibexTestClientContactFormPopupComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestClientContactFormPopupComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-test-client-contact-form-popup', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" containerName=dibexTestClientContactFormPopup  [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  " id=ci6265 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6265'" ><button mat-mini-fab color=accent  id=ci6266 dibComponent=btnSave   style="  " aria-label="Save record"  [matTooltip]="'Save record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=submit  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/save.svg"></dib-icon></button><button   mat-mini-fab color=primary  id=ci6267 dibComponent=btnReload   style="  " aria-label="Restore saved data"  [matTooltip]="'Restore saved data'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button   mat-mini-fab color=accent  id=ci6274 dibComponent=btnAuditTrail   style="  " aria-label="View audit trail of changes"  [matTooltip]="'View audit trail of changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="openAuditTrail('67','','')"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"></dib-icon></button><span  id=ci6268 dibComponent=span   style="  width:250px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><div  id=ci6269 dibComponent=formPaging   style="  " ><ng-container  dibComponentName=formPager   dibDropin=form   dibComponentLocation="/peff/Template/component/dibexTestClientContactFormPopup?componentPath=pager&dropin=setNgxMaterial.form"   [dibComponentParent]="this"  ></ng-container></div></ng-container></div><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: stretch;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  max-width:1300px" id=ci6270 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6270'" ><mat-card   style="  flex: 1 1 0%;  " id=ci6271 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  flex-wrap: nowrap;"  ><mat-form-field  id=ci6275 dibComponent=inputNumber   style="  "  item-alias=id   appearance=standard  ><mat-label >Id</mat-label><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',model.$formGroup)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><div   style="  display:flex; flex-direction: row;  flex: 1 1 0%;  align-self: stretch;  " id=ci6276 dibComponent=autocomplete   ><mat-form-field style="display:flex; flex-direction:column; flex: 1 1 0%"  appearance=standard   ><mat-label>Client</mat-label><input #auto6276trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input6276  [matAutocomplete]="auto6276"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list6276, auto6276trigger); input6276.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto6276=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list6276).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list6276).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list6276.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field><button type=button  aria-label="Link to page for dibexDefaultValuesServer"  mat-icon-button  (click)="goToForDropdowns(  'dibexDefaultValuesServer',  'main',  true,  'client_id',  'id',  model,  row,  $event  );"  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"></dib-icon></button></div><mat-form-field id=ci6277 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   maxlength='35'  required=true  name=first_name   [attr.aria-label]="'First Name'" ><mat-error *ngIf="hasError('first_name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',model.$formGroup)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('first_name', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci6273 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  flex-wrap: nowrap;"  ><mat-form-field id=ci6278 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   maxlength='35'  required=true  name=last_name   [attr.aria-label]="'Last Name'" ><mat-error *ngIf="hasError('last_name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',model.$formGroup)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('last_name', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci6279 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Position</mat-label><input   matInput  type=text   formControlName=position   maxlength='50'  name=position   [attr.aria-label]="'Position'" ><mat-error *ngIf="hasError('position','maxlength',model.$formGroup)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('position', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci6280 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   maxlength='150'  name=email   [attr.aria-label]="'Email'" ><mat-error *ngIf="hasError('email','maxlength',model.$formGroup)">Please enter 150 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('email', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci6272 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  flex-wrap: nowrap;"  ><mat-form-field id=ci6281 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Phone W</mat-label><input   matInput  type=text   formControlName=phone_w   maxlength='35'  name=phone_w   [attr.aria-label]="'Phone W'" ><mat-error *ngIf="hasError('phone_w','maxlength',model.$formGroup)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('phone_w', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci6282 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   maxlength='35'  name=mobile   [attr.aria-label]="'Mobile'" ><mat-error *ngIf="hasError('mobile','maxlength',model.$formGroup)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('mobile', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field  id=ci6283 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>Resigned</mat-label><input   matInput [matDatepicker]="datePicker6283"   [placeholder]="'Resigned'"   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (focus)="datePicker6283.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker6283" ></mat-datepicker-toggle><mat-datepicker #datePicker6283 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('resigned', model.$formGroup)" matSuffix >priority_high</mat-icon></mat-form-field><mat-form-field id=ci6284 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   maxlength='250'  name=notes   [attr.aria-label]="'Notes'" ><mat-error *ngIf="hasError('notes','maxlength',model.$formGroup)">Please enter 250 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('notes', model.$formGroup)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field  id=ci6285 dibComponent=timeDatePicker   style="  "  appearance=standard  ><mat-datepicker-toggle matPrefix [for]="picker6285"></mat-datepicker-toggle><mat-label >Updated</mat-label><input   matInput   [ngxMatDatetimePicker]="picker6285"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('updated', model.$formGroup)" matSuffix >priority_high</mat-icon><ngx-mat-datetime-picker #picker6285></ngx-mat-datetime-picker></mat-form-field></mat-card-content></mat-card></ng-container></div></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.CrudService }, { type: i2.HttpClient }, { type: i1.UrlService }, { type: i3.Router }, { type: i0.ViewContainerRef }, { type: i1.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { reloadContainer: [], goToRecord: [], recordPosition: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, datepicker_1.MatDatepickerModule, core_4.MatNativeDateModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexTestClientContactFormPopupModule = class dibexTestClientContactFormPopupModule {
                static entry = dibexTestClientContactFormPopupComponent;
                static ɵfac = function dibexTestClientContactFormPopupModule_Factory(t) { return new (t || dibexTestClientContactFormPopupModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexTestClientContactFormPopupModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexTestClientContactFormPopupModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestClientContactFormPopupModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexTestClientContactFormPopupComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexTestClientContactFormPopupModule, { declarations: [dibexTestClientContactFormPopupComponent], imports: [common_1.CommonModule, shared_4.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, datepicker_1.MatDatepickerModule, core_4.MatNativeDateModule] }); })();
        }
    };
});
