System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/datepicker", "@angular/material/checkbox", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/form-field", "@angular/material/input", "@angular/cdk/text-field", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, datepicker_1, core_5, checkbox_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, _c0, _c1, _c2, _c3, _c4, _c5, _c6, _c7, importsRequired, dibexGridBatchEditComponent, containerModules, dibexGridBatchEditModule;
    var __moduleName = context_1 && context_1.id;
    function dibexGridBatchEditComponent_button_18_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 56);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_button_18_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 57);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBatchEditComponent_button_19_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 58);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_button_19_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r45.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 59);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBatchEditComponent_div_21_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r47 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r47.page.toRecord, "\u00A0of\u00A0", ctx_r47.page.records, "");
    } }
    function dibexGridBatchEditComponent_div_21_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r48 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r48.page.totalRecords, ")");
    } }
    function dibexGridBatchEditComponent_div_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 60);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_div_21_span_2_Template, 2, 2, "span", 53);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_div_21_span_4_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Batch Edit Grid: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexGridBatchEditComponent_th_31_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 61)(1, "mat-checkbox", 62);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_31_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r49.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexGridBatchEditComponent_td_32_Template(rf, ctx) { if (rf & 1) {
        const _r54 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 63)(1, "mat-checkbox", 64);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_32_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridBatchEditComponent_td_32_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r54); const row_r51 = restoredCtx.$implicit; const ctx_r53 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r53.selection.toggle(row_r51) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r51 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r51));
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r56 = i0.ɵɵnextContext(2).index;
        const ctx_r59 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r59.findColumnDisplayValue(rowIndex_r56, "id", "none", "number"), "");
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r68 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r68); const ctx_r67 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r67.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 77);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 70);
        i0.ɵɵelement(2, "input", 71);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_td_34_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r55 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r60 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r60.hasError("id", "required", rowForm_r55));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r60.view.recordStatus == "update" && ctx_r60.notSaved("id", rowForm_r55));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r60.view.recordStatus == "update" && ctx_r60.isSaved("id", rowForm_r55));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r60.isInvalid("id", rowForm_r55));
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_34_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_34_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_34_ng_container_1_span_4_Template, 7, 5, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_34_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r55 = i0.ɵɵnextContext().$implicit;
        const ctx_r57 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r57.excelEditing == false && rowForm_r55.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r57.excelEditing == true || rowForm_r55.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r57.excelEditing == false && rowForm_r55.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_34_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r55 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r55);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r55.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_35_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 85);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_35_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_35_div_2_span_2_Template, 2, 0, "span", 84);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r71 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r71.editorOpen);
    } }
    function dibexGridBatchEditComponent_th_35_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_35_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r78 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_35_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r78); const ctx_r77 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r77.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_35_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_35_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r80 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 88)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 89);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_35_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r80); const ctx_r79 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r79.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_35_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r80); const ctx_r81 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r81.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_35_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_35_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r73 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r73.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r73.view.recordStatus == "update" && ctx_r73.notSaved("id", ctx_r73.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r73.view.recordStatus == "update" && ctx_r73.isSaved("id", ctx_r73.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_35_div_2_Template, 3, 1, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_35_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_35_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r83 = i0.ɵɵnextContext(2).index;
        const ctx_r86 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r86.findColumnDisplayValue(rowIndex_r83, "name", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r95 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r95); const ctx_r94 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r94.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r97 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r97); const ctx_r96 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r96.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_37_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r97); const ctx_r98 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r98.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_td_37_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r82 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r87 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r87.hasError("name", "required", rowForm_r82));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r87.hasError("name", "maxlength", rowForm_r82));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r87.view.recordStatus == "update" && ctx_r87.notSaved("name", rowForm_r82));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r87.view.recordStatus == "update" && ctx_r87.isSaved("name", rowForm_r82));
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_37_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_37_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_37_ng_container_1_span_4_Template, 7, 5, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_37_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r82 = i0.ɵɵnextContext().$implicit;
        const ctx_r84 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r84.excelEditing == false && rowForm_r82.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r84.excelEditing == true || rowForm_r82.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r84.excelEditing == false && rowForm_r82.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_37_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r82 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r82);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r82.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_38_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 85);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_38_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_38_div_2_span_2_Template, 2, 0, "span", 84);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r101 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r101.editorOpen);
    } }
    function dibexGridBatchEditComponent_th_38_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_38_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r108 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_38_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r108); const ctx_r107 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r107.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_38_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_38_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r110 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_38_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r110); const ctx_r109 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r109.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_38_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r110); const ctx_r111 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r111.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_38_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_38_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r103 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r103.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r103.view.recordStatus == "update" && ctx_r103.notSaved("name", ctx_r103.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r103.view.recordStatus == "update" && ctx_r103.isSaved("name", ctx_r103.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_38_div_2_Template, 3, 1, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_38_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_38_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexGridBatchEditComponent_td_40_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r113 = i0.ɵɵnextContext(2).index;
        const ctx_r116 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r116.findColumnDisplayValue(rowIndex_r113, "start_date", "none", "date"), "");
    } }
    function dibexGridBatchEditComponent_td_40_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r124 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_40_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r124); const ctx_r123 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r123.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_40_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_40_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r126 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 94)(2, "input", 95);
        i0.ɵɵlistener("focus", function dibexGridBatchEditComponent_td_40_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r126); const _r120 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r120.open()); })("keydown.enter", function dibexGridBatchEditComponent_td_40_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r126); const ctx_r127 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r127.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_40_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r126); const ctx_r128 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r128.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 96)(4, "mat-datepicker", null, 97);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_td_40_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(7, dibexGridBatchEditComponent_td_40_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r120 = i0.ɵɵreference(5);
        const rowForm_r112 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r117 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r120);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r120);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r117.view.recordStatus == "update" && ctx_r117.notSaved("start_date", rowForm_r112));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r117.view.recordStatus == "update" && ctx_r117.isSaved("start_date", rowForm_r112));
    } }
    function dibexGridBatchEditComponent_td_40_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_40_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_40_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_40_ng_container_1_span_4_Template, 8, 5, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_40_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r112 = i0.ɵɵnextContext().$implicit;
        const ctx_r114 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r114.excelEditing == false && rowForm_r112.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r114.excelEditing == true || rowForm_r112.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r114.excelEditing == false && rowForm_r112.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_40_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r112 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r112);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r112.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_41_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_41_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_41_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r137 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_41_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r137); const ctx_r136 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r136.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_41_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_41_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r139 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_41_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r139); const ctx_r138 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r138.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_41_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r139); const ctx_r140 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r140.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_41_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_41_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r133 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r133.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r133.view.recordStatus == "update" && ctx_r133.notSaved("start_date", ctx_r133.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r133.view.recordStatus == "update" && ctx_r133.isSaved("start_date", ctx_r133.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_41_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_41_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_41_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexGridBatchEditComponent_td_43_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r142 = i0.ɵɵnextContext(2).index;
        const ctx_r145 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r145.findColumnDisplayValue(rowIndex_r142, "email", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_td_43_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_43_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r153 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_43_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r153); const ctx_r152 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r152.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_43_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_43_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r155 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 100);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_43_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r155); const ctx_r154 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r154.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_43_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r155); const ctx_r156 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r156.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_43_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_43_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_43_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r141 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r146 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.hasError("email", "maxlength", rowForm_r141));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.view.recordStatus == "update" && ctx_r146.notSaved("email", rowForm_r141));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.view.recordStatus == "update" && ctx_r146.isSaved("email", rowForm_r141));
    } }
    function dibexGridBatchEditComponent_td_43_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_43_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_43_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_43_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_43_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r141 = i0.ɵɵnextContext().$implicit;
        const ctx_r143 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r143.excelEditing == false && rowForm_r141.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r143.excelEditing == true || rowForm_r141.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r143.excelEditing == false && rowForm_r141.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_43_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r141 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r141);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r141.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_44_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_44_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_44_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r165 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_44_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r165); const ctx_r164 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r164.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_44_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_44_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r167 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_44_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r167); const ctx_r166 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r166.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_44_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r167); const ctx_r168 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r168.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_44_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_44_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r161 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r161.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r161.view.recordStatus == "update" && ctx_r161.notSaved("email", ctx_r161.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r161.view.recordStatus == "update" && ctx_r161.isSaved("email", ctx_r161.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_44_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_44_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_44_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexGridBatchEditComponent_td_46_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r170 = i0.ɵɵnextContext(2).index;
        const ctx_r173 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r173.findColumnDisplayValue(rowIndex_r170, "address", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_td_46_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 255 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_46_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r181 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_46_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r181); const ctx_r180 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r180.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_46_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_46_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r183 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 103);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_46_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r183); const ctx_r182 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r182.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_46_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r183); const ctx_r184 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r184.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_46_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_46_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_46_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r169 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r174 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.hasError("address", "maxlength", rowForm_r169));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.view.recordStatus == "update" && ctx_r174.notSaved("address", rowForm_r169));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.view.recordStatus == "update" && ctx_r174.isSaved("address", rowForm_r169));
    } }
    function dibexGridBatchEditComponent_td_46_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_46_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_46_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_46_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r169 = i0.ɵɵnextContext().$implicit;
        const ctx_r171 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r171.excelEditing == false && rowForm_r169.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r171.excelEditing == true || rowForm_r169.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r171.excelEditing == false && rowForm_r169.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_46_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r169 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r169);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r169.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_47_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_47_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_47_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r193 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_47_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r193); const ctx_r192 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r192.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_47_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_47_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r195 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 104)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_47_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r195); const ctx_r194 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r194.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_47_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r195); const ctx_r196 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r196.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_47_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_47_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r189 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r189.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r189.view.recordStatus == "update" && ctx_r189.notSaved("address", ctx_r189.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r189.view.recordStatus == "update" && ctx_r189.isSaved("address", ctx_r189.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_47_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_47_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_47_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexGridBatchEditComponent_td_49_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r198 = i0.ɵɵnextContext(2).index;
        const ctx_r201 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r201.findColumnDisplayValue(rowIndex_r198, "city_town", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_td_49_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_49_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r209 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_49_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r209); const ctx_r208 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r208.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_49_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_49_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r211 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_49_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r211); const ctx_r210 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r210.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_49_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r211); const ctx_r212 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r212.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_49_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_49_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_49_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r197 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r202 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r202.hasError("city_town", "maxlength", rowForm_r197));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r202.view.recordStatus == "update" && ctx_r202.notSaved("city_town", rowForm_r197));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r202.view.recordStatus == "update" && ctx_r202.isSaved("city_town", rowForm_r197));
    } }
    function dibexGridBatchEditComponent_td_49_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_49_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_49_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_49_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r197 = i0.ɵɵnextContext().$implicit;
        const ctx_r199 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r199.excelEditing == false && rowForm_r197.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r199.excelEditing == true || rowForm_r197.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r199.excelEditing == false && rowForm_r197.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_49_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r197 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r197);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r197.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_50_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_50_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_50_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r221 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_50_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r221); const ctx_r220 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r220.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_50_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_50_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r223 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_50_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r223); const ctx_r222 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r222.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_50_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r223); const ctx_r224 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r224.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_50_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_50_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r217 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r217.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r217.view.recordStatus == "update" && ctx_r217.notSaved("city_town", ctx_r217.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r217.view.recordStatus == "update" && ctx_r217.isSaved("city_town", ctx_r217.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_50_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_50_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_50_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexGridBatchEditComponent_td_52_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r226 = i0.ɵɵnextContext(2).index;
        const ctx_r229 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r229.findColumnDisplayValue(rowIndex_r226, "country", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_td_52_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_52_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r237 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_52_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r237); const ctx_r236 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r236.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_52_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_52_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r239 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_52_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r239); const ctx_r238 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r238.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_52_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r239); const ctx_r240 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r240.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_52_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_52_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_52_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r225 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r230 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r230.hasError("country", "maxlength", rowForm_r225));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r230.view.recordStatus == "update" && ctx_r230.notSaved("country", rowForm_r225));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r230.view.recordStatus == "update" && ctx_r230.isSaved("country", rowForm_r225));
    } }
    function dibexGridBatchEditComponent_td_52_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_52_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_52_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_52_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_52_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r225 = i0.ɵɵnextContext().$implicit;
        const ctx_r227 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r227.excelEditing == false && rowForm_r225.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r227.excelEditing == true || rowForm_r225.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r227.excelEditing == false && rowForm_r225.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_52_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r225 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r225);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r225.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_53_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_53_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_53_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r249 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_53_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r249); const ctx_r248 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r248.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_53_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_53_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r251 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_53_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r251); const ctx_r250 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r250.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_53_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r251); const ctx_r252 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r252.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_53_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_53_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r245 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r245.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r245.view.recordStatus == "update" && ctx_r245.notSaved("country", ctx_r245.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r245.view.recordStatus == "update" && ctx_r245.isSaved("country", ctx_r245.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_53_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_53_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_53_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexGridBatchEditComponent_td_55_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r254 = i0.ɵɵnextContext(2).index;
        const ctx_r257 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r257.findColumnDisplayValue(rowIndex_r254, "zip_code", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_td_55_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_55_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r265 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_55_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r265); const ctx_r264 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r264.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_55_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_55_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r267 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_55_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r267); const ctx_r266 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r266.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_55_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r267); const ctx_r268 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r268.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_55_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_55_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_55_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r253 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r258 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r258.hasError("zip_code", "maxlength", rowForm_r253));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r258.view.recordStatus == "update" && ctx_r258.notSaved("zip_code", rowForm_r253));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r258.view.recordStatus == "update" && ctx_r258.isSaved("zip_code", rowForm_r253));
    } }
    function dibexGridBatchEditComponent_td_55_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_55_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_55_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_55_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_55_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r253 = i0.ɵɵnextContext().$implicit;
        const ctx_r255 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r255.excelEditing == false && rowForm_r253.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r255.excelEditing == true || rowForm_r253.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r255.excelEditing == false && rowForm_r253.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_55_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r253 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r253);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r253.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_56_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Zip Code ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_56_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Zip Code");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_56_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r277 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_56_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r277); const ctx_r276 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r276.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_56_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_56_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r279 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 113)(2, "mat-label");
        i0.ɵɵtext(3, "Zip Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_56_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r279); const ctx_r278 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r278.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_56_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r279); const ctx_r280 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r280.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_56_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_56_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r273 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r273.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r273.view.recordStatus == "update" && ctx_r273.notSaved("zip_code", ctx_r273.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r273.view.recordStatus == "update" && ctx_r273.isSaved("zip_code", ctx_r273.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_56_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_56_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_56_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexGridBatchEditComponent_td_58_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r282 = i0.ɵɵnextContext(2).index;
        const ctx_r285 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r285.findColumnDisplayValue(rowIndex_r282, "notes", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_td_58_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r292 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_58_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r292); const ctx_r291 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r291.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_58_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_58_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r294 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 115)(2, "textarea", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_58_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r294); const ctx_r293 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r293.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_58_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r294); const ctx_r295 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r295.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_58_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_58_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r281 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r286 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.view.recordStatus == "update" && ctx_r286.notSaved("notes", rowForm_r281));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.view.recordStatus == "update" && ctx_r286.isSaved("notes", rowForm_r281));
    } }
    function dibexGridBatchEditComponent_td_58_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_58_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_58_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_58_ng_container_1_span_4_Template, 5, 3, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_58_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r281 = i0.ɵɵnextContext().$implicit;
        const ctx_r283 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r283.excelEditing == false && rowForm_r281.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.excelEditing == true || rowForm_r281.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.excelEditing == false && rowForm_r281.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_58_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r281 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r281);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r281.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_59_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_59_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_59_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r304 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_59_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r304); const ctx_r303 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r303.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_59_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_59_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r306 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_59_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r306); const ctx_r305 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r305.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_59_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r306); const ctx_r307 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r307.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_59_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_59_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r300 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r300.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.view.recordStatus == "update" && ctx_r300.notSaved("notes", ctx_r300.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.view.recordStatus == "update" && ctx_r300.isSaved("notes", ctx_r300.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_59_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_59_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_59_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexGridBatchEditComponent_td_61_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r309 = i0.ɵɵnextContext(2).index;
        const ctx_r312 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r312.findColumnDisplayValue(rowIndex_r309, "updated", "none", "datetime"), "");
    } }
    function dibexGridBatchEditComponent_td_61_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r320 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_61_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r320); const ctx_r319 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r319.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_61_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_td_61_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r322 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 119);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 96);
        i0.ɵɵelementStart(3, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_td_61_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r322); const ctx_r321 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r321.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_td_61_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r322); const ctx_r323 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r323.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_61_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_61_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 121);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r318 = i0.ɵɵreference(7);
        const rowForm_r308 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r313 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r318);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r318);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.notSaved("updated", rowForm_r308));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.isSaved("updated", rowForm_r308));
    } }
    function dibexGridBatchEditComponent_td_61_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_61_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_61_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_61_ng_container_1_span_4_Template, 8, 5, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_61_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r308 = i0.ɵɵnextContext().$implicit;
        const ctx_r310 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r310.excelEditing == false && rowForm_r308.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r310.excelEditing == true || rowForm_r308.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r310.excelEditing == false && rowForm_r308.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_61_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r308 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r308);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r308.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_62_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_62_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_62_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r332 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_62_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r332); const ctx_r331 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r331.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_62_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_62_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r334 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 122)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_62_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r334); const ctx_r333 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r333.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_62_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r334); const ctx_r335 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r335.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_62_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_62_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r328 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r328.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r328.view.recordStatus == "update" && ctx_r328.notSaved("updated", ctx_r328.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r328.view.recordStatus == "update" && ctx_r328.isSaved("updated", ctx_r328.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_62_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_62_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_62_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexGridBatchEditComponent_td_64_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 125);
        i0.ɵɵelement(1, "div", 126);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r337 = i0.ɵɵnextContext(2).index;
        const ctx_r340 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c0, ctx_r340.findColumnDisplayValue(rowIndex_r337, "vip", "none", "boolean") == 1));
    } }
    function dibexGridBatchEditComponent_td_64_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵelement(1, "mat-checkbox", 127);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r339 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, row_r339.vip == 1 ? "lightblue" : "transparent"));
    } }
    function dibexGridBatchEditComponent_td_64_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_td_64_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_td_64_ng_container_1_span_3_Template, 2, 3, "span", 124);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_64_ng_container_1_span_4_Template, 2, 3, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_td_64_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r336 = i0.ɵɵnextContext().$implicit;
        const ctx_r338 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r338.excelEditing == false && rowForm_r336.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r338.excelEditing == true || rowForm_r336.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r338.excelEditing == false && rowForm_r336.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_td_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_64_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r336 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r336);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r336.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_65_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " VIP ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_65_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "VIP");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_65_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r352 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_th_65_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r352); const ctx_r351 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r351.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_65_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_th_65_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r354 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 128)(2, "mat-label");
        i0.ɵɵtext(3, "VIP");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 129);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_th_65_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r354); const ctx_r353 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r353.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_th_65_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r354); const ctx_r355 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r355.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_th_65_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_th_65_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r348 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r348.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "VIP");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r348.view.recordStatus == "update" && ctx_r348.notSaved("vip", ctx_r348.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r348.view.recordStatus == "update" && ctx_r348.isSaved("vip", ctx_r348.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_th_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_th_65_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_th_65_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_th_65_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexGridBatchEditComponent_td_67_ng_container_1_button_4_Template(rf, ctx) { if (rf & 1) {
        const _r363 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 132);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_67_ng_container_1_button_4_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r363); const rowForm_r356 = i0.ɵɵnextContext(2).$implicit; const ctx_r361 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r361.editRow(rowForm_r356)); });
        i0.ɵɵelement(1, "dib-icon", 133);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Edit This Record Inline")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBatchEditComponent_td_67_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 130)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_td_67_ng_container_1_button_4_Template, 2, 4, "button", 131);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r359 = ctx.ngIf;
        const rowForm_r356 = i0.ɵɵnextContext().$implicit;
        const ctx_r358 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "5769");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r359.__new == true || ctx_r358.excelEditing == true && ctx_r358.gridExcelEditingAutoSave == false && rowForm_r356.dirty == true);
    } }
    function dibexGridBatchEditComponent_td_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_67_ng_container_1_Template, 5, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r356 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r356);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r356.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79)(2, "div");
        i0.ɵɵtext(3, " Edit/Save ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBatchEditComponent_td_70_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        const _r372 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 135);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_td_70_ng_container_1_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r372); const rowForm_r365 = i0.ɵɵnextContext(2).$implicit; const ctx_r370 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r370.editRow(rowForm_r365)); });
        i0.ɵɵelement(1, "dib-icon", 133);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Edit This Record Inline")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBatchEditComponent_td_70_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_70_ng_container_1_button_1_Template, 2, 4, "button", 134);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r368 = ctx.ngIf;
        const rowForm_r365 = i0.ɵɵnextContext().$implicit;
        const ctx_r367 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r368.__new == true || ctx_r367.excelEditing == true && ctx_r367.gridExcelEditingAutoSave == false && rowForm_r365.dirty == true);
    } }
    function dibexGridBatchEditComponent_td_70_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_td_70_ng_container_1_Template, 2, 1, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r365 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r365);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r365.getRawValue());
    } }
    function dibexGridBatchEditComponent_th_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 78);
    } }
    function dibexGridBatchEditComponent_th_73_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 138);
    } }
    function dibexGridBatchEditComponent_th_73_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 136);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_th_73_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 137);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r32.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r32.busy);
    } }
    function dibexGridBatchEditComponent_th_75_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r375 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r375.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridBatchEditComponent_th_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 139);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_th_75_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r33.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r33.busy && ctx_r33.tableDataSource.data.length == 0);
    } }
    function dibexGridBatchEditComponent_ng_container_76_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 141);
    } }
    function dibexGridBatchEditComponent_ng_container_76_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_container_76_tr_1_Template, 1, 0, "tr", 140);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r376 = ctx.$implicit;
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r34.columnHeaders.getArray(column_r376).items$));
    } }
    function dibexGridBatchEditComponent_tr_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 142);
    } if (rf & 2) {
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c2, ctx_r35.busy ? "visible" : "hidden"));
    } }
    function dibexGridBatchEditComponent_tr_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 142);
    } if (rf & 2) {
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c2, ctx_r36.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexGridBatchEditComponent_tr_79_Template(rf, ctx) { if (rf & 1) {
        const _r381 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 143);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_tr_79_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r381); const row_r378 = restoredCtx.$implicit; const ctx_r380 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r380.rowClick(row_r378, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r378 = ctx.$implicit;
        const ctx_r37 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r37.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c3, ctx_r37.isHighlighted(row_r378)));
    } }
    function dibexGridBatchEditComponent_81_ng_template_0_Template(rf, ctx) { }
    function dibexGridBatchEditComponent_81_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexGridBatchEditComponent_81_ng_template_0_Template, 0, 0, "ng-template", 144);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r41 = i0.ɵɵreference(86);
        i0.ɵɵproperty("ngTemplateOutlet", _r41);
    } }
    function dibexGridBatchEditComponent_mat_toolbar_84_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r387 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 150);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_mat_toolbar_84_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r387); const ctx_r386 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r386.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r383 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r383.numberOfSelectedItems + " ", "item", ctx_r383.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexGridBatchEditComponent_mat_toolbar_84_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_mat_toolbar_84_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_mat_toolbar_84_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r391 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 151);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_mat_toolbar_84_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r391); const ctx_r390 = i0.ɵɵnextContext(2); ctx_r390.gridShowClipboardDefault = !ctx_r390.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r390.gridShowClipboardDefault && ctx_r390.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_mat_toolbar_84_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_mat_toolbar_84_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r384 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r384.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r384.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r384.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexGridBatchEditComponent_mat_toolbar_84_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r394 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 152, 153);
        i0.ɵɵlistener("page", function dibexGridBatchEditComponent_mat_toolbar_84_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r394); const ctx_r393 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r393.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r385 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r385.page.totalRecords)("pageSize", ctx_r385.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c4));
    } }
    function dibexGridBatchEditComponent_mat_toolbar_84_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 145);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_mat_toolbar_84_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 146);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_mat_toolbar_84_button_3_Template, 4, 3, "button", 147);
        i0.ɵɵelement(4, "span", 148);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_mat_toolbar_84_mat_paginator_5_Template, 2, 4, "mat-paginator", 149);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r40.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r40.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r427 = i0.ɵɵnextContext(2).index;
        const ctx_r430 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r430.findColumnDisplayValue(rowIndex_r427, "id", "none", "number"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r438 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r438); const ctx_r437 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r437.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r440 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 70)(2, "input", 158);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r440); const ctx_r439 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r439.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r440); const ctx_r441 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r441.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r426 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r431 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r431.hasError("id", "required", rowForm_r426));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r431.view.recordStatus == "update" && ctx_r431.notSaved("id", rowForm_r426));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r431.view.recordStatus == "update" && ctx_r431.isSaved("id", rowForm_r426));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r426 = i0.ɵɵnextContext().$implicit;
        const ctx_r428 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r428.excelEditing == false && rowForm_r426.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r428.excelEditing == true || rowForm_r426.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r428.excelEditing == false && rowForm_r426.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_2_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r426 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r426);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r426.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_3_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 85);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_3_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_3_div_2_span_2_Template, 2, 0, "span", 84);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r444 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r444.editorOpen);
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_3_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_3_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r451 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_3_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r451); const ctx_r450 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r450.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_3_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_3_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r453 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 88)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 89);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_3_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r453); const ctx_r452 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r452.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_3_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r453); const ctx_r454 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r454.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_3_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_3_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r446 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r446.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r446.view.recordStatus == "update" && ctx_r446.notSaved("id", ctx_r446.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r446.view.recordStatus == "update" && ctx_r446.isSaved("id", ctx_r446.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_3_div_2_Template, 3, 1, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_3_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_3_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r396 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r396.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r456 = i0.ɵɵnextContext(2).index;
        const ctx_r459 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r459.findColumnDisplayValue(rowIndex_r456, "name", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r468 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r468); const ctx_r467 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r467.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r470 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r470); const ctx_r469 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r469.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r470); const ctx_r471 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r471.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r455 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r460 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r460.hasError("name", "required", rowForm_r455));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r460.hasError("name", "maxlength", rowForm_r455));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r460.view.recordStatus == "update" && ctx_r460.notSaved("name", rowForm_r455));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r460.view.recordStatus == "update" && ctx_r460.isSaved("name", rowForm_r455));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_4_Template, 7, 5, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r455 = i0.ɵɵnextContext().$implicit;
        const ctx_r457 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r457.excelEditing == false && rowForm_r455.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r457.excelEditing == true || rowForm_r455.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r457.excelEditing == false && rowForm_r455.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_5_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r455 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r455);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r455.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 85);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_6_div_2_span_2_Template, 2, 0, "span", 84);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r474 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r474.editorOpen);
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r481 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r481); const ctx_r480 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r480.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r483 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r483); const ctx_r482 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r482.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r483); const ctx_r484 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r484.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r476 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r476.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r476.view.recordStatus == "update" && ctx_r476.notSaved("name", ctx_r476.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r476.view.recordStatus == "update" && ctx_r476.isSaved("name", ctx_r476.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_6_div_2_Template, 3, 1, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_6_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_6_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r398 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r398.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r398.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r398.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r486 = i0.ɵɵnextContext(2).index;
        const ctx_r489 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r489.findColumnDisplayValue(rowIndex_r486, "start_date", "none", "date"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r497 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r497); const ctx_r496 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r496.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r499 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 94)(2, "input", 95);
        i0.ɵɵlistener("focus", function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r499); const _r493 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r493.open()); })("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r499); const ctx_r500 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r500.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r499); const ctx_r501 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r501.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 96)(4, "mat-datepicker", null, 97);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(7, dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r493 = i0.ɵɵreference(5);
        const rowForm_r485 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r490 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r493);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r493);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r490.view.recordStatus == "update" && ctx_r490.notSaved("start_date", rowForm_r485));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r490.view.recordStatus == "update" && ctx_r490.isSaved("start_date", rowForm_r485));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_4_Template, 8, 5, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r485 = i0.ɵɵnextContext().$implicit;
        const ctx_r487 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r487.excelEditing == false && rowForm_r485.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r487.excelEditing == true || rowForm_r485.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r487.excelEditing == false && rowForm_r485.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_8_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r485 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r485);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r485.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r510 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r510); const ctx_r509 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r509.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r512 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r512); const ctx_r511 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r511.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r512); const ctx_r513 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r513.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r506 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r506.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r506.view.recordStatus == "update" && ctx_r506.notSaved("start_date", ctx_r506.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r506.view.recordStatus == "update" && ctx_r506.isSaved("start_date", ctx_r506.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_9_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_9_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_9_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r400 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r400.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r515 = i0.ɵɵnextContext(2).index;
        const ctx_r518 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r518.findColumnDisplayValue(rowIndex_r515, "email", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r526 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r526); const ctx_r525 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r525.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r528 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 100);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r528); const ctx_r527 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r527.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r528); const ctx_r529 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r529.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r514 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r519 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r519.hasError("email", "maxlength", rowForm_r514));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r519.view.recordStatus == "update" && ctx_r519.notSaved("email", rowForm_r514));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r519.view.recordStatus == "update" && ctx_r519.isSaved("email", rowForm_r514));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r514 = i0.ɵɵnextContext().$implicit;
        const ctx_r516 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r516.excelEditing == false && rowForm_r514.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r516.excelEditing == true || rowForm_r514.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r516.excelEditing == false && rowForm_r514.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_11_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r514 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r514);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r514.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r538 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r538); const ctx_r537 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r537.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r540 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r540); const ctx_r539 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r539.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r540); const ctx_r541 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r541.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r534 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r534.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r534.view.recordStatus == "update" && ctx_r534.notSaved("email", ctx_r534.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r534.view.recordStatus == "update" && ctx_r534.isSaved("email", ctx_r534.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_12_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_12_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_12_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r402 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r402.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r402.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r402.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r543 = i0.ɵɵnextContext(2).index;
        const ctx_r546 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r546.findColumnDisplayValue(rowIndex_r543, "address", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 255 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r554 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r554); const ctx_r553 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r553.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r556 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 103);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r556); const ctx_r555 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r555.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r556); const ctx_r557 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r557.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r542 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r547 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r547.hasError("address", "maxlength", rowForm_r542));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r547.view.recordStatus == "update" && ctx_r547.notSaved("address", rowForm_r542));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r547.view.recordStatus == "update" && ctx_r547.isSaved("address", rowForm_r542));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r542 = i0.ɵɵnextContext().$implicit;
        const ctx_r544 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r544.excelEditing == false && rowForm_r542.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r544.excelEditing == true || rowForm_r542.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r544.excelEditing == false && rowForm_r542.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_14_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r542 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r542);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r542.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r566 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r566); const ctx_r565 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r565.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r568 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 104)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r568); const ctx_r567 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r567.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r568); const ctx_r569 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r569.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r562 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r562.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r562.view.recordStatus == "update" && ctx_r562.notSaved("address", ctx_r562.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r562.view.recordStatus == "update" && ctx_r562.isSaved("address", ctx_r562.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_15_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_15_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_15_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r404 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r404.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r404.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r404.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r571 = i0.ɵɵnextContext(2).index;
        const ctx_r574 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r574.findColumnDisplayValue(rowIndex_r571, "city_town", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r582 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r582); const ctx_r581 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r581.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r584 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r584); const ctx_r583 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r583.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r584); const ctx_r585 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r585.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r570 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r575 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r575.hasError("city_town", "maxlength", rowForm_r570));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r575.view.recordStatus == "update" && ctx_r575.notSaved("city_town", rowForm_r570));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r575.view.recordStatus == "update" && ctx_r575.isSaved("city_town", rowForm_r570));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r570 = i0.ɵɵnextContext().$implicit;
        const ctx_r572 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r572.excelEditing == false && rowForm_r570.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r572.excelEditing == true || rowForm_r570.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r572.excelEditing == false && rowForm_r570.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_17_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r570 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r570);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r570.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r594 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r594); const ctx_r593 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r593.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r596 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r596); const ctx_r595 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r595.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r596); const ctx_r597 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r597.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r590 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r590.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r590.view.recordStatus == "update" && ctx_r590.notSaved("city_town", ctx_r590.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r590.view.recordStatus == "update" && ctx_r590.isSaved("city_town", ctx_r590.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_18_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_18_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_18_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r406 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r406.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r406.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r406.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r599 = i0.ɵɵnextContext(2).index;
        const ctx_r602 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r602.findColumnDisplayValue(rowIndex_r599, "country", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r610 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r610); const ctx_r609 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r609.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r612 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r612); const ctx_r611 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r611.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r612); const ctx_r613 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r613.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r598 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r603 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r603.hasError("country", "maxlength", rowForm_r598));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r603.view.recordStatus == "update" && ctx_r603.notSaved("country", rowForm_r598));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r603.view.recordStatus == "update" && ctx_r603.isSaved("country", rowForm_r598));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r598 = i0.ɵɵnextContext().$implicit;
        const ctx_r600 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r600.excelEditing == false && rowForm_r598.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r600.excelEditing == true || rowForm_r598.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r600.excelEditing == false && rowForm_r598.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_20_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r598 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r598);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r598.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r622 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r622); const ctx_r621 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r621.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r624 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r624); const ctx_r623 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r623.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r624); const ctx_r625 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r625.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r618 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r618.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r618.view.recordStatus == "update" && ctx_r618.notSaved("country", ctx_r618.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r618.view.recordStatus == "update" && ctx_r618.isSaved("country", ctx_r618.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_21_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_21_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_21_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r408 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r408.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r408.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r408.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r627 = i0.ɵɵnextContext(2).index;
        const ctx_r630 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r630.findColumnDisplayValue(rowIndex_r627, "zip_code", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r638 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r638); const ctx_r637 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r637.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r640 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 90)(2, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r640); const ctx_r639 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r639.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r640); const ctx_r641 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r641.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r626 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r631 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r631.hasError("zip_code", "maxlength", rowForm_r626));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r631.view.recordStatus == "update" && ctx_r631.notSaved("zip_code", rowForm_r626));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r631.view.recordStatus == "update" && ctx_r631.isSaved("zip_code", rowForm_r626));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_4_Template, 6, 4, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r626 = i0.ɵɵnextContext().$implicit;
        const ctx_r628 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r628.excelEditing == false && rowForm_r626.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r628.excelEditing == true || rowForm_r626.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r628.excelEditing == false && rowForm_r626.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_23_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r626 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r626);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r626.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Zip Code ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Zip Code");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r650 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r650); const ctx_r649 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r649.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r652 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 113)(2, "mat-label");
        i0.ɵɵtext(3, "Zip Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r652); const ctx_r651 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r651.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r652); const ctx_r653 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r653.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r646 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r646.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r646.view.recordStatus == "update" && ctx_r646.notSaved("zip_code", ctx_r646.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r646.view.recordStatus == "update" && ctx_r646.isSaved("zip_code", ctx_r646.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_24_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_24_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_24_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r410 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r410.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r655 = i0.ɵɵnextContext(2).index;
        const ctx_r658 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r658.findColumnDisplayValue(rowIndex_r655, "notes", "none", "text"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r665 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r665); const ctx_r664 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r664.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r667 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 115)(2, "textarea", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r667); const ctx_r666 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r666.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r667); const ctx_r668 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r668.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r654 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r659 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r659.view.recordStatus == "update" && ctx_r659.notSaved("notes", rowForm_r654));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r659.view.recordStatus == "update" && ctx_r659.isSaved("notes", rowForm_r654));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_4_Template, 5, 3, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r654 = i0.ɵɵnextContext().$implicit;
        const ctx_r656 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r656.excelEditing == false && rowForm_r654.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r656.excelEditing == true || rowForm_r654.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r656.excelEditing == false && rowForm_r654.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_26_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r654 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r654);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r654.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r677 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r677); const ctx_r676 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r676.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r679 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r679); const ctx_r678 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r678.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r679); const ctx_r680 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r680.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r673 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r673.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r673.view.recordStatus == "update" && ctx_r673.notSaved("notes", ctx_r673.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r673.view.recordStatus == "update" && ctx_r673.isSaved("notes", ctx_r673.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_27_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_27_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_27_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r412 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r412.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r412.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r412.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r682 = i0.ɵɵnextContext(2).index;
        const ctx_r685 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r685.findColumnDisplayValue(rowIndex_r682, "updated", "none", "datetime"), "");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r693 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r693); const ctx_r692 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r692.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r695 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 69)(1, "mat-form-field", 119);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 96);
        i0.ɵɵelementStart(3, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r695); const ctx_r694 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r694.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r695); const ctx_r696 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r696.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 121);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r691 = i0.ɵɵreference(7);
        const rowForm_r681 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r686 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r691);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r691);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r686.view.recordStatus == "update" && ctx_r686.notSaved("updated", rowForm_r681));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r686.view.recordStatus == "update" && ctx_r686.isSaved("updated", rowForm_r681));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_3_Template, 2, 1, "span", 68);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_4_Template, 8, 5, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r681 = i0.ɵɵnextContext().$implicit;
        const ctx_r683 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r683.excelEditing == false && rowForm_r681.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r683.excelEditing == true || rowForm_r681.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r683.excelEditing == false && rowForm_r681.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_29_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r681 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r681);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r681.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r705 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r705); const ctx_r704 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r704.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r707 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 122)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r707); const ctx_r706 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r706.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r707); const ctx_r708 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r708.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r701 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r701.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r701.view.recordStatus == "update" && ctx_r701.notSaved("updated", ctx_r701.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r701.view.recordStatus == "update" && ctx_r701.isSaved("updated", ctx_r701.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_30_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_30_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_30_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r414 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r414.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 125);
        i0.ɵɵelement(1, "div", 126);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r710 = i0.ɵɵnextContext(2).index;
        const ctx_r713 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c0, ctx_r713.findColumnDisplayValue(rowIndex_r710, "vip", "none", "boolean") == 1));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 69);
        i0.ɵɵelement(1, "mat-checkbox", 127);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r712 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, row_r712.vip == 1 ? "lightblue" : "transparent"));
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 66)(2, "span", 67);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_span_3_Template, 2, 3, "span", 124);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_span_4_Template, 2, 3, "span", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r709 = i0.ɵɵnextContext().$implicit;
        const ctx_r711 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r711.excelEditing == false && rowForm_r709.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r711.excelEditing == true || rowForm_r709.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r711.excelEditing == false && rowForm_r709.get("__edit").value === false);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_32_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r709 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r709);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r709.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83);
        i0.ɵɵtext(1, " VIP ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, "VIP");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r725 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r725); const ctx_r724 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r724.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r727 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 87)(1, "mat-form-field", 128)(2, "mat-label");
        i0.ɵɵtext(3, "VIP");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 129);
        i0.ɵɵlistener("keydown.enter", function dibexGridBatchEditComponent_ng_template_85_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r727); const ctx_r726 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r726.searchGrid(false)); })("keydown.esc", function dibexGridBatchEditComponent_ng_template_85_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r727); const ctx_r728 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r728.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r721 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r721.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "VIP");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r721.view.recordStatus == "update" && ctx_r721.notSaved("vip", ctx_r721.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r721.view.recordStatus == "update" && ctx_r721.isSaved("vip", ctx_r721.model.$formGroup));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_th_33_div_2_Template, 2, 0, "div", 80);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_33_div_3_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_th_33_div_4_Template, 7, 4, "div", 82);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r416 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r416.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r416.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r416.showSearch);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_35_ng_container_1_button_4_Template(rf, ctx) { if (rf & 1) {
        const _r736 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 132);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_35_ng_container_1_button_4_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r736); const rowForm_r729 = i0.ɵɵnextContext(2).$implicit; const ctx_r734 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r734.editRow(rowForm_r729)); });
        i0.ɵɵelement(1, "dib-icon", 133);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Edit This Record Inline")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 130)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵtemplate(4, dibexGridBatchEditComponent_ng_template_85_td_35_ng_container_1_button_4_Template, 2, 4, "button", 131);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r732 = ctx.ngIf;
        const rowForm_r729 = i0.ɵɵnextContext().$implicit;
        const ctx_r731 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "5769");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r732.__new == true || ctx_r731.excelEditing == true && ctx_r731.gridExcelEditingAutoSave == false && rowForm_r729.dirty == true);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_35_ng_container_1_Template, 5, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r729 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r729);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r729.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79)(2, "div");
        i0.ɵɵtext(3, " Edit/Save ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_38_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        const _r745 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 135);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_38_ng_container_1_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r745); const rowForm_r738 = i0.ɵɵnextContext(2).$implicit; const ctx_r743 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r743.editRow(rowForm_r738)); });
        i0.ɵɵelement(1, "dib-icon", 133);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Edit This Record Inline")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_38_ng_container_1_button_1_Template, 2, 4, "button", 134);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r741 = ctx.ngIf;
        const rowForm_r738 = i0.ɵɵnextContext().$implicit;
        const ctx_r740 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r741.__new == true || ctx_r740.excelEditing == true && ctx_r740.gridExcelEditingAutoSave == false && rowForm_r738.dirty == true);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_td_38_ng_container_1_Template, 2, 1, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r738 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r738);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r738.getRawValue());
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 78);
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_41_Template(rf, ctx) { if (rf & 1) {
        const _r748 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 61)(1, "mat-checkbox", 159);
        i0.ɵɵlistener("change", function dibexGridBatchEditComponent_ng_template_85_th_41_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r748); const ctx_r747 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r747.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r421 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r421.masterIsChecked)("indeterminate", ctx_r421.masterIsIndeterminate);
    } }
    function dibexGridBatchEditComponent_ng_template_85_td_42_Template(rf, ctx) { if (rf & 1) {
        const _r752 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 160)(1, "mat-checkbox", 64);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_td_42_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridBatchEditComponent_ng_template_85_td_42_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r752); const row_r749 = restoredCtx.$implicit; const ctx_r751 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r751.selection.toggle(row_r749) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r749 = ctx.$implicit;
        const ctx_r422 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r422.isHighlighted(row_r749));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_44_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 138);
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 161);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_th_44_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 137);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r423 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r423.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r423.busy);
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_46_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r754 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r754.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridBatchEditComponent_ng_template_85_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 139);
        i0.ɵɵtemplate(1, dibexGridBatchEditComponent_ng_template_85_th_46_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r424 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r424.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r424.busy && ctx_r424.tableDataSource.data.length == 0);
    } }
    function dibexGridBatchEditComponent_ng_template_85_tr_47_Template(rf, ctx) { if (rf & 1) {
        const _r757 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 162);
        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_ng_template_85_tr_47_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r757); const row_r755 = restoredCtx.$implicit; const ctx_r756 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r756.rowClick(row_r755, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r755 = ctx.$implicit;
        const ctx_r425 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c3, ctx_r425.isHighlighted(row_r755)));
    } }
    function dibexGridBatchEditComponent_ng_template_85_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 154);
        i0.ɵɵelementContainerStart(1, 31);
        i0.ɵɵtemplate(2, dibexGridBatchEditComponent_ng_template_85_td_2_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(3, dibexGridBatchEditComponent_ng_template_85_th_3_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 34);
        i0.ɵɵtemplate(5, dibexGridBatchEditComponent_ng_template_85_td_5_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(6, dibexGridBatchEditComponent_ng_template_85_th_6_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 35);
        i0.ɵɵtemplate(8, dibexGridBatchEditComponent_ng_template_85_td_8_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(9, dibexGridBatchEditComponent_ng_template_85_th_9_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 36);
        i0.ɵɵtemplate(11, dibexGridBatchEditComponent_ng_template_85_td_11_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(12, dibexGridBatchEditComponent_ng_template_85_th_12_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 37);
        i0.ɵɵtemplate(14, dibexGridBatchEditComponent_ng_template_85_td_14_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(15, dibexGridBatchEditComponent_ng_template_85_th_15_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 38);
        i0.ɵɵtemplate(17, dibexGridBatchEditComponent_ng_template_85_td_17_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(18, dibexGridBatchEditComponent_ng_template_85_th_18_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 39);
        i0.ɵɵtemplate(20, dibexGridBatchEditComponent_ng_template_85_td_20_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(21, dibexGridBatchEditComponent_ng_template_85_th_21_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 40);
        i0.ɵɵtemplate(23, dibexGridBatchEditComponent_ng_template_85_td_23_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(24, dibexGridBatchEditComponent_ng_template_85_th_24_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 41);
        i0.ɵɵtemplate(26, dibexGridBatchEditComponent_ng_template_85_td_26_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(27, dibexGridBatchEditComponent_ng_template_85_th_27_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 42);
        i0.ɵɵtemplate(29, dibexGridBatchEditComponent_ng_template_85_td_29_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(30, dibexGridBatchEditComponent_ng_template_85_th_30_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 43);
        i0.ɵɵtemplate(32, dibexGridBatchEditComponent_ng_template_85_td_32_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(33, dibexGridBatchEditComponent_ng_template_85_th_33_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 44);
        i0.ɵɵtemplate(35, dibexGridBatchEditComponent_ng_template_85_td_35_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(36, dibexGridBatchEditComponent_ng_template_85_th_36_Template, 4, 0, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 45);
        i0.ɵɵtemplate(38, dibexGridBatchEditComponent_ng_template_85_td_38_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(39, dibexGridBatchEditComponent_ng_template_85_th_39_Template, 1, 0, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 28);
        i0.ɵɵtemplate(41, dibexGridBatchEditComponent_ng_template_85_th_41_Template, 2, 2, "th", 29);
        i0.ɵɵtemplate(42, dibexGridBatchEditComponent_ng_template_85_td_42_Template, 2, 1, "td", 155);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(43, 46);
        i0.ɵɵtemplate(44, dibexGridBatchEditComponent_ng_template_85_th_44_Template, 2, 2, "th", 156);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(45, 48);
        i0.ɵɵtemplate(46, dibexGridBatchEditComponent_ng_template_85_th_46_Template, 2, 2, "th", 49);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(47, dibexGridBatchEditComponent_ng_template_85_tr_47_Template, 1, 3, "tr", 157);
        i0.ɵɵpipe(48, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r42 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r42.selectionDataSource);
        i0.ɵɵadvance(47);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(48, 2, ctx_r42.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i18 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i19 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i20 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (checkbox_1_1) {
                checkbox_1 = checkbox_1_1;
                i8 = checkbox_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "checked": a0 }; };
            _c1 = function (a0) { return { "background-color": a0 }; };
            _c2 = function (a0) { return { visibility: a0 }; };
            _c3 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c4 = function () { return [10, 20, 50, 100]; };
            _c5 = function (a0) { return { "dib-editor": a0 }; };
            _c6 = function () { return ["_dibBusy"]; };
            _c7 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexGridBatchEditComponent = class dibexGridBatchEditComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 231, name: 'dibexGridBatchEdit', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*5771'] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = true; //default:false
                gridExcelEditingAutoSave = true; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'name', 'vip', 'start_date', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'name', 'vip', 'start_date', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexGridBatchEdit');
                    this.containerName = 'dibexGridBatchEdit'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 5758, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 5759, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, start_date: { itemId: 5760, type: 'date', fieldAlias: 'start_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, email: { itemId: 5761, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, address: { itemId: 5762, type: 'text', fieldAlias: 'address', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, city_town: { itemId: 5763, type: 'text', fieldAlias: 'city_town', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, country: { itemId: 5764, type: 'text', fieldAlias: 'country', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: 'USA', dataType: 'text', contentType: 'text', changeUrl: false }, zip_code: { itemId: 5765, type: 'text', fieldAlias: 'zip_code', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, notes: { itemId: 5766, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, updated: { itemId: 5767, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, vip: { itemId: 5768, type: 'boolean', fieldAlias: 'vip', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'boolean', contentType: 'tick', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('address', this.model.modelItems.address.formControl);
                    this.model.$formGroup.addControl('city_town', this.model.modelItems.city_town.formControl);
                    this.model.$formGroup.addControl('country', this.model.modelItems.country.formControl);
                    this.model.$formGroup.addControl('zip_code', this.model.modelItems.zip_code.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.addControl('vip', this.model.modelItems.vip.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['columnHeader', 'id', 'name', 'vip', 'start_date', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexGridBatchEdit`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexGridBatchEdit`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexGridBatchEdit`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 5758 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5759 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 5760 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 5761 };
                    formDefaultsConfigs['address'] = { contentType: "text", type: "none", defaultValue: "", listId: 5762 };
                    formDefaultsConfigs['city_town'] = { contentType: "text", type: "none", defaultValue: "", listId: 5763 };
                    formDefaultsConfigs['country'] = { contentType: "text", type: "none", defaultValue: "USA", listId: 5764 };
                    formDefaultsConfigs['zip_code'] = { contentType: "text", type: "none", defaultValue: "", listId: 5765 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 5766 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 5767 };
                    formDefaultsConfigs['vip'] = { contentType: "tick", type: "none", defaultValue: "", listId: 5768 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 5758, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 5759, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 5760, "date"), { validators: [], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 5761, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), address: new forms_2.FormControl(this.calculateInitialColumnValue(row, "address", "none", false, formDefaults['address'], 5762, "text"), { validators: [forms_2.Validators.maxLength(255)], updateOn: 'blur' }), city_town: new forms_2.FormControl(this.calculateInitialColumnValue(row, "city_town", "none", false, formDefaults['city_town'], 5763, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), country: new forms_2.FormControl(this.calculateInitialColumnValue(row, "country", "none", false, formDefaults['country'], 5764, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), zip_code: new forms_2.FormControl(this.calculateInitialColumnValue(row, "zip_code", "none", false, formDefaults['zip_code'], 5765, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 5766, "text"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 5767, "datetime"), { validators: [], updateOn: 'blur' }), vip: new forms_2.FormControl(this.calculateInitialColumnValue(row, "vip", "none", false, formDefaults['vip'], 5768, "boolean"), { validators: [], updateOn: 'change' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexGridBatchEdit', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexGridBatchEdit' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexGridBatchEditComponent_Factory(t) { return new (t || dibexGridBatchEditComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexGridBatchEditComponent, selectors: [["dibex-grid-batch-edit"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 87, vars: 47, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5771", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexGridBatchEdit", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci5745", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 0px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci5755", "dibComponent", "btnGridToggleEditing", "aria-label", "View/edit this record", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "edit"], ["mat-mini-fab", "", "color", "primary", "id", "ci5749", "dibComponent", "btnGridInlineAdd", "aria-label", "Add new record inside the grid", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/btn_add.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci5746", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci5747", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci5754", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci5752", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5750", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci5751", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci5748", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci5753", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci5756", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "name"], ["matColumnDef", "start_date"], ["matColumnDef", "email"], ["matColumnDef", "address"], ["matColumnDef", "city_town"], ["matColumnDef", "country"], ["matColumnDef", "zip_code"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "vip"], ["matColumnDef", "columnHeader"], ["matColumnDef", "btnGridInlineSave"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexGridBatchEdit", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci5750", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5751", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci5753", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci5758", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "80", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5759", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["datepicker", "", "dibComponent", "datePicker"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker5760", ""], ["id", "ci5760", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "start_date", "name", "start_date", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "100", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci5761", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "address", "maxlength", "255", "name", "address", 3, "keydown.enter", "keydown.esc"], ["id", "ci5762", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "address", "name", "address", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "city_town", "maxlength", "30", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["id", "ci5763", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "city_town", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "country", "maxlength", "30", "name", "country", 3, "keydown.enter", "keydown.esc"], ["id", "ci5764", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "country", "name", "country", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "zip_code", "maxlength", "30", "name", "zip_code", 3, "keydown.enter", "keydown.esc"], ["id", "ci5765", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "zip_code", "name", "zip_code", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputTextArea"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "5", "cdkAutosizeMaxRows", "6", "matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci5766", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker5767", ""], ["id", "ci5767", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["style", "display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;", 4, "ngIf"], [2, "display", "flex", "flex-direction", "row", "justify-content", "center", "flex", "1 1 0%"], [1, "grid-read-only-checkbox", 3, "ngClass"], ["dibComponent", "checkbox", "formControlName", "vip", 3, "ngStyle"], ["id", "ci5768", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "vip", "name", "vip", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "columnHeader"], ["color", "primary", "mat-mini-fab", "", "id", "ci5770", "dibComponent", "btnGridInlineSave", "style", "  ", "aria-label", "Edit This Record Inline", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["color", "primary", "mat-mini-fab", "", "id", "ci5770", "dibComponent", "btnGridInlineSave", "aria-label", "Edit This Record Inline", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "save"], ["color", "primary", "mat-mini-fab", "", "dibComponent", "btnGridInlineSave", "style", "  ", "aria-label", "Edit This Record Inline", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["color", "primary", "mat-mini-fab", "", "dibComponent", "btnGridInlineSave", "aria-label", "Edit This Record Inline", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexGridBatchEditComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexGridBatchEditComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "div", 4);
                        i0.ɵɵelementContainerStart(5, 5);
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_Template_button_click_6_listener() { return ctx.toggleExcelEditing(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(8, "button", 8);
                        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_Template_button_click_8_listener() { return ctx.inlineAddNewRow(); });
                        i0.ɵɵelement(9, "dib-icon", 9);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(10, "button", 10);
                        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_Template_button_click_10_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(11, "dib-icon", 11);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(12, "button", 12);
                        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_Template_button_click_12_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(13, "dib-icon", 13);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(14, "span", 14);
                        i0.ɵɵpipe(15, "safeHtml");
                        i0.ɵɵelementStart(16, "button", 15);
                        i0.ɵɵlistener("click", function dibexGridBatchEditComponent_Template_button_click_16_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(17, "dib-icon", 16);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(18, dibexGridBatchEditComponent_button_18_Template, 2, 4, "button", 17);
                        i0.ɵɵtemplate(19, dibexGridBatchEditComponent_button_19_Template, 2, 4, "button", 18);
                        i0.ɵɵelement(20, "span", 19);
                        i0.ɵɵtemplate(21, dibexGridBatchEditComponent_div_21_Template, 5, 3, "div", 20);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(22, "mat-card", 21)(23, "mat-card-content", 22);
                        i0.ɵɵelementContainerStart(24, 5);
                        i0.ɵɵelementStart(25, "div", 23, 24)(27, "form", 25);
                        i0.ɵɵelementContainerStart(28, 26);
                        i0.ɵɵelementStart(29, "table", 27);
                        i0.ɵɵelementContainerStart(30, 28);
                        i0.ɵɵtemplate(31, dibexGridBatchEditComponent_th_31_Template, 2, 2, "th", 29);
                        i0.ɵɵtemplate(32, dibexGridBatchEditComponent_td_32_Template, 2, 1, "td", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(33, 31);
                        i0.ɵɵtemplate(34, dibexGridBatchEditComponent_td_34_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(35, dibexGridBatchEditComponent_th_35_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(36, 34);
                        i0.ɵɵtemplate(37, dibexGridBatchEditComponent_td_37_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(38, dibexGridBatchEditComponent_th_38_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(39, 35);
                        i0.ɵɵtemplate(40, dibexGridBatchEditComponent_td_40_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(41, dibexGridBatchEditComponent_th_41_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(42, 36);
                        i0.ɵɵtemplate(43, dibexGridBatchEditComponent_td_43_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(44, dibexGridBatchEditComponent_th_44_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(45, 37);
                        i0.ɵɵtemplate(46, dibexGridBatchEditComponent_td_46_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(47, dibexGridBatchEditComponent_th_47_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(48, 38);
                        i0.ɵɵtemplate(49, dibexGridBatchEditComponent_td_49_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(50, dibexGridBatchEditComponent_th_50_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(51, 39);
                        i0.ɵɵtemplate(52, dibexGridBatchEditComponent_td_52_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(53, dibexGridBatchEditComponent_th_53_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(54, 40);
                        i0.ɵɵtemplate(55, dibexGridBatchEditComponent_td_55_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(56, dibexGridBatchEditComponent_th_56_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(57, 41);
                        i0.ɵɵtemplate(58, dibexGridBatchEditComponent_td_58_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(59, dibexGridBatchEditComponent_th_59_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(60, 42);
                        i0.ɵɵtemplate(61, dibexGridBatchEditComponent_td_61_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(62, dibexGridBatchEditComponent_th_62_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(63, 43);
                        i0.ɵɵtemplate(64, dibexGridBatchEditComponent_td_64_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(65, dibexGridBatchEditComponent_th_65_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(66, 44);
                        i0.ɵɵtemplate(67, dibexGridBatchEditComponent_td_67_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(68, dibexGridBatchEditComponent_th_68_Template, 4, 0, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(69, 45);
                        i0.ɵɵtemplate(70, dibexGridBatchEditComponent_td_70_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(71, dibexGridBatchEditComponent_th_71_Template, 1, 0, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(72, 46);
                        i0.ɵɵtemplate(73, dibexGridBatchEditComponent_th_73_Template, 2, 2, "th", 47);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(74, 48);
                        i0.ɵɵtemplate(75, dibexGridBatchEditComponent_th_75_Template, 2, 2, "th", 49);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(76, dibexGridBatchEditComponent_ng_container_76_Template, 3, 3, "ng-container", 50);
                        i0.ɵɵtemplate(77, dibexGridBatchEditComponent_tr_77_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(78, dibexGridBatchEditComponent_tr_78_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(79, dibexGridBatchEditComponent_tr_79_Template, 1, 4, "tr", 52);
                        i0.ɵɵpipe(80, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(81, dibexGridBatchEditComponent_81_Template, 1, 1, null, 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(82, "div", null, 54);
                        i0.ɵɵtemplate(84, dibexGridBatchEditComponent_mat_toolbar_84_Template, 6, 3, "mat-toolbar", 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(85, dibexGridBatchEditComponent_ng_template_85_Template, 49, 4, "ng-template", null, 55, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r39 = i0.ɵɵreference(83);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(43, _c5, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5771");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "5745");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Add new record inside the grid")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(15, 39, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5756");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r39);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(47);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(45, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(46, _c7));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(80, 41, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.CdkTextareaAutosize, i14.MatProgressBar, i15.MatToolbar, i15.MatToolbarRow, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i18.MatTable, i18.MatHeaderCellDef, i18.MatHeaderRowDef, i18.MatColumnDef, i18.MatCellDef, i18.MatRowDef, i18.MatHeaderCell, i18.MatCell, i18.MatHeaderRow, i18.MatRow, i19.MatSort, i19.MatSortHeader, i20.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexGridBatchEdit'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexGridBatchEditComponent.prototype, "reloadContainer", null);
            exports_1("dibexGridBatchEditComponent", dibexGridBatchEditComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridBatchEditComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-grid-batch-edit', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5771 dibComponent=subcontainer   ><ng-container [dibPort]="'5771'" parentContainerName=dibexGridBatchEdit  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><div   style="  padding:5px 10px 0px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci5745 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5745'" ><button mat-mini-fab color=primary  id=ci5755 dibComponent=btnGridToggleEditing   style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleExcelEditing()"  type=button  ><dib-icon src=edit ></dib-icon></button><button mat-mini-fab color=primary  id=ci5749 dibComponent=btnGridInlineAdd   style="  " aria-label="Add new record inside the grid"  [matTooltip]="'Add new record inside the grid'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="inlineAddNewRow()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/btn_add.svg"></dib-icon></button><button mat-mini-fab color=accent  id=ci5746 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"  [matTooltip]="'Delete selected record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button   mat-mini-fab color=accent  id=ci5747 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><span  id=ci5754 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci5752 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5750 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5751 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci5748 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci5753 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Batch Edit Grid: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5756 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5756'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexGridBatchEdit" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5758 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5759 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5760"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker5760.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5760" ></mat-datepicker-toggle><mat-datepicker #datePicker5760 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5760 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5761 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   maxlength='255'  name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('address','maxlength',rowForm)">Please enter 255 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5762 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5763 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5764 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=zip_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'zip_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=zip_code   maxlength='30'  name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('zip_code','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Zip Code  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Zip Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5765 dibComponent=inputText   style="  " ><mat-label >Zip Code</mat-label><input   matInput  type=text   formControlName=zip_code   name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=5  cdkAutosizeMaxRows=6    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5766 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5767"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5767"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5767></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5767 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=vip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><div class=grid-read-only-checkbox  [ngClass]="{'checked': findColumnDisplayValue(rowIndex,'vip','none','boolean') == 1}"></div></span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-checkbox [ngStyle]="{'background-color': row.vip==1 ? 'lightblue' : 'transparent'}" dibComponent=checkbox   style="  "  formControlName=vip   ></mat-checkbox></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> VIP  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >VIP</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5768 dibComponent=inputText   style="  " ><mat-label >VIP</mat-label><input   matInput  type=text   formControlName=vip   name=vip   [attr.aria-label]="'VIP'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('vip', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('vip', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'5769'" ><button   color=primary  mat-mini-fab id=ci5770 dibComponent=btnGridInlineSave   style="  " aria-label="Edit This Record Inline"  [matTooltip]="'Edit This Record Inline'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Edit/Save  </div></div></th></ng-container><ng-container matColumnDef=btnGridInlineSave  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button   color=primary  mat-mini-fab dibComponent=btnGridInlineSave   style="  " aria-label="Edit This Record Inline"  [matTooltip]="'Edit This Record Inline'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexGridBatchEdit><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5758 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5759 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5760"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker5760.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5760" ></mat-datepicker-toggle><mat-datepicker #datePicker5760 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5760 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5761 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   maxlength='255'  name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('address','maxlength',rowForm)">Please enter 255 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5762 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5763 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5764 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=zip_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'zip_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=zip_code   maxlength='30'  name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('zip_code','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Zip Code  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Zip Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5765 dibComponent=inputText   style="  " ><mat-label >Zip Code</mat-label><input   matInput  type=text   formControlName=zip_code   name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=5  cdkAutosizeMaxRows=6    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5766 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5767"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5767"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5767></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5767 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=vip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><div class=grid-read-only-checkbox  [ngClass]="{'checked': findColumnDisplayValue(rowIndex,'vip','none','boolean') == 1}"></div></span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-checkbox [ngStyle]="{'background-color': row.vip==1 ? 'lightblue' : 'transparent'}" dibComponent=checkbox   style="  "  formControlName=vip   ></mat-checkbox></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> VIP  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >VIP</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5768 dibComponent=inputText   style="  " ><mat-label >VIP</mat-label><input   matInput  type=text   formControlName=vip   name=vip   [attr.aria-label]="'VIP'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('vip', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('vip', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'5769'" ><button   color=primary  mat-mini-fab id=ci5770 dibComponent=btnGridInlineSave   style="  " aria-label="Edit This Record Inline"  [matTooltip]="'Edit This Record Inline'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Edit/Save  </div></div></th></ng-container><ng-container matColumnDef=btnGridInlineSave  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button   color=primary  mat-mini-fab dibComponent=btnGridInlineSave   style="  " aria-label="Edit This Record Inline"  [matTooltip]="'Edit This Record Inline'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src=save ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, checkbox_1.MatCheckboxModule];
            dibexGridBatchEditModule = class dibexGridBatchEditModule {
                static entry = dibexGridBatchEditComponent;
                static ɵfac = function dibexGridBatchEditModule_Factory(t) { return new (t || dibexGridBatchEditModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexGridBatchEditModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexGridBatchEditModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridBatchEditModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexGridBatchEditComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexGridBatchEditModule, { declarations: [dibexGridBatchEditComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, checkbox_1.MatCheckboxModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
