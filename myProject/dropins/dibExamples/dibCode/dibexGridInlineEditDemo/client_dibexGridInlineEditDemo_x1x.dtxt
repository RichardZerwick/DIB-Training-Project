System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/checkbox", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, checkbox_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, _c0, _c1, _c2, _c3, _c4, _c5, _c6, importsRequired, dibexGridInlineEditDemoComponent, containerModules, dibexGridInlineEditDemoModule;
    var __moduleName = context_1 && context_1.id;
    function dibexGridInlineEditDemoComponent_button_12_Template(rf, ctx) { if (rf & 1) {
        const _r42 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 49);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_button_12_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r41.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 50);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridInlineEditDemoComponent_button_13_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 51);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 52);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridInlineEditDemoComponent_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r45 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r45.page.toRecord, "\u00A0of\u00A0", ctx_r45.page.records, "");
    } }
    function dibexGridInlineEditDemoComponent_div_15_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r46 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r46.page.totalRecords, ")");
    } }
    function dibexGridInlineEditDemoComponent_div_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 53);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_div_15_span_2_Template, 2, 2, "span", 46);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_div_15_span_4_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Editable Grids: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexGridInlineEditDemoComponent_th_25_Template(rf, ctx) { if (rf & 1) {
        const _r48 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 55);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_25_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r47.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexGridInlineEditDemoComponent_td_26_Template(rf, ctx) { if (rf & 1) {
        const _r52 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 56)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_26_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridInlineEditDemoComponent_td_26_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r52); const row_r49 = restoredCtx.$implicit; const ctx_r51 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r51.selection.toggle(row_r49) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r49 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r49));
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r54 = i0.ɵɵnextContext(2).index;
        const ctx_r57 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r57.findColumnDisplayValue(rowIndex_r54, "id", "none", "number"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r66 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r66); const ctx_r65 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r65.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 63);
        i0.ɵɵelement(2, "input", 64);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r53 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r58 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r58.hasError("id", "required", rowForm_r53));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r58.view.recordStatus == "update" && ctx_r58.notSaved("id", rowForm_r53));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r58.view.recordStatus == "update" && ctx_r58.isSaved("id", rowForm_r53));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r58.isInvalid("id", rowForm_r53));
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_28_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_28_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r53 = i0.ɵɵnextContext().$implicit;
        const ctx_r55 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r55.excelEditing == false && rowForm_r53.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r55.excelEditing == true || rowForm_r53.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r55.excelEditing == false && rowForm_r53.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_28_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r53 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r53);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r53.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_29_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 78);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_29_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_29_div_2_span_2_Template, 2, 0, "span", 77);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r69 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r69.editorOpen);
    } }
    function dibexGridInlineEditDemoComponent_th_29_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_29_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r76 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_29_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r76); const ctx_r75 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r75.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_29_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_29_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r78 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 81)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_29_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r78); const ctx_r77 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r77.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_29_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r78); const ctx_r79 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r79.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_29_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_29_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r71 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r71.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r71.view.recordStatus == "update" && ctx_r71.notSaved("id", ctx_r71.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r71.view.recordStatus == "update" && ctx_r71.isSaved("id", ctx_r71.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_29_div_2_Template, 3, 1, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_29_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_29_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r81 = i0.ɵɵnextContext(2).index;
        const ctx_r84 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r84.findColumnDisplayValue(rowIndex_r81, "name", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r93 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r93); const ctx_r92 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r92.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r95 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 84);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r95); const ctx_r94 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r94.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r95); const ctx_r96 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r96.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r80 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r85 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.hasError("name", "required", rowForm_r80));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.hasError("name", "maxlength", rowForm_r80));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.notSaved("name", rowForm_r80));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.isSaved("name", rowForm_r80));
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_31_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_31_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r80 = i0.ɵɵnextContext().$implicit;
        const ctx_r82 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r82.excelEditing == false && rowForm_r80.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r82.excelEditing == true || rowForm_r80.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r82.excelEditing == false && rowForm_r80.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_31_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r80 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r80);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r80.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_32_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 78);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_32_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_32_div_2_span_2_Template, 2, 0, "span", 77);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r99 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r99.editorOpen);
    } }
    function dibexGridInlineEditDemoComponent_th_32_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_32_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r106 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_32_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r106); const ctx_r105 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r105.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_32_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_32_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r108 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 85)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 86);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_32_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r108); const ctx_r107 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r107.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_32_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r108); const ctx_r109 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r109.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_32_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_32_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r101 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r101.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r101.view.recordStatus == "update" && ctx_r101.notSaved("name", ctx_r101.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r101.view.recordStatus == "update" && ctx_r101.isSaved("name", ctx_r101.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_32_div_2_Template, 3, 1, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_32_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_32_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_34_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 88);
        i0.ɵɵelement(1, "div", 89);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r111 = i0.ɵɵnextContext(2).index;
        const ctx_r114 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c0, ctx_r114.findColumnDisplayValue(rowIndex_r111, "vip", "none", "boolean") == 1));
    } }
    function dibexGridInlineEditDemoComponent_td_34_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵelement(1, "mat-checkbox", 90);
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_34_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_34_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_34_ng_container_1_span_3_Template, 2, 3, "span", 87);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_34_ng_container_1_span_4_Template, 2, 0, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_34_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r110 = i0.ɵɵnextContext().$implicit;
        const ctx_r112 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r112.excelEditing == false && rowForm_r110.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r112.excelEditing == true || rowForm_r110.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r112.excelEditing == false && rowForm_r110.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_34_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r110 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r110);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r110.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_35_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " VIP ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_35_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "VIP");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_35_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r125 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_35_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r125); const ctx_r124 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r124.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_35_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_35_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r127 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 91)(2, "mat-label");
        i0.ɵɵtext(3, "VIP");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_35_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r127); const ctx_r126 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r126.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_35_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r127); const ctx_r128 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r128.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_35_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_35_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r121 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r121.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "VIP");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r121.view.recordStatus == "update" && ctx_r121.notSaved("vip", ctx_r121.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r121.view.recordStatus == "update" && ctx_r121.isSaved("vip", ctx_r121.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_35_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_35_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_35_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r130 = i0.ɵɵnextContext(2).index;
        const ctx_r133 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r133.findColumnDisplayValue(rowIndex_r130, "start_date", "none", "date"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r141 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r141); const ctx_r140 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r140.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r143 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 93)(2, "input", 94);
        i0.ɵɵlistener("focus", function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r143); const _r137 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r137.open()); })("keydown.enter", function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r143); const ctx_r144 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r144.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r143); const ctx_r145 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r145.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 95)(4, "mat-datepicker", null, 96);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(7, dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r137 = i0.ɵɵreference(5);
        const rowForm_r129 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r134 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r137);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r137);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r134.view.recordStatus == "update" && ctx_r134.notSaved("start_date", rowForm_r129));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r134.view.recordStatus == "update" && ctx_r134.isSaved("start_date", rowForm_r129));
    } }
    function dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_37_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_37_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r129 = i0.ɵɵnextContext().$implicit;
        const ctx_r131 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r131.excelEditing == false && rowForm_r129.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r131.excelEditing == true || rowForm_r129.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r131.excelEditing == false && rowForm_r129.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_37_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r129 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r129);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r129.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_38_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_38_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_38_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r154 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_38_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r154); const ctx_r153 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r153.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_38_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_38_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r156 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_38_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r156); const ctx_r155 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r155.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_38_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r156); const ctx_r157 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r157.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_38_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_38_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r150 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r150.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r150.view.recordStatus == "update" && ctx_r150.notSaved("start_date", ctx_r150.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r150.view.recordStatus == "update" && ctx_r150.isSaved("start_date", ctx_r150.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_38_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_38_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_38_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r159 = i0.ɵɵnextContext(2).index;
        const ctx_r162 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r162.findColumnDisplayValue(rowIndex_r159, "phone", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r170 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r170); const ctx_r169 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r169.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r172 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r172); const ctx_r171 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r171.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r172); const ctx_r173 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r173.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r158 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r163 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r163.hasError("phone", "maxlength", rowForm_r158));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r163.view.recordStatus == "update" && ctx_r163.notSaved("phone", rowForm_r158));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r163.view.recordStatus == "update" && ctx_r163.isSaved("phone", rowForm_r158));
    } }
    function dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_40_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_40_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r158 = i0.ɵɵnextContext().$implicit;
        const ctx_r160 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r160.excelEditing == false && rowForm_r158.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r160.excelEditing == true || rowForm_r158.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r160.excelEditing == false && rowForm_r158.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_40_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r158 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r158);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r158.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_41_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_41_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_41_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r182 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_41_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r182); const ctx_r181 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r181.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_41_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_41_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r184 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_41_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r184); const ctx_r183 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r183.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_41_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r184); const ctx_r185 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r185.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_41_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_41_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r178 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r178.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r178.view.recordStatus == "update" && ctx_r178.notSaved("phone", ctx_r178.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r178.view.recordStatus == "update" && ctx_r178.isSaved("phone", ctx_r178.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_41_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_41_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_41_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r187 = i0.ɵɵnextContext(2).index;
        const ctx_r190 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r190.findColumnDisplayValue(rowIndex_r187, "email", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r198 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r198); const ctx_r197 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r197.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r200 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r200); const ctx_r199 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r199.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r200); const ctx_r201 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r201.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r186 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r191 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r191.hasError("email", "maxlength", rowForm_r186));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r191.view.recordStatus == "update" && ctx_r191.notSaved("email", rowForm_r186));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r191.view.recordStatus == "update" && ctx_r191.isSaved("email", rowForm_r186));
    } }
    function dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_43_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_43_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r186 = i0.ɵɵnextContext().$implicit;
        const ctx_r188 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r188.excelEditing == false && rowForm_r186.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r188.excelEditing == true || rowForm_r186.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r188.excelEditing == false && rowForm_r186.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_43_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r186 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r186);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r186.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_44_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_44_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_44_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r210 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_44_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r210); const ctx_r209 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r209.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_44_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_44_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r212 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_44_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r212); const ctx_r211 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r211.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_44_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r212); const ctx_r213 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r213.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_44_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_44_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r206 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r206.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r206.view.recordStatus == "update" && ctx_r206.notSaved("email", ctx_r206.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r206.view.recordStatus == "update" && ctx_r206.isSaved("email", ctx_r206.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_44_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_44_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_44_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r215 = i0.ɵɵnextContext(2).index;
        const ctx_r218 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r218.findColumnDisplayValue(rowIndex_r215, "address", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r226 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r226); const ctx_r225 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r225.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r228 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r228); const ctx_r227 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r227.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r228); const ctx_r229 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r229.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r214 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r219 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r219.hasError("address", "maxlength", rowForm_r214));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r219.view.recordStatus == "update" && ctx_r219.notSaved("address", rowForm_r214));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r219.view.recordStatus == "update" && ctx_r219.isSaved("address", rowForm_r214));
    } }
    function dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_46_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r214 = i0.ɵɵnextContext().$implicit;
        const ctx_r216 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r216.excelEditing == false && rowForm_r214.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r216.excelEditing == true || rowForm_r214.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r216.excelEditing == false && rowForm_r214.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_46_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r214 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r214);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r214.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_47_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_47_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_47_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r238 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_47_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r238); const ctx_r237 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r237.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_47_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_47_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r240 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_47_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r240); const ctx_r239 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r239.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_47_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r240); const ctx_r241 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r241.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_47_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_47_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r234 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r234.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r234.view.recordStatus == "update" && ctx_r234.notSaved("address", ctx_r234.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r234.view.recordStatus == "update" && ctx_r234.isSaved("address", ctx_r234.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_47_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_47_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_47_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r243 = i0.ɵɵnextContext(2).index;
        const ctx_r246 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r246.findColumnDisplayValue(rowIndex_r243, "city_town", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r254 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r254); const ctx_r253 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r253.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r256 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r256); const ctx_r255 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r255.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r256); const ctx_r257 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r257.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r242 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r247 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r247.hasError("city_town", "maxlength", rowForm_r242));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r247.view.recordStatus == "update" && ctx_r247.notSaved("city_town", rowForm_r242));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r247.view.recordStatus == "update" && ctx_r247.isSaved("city_town", rowForm_r242));
    } }
    function dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_49_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r242 = i0.ɵɵnextContext().$implicit;
        const ctx_r244 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r244.excelEditing == false && rowForm_r242.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r244.excelEditing == true || rowForm_r242.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r244.excelEditing == false && rowForm_r242.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_49_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r242 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r242);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r242.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_50_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_50_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_50_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r266 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_50_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r266); const ctx_r265 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r265.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_50_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_50_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r268 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_50_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r268); const ctx_r267 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r267.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_50_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r268); const ctx_r269 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r269.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_50_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_50_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r262 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r262.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r262.view.recordStatus == "update" && ctx_r262.notSaved("city_town", ctx_r262.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r262.view.recordStatus == "update" && ctx_r262.isSaved("city_town", ctx_r262.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_50_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_50_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_50_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r271 = i0.ɵɵnextContext(2).index;
        const ctx_r274 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r274.findColumnDisplayValue(rowIndex_r271, "country", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r282 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r282); const ctx_r281 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r281.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r284 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r284); const ctx_r283 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r283.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r284); const ctx_r285 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r285.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r270 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r275 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.hasError("country", "maxlength", rowForm_r270));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.view.recordStatus == "update" && ctx_r275.notSaved("country", rowForm_r270));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.view.recordStatus == "update" && ctx_r275.isSaved("country", rowForm_r270));
    } }
    function dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_52_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_52_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r270 = i0.ɵɵnextContext().$implicit;
        const ctx_r272 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r272.excelEditing == false && rowForm_r270.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r272.excelEditing == true || rowForm_r270.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r272.excelEditing == false && rowForm_r270.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_52_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r270 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r270);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r270.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_53_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_53_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_53_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r294 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_53_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r294); const ctx_r293 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r293.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_53_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_53_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r296 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_53_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r296); const ctx_r295 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r295.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_53_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r296); const ctx_r297 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r297.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_53_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_53_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r290 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r290.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r290.view.recordStatus == "update" && ctx_r290.notSaved("country", ctx_r290.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r290.view.recordStatus == "update" && ctx_r290.isSaved("country", ctx_r290.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_53_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_53_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_53_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r299 = i0.ɵɵnextContext(2).index;
        const ctx_r302 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r302.findColumnDisplayValue(rowIndex_r299, "zip_code", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r310 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r310); const ctx_r309 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r309.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r312 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r312); const ctx_r311 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r311.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r312); const ctx_r313 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r313.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r298 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r303 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r303.hasError("zip_code", "maxlength", rowForm_r298));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r303.view.recordStatus == "update" && ctx_r303.notSaved("zip_code", rowForm_r298));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r303.view.recordStatus == "update" && ctx_r303.isSaved("zip_code", rowForm_r298));
    } }
    function dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_55_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_55_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r298 = i0.ɵɵnextContext().$implicit;
        const ctx_r300 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r300.excelEditing == false && rowForm_r298.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.excelEditing == true || rowForm_r298.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.excelEditing == false && rowForm_r298.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_55_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r298 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r298);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r298.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_56_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Zip Code ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_56_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Zip Code");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_56_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r322 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_56_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r322); const ctx_r321 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r321.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_56_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_56_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r324 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Zip Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_56_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r324); const ctx_r323 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r323.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_56_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r324); const ctx_r325 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r325.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_56_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_56_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r318 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r318.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r318.view.recordStatus == "update" && ctx_r318.notSaved("zip_code", ctx_r318.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r318.view.recordStatus == "update" && ctx_r318.isSaved("zip_code", ctx_r318.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_56_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_56_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_56_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r327 = i0.ɵɵnextContext(2).index;
        const ctx_r330 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r330.findColumnDisplayValue(rowIndex_r327, "notes", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r337 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r337); const ctx_r336 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r336.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r339 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 117)(2, "textarea", 118);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r339); const ctx_r338 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r338.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r339); const ctx_r340 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r340.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r326 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r331 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r331.view.recordStatus == "update" && ctx_r331.notSaved("notes", rowForm_r326));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r331.view.recordStatus == "update" && ctx_r331.isSaved("notes", rowForm_r326));
    } }
    function dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_58_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_58_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r326 = i0.ɵɵnextContext().$implicit;
        const ctx_r328 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r328.excelEditing == false && rowForm_r326.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r328.excelEditing == true || rowForm_r326.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r328.excelEditing == false && rowForm_r326.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_58_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r326 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r326);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r326.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_59_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_59_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_59_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r349 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_59_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r349); const ctx_r348 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r348.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_59_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_59_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r351 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 119)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_59_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r351); const ctx_r350 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r350.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_59_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r351); const ctx_r352 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r352.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_59_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_59_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r345 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r345.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r345.view.recordStatus == "update" && ctx_r345.notSaved("notes", ctx_r345.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r345.view.recordStatus == "update" && ctx_r345.isSaved("notes", ctx_r345.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_59_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_59_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_59_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r354 = i0.ɵɵnextContext(2).index;
        const ctx_r357 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r357.findColumnDisplayValue(rowIndex_r354, "updated", "none", "datetime"), "");
    } }
    function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r365 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r365); const ctx_r364 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r364.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r367 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 121);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 95);
        i0.ɵɵelementStart(3, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r367); const ctx_r366 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r366.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r367); const ctx_r368 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r368.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 123);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r363 = i0.ɵɵreference(7);
        const rowForm_r353 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r358 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r363);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r363);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r358.view.recordStatus == "update" && ctx_r358.notSaved("updated", rowForm_r353));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r358.view.recordStatus == "update" && ctx_r358.isSaved("updated", rowForm_r353));
    } }
    function dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_td_61_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_td_61_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r353 = i0.ɵɵnextContext().$implicit;
        const ctx_r355 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r355.excelEditing == false && rowForm_r353.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r355.excelEditing == true || rowForm_r353.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r355.excelEditing == false && rowForm_r353.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_td_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_td_61_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r353 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r353);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r353.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_th_62_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_62_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_62_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r377 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_th_62_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r377); const ctx_r376 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r376.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_62_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_th_62_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r379 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 124)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 125);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_th_62_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r379); const ctx_r378 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r378.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_th_62_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r379); const ctx_r380 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r380.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_th_62_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_th_62_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r373 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r373.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r373.view.recordStatus == "update" && ctx_r373.notSaved("updated", ctx_r373.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r373.view.recordStatus == "update" && ctx_r373.isSaved("updated", ctx_r373.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_th_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_th_62_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_th_62_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_th_62_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_th_64_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 128);
    } }
    function dibexGridInlineEditDemoComponent_th_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 126);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_th_64_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 127);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r30.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.busy);
    } }
    function dibexGridInlineEditDemoComponent_th_66_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r382 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r382.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridInlineEditDemoComponent_th_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_th_66_span_1_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r31.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r31.busy && ctx_r31.tableDataSource.data.length == 0);
    } }
    function dibexGridInlineEditDemoComponent_ng_container_67_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 131);
    } }
    function dibexGridInlineEditDemoComponent_ng_container_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_container_67_tr_1_Template, 1, 0, "tr", 130);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r383 = ctx.$implicit;
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r32.columnHeaders.getArray(column_r383).items$));
    } }
    function dibexGridInlineEditDemoComponent_tr_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 132);
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r33.busy ? "visible" : "hidden"));
    } }
    function dibexGridInlineEditDemoComponent_tr_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 132);
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r34.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexGridInlineEditDemoComponent_tr_70_Template(rf, ctx) { if (rf & 1) {
        const _r388 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 133);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_tr_70_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r388); const row_r385 = restoredCtx.$implicit; const ctx_r387 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r387.rowClick(row_r385, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r385 = ctx.$implicit;
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r35.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r35.isHighlighted(row_r385)));
    } }
    function dibexGridInlineEditDemoComponent_72_ng_template_0_Template(rf, ctx) { }
    function dibexGridInlineEditDemoComponent_72_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexGridInlineEditDemoComponent_72_ng_template_0_Template, 0, 0, "ng-template", 134);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r39 = i0.ɵɵreference(77);
        i0.ɵɵproperty("ngTemplateOutlet", _r39);
    } }
    function dibexGridInlineEditDemoComponent_mat_toolbar_75_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r394 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 140);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_mat_toolbar_75_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r394); const ctx_r393 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r393.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r390 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r390.numberOfSelectedItems + " ", "item", ctx_r390.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexGridInlineEditDemoComponent_mat_toolbar_75_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_mat_toolbar_75_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_mat_toolbar_75_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r398 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 141);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_mat_toolbar_75_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r398); const ctx_r397 = i0.ɵɵnextContext(2); ctx_r397.gridShowClipboardDefault = !ctx_r397.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r397.gridShowClipboardDefault && ctx_r397.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_mat_toolbar_75_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 46);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_mat_toolbar_75_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 46);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r391 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r391.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r391.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r391.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexGridInlineEditDemoComponent_mat_toolbar_75_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r401 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 142, 143);
        i0.ɵɵlistener("page", function dibexGridInlineEditDemoComponent_mat_toolbar_75_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r401); const ctx_r400 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r400.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r392 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r392.page.totalRecords)("pageSize", ctx_r392.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexGridInlineEditDemoComponent_mat_toolbar_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 135);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_mat_toolbar_75_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 136);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_mat_toolbar_75_button_3_Template, 4, 3, "button", 137);
        i0.ɵɵelement(4, "span", 138);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_mat_toolbar_75_mat_paginator_5_Template, 2, 4, "mat-paginator", 139);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r38.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r38.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r432 = i0.ɵɵnextContext(2).index;
        const ctx_r435 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r435.findColumnDisplayValue(rowIndex_r432, "id", "none", "number"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r443 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r443); const ctx_r442 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r442.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r445 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 63)(2, "input", 148);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r445); const ctx_r444 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r444.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r445); const ctx_r446 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r446.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r431 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r436 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r436.hasError("id", "required", rowForm_r431));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r436.view.recordStatus == "update" && ctx_r436.notSaved("id", rowForm_r431));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r436.view.recordStatus == "update" && ctx_r436.isSaved("id", rowForm_r431));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r431 = i0.ɵɵnextContext().$implicit;
        const ctx_r433 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r433.excelEditing == false && rowForm_r431.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r433.excelEditing == true || rowForm_r431.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r433.excelEditing == false && rowForm_r431.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_2_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r431 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r431);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r431.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 78);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_2_span_2_Template, 2, 0, "span", 77);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r449 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r449.editorOpen);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r456 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r456); const ctx_r455 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r455.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r458 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 81)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r458); const ctx_r457 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r457.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r458); const ctx_r459 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r459.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r451 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r451.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.view.recordStatus == "update" && ctx_r451.notSaved("id", ctx_r451.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.view.recordStatus == "update" && ctx_r451.isSaved("id", ctx_r451.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_2_Template, 3, 1, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_3_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r403 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r403.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r403.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r403.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r461 = i0.ɵɵnextContext(2).index;
        const ctx_r464 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r464.findColumnDisplayValue(rowIndex_r461, "name", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r473 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r473); const ctx_r472 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r472.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r475 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 84);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r475); const ctx_r474 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r474.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r475); const ctx_r476 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r476.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r460 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r465 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r465.hasError("name", "required", rowForm_r460));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r465.hasError("name", "maxlength", rowForm_r460));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r465.view.recordStatus == "update" && ctx_r465.notSaved("name", rowForm_r460));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r465.view.recordStatus == "update" && ctx_r465.isSaved("name", rowForm_r460));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r460 = i0.ɵɵnextContext().$implicit;
        const ctx_r462 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r462.excelEditing == false && rowForm_r460.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r462.excelEditing == true || rowForm_r460.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r462.excelEditing == false && rowForm_r460.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_5_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r460 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r460);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r460.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 78);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_2_span_2_Template, 2, 0, "span", 77);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r479 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r479.editorOpen);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r486 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r486); const ctx_r485 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r485.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r488 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 85)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 86);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r488); const ctx_r487 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r487.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r488); const ctx_r489 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r489.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r481 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r481.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r481.view.recordStatus == "update" && ctx_r481.notSaved("name", ctx_r481.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r481.view.recordStatus == "update" && ctx_r481.isSaved("name", ctx_r481.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_2_Template, 3, 1, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_6_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r405 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r405.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r405.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r405.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 88);
        i0.ɵɵelement(1, "div", 89);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r491 = i0.ɵɵnextContext(2).index;
        const ctx_r494 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c0, ctx_r494.findColumnDisplayValue(rowIndex_r491, "vip", "none", "boolean") == 1));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵelement(1, "mat-checkbox", 90);
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_span_3_Template, 2, 3, "span", 87);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_span_4_Template, 2, 0, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r490 = i0.ɵɵnextContext().$implicit;
        const ctx_r492 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r492.excelEditing == false && rowForm_r490.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r492.excelEditing == true || rowForm_r490.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r492.excelEditing == false && rowForm_r490.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_8_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r490 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r490);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r490.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " VIP ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "VIP");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r505 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r505); const ctx_r504 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r504.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r507 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 91)(2, "mat-label");
        i0.ɵɵtext(3, "VIP");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r507); const ctx_r506 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r506.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r507); const ctx_r508 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r508.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r501 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r501.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "VIP");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.view.recordStatus == "update" && ctx_r501.notSaved("vip", ctx_r501.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.view.recordStatus == "update" && ctx_r501.isSaved("vip", ctx_r501.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_9_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r407 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r407.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r407.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r407.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r510 = i0.ɵɵnextContext(2).index;
        const ctx_r513 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r513.findColumnDisplayValue(rowIndex_r510, "start_date", "none", "date"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r521 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r521); const ctx_r520 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r520.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r523 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 93)(2, "input", 94);
        i0.ɵɵlistener("focus", function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r523); const _r517 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r517.open()); })("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r523); const ctx_r524 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r524.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r523); const ctx_r525 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r525.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 95)(4, "mat-datepicker", null, 96);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(7, dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r517 = i0.ɵɵreference(5);
        const rowForm_r509 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r514 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r517);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r517);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r514.view.recordStatus == "update" && ctx_r514.notSaved("start_date", rowForm_r509));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r514.view.recordStatus == "update" && ctx_r514.isSaved("start_date", rowForm_r509));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r509 = i0.ɵɵnextContext().$implicit;
        const ctx_r511 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r511.excelEditing == false && rowForm_r509.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.excelEditing == true || rowForm_r509.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.excelEditing == false && rowForm_r509.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_11_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r509 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r509);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r509.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r534 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r534); const ctx_r533 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r533.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r536 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r536); const ctx_r535 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r535.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r536); const ctx_r537 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r537.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r530 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r530.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r530.view.recordStatus == "update" && ctx_r530.notSaved("start_date", ctx_r530.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r530.view.recordStatus == "update" && ctx_r530.isSaved("start_date", ctx_r530.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_12_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r409 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r409.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r409.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r409.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r539 = i0.ɵɵnextContext(2).index;
        const ctx_r542 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r542.findColumnDisplayValue(rowIndex_r539, "phone", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r550 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r550); const ctx_r549 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r549.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r552 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r552); const ctx_r551 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r551.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r552); const ctx_r553 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r553.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r538 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r543 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r543.hasError("phone", "maxlength", rowForm_r538));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r543.view.recordStatus == "update" && ctx_r543.notSaved("phone", rowForm_r538));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r543.view.recordStatus == "update" && ctx_r543.isSaved("phone", rowForm_r538));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r538 = i0.ɵɵnextContext().$implicit;
        const ctx_r540 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r540.excelEditing == false && rowForm_r538.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r540.excelEditing == true || rowForm_r538.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r540.excelEditing == false && rowForm_r538.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_14_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r538 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r538);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r538.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r562 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r562); const ctx_r561 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r561.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r564 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r564); const ctx_r563 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r563.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r564); const ctx_r565 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r565.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r558 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r558.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r558.view.recordStatus == "update" && ctx_r558.notSaved("phone", ctx_r558.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r558.view.recordStatus == "update" && ctx_r558.isSaved("phone", ctx_r558.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_15_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r411 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r411.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r411.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r411.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r567 = i0.ɵɵnextContext(2).index;
        const ctx_r570 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r570.findColumnDisplayValue(rowIndex_r567, "email", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r578 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r578); const ctx_r577 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r577.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r580 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r580); const ctx_r579 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r579.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r580); const ctx_r581 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r581.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r566 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r571 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r571.hasError("email", "maxlength", rowForm_r566));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r571.view.recordStatus == "update" && ctx_r571.notSaved("email", rowForm_r566));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r571.view.recordStatus == "update" && ctx_r571.isSaved("email", rowForm_r566));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r566 = i0.ɵɵnextContext().$implicit;
        const ctx_r568 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r568.excelEditing == false && rowForm_r566.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r568.excelEditing == true || rowForm_r566.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r568.excelEditing == false && rowForm_r566.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_17_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r566 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r566);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r566.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r590 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r590); const ctx_r589 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r589.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r592 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r592); const ctx_r591 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r591.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r592); const ctx_r593 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r593.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r586 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r586.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r586.view.recordStatus == "update" && ctx_r586.notSaved("email", ctx_r586.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r586.view.recordStatus == "update" && ctx_r586.isSaved("email", ctx_r586.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_18_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r413 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r413.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r413.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r413.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r595 = i0.ɵɵnextContext(2).index;
        const ctx_r598 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r598.findColumnDisplayValue(rowIndex_r595, "address", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r606 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r606); const ctx_r605 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r605.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r608 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r608); const ctx_r607 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r607.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r608); const ctx_r609 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r609.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r594 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r599 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r599.hasError("address", "maxlength", rowForm_r594));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r599.view.recordStatus == "update" && ctx_r599.notSaved("address", rowForm_r594));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r599.view.recordStatus == "update" && ctx_r599.isSaved("address", rowForm_r594));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r594 = i0.ɵɵnextContext().$implicit;
        const ctx_r596 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r596.excelEditing == false && rowForm_r594.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r596.excelEditing == true || rowForm_r594.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r596.excelEditing == false && rowForm_r594.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_20_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r594 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r594);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r594.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r618 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r618); const ctx_r617 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r617.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r620 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r620); const ctx_r619 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r619.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r620); const ctx_r621 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r621.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r614 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r614.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r614.view.recordStatus == "update" && ctx_r614.notSaved("address", ctx_r614.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r614.view.recordStatus == "update" && ctx_r614.isSaved("address", ctx_r614.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_21_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r415 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r415.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r415.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r415.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r623 = i0.ɵɵnextContext(2).index;
        const ctx_r626 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r626.findColumnDisplayValue(rowIndex_r623, "city_town", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r634 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r634); const ctx_r633 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r633.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r636 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r636); const ctx_r635 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r635.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r636); const ctx_r637 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r637.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r622 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r627 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r627.hasError("city_town", "maxlength", rowForm_r622));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r627.view.recordStatus == "update" && ctx_r627.notSaved("city_town", rowForm_r622));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r627.view.recordStatus == "update" && ctx_r627.isSaved("city_town", rowForm_r622));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r622 = i0.ɵɵnextContext().$implicit;
        const ctx_r624 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r624.excelEditing == false && rowForm_r622.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r624.excelEditing == true || rowForm_r622.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r624.excelEditing == false && rowForm_r622.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_23_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r622 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r622);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r622.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r646 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r646); const ctx_r645 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r645.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r648 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r648); const ctx_r647 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r647.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r648); const ctx_r649 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r649.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r642 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r642.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r642.view.recordStatus == "update" && ctx_r642.notSaved("city_town", ctx_r642.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r642.view.recordStatus == "update" && ctx_r642.isSaved("city_town", ctx_r642.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_24_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r417 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r417.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r417.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r417.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r651 = i0.ɵɵnextContext(2).index;
        const ctx_r654 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r654.findColumnDisplayValue(rowIndex_r651, "country", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r662 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r662); const ctx_r661 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r661.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r664 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r664); const ctx_r663 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r663.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r664); const ctx_r665 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r665.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r650 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r655 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r655.hasError("country", "maxlength", rowForm_r650));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r655.view.recordStatus == "update" && ctx_r655.notSaved("country", rowForm_r650));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r655.view.recordStatus == "update" && ctx_r655.isSaved("country", rowForm_r650));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r650 = i0.ɵɵnextContext().$implicit;
        const ctx_r652 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r652.excelEditing == false && rowForm_r650.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r652.excelEditing == true || rowForm_r650.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r652.excelEditing == false && rowForm_r650.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_26_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r650 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r650);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r650.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r674 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r674); const ctx_r673 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r673.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r676 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r676); const ctx_r675 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r675.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r676); const ctx_r677 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r677.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r670 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r670.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r670.view.recordStatus == "update" && ctx_r670.notSaved("country", ctx_r670.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r670.view.recordStatus == "update" && ctx_r670.isSaved("country", ctx_r670.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_27_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r419 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r419.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r419.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r419.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r679 = i0.ɵɵnextContext(2).index;
        const ctx_r682 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r682.findColumnDisplayValue(rowIndex_r679, "zip_code", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r690 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r690); const ctx_r689 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r689.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r692 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 83)(2, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r692); const ctx_r691 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r691.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r692); const ctx_r693 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r693.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r678 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r683 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r683.hasError("zip_code", "maxlength", rowForm_r678));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r683.view.recordStatus == "update" && ctx_r683.notSaved("zip_code", rowForm_r678));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r683.view.recordStatus == "update" && ctx_r683.isSaved("zip_code", rowForm_r678));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r678 = i0.ɵɵnextContext().$implicit;
        const ctx_r680 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r680.excelEditing == false && rowForm_r678.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r680.excelEditing == true || rowForm_r678.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r680.excelEditing == false && rowForm_r678.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_29_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r678 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r678);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r678.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Zip Code ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Zip Code");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r702 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r702); const ctx_r701 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r701.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r704 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Zip Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r704); const ctx_r703 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r703.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r704); const ctx_r705 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r705.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r698 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r698.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r698.view.recordStatus == "update" && ctx_r698.notSaved("zip_code", ctx_r698.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r698.view.recordStatus == "update" && ctx_r698.isSaved("zip_code", ctx_r698.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_30_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r421 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r421.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r707 = i0.ɵɵnextContext(2).index;
        const ctx_r710 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r710.findColumnDisplayValue(rowIndex_r707, "notes", "none", "text"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r717 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r717); const ctx_r716 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r716.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r719 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 117)(2, "textarea", 118);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r719); const ctx_r718 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r718.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r719); const ctx_r720 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r720.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r706 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r711 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r711.view.recordStatus == "update" && ctx_r711.notSaved("notes", rowForm_r706));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r711.view.recordStatus == "update" && ctx_r711.isSaved("notes", rowForm_r706));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r706 = i0.ɵɵnextContext().$implicit;
        const ctx_r708 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r708.excelEditing == false && rowForm_r706.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r708.excelEditing == true || rowForm_r706.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r708.excelEditing == false && rowForm_r706.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_32_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r706 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r706);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r706.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r729 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r729); const ctx_r728 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r728.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r731 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 119)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r731); const ctx_r730 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r730.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r731); const ctx_r732 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r732.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r725 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r725.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r725.view.recordStatus == "update" && ctx_r725.notSaved("notes", ctx_r725.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r725.view.recordStatus == "update" && ctx_r725.isSaved("notes", ctx_r725.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_33_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r423 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r423.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r423.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r423.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r734 = i0.ɵɵnextContext(2).index;
        const ctx_r737 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r737.findColumnDisplayValue(rowIndex_r734, "updated", "none", "datetime"), "");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r745 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r745); const ctx_r744 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r744.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r747 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 121);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 95);
        i0.ɵɵelementStart(3, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r747); const ctx_r746 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r746.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r747); const ctx_r748 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r748.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 123);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r743 = i0.ɵɵreference(7);
        const rowForm_r733 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r738 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r743);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r743);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r738.view.recordStatus == "update" && ctx_r738.notSaved("updated", rowForm_r733));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r738.view.recordStatus == "update" && ctx_r738.isSaved("updated", rowForm_r733));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r733 = i0.ɵɵnextContext().$implicit;
        const ctx_r735 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r735.excelEditing == false && rowForm_r733.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r735.excelEditing == true || rowForm_r733.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r735.excelEditing == false && rowForm_r733.get("__edit").value === false);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_td_35_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r733 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r733);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r733.getRawValue());
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 76);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r757 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r757); const ctx_r756 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r756.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r759 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 80)(1, "mat-form-field", 124)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 125);
        i0.ɵɵlistener("keydown.enter", function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r759); const ctx_r758 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r758.searchGrid(false)); })("keydown.esc", function dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r759); const ctx_r760 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r760.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r753 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r753.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r753.view.recordStatus == "update" && ctx_r753.notSaved("updated", ctx_r753.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r753.view.recordStatus == "update" && ctx_r753.isSaved("updated", ctx_r753.model.$formGroup));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 72);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_2_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_3_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(4, dibexGridInlineEditDemoComponent_ng_template_76_th_36_div_4_Template, 7, 4, "div", 75);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r425 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r425.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.showSearch);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_38_Template(rf, ctx) { if (rf & 1) {
        const _r762 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 149);
        i0.ɵɵlistener("change", function dibexGridInlineEditDemoComponent_ng_template_76_th_38_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r762); const ctx_r761 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r761.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r426 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r426.masterIsChecked)("indeterminate", ctx_r426.masterIsIndeterminate);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_td_39_Template(rf, ctx) { if (rf & 1) {
        const _r766 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 150)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_td_39_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridInlineEditDemoComponent_ng_template_76_td_39_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r766); const row_r763 = restoredCtx.$implicit; const ctx_r765 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r765.selection.toggle(row_r763) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r763 = ctx.$implicit;
        const ctx_r427 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r427.isHighlighted(row_r763));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_41_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 128);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 151);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_th_41_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 127);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r428 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r428.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r428.busy);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_43_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r768 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r768.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129);
        i0.ɵɵtemplate(1, dibexGridInlineEditDemoComponent_ng_template_76_th_43_span_1_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r429 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r429.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r429.busy && ctx_r429.tableDataSource.data.length == 0);
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_tr_44_Template(rf, ctx) { if (rf & 1) {
        const _r771 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 152);
        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_ng_template_76_tr_44_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r771); const row_r769 = restoredCtx.$implicit; const ctx_r770 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r770.rowClick(row_r769, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r769 = ctx.$implicit;
        const ctx_r430 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r430.isHighlighted(row_r769)));
    } }
    function dibexGridInlineEditDemoComponent_ng_template_76_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 144);
        i0.ɵɵelementContainerStart(1, 25);
        i0.ɵɵtemplate(2, dibexGridInlineEditDemoComponent_ng_template_76_td_2_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(3, dibexGridInlineEditDemoComponent_ng_template_76_th_3_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 28);
        i0.ɵɵtemplate(5, dibexGridInlineEditDemoComponent_ng_template_76_td_5_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(6, dibexGridInlineEditDemoComponent_ng_template_76_th_6_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 29);
        i0.ɵɵtemplate(8, dibexGridInlineEditDemoComponent_ng_template_76_td_8_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(9, dibexGridInlineEditDemoComponent_ng_template_76_th_9_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 30);
        i0.ɵɵtemplate(11, dibexGridInlineEditDemoComponent_ng_template_76_td_11_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(12, dibexGridInlineEditDemoComponent_ng_template_76_th_12_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 31);
        i0.ɵɵtemplate(14, dibexGridInlineEditDemoComponent_ng_template_76_td_14_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(15, dibexGridInlineEditDemoComponent_ng_template_76_th_15_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 32);
        i0.ɵɵtemplate(17, dibexGridInlineEditDemoComponent_ng_template_76_td_17_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(18, dibexGridInlineEditDemoComponent_ng_template_76_th_18_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 33);
        i0.ɵɵtemplate(20, dibexGridInlineEditDemoComponent_ng_template_76_td_20_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(21, dibexGridInlineEditDemoComponent_ng_template_76_th_21_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 34);
        i0.ɵɵtemplate(23, dibexGridInlineEditDemoComponent_ng_template_76_td_23_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(24, dibexGridInlineEditDemoComponent_ng_template_76_th_24_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 35);
        i0.ɵɵtemplate(26, dibexGridInlineEditDemoComponent_ng_template_76_td_26_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(27, dibexGridInlineEditDemoComponent_ng_template_76_th_27_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 36);
        i0.ɵɵtemplate(29, dibexGridInlineEditDemoComponent_ng_template_76_td_29_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(30, dibexGridInlineEditDemoComponent_ng_template_76_th_30_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 37);
        i0.ɵɵtemplate(32, dibexGridInlineEditDemoComponent_ng_template_76_td_32_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(33, dibexGridInlineEditDemoComponent_ng_template_76_th_33_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 38);
        i0.ɵɵtemplate(35, dibexGridInlineEditDemoComponent_ng_template_76_td_35_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(36, dibexGridInlineEditDemoComponent_ng_template_76_th_36_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 22);
        i0.ɵɵtemplate(38, dibexGridInlineEditDemoComponent_ng_template_76_th_38_Template, 2, 2, "th", 23);
        i0.ɵɵtemplate(39, dibexGridInlineEditDemoComponent_ng_template_76_td_39_Template, 2, 1, "td", 145);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 39);
        i0.ɵɵtemplate(41, dibexGridInlineEditDemoComponent_ng_template_76_th_41_Template, 2, 2, "th", 146);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(42, 41);
        i0.ɵɵtemplate(43, dibexGridInlineEditDemoComponent_ng_template_76_th_43_Template, 2, 2, "th", 42);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(44, dibexGridInlineEditDemoComponent_ng_template_76_tr_44_Template, 1, 3, "tr", 147);
        i0.ɵɵpipe(45, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r40.selectionDataSource);
        i0.ɵɵadvance(44);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(45, 2, ctx_r40.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i17 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i18 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i19 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i16 = card_1_1;
            },
            function (checkbox_1_1) {
                checkbox_1 = checkbox_1_1;
                i8 = checkbox_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "checked": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function () { return ["_dibBusy"]; };
            _c6 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexGridInlineEditDemoComponent = class dibexGridInlineEditDemoComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 205, name: 'dibexGridInlineEditDemo', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = true; //default:false
                gridExcelEditingAutoSave = true; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['id', 'name', 'vip', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['id', 'name', 'vip', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexGridInlineEditDemo');
                    this.containerName = 'dibexGridInlineEditDemo'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 5455, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: null, default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 5456, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, vip: { itemId: 5457, type: 'boolean', fieldAlias: 'vip', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'boolean', contentType: 'tick', changeUrl: false }, start_date: { itemId: 5458, type: 'date', fieldAlias: 'start_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, phone: { itemId: 5459, type: 'text', fieldAlias: 'phone', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 5460, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, address: { itemId: 5461, type: 'text', fieldAlias: 'address', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(200)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, city_town: { itemId: 5462, type: 'text', fieldAlias: 'city_town', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, country: { itemId: 5463, type: 'text', fieldAlias: 'country', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, zip_code: { itemId: 5464, type: 'text', fieldAlias: 'zip_code', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, notes: { itemId: 5465, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, updated: { itemId: 5466, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('vip', this.model.modelItems.vip.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('phone', this.model.modelItems.phone.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('address', this.model.modelItems.address.formControl);
                    this.model.$formGroup.addControl('city_town', this.model.modelItems.city_town.formControl);
                    this.model.$formGroup.addControl('country', this.model.modelItems.country.formControl);
                    this.model.$formGroup.addControl('zip_code', this.model.modelItems.zip_code.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['id', 'name', 'vip', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexGridInlineEditDemo`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexGridInlineEditDemo`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexGridInlineEditDemo`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 5455 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5456 };
                    formDefaultsConfigs['vip'] = { contentType: "tick", type: "none", defaultValue: "", listId: 5457 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 5458 };
                    formDefaultsConfigs['phone'] = { contentType: "text", type: "none", defaultValue: "", listId: 5459 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 5460 };
                    formDefaultsConfigs['address'] = { contentType: "text", type: "none", defaultValue: "", listId: 5461 };
                    formDefaultsConfigs['city_town'] = { contentType: "text", type: "none", defaultValue: "", listId: 5462 };
                    formDefaultsConfigs['country'] = { contentType: "text", type: "none", defaultValue: "", listId: 5463 };
                    formDefaultsConfigs['zip_code'] = { contentType: "text", type: "none", defaultValue: "", listId: 5464 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 5465 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 5466 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 5455, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 5456, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), vip: new forms_2.FormControl(this.calculateInitialColumnValue(row, "vip", "none", false, formDefaults['vip'], 5457, "boolean"), { validators: [], updateOn: 'change' }), start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 5458, "date"), { validators: [], updateOn: 'blur' }), phone: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone", "none", false, formDefaults['phone'], 5459, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 5460, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), address: new forms_2.FormControl(this.calculateInitialColumnValue(row, "address", "none", false, formDefaults['address'], 5461, "text"), { validators: [forms_2.Validators.maxLength(200)], updateOn: 'blur' }), city_town: new forms_2.FormControl(this.calculateInitialColumnValue(row, "city_town", "none", false, formDefaults['city_town'], 5462, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), country: new forms_2.FormControl(this.calculateInitialColumnValue(row, "country", "none", false, formDefaults['country'], 5463, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), zip_code: new forms_2.FormControl(this.calculateInitialColumnValue(row, "zip_code", "none", false, formDefaults['zip_code'], 5464, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 5465, "text"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 5466, "datetime"), { validators: [], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexGridInlineEditDemo', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexGridInlineEditDemo' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexGridInlineEditDemoComponent_Factory(t) { return new (t || dibexGridInlineEditDemoComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexGridInlineEditDemoComponent, selectors: [["dibex-grid-inline-edit-demo"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 78, vars: 38, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5058", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 0px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci5061", "dibComponent", "btnGridInlineAdd", "aria-label", "Add new record inside the grid", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/btn_add.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci5059", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci5066", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci5064", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5062", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci5063", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci5060", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci5065", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci5067", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "name"], ["matColumnDef", "vip"], ["matColumnDef", "start_date"], ["matColumnDef", "phone"], ["matColumnDef", "email"], ["matColumnDef", "address"], ["matColumnDef", "city_town"], ["matColumnDef", "country"], ["matColumnDef", "zip_code"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexGridInlineEditDemo", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci5062", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5063", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci5065", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci5455", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "80", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5456", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["style", "display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;", 4, "ngIf"], [2, "display", "flex", "flex-direction", "row", "justify-content", "center", "flex", "1 1 0%"], [1, "grid-read-only-checkbox", 3, "ngClass"], ["dibComponent", "checkbox", "formControlName", "vip"], ["id", "ci5457", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "vip", "name", "vip", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "datePicker"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker5458", ""], ["id", "ci5458", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "start_date", "name", "start_date", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone", "maxlength", "100", "name", "phone", 3, "keydown.enter", "keydown.esc"], ["id", "ci5459", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "phone", "name", "phone", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "100", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci5460", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "address", "maxlength", "200", "name", "address", 3, "keydown.enter", "keydown.esc"], ["id", "ci5461", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "address", "name", "address", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "city_town", "maxlength", "30", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["id", "ci5462", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "city_town", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "country", "maxlength", "30", "name", "country", 3, "keydown.enter", "keydown.esc"], ["id", "ci5463", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "country", "name", "country", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "zip_code", "maxlength", "30", "name", "zip_code", 3, "keydown.enter", "keydown.esc"], ["id", "ci5464", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "zip_code", "name", "zip_code", 3, "keydown.enter", "keydown.esc"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "dibComponent", "inputTextArea"], ["matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci5465", "dibComponent", "inputText"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker5466", ""], ["id", "ci5466", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexGridInlineEditDemoComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexGridInlineEditDemoComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_Template_button_click_4_listener() { return ctx.inlineAddNewRow(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_Template_button_click_6_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(8, "span", 8);
                        i0.ɵɵpipe(9, "safeHtml");
                        i0.ɵɵelementStart(10, "button", 9);
                        i0.ɵɵlistener("click", function dibexGridInlineEditDemoComponent_Template_button_click_10_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(11, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(12, dibexGridInlineEditDemoComponent_button_12_Template, 2, 4, "button", 11);
                        i0.ɵɵtemplate(13, dibexGridInlineEditDemoComponent_button_13_Template, 2, 4, "button", 12);
                        i0.ɵɵelement(14, "span", 13);
                        i0.ɵɵtemplate(15, dibexGridInlineEditDemoComponent_div_15_Template, 5, 3, "div", 14);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(16, "mat-card", 15)(17, "mat-card-content", 16);
                        i0.ɵɵelementContainerStart(18, 3);
                        i0.ɵɵelementStart(19, "div", 17, 18)(21, "form", 19);
                        i0.ɵɵelementContainerStart(22, 20);
                        i0.ɵɵelementStart(23, "table", 21);
                        i0.ɵɵelementContainerStart(24, 22);
                        i0.ɵɵtemplate(25, dibexGridInlineEditDemoComponent_th_25_Template, 2, 2, "th", 23);
                        i0.ɵɵtemplate(26, dibexGridInlineEditDemoComponent_td_26_Template, 2, 1, "td", 24);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(27, 25);
                        i0.ɵɵtemplate(28, dibexGridInlineEditDemoComponent_td_28_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(29, dibexGridInlineEditDemoComponent_th_29_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(30, 28);
                        i0.ɵɵtemplate(31, dibexGridInlineEditDemoComponent_td_31_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(32, dibexGridInlineEditDemoComponent_th_32_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(33, 29);
                        i0.ɵɵtemplate(34, dibexGridInlineEditDemoComponent_td_34_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(35, dibexGridInlineEditDemoComponent_th_35_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(36, 30);
                        i0.ɵɵtemplate(37, dibexGridInlineEditDemoComponent_td_37_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(38, dibexGridInlineEditDemoComponent_th_38_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(39, 31);
                        i0.ɵɵtemplate(40, dibexGridInlineEditDemoComponent_td_40_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(41, dibexGridInlineEditDemoComponent_th_41_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(42, 32);
                        i0.ɵɵtemplate(43, dibexGridInlineEditDemoComponent_td_43_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(44, dibexGridInlineEditDemoComponent_th_44_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(45, 33);
                        i0.ɵɵtemplate(46, dibexGridInlineEditDemoComponent_td_46_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(47, dibexGridInlineEditDemoComponent_th_47_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(48, 34);
                        i0.ɵɵtemplate(49, dibexGridInlineEditDemoComponent_td_49_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(50, dibexGridInlineEditDemoComponent_th_50_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(51, 35);
                        i0.ɵɵtemplate(52, dibexGridInlineEditDemoComponent_td_52_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(53, dibexGridInlineEditDemoComponent_th_53_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(54, 36);
                        i0.ɵɵtemplate(55, dibexGridInlineEditDemoComponent_td_55_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(56, dibexGridInlineEditDemoComponent_th_56_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(57, 37);
                        i0.ɵɵtemplate(58, dibexGridInlineEditDemoComponent_td_58_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(59, dibexGridInlineEditDemoComponent_th_59_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(60, 38);
                        i0.ɵɵtemplate(61, dibexGridInlineEditDemoComponent_td_61_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(62, dibexGridInlineEditDemoComponent_th_62_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(63, 39);
                        i0.ɵɵtemplate(64, dibexGridInlineEditDemoComponent_th_64_Template, 2, 2, "th", 40);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(65, 41);
                        i0.ɵɵtemplate(66, dibexGridInlineEditDemoComponent_th_66_Template, 2, 2, "th", 42);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(67, dibexGridInlineEditDemoComponent_ng_container_67_Template, 3, 3, "ng-container", 43);
                        i0.ɵɵtemplate(68, dibexGridInlineEditDemoComponent_tr_68_Template, 1, 3, "tr", 44);
                        i0.ɵɵtemplate(69, dibexGridInlineEditDemoComponent_tr_69_Template, 1, 3, "tr", 44);
                        i0.ɵɵtemplate(70, dibexGridInlineEditDemoComponent_tr_70_Template, 1, 4, "tr", 45);
                        i0.ɵɵpipe(71, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(72, dibexGridInlineEditDemoComponent_72_Template, 1, 1, null, 46);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(73, "div", null, 47);
                        i0.ɵɵtemplate(75, dibexGridInlineEditDemoComponent_mat_toolbar_75_Template, 6, 3, "mat-toolbar", 46);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(76, dibexGridInlineEditDemoComponent_ng_template_76_Template, 46, 4, "ng-template", null, 48, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r37 = i0.ɵɵreference(74);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(34, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5058");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Add new record inside the grid")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(9, 30, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5067");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r37);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(44);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(36, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(37, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(71, 32, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatToolbar, i14.MatToolbarRow, i15.MatTooltip, i16.MatCard, i16.MatCardContent, i17.MatTable, i17.MatHeaderCellDef, i17.MatHeaderRowDef, i17.MatColumnDef, i17.MatCellDef, i17.MatRowDef, i17.MatHeaderCell, i17.MatCell, i17.MatHeaderRow, i17.MatRow, i18.MatSort, i18.MatSortHeader, i19.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexGridInlineEditDemo'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexGridInlineEditDemoComponent.prototype, "reloadContainer", null);
            exports_1("dibexGridInlineEditDemoComponent", dibexGridInlineEditDemoComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridInlineEditDemoComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-grid-inline-edit-demo', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 0px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci5058 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5058'" ><button mat-mini-fab color=accent  id=ci5061 dibComponent=btnGridInlineAdd   style="  " aria-label="Add new record inside the grid"  [matTooltip]="'Add new record inside the grid'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="inlineAddNewRow()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/btn_add.svg"></dib-icon></button><button   mat-mini-fab color=accent  id=ci5059 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><span  id=ci5066 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci5064 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5062 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5063 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci5060 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci5065 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Editable Grids: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5067 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5067'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexGridInlineEditDemo" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5455 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5456 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=vip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><div class=grid-read-only-checkbox  [ngClass]="{'checked': findColumnDisplayValue(rowIndex,'vip','none','boolean') == 1}"></div></span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-checkbox  dibComponent=checkbox   style="  "  formControlName=vip   ></mat-checkbox></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> VIP  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >VIP</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5457 dibComponent=inputText   style="  " ><mat-label >VIP</mat-label><input   matInput  type=text   formControlName=vip   name=vip   [attr.aria-label]="'VIP'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('vip', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('vip', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5458"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker5458.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5458" ></mat-datepicker-toggle><mat-datepicker #datePicker5458 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5458 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5459 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5460 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   maxlength='200'  name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('address','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5461 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5462 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5463 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=zip_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'zip_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=zip_code   maxlength='30'  name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('zip_code','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Zip Code  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Zip Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5464 dibComponent=inputText   style="  " ><mat-label >Zip Code</mat-label><input   matInput  type=text   formControlName=zip_code   name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  " ><textarea   matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5465 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5466"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5466"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5466></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5466 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexGridInlineEditDemo><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5455 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5456 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=vip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><div class=grid-read-only-checkbox  [ngClass]="{'checked': findColumnDisplayValue(rowIndex,'vip','none','boolean') == 1}"></div></span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-checkbox  dibComponent=checkbox   style="  "  formControlName=vip   ></mat-checkbox></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> VIP  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >VIP</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5457 dibComponent=inputText   style="  " ><mat-label >VIP</mat-label><input   matInput  type=text   formControlName=vip   name=vip   [attr.aria-label]="'VIP'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('vip', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('vip', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5458"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker5458.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5458" ></mat-datepicker-toggle><mat-datepicker #datePicker5458 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5458 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5459 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5460 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   maxlength='200'  name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('address','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5461 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5462 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5463 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=zip_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'zip_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=zip_code   maxlength='30'  name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('zip_code','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Zip Code  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Zip Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5464 dibComponent=inputText   style="  " ><mat-label >Zip Code</mat-label><input   matInput  type=text   formControlName=zip_code   name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  " ><textarea   matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5465 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5466"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5466"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5466></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5466 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, checkbox_1.MatCheckboxModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexGridInlineEditDemoModule = class dibexGridInlineEditDemoModule {
                static entry = dibexGridInlineEditDemoComponent;
                static ɵfac = function dibexGridInlineEditDemoModule_Factory(t) { return new (t || dibexGridInlineEditDemoModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexGridInlineEditDemoModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexGridInlineEditDemoModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridInlineEditDemoModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexGridInlineEditDemoComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexGridInlineEditDemoModule, { declarations: [dibexGridInlineEditDemoComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, checkbox_1.MatCheckboxModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
