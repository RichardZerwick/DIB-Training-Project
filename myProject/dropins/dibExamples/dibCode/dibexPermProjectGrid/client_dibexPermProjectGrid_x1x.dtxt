System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/autocomplete", "@angular/material/select", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/datepicker", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, autocomplete_1, select_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, _c0, _c1, _c2, _c3, _c4, _c5, _c6, importsRequired, dibexPermProjectGridComponent, containerModules, dibexPermProjectGridModule;
    var __moduleName = context_1 && context_1.id;
    function dibexPermProjectGridComponent_button_14_Template(rf, ctx) { if (rf & 1) {
        const _r34 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 47);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_button_14_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r34); const ctx_r33 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r33.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 48);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPermProjectGridComponent_button_15_Template(rf, ctx) { if (rf & 1) {
        const _r36 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 49);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_button_15_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r36); const ctx_r35 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r35.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 50);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPermProjectGridComponent_div_17_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r37 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r37.page.toRecord, "\u00A0of\u00A0", ctx_r37.page.records, "");
    } }
    function dibexPermProjectGridComponent_div_17_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r38.page.totalRecords, ")");
    } }
    function dibexPermProjectGridComponent_div_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 51);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_div_17_span_2_Template, 2, 2, "span", 44);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_div_17_span_4_Template, 2, 1, "span", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Projects (Perms): ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexPermProjectGridComponent_th_27_Template(rf, ctx) { if (rf & 1) {
        const _r40 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 52)(1, "mat-checkbox", 53);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_th_27_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r40); const ctx_r39 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r39.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexPermProjectGridComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 54)(1, "mat-checkbox", 55);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_td_28_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexPermProjectGridComponent_td_28_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r44); const row_r41 = restoredCtx.$implicit; const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r43.selection.toggle(row_r41) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r41 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r41));
    } }
    function dibexPermProjectGridComponent_td_30_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 57);
        i0.ɵɵelementContainer(2, 3);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5906");
    } }
    function dibexPermProjectGridComponent_td_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_30_ng_container_1_Template, 3, 1, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r45 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r45);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r45.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 58);
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r50 = i0.ɵɵnextContext(2).index;
        const ctx_r53 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r53.findColumnDisplayValue(rowIndex_r50, "id", "none", "number"), "");
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r62 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r62); const ctx_r61 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r61.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 63);
        i0.ɵɵelement(2, "input", 64);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 44);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_td_33_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r49 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r54 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r54.hasError("id", "required", rowForm_r49));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r54.view.recordStatus == "update" && ctx_r54.notSaved("id", rowForm_r49));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r54.view.recordStatus == "update" && ctx_r54.isSaved("id", rowForm_r49));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r54.isInvalid("id", rowForm_r49));
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_td_33_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_33_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_33_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_33_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r49 = i0.ɵɵnextContext().$implicit;
        const ctx_r51 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r51.excelEditing == false && rowForm_r49.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r51.excelEditing == true || rowForm_r49.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r51.excelEditing == false && rowForm_r49.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_td_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_33_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r49 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r49);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r49.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_34_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_34_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_34_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r65 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r65.editorOpen);
    } }
    function dibexPermProjectGridComponent_th_34_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_34_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r72 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_th_34_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r72); const ctx_r71 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r71.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_34_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_34_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r74 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_th_34_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r74); const ctx_r73 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r73.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_th_34_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r74); const ctx_r75 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r75.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_th_34_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_th_34_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r67 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r67.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r67.view.recordStatus == "update" && ctx_r67.notSaved("id", ctx_r67.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r67.view.recordStatus == "update" && ctx_r67.isSaved("id", ctx_r67.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_th_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_34_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_th_34_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_th_34_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r77 = i0.ɵɵnextContext(2).index;
        const ctx_r80 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r80.findColumnDisplayValue(rowIndex_r77, "name", "none", "text"), "");
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r89 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r89); const ctx_r88 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r88.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r91 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 82)(2, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r91); const ctx_r90 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r90.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_td_36_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r91); const ctx_r92 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r92.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 44);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 44);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_td_36_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r76 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r81 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.hasError("name", "required", rowForm_r76));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.hasError("name", "maxlength", rowForm_r76));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.view.recordStatus == "update" && ctx_r81.notSaved("name", rowForm_r76));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.view.recordStatus == "update" && ctx_r81.isSaved("name", rowForm_r76));
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_td_36_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_36_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_36_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_36_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r76 = i0.ɵɵnextContext().$implicit;
        const ctx_r78 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r78.excelEditing == false && rowForm_r76.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r78.excelEditing == true || rowForm_r76.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r78.excelEditing == false && rowForm_r76.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_td_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_36_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r76 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r76);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r76.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_37_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_37_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_37_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r95 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r95.editorOpen);
    } }
    function dibexPermProjectGridComponent_th_37_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_37_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r102 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_th_37_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r102); const ctx_r101 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r101.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_37_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_37_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r104 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_th_37_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r104); const ctx_r103 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r103.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_th_37_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r104); const ctx_r105 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r105.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_th_37_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_th_37_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r97 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r97.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r97.view.recordStatus == "update" && ctx_r97.notSaved("name", ctx_r97.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r97.view.recordStatus == "update" && ctx_r97.isSaved("name", ctx_r97.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_th_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_37_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_th_37_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_th_37_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexPermProjectGridComponent_td_39_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r107 = i0.ɵɵnextContext(2).index;
        const ctx_r110 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r110.findColumnDisplayValue(rowIndex_r107, "client_id", "dropdown", "select"), "");
    } }
    function dibexPermProjectGridComponent_td_39_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r122 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_td_39_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r122); i0.ɵɵnextContext(); const _r114 = i0.ɵɵreference(3); const _r115 = i0.ɵɵreference(4); const rowForm_r106 = i0.ɵɵnextContext(2).$implicit; const ctx_r120 = i0.ɵɵnextContext(); ctx_r120.clearDropdown(rowForm_r106.get("client_id"), $event, ctx_r120.lists.list5920, _r114); return i0.ɵɵresetView(_r115.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_td_39_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_td_39_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r123 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r123.id == "0"))("value", item_r123)("innerHtml", item_r123.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_td_39_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r125 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 87, 88);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_39_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_td_39_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r125); const ctx_r124 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r124.lists.list5920.refresh()); });
        i0.ɵɵtemplate(8, dibexPermProjectGridComponent_td_39_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexPermProjectGridComponent_td_39_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r117 = i0.ɵɵreference(7);
        const rowForm_r106 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r111 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r117);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r111.showDropdownClearButton(rowForm_r106.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r111.dropdownValueTranslate.bind(ctx_r111, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r111.lists.list5920.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r111.lists.list5920.lastItems);
    } }
    function dibexPermProjectGridComponent_td_39_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_td_39_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_39_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_39_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_39_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r106 = i0.ɵɵnextContext().$implicit;
        const ctx_r108 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r108.excelEditing == false && rowForm_r106.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r108.excelEditing == true || rowForm_r106.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r108.excelEditing == false && rowForm_r106.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_td_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_39_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r106 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r106);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r106.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_40_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_40_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_40_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r128 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r128.editorOpen);
    } }
    function dibexPermProjectGridComponent_th_40_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_40_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r139 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_th_40_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r139); i0.ɵɵnextContext(); const _r132 = i0.ɵɵreference(5); const _r133 = i0.ɵɵreference(6); const ctx_r138 = i0.ɵɵnextContext(2); ctx_r138.clearDropdown(ctx_r138.model.modelItems.client_id.formControl, $event, ctx_r138.lists.list5920, _r132); return i0.ɵɵresetView(_r133.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_th_40_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_th_40_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r140 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r140.id == "0"))("value", item_r140)("innerHtml", item_r140.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_th_40_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r142 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 98, 88);
        i0.ɵɵtemplate(7, dibexPermProjectGridComponent_th_40_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_th_40_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r142); const ctx_r141 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r141.lists.list5920.refresh()); });
        i0.ɵɵtemplate(10, dibexPermProjectGridComponent_th_40_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexPermProjectGridComponent_th_40_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r135 = i0.ɵɵreference(9);
        const ctx_r130 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r130.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r135);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r130.showDropdownClearButton(ctx_r130.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r130.dropdownValueTranslate.bind(ctx_r130, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r130.lists.list5920.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r130.lists.list5920.lastItems);
    } }
    function dibexPermProjectGridComponent_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_40_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_th_40_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_th_40_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexPermProjectGridComponent_td_42_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r144 = i0.ɵɵnextContext(2).index;
        const ctx_r147 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r147.findColumnDisplayValue(rowIndex_r144, "project_leader_id", "dropdown", "select"), "");
    } }
    function dibexPermProjectGridComponent_td_42_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r159 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_td_42_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r159); i0.ɵɵnextContext(); const _r151 = i0.ɵɵreference(3); const _r152 = i0.ɵɵreference(4); const rowForm_r143 = i0.ɵɵnextContext(2).$implicit; const ctx_r157 = i0.ɵɵnextContext(); ctx_r157.clearDropdown(rowForm_r143.get("project_leader_id"), $event, ctx_r157.lists.list5921, _r151); return i0.ɵɵresetView(_r152.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_td_42_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_td_42_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r160 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r160.id == "0"))("value", item_r160)("innerHtml", item_r160.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_td_42_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r162 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 99, 100);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_42_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_td_42_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r162); const ctx_r161 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r161.lists.list5921.refresh()); });
        i0.ɵɵtemplate(8, dibexPermProjectGridComponent_td_42_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexPermProjectGridComponent_td_42_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r154 = i0.ɵɵreference(7);
        const rowForm_r143 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r148 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r154);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r148.showDropdownClearButton(rowForm_r143.get("project_leader_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r148.dropdownValueTranslate.bind(ctx_r148, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r148.lists.list5921.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r148.lists.list5921.lastItems);
    } }
    function dibexPermProjectGridComponent_td_42_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_td_42_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_42_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_42_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_42_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r143 = i0.ɵɵnextContext().$implicit;
        const ctx_r145 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r145.excelEditing == false && rowForm_r143.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r145.excelEditing == true || rowForm_r143.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r145.excelEditing == false && rowForm_r143.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_td_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_42_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r143 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r143);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r143.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_43_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Project Leader ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_43_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Project Leader");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_43_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r175 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_th_43_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r175); i0.ɵɵnextContext(); const _r168 = i0.ɵɵreference(5); const _r169 = i0.ɵɵreference(6); const ctx_r174 = i0.ɵɵnextContext(2); ctx_r174.clearDropdown(ctx_r174.model.modelItems.project_leader_id.formControl, $event, ctx_r174.lists.list5921, _r168); return i0.ɵɵresetView(_r169.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_th_43_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_th_43_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r176 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r176.id == "0"))("value", item_r176)("innerHtml", item_r176.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_th_43_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r178 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Project Leader");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 99, 100);
        i0.ɵɵtemplate(7, dibexPermProjectGridComponent_th_43_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_th_43_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r178); const ctx_r177 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r177.lists.list5921.refresh()); });
        i0.ɵɵtemplate(10, dibexPermProjectGridComponent_th_43_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexPermProjectGridComponent_th_43_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r171 = i0.ɵɵreference(9);
        const ctx_r167 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r167.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r171);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r167.showDropdownClearButton(ctx_r167.model.modelItems.project_leader_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r167.dropdownValueTranslate.bind(ctx_r167, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r167.lists.list5921.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r167.lists.list5921.lastItems);
    } }
    function dibexPermProjectGridComponent_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_43_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_th_43_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_th_43_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexPermProjectGridComponent_td_45_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r180 = i0.ɵɵnextContext(2).index;
        const ctx_r183 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r183.findColumnDisplayValue(rowIndex_r180, "notes", "none", "text"), "");
    } }
    function dibexPermProjectGridComponent_td_45_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r190 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_td_45_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r190); const ctx_r189 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r189.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_45_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_45_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r192 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 103)(2, "textarea", 104);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_td_45_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r192); const ctx_r191 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r191.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_td_45_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r192); const ctx_r193 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r193.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_45_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_45_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r179 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r184 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r184.view.recordStatus == "update" && ctx_r184.notSaved("notes", rowForm_r179));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r184.view.recordStatus == "update" && ctx_r184.isSaved("notes", rowForm_r179));
    } }
    function dibexPermProjectGridComponent_td_45_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_td_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_45_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_45_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_45_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r179 = i0.ɵɵnextContext().$implicit;
        const ctx_r181 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r181.excelEditing == false && rowForm_r179.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r181.excelEditing == true || rowForm_r179.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r181.excelEditing == false && rowForm_r179.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_td_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_45_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r179 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r179);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r179.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_46_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_46_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_46_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r202 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_th_46_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r202); const ctx_r201 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r201.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_46_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_46_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r204 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_th_46_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r204); const ctx_r203 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r203.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_th_46_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r204); const ctx_r205 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r205.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_th_46_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_th_46_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r198 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r198.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r198.view.recordStatus == "update" && ctx_r198.notSaved("notes", ctx_r198.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r198.view.recordStatus == "update" && ctx_r198.isSaved("notes", ctx_r198.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_46_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_th_46_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_th_46_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexPermProjectGridComponent_td_48_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r207 = i0.ɵɵnextContext(2).index;
        const ctx_r210 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r210.findColumnDisplayValue(rowIndex_r207, "updated", "none", "datetime"), "");
    } }
    function dibexPermProjectGridComponent_td_48_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r218 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_td_48_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r218); const ctx_r217 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r217.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_48_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_td_48_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r220 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 107);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 108);
        i0.ɵɵelementStart(3, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_td_48_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r220); const ctx_r219 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r219.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_td_48_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r220); const ctx_r221 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r221.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_48_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_48_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 110);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r216 = i0.ɵɵreference(7);
        const rowForm_r206 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r211 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r216);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r216);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.view.recordStatus == "update" && ctx_r211.notSaved("updated", rowForm_r206));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.view.recordStatus == "update" && ctx_r211.isSaved("updated", rowForm_r206));
    } }
    function dibexPermProjectGridComponent_td_48_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_td_48_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_48_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_48_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_48_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r206 = i0.ɵɵnextContext().$implicit;
        const ctx_r208 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r208.excelEditing == false && rowForm_r206.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r208.excelEditing == true || rowForm_r206.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r208.excelEditing == false && rowForm_r206.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_td_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_48_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r206 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r206);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r206.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_49_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_49_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_49_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r230 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_th_49_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r230); const ctx_r229 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r229.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_49_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_49_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_th_49_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r232); const ctx_r231 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r231.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_th_49_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r232); const ctx_r233 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r233.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_th_49_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_th_49_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r226 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r226.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r226.view.recordStatus == "update" && ctx_r226.notSaved("updated", ctx_r226.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r226.view.recordStatus == "update" && ctx_r226.isSaved("updated", ctx_r226.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_49_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_th_49_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_th_49_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexPermProjectGridComponent_td_51_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r235 = i0.ɵɵnextContext(2).index;
        const ctx_r238 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r238.findColumnDisplayValue(rowIndex_r235, "status", "none", "text"), "");
    } }
    function dibexPermProjectGridComponent_td_51_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 116);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r243 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r243.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r243.id_display_value, "");
    } }
    function dibexPermProjectGridComponent_td_51_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 113)(2, "mat-select", 114);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_51_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 115);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r239 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r239.lists.list5931.items));
    } }
    function dibexPermProjectGridComponent_td_51_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_td_51_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_td_51_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_td_51_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_td_51_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r234 = i0.ɵɵnextContext().$implicit;
        const ctx_r236 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r236.excelEditing == false && rowForm_r234.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.excelEditing == true || rowForm_r234.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.excelEditing == false && rowForm_r234.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_td_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_td_51_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r234 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r234);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r234.getRawValue());
    } }
    function dibexPermProjectGridComponent_th_52_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Status ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_52_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Status");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_th_52_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 116);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r249 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r249.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r249.id_display_value, "");
    } }
    function dibexPermProjectGridComponent_th_52_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Status");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 114);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_th_52_div_4_mat_option_5_Template, 2, 2, "mat-option", 115);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r247 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r247.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r247.lists.list5931.items));
    } }
    function dibexPermProjectGridComponent_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_th_52_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_th_52_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_th_52_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexPermProjectGridComponent_th_54_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_th_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 118);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_th_54_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r22 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r22.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r22.busy);
    } }
    function dibexPermProjectGridComponent_th_56_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r251 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r251.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexPermProjectGridComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 119);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_th_56_span_1_Template, 2, 1, "span", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r23.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r23.busy && ctx_r23.tableDataSource.data.length == 0);
    } }
    function dibexPermProjectGridComponent_ng_container_57_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 121);
    } }
    function dibexPermProjectGridComponent_ng_container_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_container_57_tr_1_Template, 1, 0, "tr", 120);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r252 = ctx.$implicit;
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r24.columnHeaders.getArray(column_r252).items$));
    } }
    function dibexPermProjectGridComponent_tr_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 122);
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r25.busy ? "visible" : "hidden"));
    } }
    function dibexPermProjectGridComponent_tr_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 122);
    } if (rf & 2) {
        const ctx_r26 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r26.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexPermProjectGridComponent_tr_60_Template(rf, ctx) { if (rf & 1) {
        const _r257 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 123);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_tr_60_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r257); const row_r254 = restoredCtx.$implicit; const ctx_r256 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r256.rowClick(row_r254, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r254 = ctx.$implicit;
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r27.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r27.isHighlighted(row_r254)));
    } }
    function dibexPermProjectGridComponent_62_ng_template_0_Template(rf, ctx) { }
    function dibexPermProjectGridComponent_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexPermProjectGridComponent_62_ng_template_0_Template, 0, 0, "ng-template", 124);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r31 = i0.ɵɵreference(67);
        i0.ɵɵproperty("ngTemplateOutlet", _r31);
    } }
    function dibexPermProjectGridComponent_mat_toolbar_65_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r263 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 130);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_mat_toolbar_65_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r263); const ctx_r262 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r262.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r259 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r259.numberOfSelectedItems + " ", "item", ctx_r259.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexPermProjectGridComponent_mat_toolbar_65_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_mat_toolbar_65_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_mat_toolbar_65_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r267 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 131);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_mat_toolbar_65_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r267); const ctx_r266 = i0.ɵɵnextContext(2); ctx_r266.gridShowClipboardDefault = !ctx_r266.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r266.gridShowClipboardDefault && ctx_r266.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_mat_toolbar_65_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 44);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_mat_toolbar_65_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 44);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r260 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r260.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r260.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r260.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexPermProjectGridComponent_mat_toolbar_65_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r270 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 132, 133);
        i0.ɵɵlistener("page", function dibexPermProjectGridComponent_mat_toolbar_65_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r270); const ctx_r269 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r269.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r261 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r261.page.totalRecords)("pageSize", ctx_r261.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexPermProjectGridComponent_mat_toolbar_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 125);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_mat_toolbar_65_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 126);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_mat_toolbar_65_button_3_Template, 4, 3, "button", 127);
        i0.ɵɵelement(4, "span", 128);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_mat_toolbar_65_mat_paginator_5_Template, 2, 4, "mat-paginator", 129);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r30.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 57);
        i0.ɵɵelementContainer(2, 3);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5906");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_2_ng_container_1_Template, 3, 1, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r292 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r292);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r292.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 58);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r297 = i0.ɵɵnextContext(2).index;
        const ctx_r300 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r300.findColumnDisplayValue(rowIndex_r297, "id", "none", "number"), "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r308 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r308); const ctx_r307 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r307.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r310 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 63)(2, "input", 138);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r310); const ctx_r309 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r309.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r310); const ctx_r311 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r311.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 44);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r296 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r301 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.hasError("id", "required", rowForm_r296));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.view.recordStatus == "update" && ctx_r301.notSaved("id", rowForm_r296));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.view.recordStatus == "update" && ctx_r301.isSaved("id", rowForm_r296));
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_4_Template, 6, 4, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r296 = i0.ɵɵnextContext().$implicit;
        const ctx_r298 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r298.excelEditing == false && rowForm_r296.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r298.excelEditing == true || rowForm_r296.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r298.excelEditing == false && rowForm_r296.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_5_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r296 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r296);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r296.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_6_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r314 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r314.editorOpen);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r321 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r321); const ctx_r320 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r320.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r323 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r323); const ctx_r322 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r322.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r323); const ctx_r324 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r324.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_ng_template_66_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r316 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r316.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.view.recordStatus == "update" && ctx_r316.notSaved("id", ctx_r316.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.view.recordStatus == "update" && ctx_r316.isSaved("id", ctx_r316.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_6_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_6_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_th_6_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r274 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r274.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r274.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r274.showSearch);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r326 = i0.ɵɵnextContext(2).index;
        const ctx_r329 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r329.findColumnDisplayValue(rowIndex_r326, "name", "none", "text"), "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r338 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r338); const ctx_r337 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r337.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r340 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 82)(2, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r340); const ctx_r339 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r339.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r340); const ctx_r341 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r341.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 44);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 44);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r325 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r330 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r330.hasError("name", "required", rowForm_r325));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r330.hasError("name", "maxlength", rowForm_r325));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r330.view.recordStatus == "update" && ctx_r330.notSaved("name", rowForm_r325));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r330.view.recordStatus == "update" && ctx_r330.isSaved("name", rowForm_r325));
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_4_Template, 7, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r325 = i0.ɵɵnextContext().$implicit;
        const ctx_r327 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r327.excelEditing == false && rowForm_r325.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r327.excelEditing == true || rowForm_r325.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r327.excelEditing == false && rowForm_r325.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_8_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r325 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r325);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r325.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_9_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r344 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r344.editorOpen);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r351 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r351); const ctx_r350 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r350.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r353 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r353); const ctx_r352 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r352.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r353); const ctx_r354 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r354.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_ng_template_66_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r346 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r346.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r346.view.recordStatus == "update" && ctx_r346.notSaved("name", ctx_r346.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r346.view.recordStatus == "update" && ctx_r346.isSaved("name", ctx_r346.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_9_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_9_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_th_9_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r276 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r276.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r276.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r276.showSearch);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r356 = i0.ɵɵnextContext(2).index;
        const ctx_r359 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r359.findColumnDisplayValue(rowIndex_r356, "client_id", "dropdown", "select"), "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r371 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r371); i0.ɵɵnextContext(); const _r363 = i0.ɵɵreference(3); const _r364 = i0.ɵɵreference(4); const rowForm_r355 = i0.ɵɵnextContext(2).$implicit; const ctx_r369 = i0.ɵɵnextContext(2); ctx_r369.clearDropdown(rowForm_r355.get("client_id"), $event, ctx_r369.lists.list5920, _r363); return i0.ɵɵresetView(_r364.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r372 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r372.id == "0"))("value", item_r372)("innerHtml", item_r372.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r374 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 87, 88);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r374); const ctx_r373 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r373.lists.list5920.refresh()); });
        i0.ɵɵtemplate(8, dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r366 = i0.ɵɵreference(7);
        const rowForm_r355 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r360 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r366);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r360.showDropdownClearButton(rowForm_r355.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r360.dropdownValueTranslate.bind(ctx_r360, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r360.lists.list5920.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r360.lists.list5920.lastItems);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r355 = i0.ɵɵnextContext().$implicit;
        const ctx_r357 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r357.excelEditing == false && rowForm_r355.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r357.excelEditing == true || rowForm_r355.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r357.excelEditing == false && rowForm_r355.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_11_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r355 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r355);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r355.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_12_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r377 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r377.editorOpen);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r388 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_th_12_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r388); i0.ɵɵnextContext(); const _r381 = i0.ɵɵreference(5); const _r382 = i0.ɵɵreference(6); const ctx_r387 = i0.ɵɵnextContext(3); ctx_r387.clearDropdown(ctx_r387.model.modelItems.client_id.formControl, $event, ctx_r387.lists.list5920, _r381); return i0.ɵɵresetView(_r382.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r389 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r389.id == "0"))("value", item_r389)("innerHtml", item_r389.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r391 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 98, 88);
        i0.ɵɵtemplate(7, dibexPermProjectGridComponent_ng_template_66_th_12_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 91);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_ng_template_66_th_12_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r391); const ctx_r390 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r390.lists.list5920.refresh()); });
        i0.ɵɵtemplate(10, dibexPermProjectGridComponent_ng_template_66_th_12_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexPermProjectGridComponent_ng_template_66_th_12_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r384 = i0.ɵɵreference(9);
        const ctx_r379 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r379.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r384);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r379.showDropdownClearButton(ctx_r379.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r379.dropdownValueTranslate.bind(ctx_r379, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r379.lists.list5920.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r379.lists.list5920.lastItems);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_12_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_12_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_th_12_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r278 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r278.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.showSearch);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r393 = i0.ɵɵnextContext(2).index;
        const ctx_r396 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r396.findColumnDisplayValue(rowIndex_r393, "project_leader_id", "dropdown", "select"), "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r408 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r408); i0.ɵɵnextContext(); const _r400 = i0.ɵɵreference(3); const _r401 = i0.ɵɵreference(4); const rowForm_r392 = i0.ɵɵnextContext(2).$implicit; const ctx_r406 = i0.ɵɵnextContext(2); ctx_r406.clearDropdown(rowForm_r392.get("project_leader_id"), $event, ctx_r406.lists.list5921, _r400); return i0.ɵɵresetView(_r401.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r409 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r409.id == "0"))("value", item_r409)("innerHtml", item_r409.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r411 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 86);
        i0.ɵɵelement(2, "input", 99, 100);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_button_5_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(6, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r411); const ctx_r410 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r410.lists.list5921.refresh()); });
        i0.ɵɵtemplate(8, dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(9, dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r403 = i0.ɵɵreference(7);
        const rowForm_r392 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r397 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r403);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r397.showDropdownClearButton(rowForm_r392.get("project_leader_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r397.dropdownValueTranslate.bind(ctx_r397, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r397.lists.list5921.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r397.lists.list5921.lastItems);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_4_Template, 10, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r392 = i0.ɵɵnextContext().$implicit;
        const ctx_r394 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r394.excelEditing == false && rowForm_r392.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r394.excelEditing == true || rowForm_r392.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r394.excelEditing == false && rowForm_r392.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_14_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r392 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r392);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r392.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Project Leader ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Project Leader");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_15_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r424 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 94);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_th_15_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r424); i0.ɵɵnextContext(); const _r417 = i0.ɵɵreference(5); const _r418 = i0.ɵɵreference(6); const ctx_r423 = i0.ɵɵnextContext(3); ctx_r423.clearDropdown(ctx_r423.model.modelItems.project_leader_id.formControl, $event, ctx_r423.lists.list5921, _r417); return i0.ɵɵresetView(_r418.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_15_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_15_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 96);
    } if (rf & 2) {
        const item_r425 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r425.id == "0"))("value", item_r425)("innerHtml", item_r425.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r427 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Project Leader");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 99, 100);
        i0.ɵɵtemplate(7, dibexPermProjectGridComponent_ng_template_66_th_15_div_4_button_7_Template, 3, 0, "button", 89);
        i0.ɵɵelementStart(8, "mat-autocomplete", 90, 101);
        i0.ɵɵlistener("opened", function dibexPermProjectGridComponent_ng_template_66_th_15_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r427); const ctx_r426 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r426.lists.list5921.refresh()); });
        i0.ɵɵtemplate(10, dibexPermProjectGridComponent_ng_template_66_th_15_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵtemplate(11, dibexPermProjectGridComponent_ng_template_66_th_15_div_4_mat_option_11_Template, 1, 5, "mat-option", 93);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r420 = i0.ɵɵreference(9);
        const ctx_r416 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r416.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r420);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r416.showDropdownClearButton(ctx_r416.model.modelItems.project_leader_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r416.dropdownValueTranslate.bind(ctx_r416, "project_leader_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r416.lists.list5921.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r416.lists.list5921.lastItems);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_15_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_15_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_th_15_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r280 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r280.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r280.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r280.showSearch);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r429 = i0.ɵɵnextContext(2).index;
        const ctx_r432 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r432.findColumnDisplayValue(rowIndex_r429, "notes", "none", "text"), "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r439 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r439); const ctx_r438 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r438.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r441 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 103)(2, "textarea", 104);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r441); const ctx_r440 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r440.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r441); const ctx_r442 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r442.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r428 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r433 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r433.view.recordStatus == "update" && ctx_r433.notSaved("notes", rowForm_r428));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r433.view.recordStatus == "update" && ctx_r433.isSaved("notes", rowForm_r428));
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r428 = i0.ɵɵnextContext().$implicit;
        const ctx_r430 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r430.excelEditing == false && rowForm_r428.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.excelEditing == true || rowForm_r428.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.excelEditing == false && rowForm_r428.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_17_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r428 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r428);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r428.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r451 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r451); const ctx_r450 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r450.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r453 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r453); const ctx_r452 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r452.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r453); const ctx_r454 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r454.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_ng_template_66_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r447 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r447.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r447.view.recordStatus == "update" && ctx_r447.notSaved("notes", ctx_r447.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r447.view.recordStatus == "update" && ctx_r447.isSaved("notes", ctx_r447.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_18_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_18_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_th_18_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r282 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r282.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r282.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r282.showSearch);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r456 = i0.ɵɵnextContext(2).index;
        const ctx_r459 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r459.findColumnDisplayValue(rowIndex_r456, "updated", "none", "datetime"), "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r467 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r467); const ctx_r466 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r466.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r469 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 107);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 108);
        i0.ɵɵelementStart(3, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r469); const ctx_r468 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r468.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r469); const ctx_r470 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r470.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 110);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r465 = i0.ɵɵreference(7);
        const rowForm_r455 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r460 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r465);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r465);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r460.view.recordStatus == "update" && ctx_r460.notSaved("updated", rowForm_r455));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r460.view.recordStatus == "update" && ctx_r460.isSaved("updated", rowForm_r455));
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_4_Template, 8, 5, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r455 = i0.ɵɵnextContext().$implicit;
        const ctx_r457 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r457.excelEditing == false && rowForm_r455.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r457.excelEditing == true || rowForm_r455.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r457.excelEditing == false && rowForm_r455.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_20_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r455 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r455);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r455.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r479 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r479); const ctx_r478 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r478.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r481 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexPermProjectGridComponent_ng_template_66_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r481); const ctx_r480 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r480.searchGrid(false)); })("keydown.esc", function dibexPermProjectGridComponent_ng_template_66_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r481); const ctx_r482 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r482.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_ng_template_66_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r475 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r475.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r475.view.recordStatus == "update" && ctx_r475.notSaved("updated", ctx_r475.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r475.view.recordStatus == "update" && ctx_r475.isSaved("updated", ctx_r475.model.$formGroup));
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_21_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_21_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_th_21_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r284 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r284.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r284.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r284.showSearch);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r484 = i0.ɵɵnextContext(2).index;
        const ctx_r487 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r487.findColumnDisplayValue(rowIndex_r484, "status", "none", "text"), "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 116);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r492 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r492.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r492.id_display_value, "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 62)(1, "mat-form-field", 113)(2, "mat-select", 114);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 115);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r488 = i0.ɵɵnextContext(4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r488.lists.list5931.items));
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 59)(2, "span", 60);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_3_Template, 2, 1, "span", 61);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_4_Template, 5, 3, "span", 61);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_span_5_Template, 1, 0, "span", 44);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r483 = i0.ɵɵnextContext().$implicit;
        const ctx_r485 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r485.excelEditing == false && rowForm_r483.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r485.excelEditing == true || rowForm_r483.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r485.excelEditing == false && rowForm_r483.get("__edit").value === false);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 56);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_td_23_ng_container_1_Template, 6, 3, "ng-container", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r483 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r483);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r483.getRawValue());
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Status ");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Status");
        i0.ɵɵelementEnd();
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_24_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 116);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r498 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r498.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r498.id_display_value, "");
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Status");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 114);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_th_24_div_4_mat_option_5_Template, 2, 2, "mat-option", 115);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r496 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r496.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r496.lists.list5931.items));
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 58)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_th_24_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_24_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexPermProjectGridComponent_ng_template_66_th_24_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r286 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r286.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.showSearch);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_26_Template(rf, ctx) { if (rf & 1) {
        const _r500 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 52)(1, "mat-checkbox", 139);
        i0.ɵɵlistener("change", function dibexPermProjectGridComponent_ng_template_66_th_26_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r500); const ctx_r499 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r499.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r287 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r287.masterIsChecked)("indeterminate", ctx_r287.masterIsIndeterminate);
    } }
    function dibexPermProjectGridComponent_ng_template_66_td_27_Template(rf, ctx) { if (rf & 1) {
        const _r504 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 140)(1, "mat-checkbox", 55);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_td_27_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexPermProjectGridComponent_ng_template_66_td_27_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r504); const row_r501 = restoredCtx.$implicit; const ctx_r503 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r503.selection.toggle(row_r501) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r501 = ctx.$implicit;
        const ctx_r288 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r288.isHighlighted(row_r501));
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_29_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 95);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 141);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_th_29_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 92);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r289 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r289.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r289.busy);
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_31_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r506 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r506.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexPermProjectGridComponent_ng_template_66_th_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 119);
        i0.ɵɵtemplate(1, dibexPermProjectGridComponent_ng_template_66_th_31_span_1_Template, 2, 1, "span", 44);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r290 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r290.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r290.busy && ctx_r290.tableDataSource.data.length == 0);
    } }
    function dibexPermProjectGridComponent_ng_template_66_tr_32_Template(rf, ctx) { if (rf & 1) {
        const _r509 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 142);
        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_ng_template_66_tr_32_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r509); const row_r507 = restoredCtx.$implicit; const ctx_r508 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r508.rowClick(row_r507, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r507 = ctx.$implicit;
        const ctx_r291 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r291.isHighlighted(row_r507)));
    } }
    function dibexPermProjectGridComponent_ng_template_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 134);
        i0.ɵɵelementContainerStart(1, 27);
        i0.ɵɵtemplate(2, dibexPermProjectGridComponent_ng_template_66_td_2_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(3, dibexPermProjectGridComponent_ng_template_66_th_3_Template, 1, 0, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 30);
        i0.ɵɵtemplate(5, dibexPermProjectGridComponent_ng_template_66_td_5_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(6, dibexPermProjectGridComponent_ng_template_66_th_6_Template, 5, 3, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 31);
        i0.ɵɵtemplate(8, dibexPermProjectGridComponent_ng_template_66_td_8_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(9, dibexPermProjectGridComponent_ng_template_66_th_9_Template, 5, 3, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 32);
        i0.ɵɵtemplate(11, dibexPermProjectGridComponent_ng_template_66_td_11_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(12, dibexPermProjectGridComponent_ng_template_66_th_12_Template, 5, 3, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 33);
        i0.ɵɵtemplate(14, dibexPermProjectGridComponent_ng_template_66_td_14_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(15, dibexPermProjectGridComponent_ng_template_66_th_15_Template, 5, 3, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 34);
        i0.ɵɵtemplate(17, dibexPermProjectGridComponent_ng_template_66_td_17_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(18, dibexPermProjectGridComponent_ng_template_66_th_18_Template, 5, 3, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 35);
        i0.ɵɵtemplate(20, dibexPermProjectGridComponent_ng_template_66_td_20_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(21, dibexPermProjectGridComponent_ng_template_66_th_21_Template, 5, 3, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 36);
        i0.ɵɵtemplate(23, dibexPermProjectGridComponent_ng_template_66_td_23_Template, 2, 2, "td", 28);
        i0.ɵɵtemplate(24, dibexPermProjectGridComponent_ng_template_66_th_24_Template, 5, 3, "th", 29);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 24);
        i0.ɵɵtemplate(26, dibexPermProjectGridComponent_ng_template_66_th_26_Template, 2, 2, "th", 25);
        i0.ɵɵtemplate(27, dibexPermProjectGridComponent_ng_template_66_td_27_Template, 2, 1, "td", 135);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 37);
        i0.ɵɵtemplate(29, dibexPermProjectGridComponent_ng_template_66_th_29_Template, 2, 2, "th", 136);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(30, 39);
        i0.ɵɵtemplate(31, dibexPermProjectGridComponent_ng_template_66_th_31_Template, 2, 2, "th", 40);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(32, dibexPermProjectGridComponent_ng_template_66_tr_32_Template, 1, 3, "tr", 137);
        i0.ɵɵpipe(33, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r32.selectionDataSource);
        i0.ɵɵadvance(32);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(33, 2, ctx_r32.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i20 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                i8 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i21 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i22 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i9 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i13 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i19 = card_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i7 = autocomplete_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i16 = select_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i17_1) {
                i17 = i17_1;
            },
            function (i18_1) {
                i18 = i18_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "extra-node": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function () { return ["_dibBusy"]; };
            _c6 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexPermProjectGridComponent = class dibexPermProjectGridComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 241, name: 'dibexPermProjectGrid', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'client_id', 'project_leader_id', 'status', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'client_id', 'project_leader_id', 'status', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list5920 = new shared_3.DibList("/peff/Crud/componentlist?containerName=dibexPermProjectGrid&containerItemId=5920", null, null, 40);
                    this.lists.list5921 = new shared_3.DibList("/peff/Crud/componentlist?containerName=dibexPermProjectGrid&containerItemId=5921", null, null, 40);
                    this.lists.list5931 = new shared_3.DibEnumList(this.translationService, this.eventService, 'status', ['new', 'in progress', 'on hold', 'cancelled', 'complete'], false);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexPermProjectGrid');
                    this.containerName = 'dibexPermProjectGrid'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 5918, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 5919, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, client_id: { itemId: 5920, type: 'select', fieldAlias: 'client_id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'change' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 5920 }, project_leader_id: { itemId: 5921, type: 'select', fieldAlias: 'project_leader_id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 5921 }, notes: { itemId: 5922, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, updated: { itemId: 5923, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, status: { itemId: 5931, type: 'text', fieldAlias: 'status', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['new', 'in progress', 'on hold', 'cancelled', 'complete'] }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('client_id', this.model.modelItems.client_id.formControl);
                    this.model.$formGroup.addControl('project_leader_id', this.model.modelItems.project_leader_id.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.addControl('status', this.model.modelItems.status.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource5920 = this.lists.list5920.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange5920 = new Date().getTime();
                    let previousUrlChange5920;
                    let previousResponse5920;
                    this.lists.list5920.items = rxjs_1.combineLatest([this.lists.list5920.updatedList$, itemsUpdateSource5920]).pipe(operators_1.tap(() => { this.lists.list5920.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange5920 - new Date().getTime()) / 1000;
                        previousTimeChange5920 = new Date().getTime();
                        previousUrlChange5920 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse5920 = response;
                            this.lists.list5920.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list5920.items.subscribe(records => this.lists.list5920.lastItems = records);
                    this.lists.list5920.multiSelected = [];
                    this.lists.list5920.reset = function (isOpen) { if (isOpen) {
                        self.lists.list5920.updatedList$.next([]);
                        self.lists.list5920.searchForm.setValue('', { emitEvent: false });
                        self.lists.list5920.refresh();
                    }
                    else {
                        self.lists.list5920.searchForm.setValue('');
                        self.lists.list5920.updatedList$.next(self.lists.list5920.multiSelected);
                        self.model.modelItems.client_id.formControl.setValue(self.lists.list5920.multiSelected);
                    } };
                    this.lists.list5920.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list5920.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list5920.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list5920.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list5920.multiSelected.push(value);
                            }
                        }
                        lists.list5920.multiSelected = self.removeDuplicateIdsFromArray(lists.list5920.multiSelected);
                    };
                    const itemsUpdateSource5921 = this.lists.list5921.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange5921 = new Date().getTime();
                    let previousUrlChange5921;
                    let previousResponse5921;
                    this.lists.list5921.items = rxjs_1.combineLatest([this.lists.list5921.updatedList$, itemsUpdateSource5921]).pipe(operators_1.tap(() => { this.lists.list5921.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange5921 - new Date().getTime()) / 1000;
                        previousTimeChange5921 = new Date().getTime();
                        previousUrlChange5921 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse5921 = response;
                            this.lists.list5921.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list5921.items.subscribe(records => this.lists.list5921.lastItems = records);
                    this.lists.list5921.multiSelected = [];
                    this.lists.list5921.reset = function (isOpen) { if (isOpen) {
                        self.lists.list5921.updatedList$.next([]);
                        self.lists.list5921.searchForm.setValue('', { emitEvent: false });
                        self.lists.list5921.refresh();
                    }
                    else {
                        self.lists.list5921.searchForm.setValue('');
                        self.lists.list5921.updatedList$.next(self.lists.list5921.multiSelected);
                        self.model.modelItems.project_leader_id.formControl.setValue(self.lists.list5921.multiSelected);
                    } };
                    this.lists.list5921.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list5921.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list5921.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list5921.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list5921.multiSelected.push(value);
                            }
                        }
                        lists.list5921.multiSelected = self.removeDuplicateIdsFromArray(lists.list5921.multiSelected);
                    };
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'id', 'name', 'client_id', 'project_leader_id', 'status', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); this.lists.list5920.setupModel(this.model.modelItems.client_id.formControl); this.lists.list5921.setupModel(this.model.modelItems.project_leader_id.formControl); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() {
                    this.excelEditing = !this.excelEditing;
                    this.editorOpen = true;
                    if (this.excelEditing) {
                        this.editorOpen = false;
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                                control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => {
                                    if (!!control.controls.client_id.value.id == false) {
                                        return;
                                    }
                                    if (control.pristine == false) {
                                        this.submit$.next(control);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                    }
                }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexPermProjectGrid`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexPermProjectGrid`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexPermProjectGrid`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 5918 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5919 };
                    formDefaultsConfigs['client_id'] = { contentType: "integer", type: "dropdown", defaultValue: "", listId: 5920 };
                    formDefaultsConfigs['project_leader_id'] = { contentType: "integer", type: "dropdown", defaultValue: "", listId: 5921 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 5922 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 5923 };
                    formDefaultsConfigs['status'] = { contentType: "text", type: "none", defaultValue: "", listId: 5931 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 5918, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 5919, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), client_id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "client_id", "dropdown", false, formDefaults['client_id'], 5920, "select"), { validators: [forms_2.Validators.required], updateOn: 'change' }), project_leader_id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "project_leader_id", "dropdown", false, formDefaults['project_leader_id'], 5921, "select"), { validators: [], updateOn: 'change' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 5922, "text"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 5923, "datetime"), { validators: [], updateOn: 'blur' }), status: new forms_2.FormControl(this.calculateInitialColumnValue(row, "status", "none", false, formDefaults['status'], 5931, "text"), { validators: [forms_2.Validators.maxLength(255)], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { this.lists.list5920.setupModel(formGroup.controls.client_id); this.lists.list5921.setupModel(formGroup.controls.project_leader_id); });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list5920.dispose();
                    this.lists.list5921.dispose();
                    this.lists.list5931.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexPermProjectGrid', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexPermProjectGrid' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexPermProjectGridComponent_Factory(t) { return new (t || dibexPermProjectGridComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexPermProjectGridComponent, selectors: [["dibex-perm-project-grid"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 68, vars: 42, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5895", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci5896", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5897", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci5917", "dibComponent", "btnAuditTrail", "aria-label", "View audit trail of changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"], ["id", "ci5903", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci5901", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5899", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci5900", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci5898", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci5902", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci5904", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["matColumnDef", "name"], ["matColumnDef", "client_id"], ["matColumnDef", "project_leader_id"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "status"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexPermProjectGrid", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci5899", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5900", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci5902", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci5918", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "50", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5919", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%", "align-self", "stretch"], ["required", "true", "type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["auto5920trigger", "matAutocompleteTrigger", "input5920", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto5920", "matAutocomplete"], ["mode", "indeterminate", 4, "ngIf"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], ["mode", "indeterminate"], [3, "ngClass", "value", "innerHtml"], ["id", "ci5920", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%", "align-self", "stretch"], ["type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["type", "text", "matInput", "", "formControlName", "project_leader_id", 3, "matAutocomplete"], ["auto5921trigger", "matAutocompleteTrigger", "input5921", ""], ["auto5921", "matAutocomplete"], ["id", "ci5921", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%", "align-self", "stretch"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "dibComponent", "inputTextArea"], ["matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci5922", "dibComponent", "inputText"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matPrefix", "", 3, "for"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker5923", ""], ["id", "ci5923", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "selectEnum", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "status"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["id", "ci5931", "dibComponent", "selectEnum", 2, "display", "flex", "flex-direction", "column"], ["mat-header-cell", "", 2, "height", "4px"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexPermProjectGridComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexPermProjectGridComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_Template_button_click_4_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_Template_button_click_6_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(8, "button", 8);
                        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_Template_button_click_8_listener() { return ctx.openAuditTrail("68", "", ""); });
                        i0.ɵɵelement(9, "dib-icon", 9);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(10, "span", 10);
                        i0.ɵɵpipe(11, "safeHtml");
                        i0.ɵɵelementStart(12, "button", 11);
                        i0.ɵɵlistener("click", function dibexPermProjectGridComponent_Template_button_click_12_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(13, "dib-icon", 12);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(14, dibexPermProjectGridComponent_button_14_Template, 2, 4, "button", 13);
                        i0.ɵɵtemplate(15, dibexPermProjectGridComponent_button_15_Template, 2, 4, "button", 14);
                        i0.ɵɵelement(16, "span", 15);
                        i0.ɵɵtemplate(17, dibexPermProjectGridComponent_div_17_Template, 5, 3, "div", 16);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(18, "mat-card", 17)(19, "mat-card-content", 18);
                        i0.ɵɵelementContainerStart(20, 3);
                        i0.ɵɵelementStart(21, "div", 19, 20)(23, "form", 21);
                        i0.ɵɵelementContainerStart(24, 22);
                        i0.ɵɵelementStart(25, "table", 23);
                        i0.ɵɵelementContainerStart(26, 24);
                        i0.ɵɵtemplate(27, dibexPermProjectGridComponent_th_27_Template, 2, 2, "th", 25);
                        i0.ɵɵtemplate(28, dibexPermProjectGridComponent_td_28_Template, 2, 1, "td", 26);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(29, 27);
                        i0.ɵɵtemplate(30, dibexPermProjectGridComponent_td_30_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(31, dibexPermProjectGridComponent_th_31_Template, 1, 0, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(32, 30);
                        i0.ɵɵtemplate(33, dibexPermProjectGridComponent_td_33_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(34, dibexPermProjectGridComponent_th_34_Template, 5, 3, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(35, 31);
                        i0.ɵɵtemplate(36, dibexPermProjectGridComponent_td_36_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(37, dibexPermProjectGridComponent_th_37_Template, 5, 3, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(38, 32);
                        i0.ɵɵtemplate(39, dibexPermProjectGridComponent_td_39_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(40, dibexPermProjectGridComponent_th_40_Template, 5, 3, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(41, 33);
                        i0.ɵɵtemplate(42, dibexPermProjectGridComponent_td_42_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(43, dibexPermProjectGridComponent_th_43_Template, 5, 3, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(44, 34);
                        i0.ɵɵtemplate(45, dibexPermProjectGridComponent_td_45_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(46, dibexPermProjectGridComponent_th_46_Template, 5, 3, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(47, 35);
                        i0.ɵɵtemplate(48, dibexPermProjectGridComponent_td_48_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(49, dibexPermProjectGridComponent_th_49_Template, 5, 3, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(50, 36);
                        i0.ɵɵtemplate(51, dibexPermProjectGridComponent_td_51_Template, 2, 2, "td", 28);
                        i0.ɵɵtemplate(52, dibexPermProjectGridComponent_th_52_Template, 5, 3, "th", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(53, 37);
                        i0.ɵɵtemplate(54, dibexPermProjectGridComponent_th_54_Template, 2, 2, "th", 38);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(55, 39);
                        i0.ɵɵtemplate(56, dibexPermProjectGridComponent_th_56_Template, 2, 2, "th", 40);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(57, dibexPermProjectGridComponent_ng_container_57_Template, 3, 3, "ng-container", 41);
                        i0.ɵɵtemplate(58, dibexPermProjectGridComponent_tr_58_Template, 1, 3, "tr", 42);
                        i0.ɵɵtemplate(59, dibexPermProjectGridComponent_tr_59_Template, 1, 3, "tr", 42);
                        i0.ɵɵtemplate(60, dibexPermProjectGridComponent_tr_60_Template, 1, 4, "tr", 43);
                        i0.ɵɵpipe(61, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(62, dibexPermProjectGridComponent_62_Template, 1, 1, null, 44);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(63, "div", null, 45);
                        i0.ɵɵtemplate(65, dibexPermProjectGridComponent_mat_toolbar_65_Template, 6, 3, "mat-toolbar", 44);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(66, dibexPermProjectGridComponent_ng_template_66_Template, 34, 4, "ng-template", null, 46, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r29 = i0.ɵɵreference(64);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(38, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5895");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "View audit trail of changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(11, 34, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5904");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r29);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(32);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(40, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(41, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(61, 36, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibAutocompleteScrollToOnFocusDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatAutocomplete, i8.MatOption, i7.MatAutocompleteTrigger, i9.MatButton, i9.MatIconButton, i9.MatMiniFabButton, i10.MatCheckbox, i11.MatDatepickerToggle, i12.MatFormField, i12.MatLabel, i12.MatError, i12.MatPrefix, i12.MatSuffix, i13.MatIcon, i14.MatInput, i15.MatProgressBar, i16.MatSelect, i17.MatToolbar, i17.MatToolbarRow, i18.MatTooltip, i19.MatCard, i19.MatCardContent, i20.MatTable, i20.MatHeaderCellDef, i20.MatHeaderRowDef, i20.MatColumnDef, i20.MatCellDef, i20.MatRowDef, i20.MatHeaderCell, i20.MatCell, i20.MatHeaderRow, i20.MatRow, i21.MatSort, i21.MatSortHeader, i22.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexPermProjectGrid'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexPermProjectGridComponent.prototype, "reloadContainer", null);
            exports_1("dibexPermProjectGridComponent", dibexPermProjectGridComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPermProjectGridComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-perm-project-grid', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  " id=ci5895 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5895'" ><button mat-mini-fab color=accent  id=ci5896 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"  [matTooltip]="'Delete selected record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button   mat-mini-fab color=primary  id=ci5897 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button   mat-mini-fab color=accent  id=ci5917 dibComponent=btnAuditTrail   style="  " aria-label="View audit trail of changes"  [matTooltip]="'View audit trail of changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="openAuditTrail('68','','')"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"></dib-icon></button><span  id=ci5903 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci5901 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5899 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5900 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci5898 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci5902 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Projects (Perms): {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5904 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5904'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexPermProjectGrid" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'5906'" ></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5918 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='50'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5919 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><input #auto5920trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input5920  [matAutocomplete]="auto5920"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list5920, auto5920trigger); input5920.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5920=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list5920).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5920).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5920.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5920 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><mat-label>Client</mat-label><input #auto5920trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input5920  [matAutocomplete]="auto5920"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list5920, auto5920trigger); input5920.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5920=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list5920).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5920).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5920.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=project_leader_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'project_leader_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><input #auto5921trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input5921  [matAutocomplete]="auto5921"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('project_leader_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('project_leader_id'),$event, lists.list5921, auto5921trigger); input5921.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5921=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list5921).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5921).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5921.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Project Leader  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Project Leader</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5921 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><mat-label>Project Leader</mat-label><input #auto5921trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input5921  [matAutocomplete]="auto5921"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.project_leader_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.project_leader_id.formControl, $event, lists.list5921, auto5921trigger); input5921.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5921=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list5921).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5921).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5921.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  " ><textarea   matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5922 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5923"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5923"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5923></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5923 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=status  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'status','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-select formControlName=status    ><mat-option *ngFor="let item of lists.list5931.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Status  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Status</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5931 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-label>Status</mat-label><mat-select formControlName=status    ><mat-option *ngFor="let item of lists.list5931.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexPermProjectGrid><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'5906'" ></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5918 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='50'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5919 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><input #auto5920trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input5920  [matAutocomplete]="auto5920"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list5920, auto5920trigger); input5920.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5920=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list5920).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5920).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5920.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5920 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><mat-label>Client</mat-label><input #auto5920trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input5920  [matAutocomplete]="auto5920"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list5920, auto5920trigger); input5920.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5920=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list5920).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5920).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5920.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=project_leader_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'project_leader_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><input #auto5921trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input5921  [matAutocomplete]="auto5921"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('project_leader_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('project_leader_id'),$event, lists.list5921, auto5921trigger); input5921.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5921=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list5921).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5921).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5921.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Project Leader  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Project Leader</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5921 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex: 1 1 0%;  align-self: stretch;  "  ><mat-label>Project Leader</mat-label><input #auto5921trigger=matAutocompleteTrigger   type=text  matInput formControlName=project_leader_id   #input5921  [matAutocomplete]="auto5921"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.project_leader_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.project_leader_id.formControl, $event, lists.list5921, auto5921trigger); input5921.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto5921=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'project_leader_id')"  (opened)="$any(lists.list5921).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list5921).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list5921.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  " ><textarea   matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5922 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5923"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5923"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5923></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5923 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=status  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'status','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-select formControlName=status    ><mat-option *ngFor="let item of lists.list5931.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Status  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Status</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5931 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-label>Status</mat-label><mat-select formControlName=status    ><mat-option *ngFor="let item of lists.list5931.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, select_1.MatSelectModule];
            dibexPermProjectGridModule = class dibexPermProjectGridModule {
                static entry = dibexPermProjectGridComponent;
                static ɵfac = function dibexPermProjectGridModule_Factory(t) { return new (t || dibexPermProjectGridModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexPermProjectGridModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexPermProjectGridModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPermProjectGridModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexPermProjectGridComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexPermProjectGridModule, { declarations: [dibexPermProjectGridComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, select_1.MatSelectModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
