System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/cdk/text-field", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, _c0, _c1, _c2, _c3, _c4, _c5, _c6, _c7, importsRequired, dibexGridHeadersAndStylingComponent, containerModules, dibexGridHeadersAndStylingModule;
    var __moduleName = context_1 && context_1.id;
    function dibexGridHeadersAndStylingComponent_button_12_Template(rf, ctx) { if (rf & 1) {
        const _r48 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 70);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_button_12_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r47.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 71);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridHeadersAndStylingComponent_button_13_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 72);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r49.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 73);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridHeadersAndStylingComponent_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r51 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r51.page.toRecord, "\u00A0of\u00A0", ctx_r51.page.records, "");
    } }
    function dibexGridHeadersAndStylingComponent_div_15_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r52 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r52.page.totalRecords, ")");
    } }
    function dibexGridHeadersAndStylingComponent_div_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 74);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_div_15_span_2_Template, 2, 2, "span", 67);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_div_15_span_4_Template, 2, 1, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Grid Headers And Styling: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexGridHeadersAndStylingComponent_th_25_Template(rf, ctx) { if (rf & 1) {
        const _r54 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 75)(1, "mat-checkbox", 76);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_25_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r53 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r53.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexGridHeadersAndStylingComponent_td_26_Template(rf, ctx) { if (rf & 1) {
        const _r58 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 77)(1, "mat-checkbox", 78);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_26_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridHeadersAndStylingComponent_td_26_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r58); const row_r55 = restoredCtx.$implicit; const ctx_r57 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r57.selection.toggle(row_r55) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r55 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r55));
    } }
    function dibexGridHeadersAndStylingComponent_td_28_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 80)(2, "div", 81);
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "button", 82);
        i0.ɵɵelement(5, "dib-icon", 83);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(6, "button", 84);
        i0.ɵɵelement(7, "dib-icon", 85);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4552");
    } }
    function dibexGridHeadersAndStylingComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 79);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_28_ng_container_1_Template, 8, 1, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r59 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r59);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r59.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 86)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Edit ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("rowspan", 3);
    } }
    function dibexGridHeadersAndStylingComponent_td_31_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 89);
        i0.ɵɵelement(2, "dib-icon", 83);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_31_ng_container_1_Template, 3, 0, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r63 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r63);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r63.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 90);
    } if (rf & 2) {
        i0.ɵɵattribute("rowspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r68 = i0.ɵɵnextContext(2).index;
        const ctx_r71 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r71.findColumnDisplayValue(rowIndex_r68, "country", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r80 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r80); const ctx_r79 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r79.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 102);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 95);
        i0.ɵɵelement(2, "input", 96);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r67 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r72 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.hasError("country", "maxlength", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.view.recordStatus == "update" && ctx_r72.notSaved("country", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.view.recordStatus == "update" && ctx_r72.isSaved("country", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.isInvalid("country", rowForm_r67));
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_34_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_4_Template, 7, 5, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r67 = i0.ɵɵnextContext().$implicit;
        const ctx_r69 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == false && rowForm_r67.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == true || rowForm_r67.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == false && rowForm_r67.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_34_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r67 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r67);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r67.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_35_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_35_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_35_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r89 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_35_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r89); const ctx_r88 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r88.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_35_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_35_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r91 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_35_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r91); const ctx_r90 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r90.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_35_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r91); const ctx_r92 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r92.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_35_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_35_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r85 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r85.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.notSaved("country", ctx_r85.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.isSaved("country", ctx_r85.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_35_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_35_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_35_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵattribute("rowspan", 3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r94 = i0.ɵɵnextContext(2).index;
        const ctx_r97 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r97.findColumnDisplayValue(rowIndex_r94, "notes", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r104 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r104); const ctx_r103 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r103.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r106 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 112)(2, "textarea", 113);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r106); const ctx_r105 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r105.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r106); const ctx_r107 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r107.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r93 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r98 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r98.view.recordStatus == "update" && ctx_r98.notSaved("notes", rowForm_r93));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r98.view.recordStatus == "update" && ctx_r98.isSaved("notes", rowForm_r93));
    } }
    function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_37_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_4_Template, 5, 3, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_37_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r93 = i0.ɵɵnextContext().$implicit;
        const ctx_r95 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r95.excelEditing == false && rowForm_r93.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r95.excelEditing == true || rowForm_r93.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r95.excelEditing == false && rowForm_r93.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_37_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r93 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r93);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r93.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_38_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_38_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_38_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r116 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_38_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r116); const ctx_r115 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r115.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_38_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_38_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r118 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_38_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r118); const ctx_r117 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r117.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_38_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r118); const ctx_r119 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r119.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_38_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_38_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r112 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r112.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r112.view.recordStatus == "update" && ctx_r112.notSaved("notes", ctx_r112.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r112.view.recordStatus == "update" && ctx_r112.isSaved("notes", ctx_r112.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_38_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_38_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_38_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵattribute("rowspan", 3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_error_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        const _r138 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_12_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r138); const ctx_r137 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r137.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_13_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_error_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_error_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_20_Template(rf, ctx) { if (rf & 1) {
        const _r140 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_20_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r140); const ctx_r139 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r139.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_32_Template(rf, ctx) { if (rf & 1) {
        const _r142 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_32_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r142); const ctx_r141 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r141.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_39_Template(rf, ctx) { if (rf & 1) {
        const _r144 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_39_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r144); const ctx_r143 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r143.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r146 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 118)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "div", 119)(5, "div");
        i0.ɵɵelementContainerStart(6, 5);
        i0.ɵɵelementStart(7, "mat-form-field", 120)(8, "mat-label");
        i0.ɵɵtext(9, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(10, "input", 121);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_enter_10_listener() { i0.ɵɵrestoreView(_r146); const ctx_r145 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r145.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_esc_10_listener() { i0.ɵɵrestoreView(_r146); const ctx_r147 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r147.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(11, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_error_11_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(12, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(13, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_13_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "mat-form-field", 122)(15, "mat-label");
        i0.ɵɵtext(16, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(17, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_enter_17_listener() { i0.ɵɵrestoreView(_r146); const ctx_r148 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r148.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_esc_17_listener() { i0.ɵɵrestoreView(_r146); const ctx_r149 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r149.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(18, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_error_18_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(19, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_error_19_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(20, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_20_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(21, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_21_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(22, "div", 124)(23, "div");
        i0.ɵɵelementContainerStart(24, 5);
        i0.ɵɵelementStart(25, "mat-form-field", 125)(26, "mat-label");
        i0.ɵɵtext(27, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(28, "input", 126);
        i0.ɵɵlistener("focus", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_focus_28_listener() { i0.ɵɵrestoreView(_r146); const _r131 = i0.ɵɵreference(31); return i0.ɵɵresetView(_r131.open()); })("keydown.enter", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_enter_28_listener() { i0.ɵɵrestoreView(_r146); const ctx_r151 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r151.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_esc_28_listener() { i0.ɵɵrestoreView(_r146); const ctx_r152 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r152.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(29, "mat-datepicker-toggle", 127)(30, "mat-datepicker", null, 128);
        i0.ɵɵtemplate(32, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_32_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(33, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_33_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(34, "mat-form-field", 129);
        i0.ɵɵelement(35, "mat-datepicker-toggle", 127);
        i0.ɵɵelementStart(36, "mat-label");
        i0.ɵɵtext(37, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(38, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_enter_38_listener() { i0.ɵɵrestoreView(_r146); const ctx_r153 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r153.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template_input_keydown_esc_38_listener() { i0.ɵɵrestoreView(_r146); const ctx_r154 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r154.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(39, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_39_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(40, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_mat_icon_40_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelement(41, "ngx-mat-datetime-picker", null, 131);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r131 = i0.ɵɵreference(31);
        const _r136 = i0.ɵɵreference(42);
        const ctx_r122 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4556");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4557");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.hasError("id", "required", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.notSaved("id", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.isSaved("id", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.hasError("name", "required", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.hasError("name", "maxlength", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.notSaved("name", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.isSaved("name", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4560");
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matDatepicker", _r131)("placeholder", "Start Date");
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r131);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.notSaved("start_date", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.isSaved("start_date", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r136);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r136);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.notSaved("updated", ctx_r122.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.view.recordStatus == "update" && ctx_r122.isSaved("updated", ctx_r122.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_td_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 117);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_40_ng_container_1_Template, 43, 23, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r120 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r120);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r120.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132)(1, "div", 87)(2, "div")(3, "i")(4, "b");
        i0.ɵɵtext(5, "Main Fields");
        i0.ɵɵelementEnd()()()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 4);
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r167 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r167); const ctx_r166 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r166.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_error_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_error_16_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        const _r169 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_17_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r169); const ctx_r168 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r168.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r171 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 134)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "mat-form-field", 120)(5, "mat-label");
        i0.ɵɵtext(6, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(7, "input", 121);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r171); const ctx_r170 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r170.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r171); const ctx_r172 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r172.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(9, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(10, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 122)(12, "mat-label");
        i0.ɵɵtext(13, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_Template_input_keydown_enter_14_listener() { i0.ɵɵrestoreView(_r171); const ctx_r173 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r173.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_43_ng_container_1_Template_input_keydown_esc_14_listener() { i0.ɵɵrestoreView(_r171); const ctx_r174 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r174.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(15, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_error_15_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(16, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_error_16_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(17, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(18, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_mat_icon_18_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r157 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4557");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.hasError("id", "required", ctx_r157.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.view.recordStatus == "update" && ctx_r157.notSaved("id", ctx_r157.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.view.recordStatus == "update" && ctx_r157.isSaved("id", ctx_r157.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.hasError("name", "required", ctx_r157.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.hasError("name", "maxlength", ctx_r157.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.view.recordStatus == "update" && ctx_r157.notSaved("name", ctx_r157.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.view.recordStatus == "update" && ctx_r157.isSaved("name", ctx_r157.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_td_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 133);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_43_ng_container_1_Template, 19, 10, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r155 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r155);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r155.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 135)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Id/Name ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r176 = i0.ɵɵnextContext(2).index;
        const ctx_r179 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r179.findColumnDisplayValue(rowIndex_r176, "id", "none", "number"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r187 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r187); const ctx_r186 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r186.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r189 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 138)(2, "input", 121);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r189); const ctx_r188 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r188.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r189); const ctx_r190 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r190.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r175 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r180 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r180.hasError("id", "required", rowForm_r175));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r180.view.recordStatus == "update" && ctx_r180.notSaved("id", rowForm_r175));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r180.view.recordStatus == "update" && ctx_r180.isSaved("id", rowForm_r175));
    } }
    function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 137);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_4_Template, 6, 4, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_46_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r175 = i0.ɵɵnextContext().$implicit;
        const ctx_r177 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r177.excelEditing == false && rowForm_r175.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r177.excelEditing == true || rowForm_r175.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r177.excelEditing == false && rowForm_r175.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 136);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_46_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r175 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r175)("ngStyle", i0.ɵɵpureFunction1(3, _c0, rowForm_r175.getRawValue().name < "D" ? "red" : rowForm_r175.getRawValue().name < "M" ? "yellow" : "blue"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r175.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_47_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 141);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_47_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_47_div_2_span_2_Template, 2, 0, "span", 140);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r193 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r193.editorOpen);
    } }
    function dibexGridHeadersAndStylingComponent_th_47_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_47_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r200 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_47_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r200); const ctx_r199 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r199.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_47_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_47_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r202 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 142)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 143);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_47_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r202); const ctx_r201 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r201.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_47_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r202); const ctx_r203 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r203.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_47_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_47_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r195 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r195.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r195.view.recordStatus == "update" && ctx_r195.notSaved("id", ctx_r195.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r195.view.recordStatus == "update" && ctx_r195.isSaved("id", ctx_r195.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 139)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_47_div_2_Template, 3, 1, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_47_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_47_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r205 = i0.ɵɵnextContext(2).index;
        const ctx_r208 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r208.findColumnDisplayValue(rowIndex_r205, "name", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r217 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r217); const ctx_r216 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r216.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r219 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 146)(2, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r219); const ctx_r218 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r218.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r219); const ctx_r220 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r220.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r204 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r209 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.hasError("name", "required", rowForm_r204));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.hasError("name", "maxlength", rowForm_r204));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.view.recordStatus == "update" && ctx_r209.notSaved("name", rowForm_r204));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.view.recordStatus == "update" && ctx_r209.isSaved("name", rowForm_r204));
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 145);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_4_Template, 7, 5, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r204 = i0.ɵɵnextContext().$implicit;
        const ctx_r206 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r206.excelEditing == false && rowForm_r204.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r206.excelEditing == true || rowForm_r204.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r206.excelEditing == false && rowForm_r204.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 144);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_49_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r204 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r204);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r204.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_50_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 141);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_50_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_50_div_2_span_2_Template, 2, 0, "span", 140);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r223 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r223.editorOpen);
    } }
    function dibexGridHeadersAndStylingComponent_th_50_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_50_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r230 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_50_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r230); const ctx_r229 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r229.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_50_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_50_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 148)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 149);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_50_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r232); const ctx_r231 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r231.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_50_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r232); const ctx_r233 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r233.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_50_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_50_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r225 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r225.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r225.view.recordStatus == "update" && ctx_r225.notSaved("name", ctx_r225.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r225.view.recordStatus == "update" && ctx_r225.isSaved("name", ctx_r225.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 147)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_50_div_2_Template, 3, 1, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_50_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_50_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_11_Template(rf, ctx) { if (rf & 1) {
        const _r245 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_11_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r245); const ctx_r244 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r244.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_18_Template(rf, ctx) { if (rf & 1) {
        const _r247 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_18_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r247); const ctx_r246 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r246.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r249 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 151)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "mat-form-field", 125)(5, "mat-label");
        i0.ɵɵtext(6, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(7, "input", 126);
        i0.ɵɵlistener("focus", function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_Template_input_focus_7_listener() { i0.ɵɵrestoreView(_r249); const _r238 = i0.ɵɵreference(10); return i0.ɵɵresetView(_r238.open()); })("keydown.enter", function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r249); const ctx_r250 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r250.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r249); const ctx_r251 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r251.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(8, "mat-datepicker-toggle", 127)(9, "mat-datepicker", null, 128);
        i0.ɵɵtemplate(11, dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_11_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(12, dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(13, "mat-form-field", 129);
        i0.ɵɵelement(14, "mat-datepicker-toggle", 127);
        i0.ɵɵelementStart(15, "mat-label");
        i0.ɵɵtext(16, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(17, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_Template_input_keydown_enter_17_listener() { i0.ɵɵrestoreView(_r249); const ctx_r252 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r252.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_52_ng_container_1_Template_input_keydown_esc_17_listener() { i0.ɵɵrestoreView(_r249); const ctx_r253 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r253.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(18, dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_18_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(19, dibexGridHeadersAndStylingComponent_td_52_ng_container_1_mat_icon_19_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelement(20, "ngx-mat-datetime-picker", null, 131);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r238 = i0.ɵɵreference(10);
        const _r243 = i0.ɵɵreference(21);
        const ctx_r236 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4560");
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matDatepicker", _r238)("placeholder", "Start Date");
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r238);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r236.view.recordStatus == "update" && ctx_r236.notSaved("start_date", ctx_r236.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.view.recordStatus == "update" && ctx_r236.isSaved("start_date", ctx_r236.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r243);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r243);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.view.recordStatus == "update" && ctx_r236.notSaved("updated", ctx_r236.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.view.recordStatus == "update" && ctx_r236.isSaved("updated", ctx_r236.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_td_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 150);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_52_ng_container_1_Template, 22, 12, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r234 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r234);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r234.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 152)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Dates ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r255 = i0.ɵɵnextContext(2).index;
        const ctx_r258 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r258.findColumnDisplayValue(rowIndex_r255, "start_date", "none", "date"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r266 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r266); const ctx_r265 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r265.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r268 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 153)(2, "input", 154);
        i0.ɵɵlistener("focus", function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r268); const _r262 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r262.open()); })("keydown.enter", function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r268); const ctx_r269 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r269.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r268); const ctx_r270 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r270.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 127)(4, "mat-datepicker", null, 128);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(7, dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r262 = i0.ɵɵreference(5);
        const rowForm_r254 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r259 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r262);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r262);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r259.view.recordStatus == "update" && ctx_r259.notSaved("start_date", rowForm_r254));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r259.view.recordStatus == "update" && ctx_r259.isSaved("start_date", rowForm_r254));
    } }
    function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_55_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_4_Template, 8, 5, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_55_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r254 = i0.ɵɵnextContext().$implicit;
        const ctx_r256 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r256.excelEditing == false && rowForm_r254.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r256.excelEditing == true || rowForm_r254.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r256.excelEditing == false && rowForm_r254.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_55_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r254 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r254);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r254.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_56_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_56_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_56_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r279 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_56_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r279); const ctx_r278 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r278.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_56_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_56_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r281 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 155)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 156);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_56_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r281); const ctx_r280 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r280.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_56_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r281); const ctx_r282 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r282.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_56_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_56_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r275 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r275.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.view.recordStatus == "update" && ctx_r275.notSaved("start_date", ctx_r275.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.view.recordStatus == "update" && ctx_r275.isSaved("start_date", ctx_r275.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_56_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_56_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_56_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r284 = i0.ɵɵnextContext(2).index;
        const ctx_r287 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r287.findColumnDisplayValue(rowIndex_r284, "updated", "none", "datetime"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r295 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r295); const ctx_r294 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r294.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r297 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 158);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 127);
        i0.ɵɵelementStart(3, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r297); const ctx_r296 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r296.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r297); const ctx_r298 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r298.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 131);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r293 = i0.ɵɵreference(7);
        const rowForm_r283 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r288 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r293);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r293);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r288.view.recordStatus == "update" && ctx_r288.notSaved("updated", rowForm_r283));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r288.view.recordStatus == "update" && ctx_r288.isSaved("updated", rowForm_r283));
    } }
    function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_58_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_4_Template, 8, 5, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_58_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r283 = i0.ɵɵnextContext().$implicit;
        const ctx_r285 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r285.excelEditing == false && rowForm_r283.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r285.excelEditing == true || rowForm_r283.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r285.excelEditing == false && rowForm_r283.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 157);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_58_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r283 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r283);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r283.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_59_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_59_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_59_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r307 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_59_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r307); const ctx_r306 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r306.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_59_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_59_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r309 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 159)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 160);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_59_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r309); const ctx_r308 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r308.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_59_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r309); const ctx_r310 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r310.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_59_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_59_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r303 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r303.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r303.view.recordStatus == "update" && ctx_r303.notSaved("updated", ctx_r303.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r303.view.recordStatus == "update" && ctx_r303.isSaved("updated", ctx_r303.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_59_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_59_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_59_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r322 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r322); const ctx_r321 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r321.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_error_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_16_Template(rf, ctx) { if (rf & 1) {
        const _r324 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_16_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r324); const ctx_r323 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r323.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r326 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 162)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "mat-form-field", 163)(5, "mat-label");
        i0.ɵɵtext(6, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(7, "input", 164);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r326); const ctx_r325 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r325.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r326); const ctx_r327 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r327.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(9, dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(10, dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 165)(12, "mat-label");
        i0.ɵɵtext(13, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "input", 166);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_Template_input_keydown_enter_14_listener() { i0.ɵɵrestoreView(_r326); const ctx_r328 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r328.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_61_ng_container_1_Template_input_keydown_esc_14_listener() { i0.ɵɵrestoreView(_r326); const ctx_r329 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r329.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(15, dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_error_15_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(16, dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_16_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(17, dibexGridHeadersAndStylingComponent_td_61_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r313 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4563");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.hasError("phone", "maxlength", ctx_r313.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.notSaved("phone", ctx_r313.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.isSaved("phone", ctx_r313.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.hasError("email", "maxlength", ctx_r313.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.notSaved("email", ctx_r313.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.isSaved("email", ctx_r313.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_td_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 161);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_61_ng_container_1_Template, 18, 9, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r311 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r311);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r311.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 167)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Contact Details ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r331 = i0.ɵɵnextContext(2).index;
        const ctx_r334 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r334.findColumnDisplayValue(rowIndex_r331, "phone", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r342 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r342); const ctx_r341 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r341.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r344 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 95)(2, "input", 164);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r344); const ctx_r343 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r343.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r344); const ctx_r345 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r345.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r330 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r335 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r335.hasError("phone", "maxlength", rowForm_r330));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r335.view.recordStatus == "update" && ctx_r335.notSaved("phone", rowForm_r330));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r335.view.recordStatus == "update" && ctx_r335.isSaved("phone", rowForm_r330));
    } }
    function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_64_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_4_Template, 6, 4, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_64_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r330 = i0.ɵɵnextContext().$implicit;
        const ctx_r332 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r332.excelEditing == false && rowForm_r330.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r332.excelEditing == true || rowForm_r330.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r332.excelEditing == false && rowForm_r330.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 168);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_64_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r330 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r330);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r330.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_65_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_65_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_65_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r354 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_65_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r354); const ctx_r353 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r353.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_65_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_65_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r356 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 169)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 170);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_65_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r356); const ctx_r355 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r355.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_65_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r356); const ctx_r357 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r357.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_65_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_65_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r350 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r350.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r350.view.recordStatus == "update" && ctx_r350.notSaved("phone", ctx_r350.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r350.view.recordStatus == "update" && ctx_r350.isSaved("phone", ctx_r350.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_65_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_65_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_65_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵattribute("rowspan", 2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r359 = i0.ɵɵnextContext(2).index;
        const ctx_r362 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r362.findColumnDisplayValue(rowIndex_r359, "email", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r370 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r370); const ctx_r369 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r369.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r372 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 95)(2, "input", 166);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r372); const ctx_r371 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r371.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r372); const ctx_r373 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r373.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r358 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r363 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r363.hasError("email", "maxlength", rowForm_r358));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r363.view.recordStatus == "update" && ctx_r363.notSaved("email", rowForm_r358));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r363.view.recordStatus == "update" && ctx_r363.isSaved("email", rowForm_r358));
    } }
    function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_td_67_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 171)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_4_Template, 6, 4, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_td_67_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r361 = ctx.ngIf;
        const rowForm_r358 = i0.ɵɵnextContext().$implicit;
        const ctx_r360 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(4, _c1, row_r361.name < "D" ? "red" : row_r361.name < "M" ? "yellow" : "blue"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r360.excelEditing == false && rowForm_r358.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r360.excelEditing == true || rowForm_r358.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r360.excelEditing == false && rowForm_r358.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_td_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_67_ng_container_1_Template, 6, 6, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r358 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r358);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r358.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_68_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_68_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_68_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r382 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_th_68_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r382); const ctx_r381 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r381.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_68_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_th_68_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r384 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 172)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 173);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_th_68_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r384); const ctx_r383 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r383.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_th_68_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r384); const ctx_r385 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r385.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_th_68_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_th_68_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r378 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r378.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.view.recordStatus == "update" && ctx_r378.notSaved("email", ctx_r378.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.view.recordStatus == "update" && ctx_r378.isSaved("email", ctx_r378.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_th_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_th_68_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_th_68_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_th_68_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵattribute("rowspan", 2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r33.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r33.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r33.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_td_70_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 174);
        i0.ɵɵelement(2, "dib-icon", 85);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } }
    function dibexGridHeadersAndStylingComponent_td_70_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_td_70_ng_container_1_Template, 3, 0, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r386 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r386);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r386.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_th_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 90);
    } if (rf & 2) {
        i0.ɵɵattribute("rowspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_th_73_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 177);
    } }
    function dibexGridHeadersAndStylingComponent_th_73_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 175);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_th_73_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 176);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r36.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r36.busy);
    } }
    function dibexGridHeadersAndStylingComponent_th_75_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r391 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r391.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridHeadersAndStylingComponent_th_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 178);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_th_75_span_1_Template, 2, 1, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r37 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r37.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r37.busy && ctx_r37.tableDataSource.data.length == 0);
    } }
    function dibexGridHeadersAndStylingComponent_ng_container_76_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 180);
    } }
    function dibexGridHeadersAndStylingComponent_ng_container_76_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_container_76_tr_1_Template, 1, 0, "tr", 179);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r392 = ctx.$implicit;
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r38.columnHeaders.getArray(column_r392).items$));
    } }
    function dibexGridHeadersAndStylingComponent_tr_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 181);
    } if (rf & 2) {
        const ctx_r39 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c2, ctx_r39.busy ? "visible" : "hidden"));
    } }
    function dibexGridHeadersAndStylingComponent_tr_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 181);
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c2, ctx_r40.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexGridHeadersAndStylingComponent_tr_79_Template(rf, ctx) { if (rf & 1) {
        const _r397 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 182);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_tr_79_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r397); const row_r394 = restoredCtx.$implicit; const ctx_r396 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r396.rowClick(row_r394, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r394 = ctx.$implicit;
        const ctx_r41 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r41.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c3, ctx_r41.isHighlighted(row_r394)));
    } }
    function dibexGridHeadersAndStylingComponent_81_ng_template_0_Template(rf, ctx) { }
    function dibexGridHeadersAndStylingComponent_81_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexGridHeadersAndStylingComponent_81_ng_template_0_Template, 0, 0, "ng-template", 183);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r45 = i0.ɵɵreference(86);
        i0.ɵɵproperty("ngTemplateOutlet", _r45);
    } }
    function dibexGridHeadersAndStylingComponent_mat_toolbar_84_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r403 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 189);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_mat_toolbar_84_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r403); const ctx_r402 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r402.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r399 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r399.numberOfSelectedItems + " ", "item", ctx_r399.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexGridHeadersAndStylingComponent_mat_toolbar_84_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_mat_toolbar_84_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_mat_toolbar_84_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r407 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 190);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_mat_toolbar_84_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r407); const ctx_r406 = i0.ɵɵnextContext(2); ctx_r406.gridShowClipboardDefault = !ctx_r406.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r406.gridShowClipboardDefault && ctx_r406.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_mat_toolbar_84_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_mat_toolbar_84_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r400 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r400.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r400.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexGridHeadersAndStylingComponent_mat_toolbar_84_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r410 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 191, 192);
        i0.ɵɵlistener("page", function dibexGridHeadersAndStylingComponent_mat_toolbar_84_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r410); const ctx_r409 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r409.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r401 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r401.page.totalRecords)("pageSize", ctx_r401.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c4));
    } }
    function dibexGridHeadersAndStylingComponent_mat_toolbar_84_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 184);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_mat_toolbar_84_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 185);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_mat_toolbar_84_button_3_Template, 4, 3, "button", 186);
        i0.ɵɵelement(4, "span", 187);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_mat_toolbar_84_mat_paginator_5_Template, 2, 4, "mat-paginator", 188);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r44 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r44.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r44.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 80)(2, "div", 81);
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "button", 82);
        i0.ɵɵelement(5, "dib-icon", 83);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(6, "button", 84);
        i0.ɵɵelement(7, "dib-icon", 85);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4552");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 79);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_2_ng_container_1_Template, 8, 1, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r446 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r446);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r446.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 86)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Edit ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("rowspan", 3);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 89);
        i0.ɵɵelement(2, "dib-icon", 83);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_5_ng_container_1_Template, 3, 0, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r450 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r450);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r450.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 90);
    } if (rf & 2) {
        i0.ɵɵattribute("rowspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r455 = i0.ɵɵnextContext(2).index;
        const ctx_r458 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r458.findColumnDisplayValue(rowIndex_r455, "country", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r466 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r466); const ctx_r465 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r465.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r468 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 95)(2, "input", 197);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r468); const ctx_r467 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r467.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r468); const ctx_r469 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r469.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r454 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r459 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r459.hasError("country", "maxlength", rowForm_r454));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r459.view.recordStatus == "update" && ctx_r459.notSaved("country", rowForm_r454));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r459.view.recordStatus == "update" && ctx_r459.isSaved("country", rowForm_r454));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_4_Template, 6, 4, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r454 = i0.ɵɵnextContext().$implicit;
        const ctx_r456 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r456.excelEditing == false && rowForm_r454.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r456.excelEditing == true || rowForm_r454.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r456.excelEditing == false && rowForm_r454.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r454 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r454);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r454.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r478 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r478); const ctx_r477 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r477.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r480 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r480); const ctx_r479 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r479.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r480); const ctx_r481 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r481.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r474 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r474.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r474.view.recordStatus == "update" && ctx_r474.notSaved("country", ctx_r474.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r474.view.recordStatus == "update" && ctx_r474.isSaved("country", ctx_r474.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_9_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r416 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("rowspan", 3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r416.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r416.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r416.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r483 = i0.ɵɵnextContext(2).index;
        const ctx_r486 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r486.findColumnDisplayValue(rowIndex_r483, "notes", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r493 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r493); const ctx_r492 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r492.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r495 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 112)(2, "textarea", 113);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r495); const ctx_r494 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r494.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r495); const ctx_r496 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r496.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r482 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r487 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r487.view.recordStatus == "update" && ctx_r487.notSaved("notes", rowForm_r482));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r487.view.recordStatus == "update" && ctx_r487.isSaved("notes", rowForm_r482));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_4_Template, 5, 3, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r482 = i0.ɵɵnextContext().$implicit;
        const ctx_r484 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r484.excelEditing == false && rowForm_r482.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r484.excelEditing == true || rowForm_r482.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r484.excelEditing == false && rowForm_r482.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_11_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r482 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r482);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r482.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r505 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r505); const ctx_r504 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r504.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r507 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r507); const ctx_r506 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r506.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r507); const ctx_r508 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r508.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r501 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r501.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.view.recordStatus == "update" && ctx_r501.notSaved("notes", ctx_r501.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.view.recordStatus == "update" && ctx_r501.isSaved("notes", ctx_r501.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_12_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r418 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("rowspan", 3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r418.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r418.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r418.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_error_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        const _r527 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_12_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r527); const ctx_r526 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r526.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_13_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_error_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_error_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_20_Template(rf, ctx) { if (rf & 1) {
        const _r529 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_20_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r529); const ctx_r528 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r528.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_32_Template(rf, ctx) { if (rf & 1) {
        const _r531 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_32_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r531); const ctx_r530 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r530.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_39_Template(rf, ctx) { if (rf & 1) {
        const _r533 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_39_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r533); const ctx_r532 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r532.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r535 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 118)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "div", 119)(5, "div");
        i0.ɵɵelementContainerStart(6, 5);
        i0.ɵɵelementStart(7, "mat-form-field", 120)(8, "mat-label");
        i0.ɵɵtext(9, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(10, "input", 121);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_enter_10_listener() { i0.ɵɵrestoreView(_r535); const ctx_r534 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r534.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_esc_10_listener() { i0.ɵɵrestoreView(_r535); const ctx_r536 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r536.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(11, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_error_11_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(12, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(13, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_13_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "mat-form-field", 122)(15, "mat-label");
        i0.ɵɵtext(16, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(17, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_enter_17_listener() { i0.ɵɵrestoreView(_r535); const ctx_r537 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r537.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_esc_17_listener() { i0.ɵɵrestoreView(_r535); const ctx_r538 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r538.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(18, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_error_18_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(19, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_error_19_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(20, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_20_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(21, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_21_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(22, "div", 124)(23, "div");
        i0.ɵɵelementContainerStart(24, 5);
        i0.ɵɵelementStart(25, "mat-form-field", 125)(26, "mat-label");
        i0.ɵɵtext(27, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(28, "input", 126);
        i0.ɵɵlistener("focus", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_focus_28_listener() { i0.ɵɵrestoreView(_r535); const _r520 = i0.ɵɵreference(31); return i0.ɵɵresetView(_r520.open()); })("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_enter_28_listener() { i0.ɵɵrestoreView(_r535); const ctx_r540 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r540.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_esc_28_listener() { i0.ɵɵrestoreView(_r535); const ctx_r541 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r541.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(29, "mat-datepicker-toggle", 127)(30, "mat-datepicker", null, 128);
        i0.ɵɵtemplate(32, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_32_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(33, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_33_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(34, "mat-form-field", 129);
        i0.ɵɵelement(35, "mat-datepicker-toggle", 127);
        i0.ɵɵelementStart(36, "mat-label");
        i0.ɵɵtext(37, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(38, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_enter_38_listener() { i0.ɵɵrestoreView(_r535); const ctx_r542 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r542.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template_input_keydown_esc_38_listener() { i0.ɵɵrestoreView(_r535); const ctx_r543 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r543.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(39, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_39_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(40, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_mat_icon_40_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelement(41, "ngx-mat-datetime-picker", null, 131);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r520 = i0.ɵɵreference(31);
        const _r525 = i0.ɵɵreference(42);
        const ctx_r511 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4556");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4557");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.hasError("id", "required", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.notSaved("id", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.isSaved("id", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.hasError("name", "required", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.hasError("name", "maxlength", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.notSaved("name", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.isSaved("name", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4560");
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matDatepicker", _r520)("placeholder", "Start Date");
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r520);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.notSaved("start_date", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.isSaved("start_date", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r525);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r525);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.notSaved("updated", ctx_r511.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r511.view.recordStatus == "update" && ctx_r511.isSaved("updated", ctx_r511.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 117);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_ng_container_1_Template, 43, 23, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r509 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r509);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r509.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132)(1, "div", 87)(2, "div")(3, "i")(4, "b");
        i0.ɵɵtext(5, "Main Fields");
        i0.ɵɵelementEnd()()()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 4);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r556 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r556); const ctx_r555 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r555.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_error_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_error_16_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        const _r558 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_17_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r558); const ctx_r557 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r557.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r560 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 134)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "mat-form-field", 120)(5, "mat-label");
        i0.ɵɵtext(6, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(7, "input", 121);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r560); const ctx_r559 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r559.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r560); const ctx_r561 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r561.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(9, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(10, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 122)(12, "mat-label");
        i0.ɵɵtext(13, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_Template_input_keydown_enter_14_listener() { i0.ɵɵrestoreView(_r560); const ctx_r562 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r562.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_Template_input_keydown_esc_14_listener() { i0.ɵɵrestoreView(_r560); const ctx_r563 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r563.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(15, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_error_15_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(16, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_error_16_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(17, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(18, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_mat_icon_18_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r546 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4557");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.hasError("id", "required", ctx_r546.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.view.recordStatus == "update" && ctx_r546.notSaved("id", ctx_r546.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.view.recordStatus == "update" && ctx_r546.isSaved("id", ctx_r546.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.hasError("name", "required", ctx_r546.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.hasError("name", "maxlength", ctx_r546.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.view.recordStatus == "update" && ctx_r546.notSaved("name", ctx_r546.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.view.recordStatus == "update" && ctx_r546.isSaved("name", ctx_r546.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 133);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_ng_container_1_Template, 19, 10, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r544 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r544);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r544.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 135)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Id/Name ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r565 = i0.ɵɵnextContext(2).index;
        const ctx_r568 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r568.findColumnDisplayValue(rowIndex_r565, "id", "none", "number"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r576 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r576); const ctx_r575 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r575.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r578 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 138)(2, "input", 121);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r578); const ctx_r577 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r577.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r578); const ctx_r579 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r579.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r564 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r569 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r569.hasError("id", "required", rowForm_r564));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r569.view.recordStatus == "update" && ctx_r569.notSaved("id", rowForm_r564));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r569.view.recordStatus == "update" && ctx_r569.isSaved("id", rowForm_r564));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 137);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_4_Template, 6, 4, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r564 = i0.ɵɵnextContext().$implicit;
        const ctx_r566 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r566.excelEditing == false && rowForm_r564.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.excelEditing == true || rowForm_r564.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.excelEditing == false && rowForm_r564.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 136);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r564 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r564)("ngStyle", i0.ɵɵpureFunction1(3, _c0, rowForm_r564.getRawValue().name < "D" ? "red" : rowForm_r564.getRawValue().name < "M" ? "yellow" : "blue"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r564.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 141);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_2_span_2_Template, 2, 0, "span", 140);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r582 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r582.editorOpen);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r589 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r589); const ctx_r588 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r588.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r591 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 142)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 143);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r591); const ctx_r590 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r590.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r591); const ctx_r592 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r592.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r584 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r584.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r584.view.recordStatus == "update" && ctx_r584.notSaved("id", ctx_r584.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r584.view.recordStatus == "update" && ctx_r584.isSaved("id", ctx_r584.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 139)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_2_Template, 3, 1, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_21_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r424 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r424.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r594 = i0.ɵɵnextContext(2).index;
        const ctx_r597 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r597.findColumnDisplayValue(rowIndex_r594, "name", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r606 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r606); const ctx_r605 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r605.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r608 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 146)(2, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r608); const ctx_r607 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r607.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r608); const ctx_r609 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r609.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r593 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r598 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r598.hasError("name", "required", rowForm_r593));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r598.hasError("name", "maxlength", rowForm_r593));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r598.view.recordStatus == "update" && ctx_r598.notSaved("name", rowForm_r593));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r598.view.recordStatus == "update" && ctx_r598.isSaved("name", rowForm_r593));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 145);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_4_Template, 7, 5, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r593 = i0.ɵɵnextContext().$implicit;
        const ctx_r595 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r595.excelEditing == false && rowForm_r593.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r595.excelEditing == true || rowForm_r593.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r595.excelEditing == false && rowForm_r593.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 144);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r593 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r593);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r593.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 141);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_2_span_2_Template, 2, 0, "span", 140);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r612 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r612.editorOpen);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r619 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r619); const ctx_r618 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r618.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r621 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 148)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 149);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r621); const ctx_r620 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r620.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r621); const ctx_r622 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r622.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r614 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r614.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r614.view.recordStatus == "update" && ctx_r614.notSaved("name", ctx_r614.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r614.view.recordStatus == "update" && ctx_r614.isSaved("name", ctx_r614.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 147)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_2_Template, 3, 1, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_24_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r426 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r426.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r426.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r426.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_11_Template(rf, ctx) { if (rf & 1) {
        const _r634 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_11_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r634); const ctx_r633 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r633.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_18_Template(rf, ctx) { if (rf & 1) {
        const _r636 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_18_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r636); const ctx_r635 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r635.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r638 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 151)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "mat-form-field", 125)(5, "mat-label");
        i0.ɵɵtext(6, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(7, "input", 126);
        i0.ɵɵlistener("focus", function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_Template_input_focus_7_listener() { i0.ɵɵrestoreView(_r638); const _r627 = i0.ɵɵreference(10); return i0.ɵɵresetView(_r627.open()); })("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r638); const ctx_r639 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r639.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r638); const ctx_r640 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r640.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(8, "mat-datepicker-toggle", 127)(9, "mat-datepicker", null, 128);
        i0.ɵɵtemplate(11, dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_11_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(12, dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(13, "mat-form-field", 129);
        i0.ɵɵelement(14, "mat-datepicker-toggle", 127);
        i0.ɵɵelementStart(15, "mat-label");
        i0.ɵɵtext(16, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(17, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_Template_input_keydown_enter_17_listener() { i0.ɵɵrestoreView(_r638); const ctx_r641 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r641.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_Template_input_keydown_esc_17_listener() { i0.ɵɵrestoreView(_r638); const ctx_r642 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r642.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(18, dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_18_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(19, dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_mat_icon_19_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelement(20, "ngx-mat-datetime-picker", null, 131);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r627 = i0.ɵɵreference(10);
        const _r632 = i0.ɵɵreference(21);
        const ctx_r625 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4560");
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matDatepicker", _r627)("placeholder", "Start Date");
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r627);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r625.view.recordStatus == "update" && ctx_r625.notSaved("start_date", ctx_r625.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r625.view.recordStatus == "update" && ctx_r625.isSaved("start_date", ctx_r625.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r632);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r632);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r625.view.recordStatus == "update" && ctx_r625.notSaved("updated", ctx_r625.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r625.view.recordStatus == "update" && ctx_r625.isSaved("updated", ctx_r625.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 150);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_26_ng_container_1_Template, 22, 12, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r623 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r623);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r623.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 152)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Dates ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r644 = i0.ɵɵnextContext(2).index;
        const ctx_r647 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r647.findColumnDisplayValue(rowIndex_r644, "start_date", "none", "date"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r655 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r655); const ctx_r654 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r654.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r657 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 153)(2, "input", 154);
        i0.ɵɵlistener("focus", function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r657); const _r651 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r651.open()); })("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r657); const ctx_r658 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r658.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r657); const ctx_r659 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r659.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 127)(4, "mat-datepicker", null, 128);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(7, dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r651 = i0.ɵɵreference(5);
        const rowForm_r643 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r648 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r651);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r651);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r648.view.recordStatus == "update" && ctx_r648.notSaved("start_date", rowForm_r643));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r648.view.recordStatus == "update" && ctx_r648.isSaved("start_date", rowForm_r643));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_4_Template, 8, 5, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r643 = i0.ɵɵnextContext().$implicit;
        const ctx_r645 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r645.excelEditing == false && rowForm_r643.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r645.excelEditing == true || rowForm_r643.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r645.excelEditing == false && rowForm_r643.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_29_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r643 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r643);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r643.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r668 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r668); const ctx_r667 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r667.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r670 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 155)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 156);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r670); const ctx_r669 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r669.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r670); const ctx_r671 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r671.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r664 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r664.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r664.view.recordStatus == "update" && ctx_r664.notSaved("start_date", ctx_r664.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r664.view.recordStatus == "update" && ctx_r664.isSaved("start_date", ctx_r664.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_30_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r430 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r430.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r673 = i0.ɵɵnextContext(2).index;
        const ctx_r676 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r676.findColumnDisplayValue(rowIndex_r673, "updated", "none", "datetime"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r684 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r684); const ctx_r683 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r683.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r686 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 158);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 127);
        i0.ɵɵelementStart(3, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r686); const ctx_r685 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r685.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r686); const ctx_r687 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r687.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 131);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r682 = i0.ɵɵreference(7);
        const rowForm_r672 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r677 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r682);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r682);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r677.view.recordStatus == "update" && ctx_r677.notSaved("updated", rowForm_r672));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r677.view.recordStatus == "update" && ctx_r677.isSaved("updated", rowForm_r672));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_4_Template, 8, 5, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r672 = i0.ɵɵnextContext().$implicit;
        const ctx_r674 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r674.excelEditing == false && rowForm_r672.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r674.excelEditing == true || rowForm_r672.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r674.excelEditing == false && rowForm_r672.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 157);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_32_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r672 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r672);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r672.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r696 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r696); const ctx_r695 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r695.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r698 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 159)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 160);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r698); const ctx_r697 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r697.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r698); const ctx_r699 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r699.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r692 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r692.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r692.view.recordStatus == "update" && ctx_r692.notSaved("updated", ctx_r692.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r692.view.recordStatus == "update" && ctx_r692.isSaved("updated", ctx_r692.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_33_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r432 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r432.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r711 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r711); const ctx_r710 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r710.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_error_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_16_Template(rf, ctx) { if (rf & 1) {
        const _r713 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_16_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r713); const ctx_r712 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r712.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r715 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 162)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "mat-form-field", 163)(5, "mat-label");
        i0.ɵɵtext(6, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(7, "input", 164);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r715); const ctx_r714 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r714.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r715); const ctx_r716 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r716.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(9, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(10, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 165)(12, "mat-label");
        i0.ɵɵtext(13, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "input", 166);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_Template_input_keydown_enter_14_listener() { i0.ɵɵrestoreView(_r715); const ctx_r717 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r717.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_Template_input_keydown_esc_14_listener() { i0.ɵɵrestoreView(_r715); const ctx_r718 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r718.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(15, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_error_15_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(16, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_16_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(17, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r702 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4563");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r702.hasError("phone", "maxlength", ctx_r702.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r702.view.recordStatus == "update" && ctx_r702.notSaved("phone", ctx_r702.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r702.view.recordStatus == "update" && ctx_r702.isSaved("phone", ctx_r702.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r702.hasError("email", "maxlength", ctx_r702.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r702.view.recordStatus == "update" && ctx_r702.notSaved("email", ctx_r702.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r702.view.recordStatus == "update" && ctx_r702.isSaved("email", ctx_r702.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 161);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_ng_container_1_Template, 18, 9, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r700 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r700);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r700.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 167)(1, "div", 87)(2, "div");
        i0.ɵɵtext(3, " Contact Details ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r720 = i0.ɵɵnextContext(2).index;
        const ctx_r723 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r723.findColumnDisplayValue(rowIndex_r720, "phone", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r731 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r731); const ctx_r730 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r730.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r733 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 95)(2, "input", 164);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r733); const ctx_r732 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r732.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r733); const ctx_r734 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r734.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r719 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r724 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r724.hasError("phone", "maxlength", rowForm_r719));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r724.view.recordStatus == "update" && ctx_r724.notSaved("phone", rowForm_r719));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r724.view.recordStatus == "update" && ctx_r724.isSaved("phone", rowForm_r719));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 91)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_4_Template, 6, 4, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r719 = i0.ɵɵnextContext().$implicit;
        const ctx_r721 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r721.excelEditing == false && rowForm_r719.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r721.excelEditing == true || rowForm_r719.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r721.excelEditing == false && rowForm_r719.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 168);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r719 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r719);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r719.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r743 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r743); const ctx_r742 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r742.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r745 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 169)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 170);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r745); const ctx_r744 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r744.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r745); const ctx_r746 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r746.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r739 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r739.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r739.view.recordStatus == "update" && ctx_r739.notSaved("phone", ctx_r739.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r739.view.recordStatus == "update" && ctx_r739.isSaved("phone", ctx_r739.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_39_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r436 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("rowspan", 2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r436.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r436.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r436.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 94);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r748 = i0.ɵɵnextContext(2).index;
        const ctx_r751 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r751.findColumnDisplayValue(rowIndex_r748, "email", "none", "text"), "");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r759 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r759); const ctx_r758 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r758.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r761 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 94)(1, "mat-form-field", 95)(2, "input", 166);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r761); const ctx_r760 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r760.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r761); const ctx_r762 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r762.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r747 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r752 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r752.hasError("email", "maxlength", rowForm_r747));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r752.view.recordStatus == "update" && ctx_r752.notSaved("email", rowForm_r747));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r752.view.recordStatus == "update" && ctx_r752.isSaved("email", rowForm_r747));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 171)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_3_Template, 2, 1, "span", 93);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_4_Template, 6, 4, "span", 93);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r750 = ctx.ngIf;
        const rowForm_r747 = i0.ɵɵnextContext().$implicit;
        const ctx_r749 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(4, _c1, row_r750.name < "D" ? "red" : row_r750.name < "M" ? "yellow" : "blue"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r749.excelEditing == false && rowForm_r747.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r749.excelEditing == true || rowForm_r747.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r749.excelEditing == false && rowForm_r747.get("__edit").value === false);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_ng_container_1_Template, 6, 6, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r747 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r747);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r747.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 108);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r771 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 100);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r771); const ctx_r770 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r770.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 101);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r773 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 109)(1, "mat-form-field", 172)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 173);
        i0.ɵɵlistener("keydown.enter", function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r773); const ctx_r772 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r772.searchGrid(false)); })("keydown.esc", function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r773); const ctx_r774 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r774.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 97);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 98);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r767 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r767.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r767.view.recordStatus == "update" && ctx_r767.notSaved("email", ctx_r767.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r767.view.recordStatus == "update" && ctx_r767.isSaved("email", ctx_r767.model.$formGroup));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 87);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_2_Template, 2, 0, "div", 104);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_3_Template, 2, 0, "div", 105);
        i0.ɵɵtemplate(4, dibexGridHeadersAndStylingComponent_ng_template_85_th_42_div_4_Template, 7, 4, "div", 106);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r438 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("rowspan", 2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r438.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r438.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r438.showSearch);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_44_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 174);
        i0.ɵɵelement(2, "dib-icon", 85);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 88);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_td_44_ng_container_1_Template, 3, 0, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r775 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r775);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r775.getRawValue());
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 90);
    } if (rf & 2) {
        i0.ɵɵattribute("rowspan", 2);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_47_Template(rf, ctx) { if (rf & 1) {
        const _r780 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 75)(1, "mat-checkbox", 198);
        i0.ɵɵlistener("change", function dibexGridHeadersAndStylingComponent_ng_template_85_th_47_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r780); const ctx_r779 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r779.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r441 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r441.masterIsChecked)("indeterminate", ctx_r441.masterIsIndeterminate);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_td_48_Template(rf, ctx) { if (rf & 1) {
        const _r784 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 199)(1, "mat-checkbox", 78);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_td_48_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridHeadersAndStylingComponent_ng_template_85_td_48_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r784); const row_r781 = restoredCtx.$implicit; const ctx_r783 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r783.selection.toggle(row_r781) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r781 = ctx.$implicit;
        const ctx_r442 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r442.isHighlighted(row_r781));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_50_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 177);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 200);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_th_50_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 176);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r443 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r443.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r443.busy);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_52_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r786 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r786.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 178);
        i0.ɵɵtemplate(1, dibexGridHeadersAndStylingComponent_ng_template_85_th_52_span_1_Template, 2, 1, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r444 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r444.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r444.busy && ctx_r444.tableDataSource.data.length == 0);
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_tr_53_Template(rf, ctx) { if (rf & 1) {
        const _r789 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 201);
        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_ng_template_85_tr_53_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r789); const row_r787 = restoredCtx.$implicit; const ctx_r788 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r788.rowClick(row_r787, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r787 = ctx.$implicit;
        const ctx_r445 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c3, ctx_r445.isHighlighted(row_r787)));
    } }
    function dibexGridHeadersAndStylingComponent_ng_template_85_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 193);
        i0.ɵɵelementContainerStart(1, 25);
        i0.ɵɵtemplate(2, dibexGridHeadersAndStylingComponent_ng_template_85_td_2_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(3, dibexGridHeadersAndStylingComponent_ng_template_85_th_3_Template, 4, 1, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 28);
        i0.ɵɵtemplate(5, dibexGridHeadersAndStylingComponent_ng_template_85_td_5_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(6, dibexGridHeadersAndStylingComponent_ng_template_85_th_6_Template, 1, 1, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 31);
        i0.ɵɵtemplate(8, dibexGridHeadersAndStylingComponent_ng_template_85_td_8_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(9, dibexGridHeadersAndStylingComponent_ng_template_85_th_9_Template, 5, 4, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 33);
        i0.ɵɵtemplate(11, dibexGridHeadersAndStylingComponent_ng_template_85_td_11_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(12, dibexGridHeadersAndStylingComponent_ng_template_85_th_12_Template, 5, 4, "th", 34);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 35);
        i0.ɵɵtemplate(14, dibexGridHeadersAndStylingComponent_ng_template_85_td_14_Template, 2, 2, "td", 36);
        i0.ɵɵtemplate(15, dibexGridHeadersAndStylingComponent_ng_template_85_th_15_Template, 6, 1, "th", 37);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 38);
        i0.ɵɵtemplate(17, dibexGridHeadersAndStylingComponent_ng_template_85_td_17_Template, 2, 2, "td", 39);
        i0.ɵɵtemplate(18, dibexGridHeadersAndStylingComponent_ng_template_85_th_18_Template, 4, 1, "th", 40);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 41);
        i0.ɵɵtemplate(20, dibexGridHeadersAndStylingComponent_ng_template_85_td_20_Template, 2, 5, "td", 42);
        i0.ɵɵtemplate(21, dibexGridHeadersAndStylingComponent_ng_template_85_th_21_Template, 5, 3, "th", 43);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 44);
        i0.ɵɵtemplate(23, dibexGridHeadersAndStylingComponent_ng_template_85_td_23_Template, 2, 2, "td", 45);
        i0.ɵɵtemplate(24, dibexGridHeadersAndStylingComponent_ng_template_85_th_24_Template, 5, 3, "th", 46);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 47);
        i0.ɵɵtemplate(26, dibexGridHeadersAndStylingComponent_ng_template_85_td_26_Template, 2, 2, "td", 48);
        i0.ɵɵtemplate(27, dibexGridHeadersAndStylingComponent_ng_template_85_th_27_Template, 4, 1, "th", 49);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 50);
        i0.ɵɵtemplate(29, dibexGridHeadersAndStylingComponent_ng_template_85_td_29_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(30, dibexGridHeadersAndStylingComponent_ng_template_85_th_30_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 51);
        i0.ɵɵtemplate(32, dibexGridHeadersAndStylingComponent_ng_template_85_td_32_Template, 2, 2, "td", 52);
        i0.ɵɵtemplate(33, dibexGridHeadersAndStylingComponent_ng_template_85_th_33_Template, 5, 3, "th", 34);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 53);
        i0.ɵɵtemplate(35, dibexGridHeadersAndStylingComponent_ng_template_85_td_35_Template, 2, 2, "td", 54);
        i0.ɵɵtemplate(36, dibexGridHeadersAndStylingComponent_ng_template_85_th_36_Template, 4, 1, "th", 55);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 56);
        i0.ɵɵtemplate(38, dibexGridHeadersAndStylingComponent_ng_template_85_td_38_Template, 2, 2, "td", 57);
        i0.ɵɵtemplate(39, dibexGridHeadersAndStylingComponent_ng_template_85_th_39_Template, 5, 4, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 58);
        i0.ɵɵtemplate(41, dibexGridHeadersAndStylingComponent_ng_template_85_td_41_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(42, dibexGridHeadersAndStylingComponent_ng_template_85_th_42_Template, 5, 4, "th", 34);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(43, 59);
        i0.ɵɵtemplate(44, dibexGridHeadersAndStylingComponent_ng_template_85_td_44_Template, 2, 2, "td", 29);
        i0.ɵɵtemplate(45, dibexGridHeadersAndStylingComponent_ng_template_85_th_45_Template, 1, 1, "th", 30);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(46, 22);
        i0.ɵɵtemplate(47, dibexGridHeadersAndStylingComponent_ng_template_85_th_47_Template, 2, 2, "th", 23);
        i0.ɵɵtemplate(48, dibexGridHeadersAndStylingComponent_ng_template_85_td_48_Template, 2, 1, "td", 194);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(49, 60);
        i0.ɵɵtemplate(50, dibexGridHeadersAndStylingComponent_ng_template_85_th_50_Template, 2, 2, "th", 195);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(51, 62);
        i0.ɵɵtemplate(52, dibexGridHeadersAndStylingComponent_ng_template_85_th_52_Template, 2, 2, "th", 63);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(53, dibexGridHeadersAndStylingComponent_ng_template_85_tr_53_Template, 1, 3, "tr", 196);
        i0.ɵɵpipe(54, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r46 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r46.selectionDataSource);
        i0.ɵɵadvance(53);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(54, 2, ctx_r46.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i18 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i19 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i20 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a2) { return { "padding": "6px 10px", "width": "70px", "background-color": a2 }; };
            _c1 = function (a1) { return { "padding": "6px 10px", "background-color": a1 }; };
            _c2 = function (a0) { return { visibility: a0 }; };
            _c3 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c4 = function () { return [10, 20, 50, 100]; };
            _c5 = function (a0) { return { "dib-editor": a0 }; };
            _c6 = function () { return ["_dibBusy"]; };
            _c7 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexGridHeadersAndStylingComponent = class dibexGridHeadersAndStylingComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 183, name: 'dibexGridHeadersAndStyling', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*5114'] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'start_date', 'updated', 'phone', 'email', 'country', 'notes',]);
                allColumnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'start_date', 'updated', 'phone', 'email', 'country', 'notes',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexGridHeadersAndStyling');
                    this.containerName = 'dibexGridHeadersAndStyling'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { country: { itemId: 4554, type: 'text', fieldAlias: 'country', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: 'USA', dataType: 'text', contentType: 'text', changeUrl: false }, notes: { itemId: 4555, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, id: { itemId: 4558, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 4559, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, start_date: { itemId: 4561, type: 'date', fieldAlias: 'start_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, updated: { itemId: 4562, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, phone: { itemId: 4564, type: 'text', fieldAlias: 'phone', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 4565, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, };
                    this.model.$formGroup.addControl('country', this.model.modelItems.country.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.addControl('phone', this.model.modelItems.phone.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'colHdrMain', 'colHdrContactDetails', 'country', 'notes']));
                    this.columnHeaders.addArray('2', new shared_3.DibArray(['colHdrIdName', 'colHdrDates', 'phone', 'email']));
                    this.columnHeaders.addArray('3', new shared_3.DibArray(['id', 'name', 'start_date', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexGridHeadersAndStyling`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexGridHeadersAndStyling`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexGridHeadersAndStyling`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['country'] = { contentType: "text", type: "none", defaultValue: "USA", listId: 4554 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 4555 };
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4558 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4559 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 4561 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 4562 };
                    formDefaultsConfigs['phone'] = { contentType: "text", type: "none", defaultValue: "", listId: 4564 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 4565 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), country: new forms_2.FormControl(this.calculateInitialColumnValue(row, "country", "none", false, formDefaults['country'], 4554, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 4555, "text"), { validators: [], updateOn: 'blur' }), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4558, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 4559, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 4561, "date"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 4562, "datetime"), { validators: [], updateOn: 'blur' }), phone: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone", "none", false, formDefaults['phone'], 4564, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 4565, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexGridHeadersAndStyling', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexGridHeadersAndStyling' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexGridHeadersAndStylingComponent_Factory(t) { return new (t || dibexGridHeadersAndStylingComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexGridHeadersAndStylingComponent, selectors: [["dibex-grid-headers-and-styling"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 87, vars: 35, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5114", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexGridHeadersAndStyling", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci4542", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 0px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci4543", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci4549", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci4547", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4545", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci4546", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci4544", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci4548", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci4550", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "background-color: darkgrey", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "background-color: white; color:blue; text-align: left;width:90px", 4, "matHeaderCellDef"], ["matColumnDef", "btnDoSomething"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "country"], ["mat-header-cell", "", "style", "background-color: aliceblue; text-align: center;", 4, "matHeaderCellDef"], ["matColumnDef", "notes"], ["mat-header-cell", "", "style", "background-color: lightsteelblue; text-align: center;", 4, "matHeaderCellDef"], ["matColumnDef", "colHdrMain"], ["mat-cell", "", "style", "padding: 2px; text-align: center; background: grey;font-size: larger; color: orange;", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; text-align: center; background: grey;font-size: larger; color: orange;", 4, "matHeaderCellDef"], ["matColumnDef", "colHdrIdName"], ["mat-cell", "", "style", "padding: 2px; text-align: center; background: darkcyan; color: white;", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; text-align: center; background: darkcyan; color: white;", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["mat-cell", "", 3, "formGroup", "ngStyle", 4, "matCellDef"], ["mat-header-cell", "", "style", "background-color: aliceblue; text-align: center;transform: rotate(-45deg) translateY(-8px)", 4, "matHeaderCellDef"], ["matColumnDef", "name"], ["mat-cell", "", "style", "padding: 2px; width:200px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "background-color: lightsteelblue; text-align: center;font-style:italic", 4, "matHeaderCellDef"], ["matColumnDef", "colHdrDates"], ["mat-cell", "", "style", "padding: 2px; text-align: center; background: lightcoral", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "background-color: lightblue; text-align: center;", 4, "matHeaderCellDef"], ["matColumnDef", "start_date"], ["matColumnDef", "updated"], ["mat-cell", "", "style", "background-color: lightyellow; color:blue; border: solid lightgrey 1px", 3, "formGroup", 4, "matCellDef"], ["matColumnDef", "colHdrContactDetails"], ["mat-cell", "", "style", "padding: 2px; text-align: center; background: white", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; text-align: center; background: white", 4, "matHeaderCellDef"], ["matColumnDef", "phone"], ["mat-cell", "", "style", "background-color: pink; color:purple; border: solid lightgrey 1px", 3, "formGroup", 4, "matCellDef"], ["matColumnDef", "email"], ["matColumnDef", "btnDoSomething2"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexGridHeadersAndStyling", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci4545", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4546", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci4548", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "background-color", "darkgrey", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "0 1 0%"], [2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap"], ["mat-mini-fab", "", "color", "primary", "id", "ci4553", "dibComponent", "button", "type", "button"], ["src", "edit"], ["mat-mini-fab", "", "color", "accent", "id", "ci5119", "dibComponent", "button", "type", "button"], ["src", "search"], ["mat-header-cell", "", 2, "background-color", "white", "color", "blue", "text-align", "left", "width", "90px"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "button", "type", "button"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "country", "maxlength", "30", "name", "country"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "background-color", "aliceblue", "text-align", "center"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4554", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "country", "name", "country", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputTextArea"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "5", "cdkAutosizeMaxRows", "6", "matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "background-color", "lightsteelblue", "text-align", "center"], ["id", "ci4555", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "text-align", "center", "background", "grey", "font-size", "larger", "color", "orange", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%", "text-align", "center", "background", "grey", "font-size", "larger", "color", "orange"], ["id", "ci4557", "dibComponent", "columnHeader", 2, "flex", "1 1 0%", "text-align", "center", "background", "darkcyan", "color", "white"], ["id", "ci4558", "dibComponent", "inputNumber", "item-alias", "id", "appearance", "standard", 2, "width", "70px !important", "flex", "0 1 0%", "text-align", "center"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["id", "ci4559", "dibComponent", "inputText", "appearance", "standard", 2, "width", "200px !important", "flex", "0 1 auto"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "80", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4560", "dibComponent", "columnHeader", 2, "flex", "1 1 0%", "text-align", "center", "background", "lightcoral"], ["datepicker", "", "id", "ci4561", "dibComponent", "datePicker", "appearance", "standard"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "placeholder", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker4561", ""], ["id", "ci4562", "dibComponent", "timeDatePicker", "appearance", "standard", 2, "flex", "0 1 auto"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker4562", ""], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "text-align", "center", "background", "grey", "font-size", "larger", "color", "orange"], ["mat-cell", "", 2, "padding", "2px", "text-align", "center", "background", "darkcyan", "color", "white", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%", "text-align", "center", "background", "darkcyan", "color", "white"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "text-align", "center", "background", "darkcyan", "color", "white"], ["mat-cell", "", 3, "formGroup", "ngStyle"], [1, "dib-cell", 2, "width", "70px", "text-align", "center"], ["dibComponent", "inputNumber", "item-alias", "id", 2, "width", "70px !important", "flex", "0 1 0%", "text-align", "center"], ["mat-header-cell", "", 2, "background-color", "aliceblue", "text-align", "center", "transform", "rotate(-45deg) translateY(-8px)"], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["id", "ci4558", "dibComponent", "inputText", "item-alias", "id", 2, "flex", "0 1 0%"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "width", "200px", 3, "formGroup"], [1, "dib-cell", 2, "width", "200px"], ["dibComponent", "inputText", 2, "width", "200px !important", "flex", "0 1 auto"], ["mat-header-cell", "", 2, "background-color", "lightsteelblue", "text-align", "center", "font-style", "italic"], ["id", "ci4559", "dibComponent", "inputText", 2, "flex", "0 1 auto"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "text-align", "center", "background", "lightcoral", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%", "text-align", "center", "background", "lightcoral"], ["mat-header-cell", "", 2, "background-color", "lightblue", "text-align", "center"], ["datepicker", "", "dibComponent", "datePicker"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["id", "ci4561", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "start_date", "name", "start_date", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "background-color", "lightyellow", "color", "blue", "border", "solid lightgrey 1px", 3, "formGroup"], ["dibComponent", "timeDatePicker", 2, "flex", "0 1 auto"], ["id", "ci4562", "dibComponent", "inputText", 2, "flex", "0 1 auto"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "text-align", "center", "background", "white", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%", "text-align", "center", "background", "white"], ["id", "ci4564", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "phone", "maxlength", "100", "name", "phone", 3, "keydown.enter", "keydown.esc"], ["id", "ci4565", "dibComponent", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "100", "name", "email", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "text-align", "center", "background", "white"], ["mat-cell", "", 2, "background-color", "pink", "color", "purple", "border", "solid lightgrey 1px", 3, "formGroup"], ["id", "ci4564", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "phone", "name", "phone", 3, "keydown.enter", "keydown.esc"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch", 3, "ngStyle"], ["id", "ci4565", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["mat-mini-fab", "", "color", "accent", "dibComponent", "button", "type", "button"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "text", "formControlName", "country", "maxlength", "30", "name", "country", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexGridHeadersAndStylingComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexGridHeadersAndStylingComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "div", 4);
                        i0.ɵɵelementContainerStart(5, 5);
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_Template_button_click_6_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(8, "span", 8);
                        i0.ɵɵpipe(9, "safeHtml");
                        i0.ɵɵelementStart(10, "button", 9);
                        i0.ɵɵlistener("click", function dibexGridHeadersAndStylingComponent_Template_button_click_10_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(11, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(12, dibexGridHeadersAndStylingComponent_button_12_Template, 2, 4, "button", 11);
                        i0.ɵɵtemplate(13, dibexGridHeadersAndStylingComponent_button_13_Template, 2, 4, "button", 12);
                        i0.ɵɵelement(14, "span", 13);
                        i0.ɵɵtemplate(15, dibexGridHeadersAndStylingComponent_div_15_Template, 5, 3, "div", 14);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(16, "mat-card", 15)(17, "mat-card-content", 16);
                        i0.ɵɵelementContainerStart(18, 5);
                        i0.ɵɵelementStart(19, "div", 17, 18)(21, "form", 19);
                        i0.ɵɵelementContainerStart(22, 20);
                        i0.ɵɵelementStart(23, "table", 21);
                        i0.ɵɵelementContainerStart(24, 22);
                        i0.ɵɵtemplate(25, dibexGridHeadersAndStylingComponent_th_25_Template, 2, 2, "th", 23);
                        i0.ɵɵtemplate(26, dibexGridHeadersAndStylingComponent_td_26_Template, 2, 1, "td", 24);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(27, 25);
                        i0.ɵɵtemplate(28, dibexGridHeadersAndStylingComponent_td_28_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(29, dibexGridHeadersAndStylingComponent_th_29_Template, 4, 1, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(30, 28);
                        i0.ɵɵtemplate(31, dibexGridHeadersAndStylingComponent_td_31_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(32, dibexGridHeadersAndStylingComponent_th_32_Template, 1, 1, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(33, 31);
                        i0.ɵɵtemplate(34, dibexGridHeadersAndStylingComponent_td_34_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(35, dibexGridHeadersAndStylingComponent_th_35_Template, 5, 4, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(36, 33);
                        i0.ɵɵtemplate(37, dibexGridHeadersAndStylingComponent_td_37_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(38, dibexGridHeadersAndStylingComponent_th_38_Template, 5, 4, "th", 34);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(39, 35);
                        i0.ɵɵtemplate(40, dibexGridHeadersAndStylingComponent_td_40_Template, 2, 2, "td", 36);
                        i0.ɵɵtemplate(41, dibexGridHeadersAndStylingComponent_th_41_Template, 6, 1, "th", 37);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(42, 38);
                        i0.ɵɵtemplate(43, dibexGridHeadersAndStylingComponent_td_43_Template, 2, 2, "td", 39);
                        i0.ɵɵtemplate(44, dibexGridHeadersAndStylingComponent_th_44_Template, 4, 1, "th", 40);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(45, 41);
                        i0.ɵɵtemplate(46, dibexGridHeadersAndStylingComponent_td_46_Template, 2, 5, "td", 42);
                        i0.ɵɵtemplate(47, dibexGridHeadersAndStylingComponent_th_47_Template, 5, 3, "th", 43);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(48, 44);
                        i0.ɵɵtemplate(49, dibexGridHeadersAndStylingComponent_td_49_Template, 2, 2, "td", 45);
                        i0.ɵɵtemplate(50, dibexGridHeadersAndStylingComponent_th_50_Template, 5, 3, "th", 46);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(51, 47);
                        i0.ɵɵtemplate(52, dibexGridHeadersAndStylingComponent_td_52_Template, 2, 2, "td", 48);
                        i0.ɵɵtemplate(53, dibexGridHeadersAndStylingComponent_th_53_Template, 4, 1, "th", 49);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(54, 50);
                        i0.ɵɵtemplate(55, dibexGridHeadersAndStylingComponent_td_55_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(56, dibexGridHeadersAndStylingComponent_th_56_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(57, 51);
                        i0.ɵɵtemplate(58, dibexGridHeadersAndStylingComponent_td_58_Template, 2, 2, "td", 52);
                        i0.ɵɵtemplate(59, dibexGridHeadersAndStylingComponent_th_59_Template, 5, 3, "th", 34);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(60, 53);
                        i0.ɵɵtemplate(61, dibexGridHeadersAndStylingComponent_td_61_Template, 2, 2, "td", 54);
                        i0.ɵɵtemplate(62, dibexGridHeadersAndStylingComponent_th_62_Template, 4, 1, "th", 55);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(63, 56);
                        i0.ɵɵtemplate(64, dibexGridHeadersAndStylingComponent_td_64_Template, 2, 2, "td", 57);
                        i0.ɵɵtemplate(65, dibexGridHeadersAndStylingComponent_th_65_Template, 5, 4, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(66, 58);
                        i0.ɵɵtemplate(67, dibexGridHeadersAndStylingComponent_td_67_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(68, dibexGridHeadersAndStylingComponent_th_68_Template, 5, 4, "th", 34);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(69, 59);
                        i0.ɵɵtemplate(70, dibexGridHeadersAndStylingComponent_td_70_Template, 2, 2, "td", 29);
                        i0.ɵɵtemplate(71, dibexGridHeadersAndStylingComponent_th_71_Template, 1, 1, "th", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(72, 60);
                        i0.ɵɵtemplate(73, dibexGridHeadersAndStylingComponent_th_73_Template, 2, 2, "th", 61);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(74, 62);
                        i0.ɵɵtemplate(75, dibexGridHeadersAndStylingComponent_th_75_Template, 2, 2, "th", 63);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(76, dibexGridHeadersAndStylingComponent_ng_container_76_Template, 3, 3, "ng-container", 64);
                        i0.ɵɵtemplate(77, dibexGridHeadersAndStylingComponent_tr_77_Template, 1, 3, "tr", 65);
                        i0.ɵɵtemplate(78, dibexGridHeadersAndStylingComponent_tr_78_Template, 1, 3, "tr", 65);
                        i0.ɵɵtemplate(79, dibexGridHeadersAndStylingComponent_tr_79_Template, 1, 4, "tr", 66);
                        i0.ɵɵpipe(80, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(81, dibexGridHeadersAndStylingComponent_81_Template, 1, 1, null, 67);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(82, "div", null, 68);
                        i0.ɵɵtemplate(84, dibexGridHeadersAndStylingComponent_mat_toolbar_84_Template, 6, 3, "mat-toolbar", 67);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(85, dibexGridHeadersAndStylingComponent_ng_template_85_Template, 55, 4, "ng-template", null, 69, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r43 = i0.ɵɵreference(83);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(31, _c5, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5114");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "4542");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(9, 27, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4550");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r43);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(53);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(33, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(34, _c7));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(80, 29, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.CdkTextareaAutosize, i14.MatProgressBar, i15.MatToolbar, i15.MatToolbarRow, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i18.MatTable, i18.MatHeaderCellDef, i18.MatHeaderRowDef, i18.MatColumnDef, i18.MatCellDef, i18.MatRowDef, i18.MatHeaderCell, i18.MatCell, i18.MatHeaderRow, i18.MatRow, i19.MatSort, i19.MatSortHeader, i20.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexGridHeadersAndStyling'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexGridHeadersAndStylingComponent.prototype, "reloadContainer", null);
            exports_1("dibexGridHeadersAndStylingComponent", dibexGridHeadersAndStylingComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridHeadersAndStylingComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-grid-headers-and-styling', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5114 dibComponent=subcontainer   ><ng-container [dibPort]="'5114'" parentContainerName=dibexGridHeadersAndStyling  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><div   style="  padding:5px 10px 0px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  " id=ci4542 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4542'" ><button   mat-mini-fab color=accent  id=ci4543 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><span  id=ci4549 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci4547 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4545 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4546 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci4544 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci4548 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Grid Headers And Styling: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci4550 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4550'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexGridHeadersAndStyling" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="background-color: darkgrey" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 0 1 0%;  " dibComponent=columnHeader  ><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;" ><ng-container [dibPort]="'4552'" ><button  mat-mini-fab color=primary  id=ci4553 dibComponent=button   style="  "  type=button  ><dib-icon src=edit ></dib-icon></button><button  mat-mini-fab color=accent  id=ci5119 dibComponent=button   style="  "  type=button  ><dib-icon src=search ></dib-icon></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="3"  style="background-color: white; color:blue; text-align: left;width:90px" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Edit  </div></div></th></ng-container><ng-container matColumnDef=btnDoSomething  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   style="  "  type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'" ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('country', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="3"  style="background-color: aliceblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4554 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=5  cdkAutosizeMaxRows=6    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="3"  style="background-color: lightsteelblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4555 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=colHdrMain  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: grey;font-size: larger; color: orange;" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: grey;font-size: larger; color: orange;" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4556'" ><div   style="  flex: 1 1 0%;  text-align: center; background: darkcyan; color: white;" id=ci4557 dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4557'" ><mat-form-field  id=ci4558 dibComponent=inputNumber   style="  width:70px !important;   flex: 0 1 0%;  text-align:center;"  item-alias=id   appearance=standard  ><mat-label >Id</mat-label><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',model.$formGroup)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4559 dibComponent=inputText   style="  width:200px !important;   flex: 0 1 auto;  "  appearance=standard  ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></div><div   style="  flex: 1 1 0%;  text-align: center; background: lightcoral" id=ci4560 dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4560'" ><mat-form-field datepicker id=ci4561 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>Start Date</mat-label><input   matInput [matDatepicker]="datePicker4561"   [placeholder]="'Start Date'"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4561.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4561" ></mat-datepicker-toggle><mat-datepicker #datePicker4561 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field><mat-form-field  id=ci4562 dibComponent=timeDatePicker   style="  flex: 0 1 auto;  "  appearance=standard  ><mat-datepicker-toggle matPrefix [for]="picker4562"></mat-datepicker-toggle><mat-label >Updated</mat-label><input   matInput   [ngxMatDatetimePicker]="picker4562"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4562></ngx-mat-datetime-picker></mat-form-field></ng-container></div></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="4"   style="padding:2px; text-align:left; vertical-align:top; text-align: center; background: grey;font-size: larger; color: orange;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div ><i><b>Main Fields</b></i></div></div></th></ng-container><ng-container matColumnDef=colHdrIdName  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: darkcyan; color: white;" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: darkcyan; color: white;" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4557'" ><mat-form-field  id=ci4558 dibComponent=inputNumber   style="  width:70px !important;   flex: 0 1 0%;  text-align:center;"  item-alias=id   appearance=standard  ><mat-label >Id</mat-label><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',model.$formGroup)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4559 dibComponent=inputText   style="  width:200px !important;   flex: 0 1 auto;  "  appearance=standard  ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; text-align: center; background: darkcyan; color: white;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Id/Name  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  [ngStyle]="{'padding': '6px 10px', 'width':'70px', 'background-color': (rowForm.getRawValue().name < 'D' ? 'red' : (rowForm.getRawValue().name < 'M' ? 'yellow' : 'blue'))}" ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:70px;   text-align:center;"  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:70px !important;   flex: 0 1 0%;  text-align:center;"  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: aliceblue; text-align: center;transform: rotate(-45deg) translateY(-8px)" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4558 dibComponent=inputText   style="  flex: 0 1 0%;  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:200px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:200px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:200px !important;   flex: 0 1 auto;  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: lightsteelblue; text-align: center;font-style:italic" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4559 dibComponent=inputText   style="  flex: 0 1 auto;  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=colHdrDates  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: lightcoral" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: lightcoral" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4560'" ><mat-form-field datepicker id=ci4561 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>Start Date</mat-label><input   matInput [matDatepicker]="datePicker4561"   [placeholder]="'Start Date'"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4561.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4561" ></mat-datepicker-toggle><mat-datepicker #datePicker4561 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field><mat-form-field  id=ci4562 dibComponent=timeDatePicker   style="  flex: 0 1 auto;  "  appearance=standard  ><mat-datepicker-toggle matPrefix [for]="picker4562"></mat-datepicker-toggle><mat-label >Updated</mat-label><input   matInput   [ngxMatDatetimePicker]="picker4562"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4562></ngx-mat-datetime-picker></mat-form-field></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="background-color: lightblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Dates  </div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4561"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4561.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4561" ></mat-datepicker-toggle><mat-datepicker #datePicker4561 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: aliceblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4561 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="background-color: lightyellow; color:blue; border: solid lightgrey 1px" ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  flex: 0 1 auto;  " ><mat-datepicker-toggle matPrefix [for]="picker4562"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4562"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4562></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: lightsteelblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4562 dibComponent=inputText   style="  flex: 0 1 auto;  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=colHdrContactDetails  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: white" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: white" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4563'" ><mat-form-field id=ci4564 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4565 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; text-align: center; background: white" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Contact Details  </div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="background-color: pink; color:purple; border: solid lightgrey 1px" ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="background-color: aliceblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4564 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span [ngStyle]="{'padding': '6px 10px', 'background-color': (row.name < 'D' ? 'red' : (row.name < 'M' ? 'yellow' : 'blue'))}" style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="background-color: lightsteelblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4565 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=btnDoSomething2  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=accent  dibComponent=button   style="  "  type=button  ><dib-icon src=search ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexGridHeadersAndStyling><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="background-color: darkgrey" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 0 1 0%;  " dibComponent=columnHeader  ><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;" ><ng-container [dibPort]="'4552'" ><button  mat-mini-fab color=primary  id=ci4553 dibComponent=button   style="  "  type=button  ><dib-icon src=edit ></dib-icon></button><button  mat-mini-fab color=accent  id=ci5119 dibComponent=button   style="  "  type=button  ><dib-icon src=search ></dib-icon></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="3"  style="background-color: white; color:blue; text-align: left;width:90px" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Edit  </div></div></th></ng-container><ng-container matColumnDef=btnDoSomething  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   style="  "  type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="3"  style="background-color: aliceblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4554 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=5  cdkAutosizeMaxRows=6    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="3"  style="background-color: lightsteelblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4555 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=colHdrMain  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: grey;font-size: larger; color: orange;" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: grey;font-size: larger; color: orange;" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4556'" ><div   style="  flex: 1 1 0%;  text-align: center; background: darkcyan; color: white;" id=ci4557 dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4557'" ><mat-form-field  id=ci4558 dibComponent=inputNumber   style="  width:70px !important;   flex: 0 1 0%;  text-align:center;"  item-alias=id   appearance=standard  ><mat-label >Id</mat-label><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',model.$formGroup)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4559 dibComponent=inputText   style="  width:200px !important;   flex: 0 1 auto;  "  appearance=standard  ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></div><div   style="  flex: 1 1 0%;  text-align: center; background: lightcoral" id=ci4560 dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4560'" ><mat-form-field datepicker id=ci4561 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>Start Date</mat-label><input   matInput [matDatepicker]="datePicker4561"   [placeholder]="'Start Date'"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4561.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4561" ></mat-datepicker-toggle><mat-datepicker #datePicker4561 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field><mat-form-field  id=ci4562 dibComponent=timeDatePicker   style="  flex: 0 1 auto;  "  appearance=standard  ><mat-datepicker-toggle matPrefix [for]="picker4562"></mat-datepicker-toggle><mat-label >Updated</mat-label><input   matInput   [ngxMatDatetimePicker]="picker4562"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4562></ngx-mat-datetime-picker></mat-form-field></ng-container></div></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="4"   style="padding:2px; text-align:left; vertical-align:top; text-align: center; background: grey;font-size: larger; color: orange;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div ><i><b>Main Fields</b></i></div></div></th></ng-container><ng-container matColumnDef=colHdrIdName  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: darkcyan; color: white;" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: darkcyan; color: white;" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4557'" ><mat-form-field  id=ci4558 dibComponent=inputNumber   style="  width:70px !important;   flex: 0 1 0%;  text-align:center;"  item-alias=id   appearance=standard  ><mat-label >Id</mat-label><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',model.$formGroup)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4559 dibComponent=inputText   style="  width:200px !important;   flex: 0 1 auto;  "  appearance=standard  ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; text-align: center; background: darkcyan; color: white;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Id/Name  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  [ngStyle]="{'padding': '6px 10px', 'width':'70px', 'background-color': (rowForm.getRawValue().name < 'D' ? 'red' : (rowForm.getRawValue().name < 'M' ? 'yellow' : 'blue'))}" ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:70px;   text-align:center;"  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:70px !important;   flex: 0 1 0%;  text-align:center;"  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: aliceblue; text-align: center;transform: rotate(-45deg) translateY(-8px)" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4558 dibComponent=inputText   style="  flex: 0 1 0%;  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:200px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:200px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:200px !important;   flex: 0 1 auto;  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: lightsteelblue; text-align: center;font-style:italic" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4559 dibComponent=inputText   style="  flex: 0 1 auto;  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=colHdrDates  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: lightcoral" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: lightcoral" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4560'" ><mat-form-field datepicker id=ci4561 dibComponent=datePicker   style="  "  appearance=standard  ><mat-label>Start Date</mat-label><input   matInput [matDatepicker]="datePicker4561"   [placeholder]="'Start Date'"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4561.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4561" ></mat-datepicker-toggle><mat-datepicker #datePicker4561 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field><mat-form-field  id=ci4562 dibComponent=timeDatePicker   style="  flex: 0 1 auto;  "  appearance=standard  ><mat-datepicker-toggle matPrefix [for]="picker4562"></mat-datepicker-toggle><mat-label >Updated</mat-label><input   matInput   [ngxMatDatetimePicker]="picker4562"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4562></ngx-mat-datetime-picker></mat-form-field></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="background-color: lightblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Dates  </div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4561"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4561.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4561" ></mat-datepicker-toggle><mat-datepicker #datePicker4561 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: aliceblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4561 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="background-color: lightyellow; color:blue; border: solid lightgrey 1px" ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  flex: 0 1 auto;  " ><mat-datepicker-toggle matPrefix [for]="picker4562"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4562"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4562></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="background-color: lightsteelblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4562 dibComponent=inputText   style="  flex: 0 1 auto;  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=colHdrContactDetails  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; text-align: center; background: white" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  text-align: center; background: white" dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4563'" ><mat-form-field id=ci4564 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4565 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; text-align: center; background: white" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Contact Details  </div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="background-color: pink; color:purple; border: solid lightgrey 1px" ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="background-color: aliceblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4564 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span [ngStyle]="{'padding': '6px 10px', 'background-color': (row.name < 'D' ? 'red' : (row.name < 'M' ? 'yellow' : 'blue'))}" style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="background-color: lightsteelblue; text-align: center;" ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4565 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=btnDoSomething2  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=accent  dibComponent=button   style="  "  type=button  ><dib-icon src=search ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.rowspan]="2"  style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexGridHeadersAndStylingModule = class dibexGridHeadersAndStylingModule {
                static entry = dibexGridHeadersAndStylingComponent;
                static ɵfac = function dibexGridHeadersAndStylingModule_Factory(t) { return new (t || dibexGridHeadersAndStylingModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexGridHeadersAndStylingModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexGridHeadersAndStylingModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridHeadersAndStylingModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexGridHeadersAndStylingComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexGridHeadersAndStylingModule, { declarations: [dibexGridHeadersAndStylingComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
