System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/autocomplete", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, autocomplete_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, _c0, _c1, _c2, _c3, _c4, _c5, _c6, importsRequired, dibexTestClientContactGridComponent, containerModules, dibexTestClientContactGridModule;
    var __moduleName = context_1 && context_1.id;
    function dibexTestClientContactGridComponent_button_12_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 50);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_button_12_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestClientContactGridComponent_button_13_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 52);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r45.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestClientContactGridComponent_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r47 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r47.page.toRecord, "\u00A0of\u00A0", ctx_r47.page.records, "");
    } }
    function dibexTestClientContactGridComponent_div_15_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r48 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r48.page.totalRecords, ")");
    } }
    function dibexTestClientContactGridComponent_div_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 54);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_div_15_span_2_Template, 2, 2, "span", 47);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_div_15_span_4_Template, 2, 1, "span", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Test Client Contacts: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexTestClientContactGridComponent_th_25_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 55)(1, "mat-checkbox", 56);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_25_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r49.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexTestClientContactGridComponent_td_26_Template(rf, ctx) { if (rf & 1) {
        const _r54 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 57)(1, "mat-checkbox", 58);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_26_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexTestClientContactGridComponent_td_26_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r54); const row_r51 = restoredCtx.$implicit; const ctx_r53 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r53.selection.toggle(row_r51) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r51 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r51));
    } }
    function dibexTestClientContactGridComponent_td_28_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 60);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 61);
        i0.ɵɵelement(4, "dib-icon", 62);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4458");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestClientContactGridComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_28_ng_container_1_Template, 5, 5, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r55 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r55);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r55.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 63);
    } }
    function dibexTestClientContactGridComponent_td_31_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 64);
        i0.ɵɵelement(2, "dib-icon", 62);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestClientContactGridComponent_td_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_31_ng_container_1_Template, 3, 4, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r59 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r59);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r59.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 63);
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r64 = i0.ɵɵnextContext(2).index;
        const ctx_r67 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r67.findColumnDisplayValue(rowIndex_r64, "id", "none", "number"), "");
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r76 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r76); const ctx_r75 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r75.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 76);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 69);
        i0.ɵɵelement(2, "input", 70);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 73);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r63 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r68 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.hasError("id", "required", rowForm_r63));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.view.recordStatus == "update" && ctx_r68.notSaved("id", rowForm_r63));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.view.recordStatus == "update" && ctx_r68.isSaved("id", rowForm_r63));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.isInvalid("id", rowForm_r63));
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_34_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_34_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_34_ng_container_1_span_4_Template, 7, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_34_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r63 = i0.ɵɵnextContext().$implicit;
        const ctx_r65 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r65.excelEditing == false && rowForm_r63.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r65.excelEditing == true || rowForm_r63.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r65.excelEditing == false && rowForm_r63.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_34_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r63 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r63);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r63.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_35_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_35_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_35_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r79 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r79.editorOpen);
    } }
    function dibexTestClientContactGridComponent_th_35_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_35_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r86 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_35_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r86); const ctx_r85 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r85.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_35_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_35_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r88 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 86)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 87);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_35_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r88); const ctx_r87 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r87.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_35_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r88); const ctx_r89 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r89.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_35_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_35_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r81 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r81.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.view.recordStatus == "update" && ctx_r81.notSaved("id", ctx_r81.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.view.recordStatus == "update" && ctx_r81.isSaved("id", ctx_r81.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_35_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_35_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_35_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_37_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r91 = i0.ɵɵnextContext(2).index;
        const ctx_r94 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r94.findColumnDisplayValue(rowIndex_r91, "client_id", "dropdown", "select"), "");
    } }
    function dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_button_6_Template(rf, ctx) { if (rf & 1) {
        const _r106 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 99);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_button_6_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r106); i0.ɵɵnextContext(); const _r98 = i0.ɵɵreference(4); const _r99 = i0.ɵɵreference(5); const rowForm_r90 = i0.ɵɵnextContext(2).$implicit; const ctx_r104 = i0.ɵɵnextContext(); ctx_r104.clearDropdown(rowForm_r90.get("client_id"), $event, ctx_r104.lists.list4461, _r98); return i0.ɵɵresetView(_r99.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_mat_progress_bar_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 100);
    } }
    function dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_mat_option_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 101);
    } if (rf & 2) {
        const item_r107 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r107.id == "0"))("value", item_r107)("innerHtml", item_r107.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r109 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "div", 88)(2, "mat-form-field", 89);
        i0.ɵɵelement(3, "input", 90, 91);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_button_6_Template, 3, 0, "button", 92);
        i0.ɵɵelementStart(7, "mat-autocomplete", 93, 94);
        i0.ɵɵlistener("opened", function dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_Template_mat_autocomplete_opened_7_listener() { i0.ɵɵrestoreView(_r109); const ctx_r108 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r108.lists.list4461.refresh()); });
        i0.ɵɵtemplate(9, dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_mat_progress_bar_9_Template, 1, 0, "mat-progress-bar", 95);
        i0.ɵɵtemplate(10, dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_mat_option_10_Template, 1, 5, "mat-option", 96);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(11, "button", 97);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_Template_button_click_11_listener($event) { i0.ɵɵrestoreView(_r109); const row_r93 = i0.ɵɵnextContext().ngIf; const ctx_r110 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r110.goToForDropdowns("dibexTestClientForm", "", true, "client_id", "id", ctx_r110.model, row_r93, $event)); });
        i0.ɵɵelement(12, "dib-icon", 98);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r101 = i0.ɵɵreference(8);
        const rowForm_r90 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r95 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("matAutocomplete", _r101);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r95.showDropdownClearButton(rowForm_r90.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r95.dropdownValueTranslate.bind(ctx_r95, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r95.lists.list4461.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r95.lists.list4461.lastItems);
    } }
    function dibexTestClientContactGridComponent_td_37_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        const _r114 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span")(1, "button", 97);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_37_ng_container_1_span_5_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r114); const row_r93 = i0.ɵɵnextContext().ngIf; const ctx_r113 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r113.goToForDropdowns("dibexTestClientForm", "", true, "client_id", "id", ctx_r113.model, row_r93, $event)); });
        i0.ɵɵelement(2, "dib-icon", 98);
        i0.ɵɵelementEnd()();
    } }
    function dibexTestClientContactGridComponent_td_37_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_37_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_37_ng_container_1_span_4_Template, 13, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_37_ng_container_1_span_5_Template, 3, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r90 = i0.ɵɵnextContext().$implicit;
        const ctx_r92 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r92.excelEditing == false && rowForm_r90.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.excelEditing == true || rowForm_r90.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.excelEditing == false && rowForm_r90.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_37_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r90 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r90);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r90.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_38_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_38_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_38_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r117 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r117.editorOpen);
    } }
    function dibexTestClientContactGridComponent_th_38_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_38_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r128 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 99);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_38_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r128); i0.ɵɵnextContext(); const _r121 = i0.ɵɵreference(5); const _r122 = i0.ɵɵreference(6); const ctx_r127 = i0.ɵɵnextContext(2); ctx_r127.clearDropdown(ctx_r127.model.modelItems.client_id.formControl, $event, ctx_r127.lists.list4461, _r121); return i0.ɵɵresetView(_r122.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestClientContactGridComponent_th_38_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 100);
    } }
    function dibexTestClientContactGridComponent_th_38_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 101);
    } if (rf & 2) {
        const item_r129 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r129.id == "0"))("value", item_r129)("innerHtml", item_r129.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestClientContactGridComponent_th_38_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r131 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 103, 91);
        i0.ɵɵtemplate(7, dibexTestClientContactGridComponent_th_38_div_4_button_7_Template, 3, 0, "button", 92);
        i0.ɵɵelementStart(8, "mat-autocomplete", 93, 94);
        i0.ɵɵlistener("opened", function dibexTestClientContactGridComponent_th_38_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r131); const ctx_r130 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r130.lists.list4461.refresh()); });
        i0.ɵɵtemplate(10, dibexTestClientContactGridComponent_th_38_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 95);
        i0.ɵɵtemplate(11, dibexTestClientContactGridComponent_th_38_div_4_mat_option_11_Template, 1, 5, "mat-option", 96);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r124 = i0.ɵɵreference(9);
        const ctx_r119 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r119.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r124);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r119.showDropdownClearButton(ctx_r119.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r119.dropdownValueTranslate.bind(ctx_r119, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r119.lists.list4461.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r119.lists.list4461.lastItems);
    } }
    function dibexTestClientContactGridComponent_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_38_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_38_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_38_div_4_Template, 12, 6, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r133 = i0.ɵɵnextContext(2).index;
        const ctx_r136 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r136.findColumnDisplayValue(rowIndex_r133, "first_name", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r145 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r145); const ctx_r144 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r144.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r147 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r147); const ctx_r146 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r146.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r147); const ctx_r148 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r148.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r132 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r137 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.hasError("first_name", "required", rowForm_r132));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.hasError("first_name", "maxlength", rowForm_r132));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.view.recordStatus == "update" && ctx_r137.notSaved("first_name", rowForm_r132));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.view.recordStatus == "update" && ctx_r137.isSaved("first_name", rowForm_r132));
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_40_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_40_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_40_ng_container_1_span_4_Template, 7, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_40_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r132 = i0.ɵɵnextContext().$implicit;
        const ctx_r134 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r134.excelEditing == false && rowForm_r132.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r134.excelEditing == true || rowForm_r132.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r134.excelEditing == false && rowForm_r132.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_40_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r132 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r132);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r132.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_41_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_41_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_41_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r151 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r151.editorOpen);
    } }
    function dibexTestClientContactGridComponent_th_41_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_41_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r158 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_41_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r158); const ctx_r157 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r157.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_41_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_41_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r160 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_41_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r160); const ctx_r159 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r159.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_41_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r160); const ctx_r161 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r161.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_41_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_41_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r153 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r153.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r153.view.recordStatus == "update" && ctx_r153.notSaved("first_name", ctx_r153.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r153.view.recordStatus == "update" && ctx_r153.isSaved("first_name", ctx_r153.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_41_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_41_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_41_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r163 = i0.ɵɵnextContext(2).index;
        const ctx_r166 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r166.findColumnDisplayValue(rowIndex_r163, "last_name", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r175 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r175); const ctx_r174 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r174.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r177 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r177); const ctx_r176 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r176.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r177); const ctx_r178 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r178.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r162 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r167 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.hasError("last_name", "required", rowForm_r162));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.hasError("last_name", "maxlength", rowForm_r162));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.view.recordStatus == "update" && ctx_r167.notSaved("last_name", rowForm_r162));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.view.recordStatus == "update" && ctx_r167.isSaved("last_name", rowForm_r162));
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_43_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_43_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_43_ng_container_1_span_4_Template, 7, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_43_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r162 = i0.ɵɵnextContext().$implicit;
        const ctx_r164 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r164.excelEditing == false && rowForm_r162.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r164.excelEditing == true || rowForm_r162.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r164.excelEditing == false && rowForm_r162.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_43_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r162 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r162);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r162.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_44_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_44_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_44_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r181 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r181.editorOpen);
    } }
    function dibexTestClientContactGridComponent_th_44_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_44_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r188 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_44_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r188); const ctx_r187 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r187.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_44_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_44_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r190 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_44_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r190); const ctx_r189 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r189.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_44_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r190); const ctx_r191 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r191.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_44_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_44_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r183 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r183.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r183.view.recordStatus == "update" && ctx_r183.notSaved("last_name", ctx_r183.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r183.view.recordStatus == "update" && ctx_r183.isSaved("last_name", ctx_r183.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_44_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_44_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_44_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_46_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r193 = i0.ɵɵnextContext(2).index;
        const ctx_r196 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r196.findColumnDisplayValue(rowIndex_r193, "position", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r204 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r204); const ctx_r203 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r203.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r206 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r206); const ctx_r205 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r205.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r206); const ctx_r207 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r207.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r192 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r197 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r197.hasError("position", "maxlength", rowForm_r192));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r197.view.recordStatus == "update" && ctx_r197.notSaved("position", rowForm_r192));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r197.view.recordStatus == "update" && ctx_r197.isSaved("position", rowForm_r192));
    } }
    function dibexTestClientContactGridComponent_td_46_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_46_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_46_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_46_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r192 = i0.ɵɵnextContext().$implicit;
        const ctx_r194 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r194.excelEditing == false && rowForm_r192.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r194.excelEditing == true || rowForm_r192.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r194.excelEditing == false && rowForm_r192.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_46_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r192 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r192);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r192.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_47_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Position ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_47_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_47_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r216 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_47_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r216); const ctx_r215 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r215.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_47_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_47_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r218 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_47_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r218); const ctx_r217 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r217.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_47_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r218); const ctx_r219 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r219.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_47_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_47_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r212 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r212.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r212.view.recordStatus == "update" && ctx_r212.notSaved("position", ctx_r212.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r212.view.recordStatus == "update" && ctx_r212.isSaved("position", ctx_r212.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_47_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_47_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_47_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_49_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r221 = i0.ɵɵnextContext(2).index;
        const ctx_r224 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r224.findColumnDisplayValue(rowIndex_r221, "email", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 150 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r232); const ctx_r231 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r231.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r234 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r234); const ctx_r233 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r233.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r234); const ctx_r235 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r235.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r220 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r225 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r225.hasError("email", "maxlength", rowForm_r220));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r225.view.recordStatus == "update" && ctx_r225.notSaved("email", rowForm_r220));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r225.view.recordStatus == "update" && ctx_r225.isSaved("email", rowForm_r220));
    } }
    function dibexTestClientContactGridComponent_td_49_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_49_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_49_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_49_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r220 = i0.ɵɵnextContext().$implicit;
        const ctx_r222 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r222.excelEditing == false && rowForm_r220.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r222.excelEditing == true || rowForm_r220.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r222.excelEditing == false && rowForm_r220.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_49_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r220 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r220);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r220.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_50_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_50_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_50_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r244 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_50_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r244); const ctx_r243 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r243.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_50_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_50_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r246 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_50_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r246); const ctx_r245 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r245.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_50_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r246); const ctx_r247 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r247.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_50_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_50_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r240 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r240.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r240.view.recordStatus == "update" && ctx_r240.notSaved("email", ctx_r240.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r240.view.recordStatus == "update" && ctx_r240.isSaved("email", ctx_r240.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_50_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_50_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_50_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_52_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r249 = i0.ɵɵnextContext(2).index;
        const ctx_r252 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r252.findColumnDisplayValue(rowIndex_r249, "phone_w", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r260 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r260); const ctx_r259 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r259.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r262 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r262); const ctx_r261 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r261.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r262); const ctx_r263 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r263.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r248 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r253 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r253.hasError("phone_w", "maxlength", rowForm_r248));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r253.view.recordStatus == "update" && ctx_r253.notSaved("phone_w", rowForm_r248));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r253.view.recordStatus == "update" && ctx_r253.isSaved("phone_w", rowForm_r248));
    } }
    function dibexTestClientContactGridComponent_td_52_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_52_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_52_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_52_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_52_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r248 = i0.ɵɵnextContext().$implicit;
        const ctx_r250 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r250.excelEditing == false && rowForm_r248.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r250.excelEditing == true || rowForm_r248.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r250.excelEditing == false && rowForm_r248.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_52_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r248 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r248);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r248.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_53_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Phone W ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_53_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Phone W");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_53_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r272 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_53_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r272); const ctx_r271 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r271.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_53_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_53_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r274 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "Phone W");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_53_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r274); const ctx_r273 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r273.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_53_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r274); const ctx_r275 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r275.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_53_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_53_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r268 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r268.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.notSaved("phone_w", ctx_r268.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.isSaved("phone_w", ctx_r268.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_53_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_53_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_53_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_55_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r277 = i0.ɵɵnextContext(2).index;
        const ctx_r280 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r280.findColumnDisplayValue(rowIndex_r277, "mobile", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r288 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r288); const ctx_r287 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r287.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r290 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r290); const ctx_r289 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r289.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r290); const ctx_r291 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r291.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r276 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r281 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r281.hasError("mobile", "maxlength", rowForm_r276));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r281.view.recordStatus == "update" && ctx_r281.notSaved("mobile", rowForm_r276));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r281.view.recordStatus == "update" && ctx_r281.isSaved("mobile", rowForm_r276));
    } }
    function dibexTestClientContactGridComponent_td_55_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_55_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_55_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_55_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_55_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r276 = i0.ɵɵnextContext().$implicit;
        const ctx_r278 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r278.excelEditing == false && rowForm_r276.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.excelEditing == true || rowForm_r276.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.excelEditing == false && rowForm_r276.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_55_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r276 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r276);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r276.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_56_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Mobile ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_56_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_56_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r300 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_56_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r300); const ctx_r299 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r299.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_56_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_56_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r302 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_56_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r302); const ctx_r301 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r301.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_56_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r302); const ctx_r303 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r303.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_56_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_56_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r296 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r296.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r296.view.recordStatus == "update" && ctx_r296.notSaved("mobile", ctx_r296.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r296.view.recordStatus == "update" && ctx_r296.isSaved("mobile", ctx_r296.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_56_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_56_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_56_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_58_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r305 = i0.ɵɵnextContext(2).index;
        const ctx_r308 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r308.findColumnDisplayValue(rowIndex_r305, "resigned", "none", "date"), "");
    } }
    function dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r316 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r316); const ctx_r315 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r315.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r318 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 123)(2, "input", 124);
        i0.ɵɵlistener("focus", function dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r318); const _r312 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r312.open()); })("keydown.enter", function dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r318); const ctx_r319 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r319.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r318); const ctx_r320 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r320.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 125)(4, "mat-datepicker", null, 126);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(7, dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r312 = i0.ɵɵreference(5);
        const rowForm_r304 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r309 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r312);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r312);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r309.view.recordStatus == "update" && ctx_r309.notSaved("resigned", rowForm_r304));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r309.view.recordStatus == "update" && ctx_r309.isSaved("resigned", rowForm_r304));
    } }
    function dibexTestClientContactGridComponent_td_58_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_58_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_58_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_58_ng_container_1_span_4_Template, 8, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_58_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r304 = i0.ɵɵnextContext().$implicit;
        const ctx_r306 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r306.excelEditing == false && rowForm_r304.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r306.excelEditing == true || rowForm_r304.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r306.excelEditing == false && rowForm_r304.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_58_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r304 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r304);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r304.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_59_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Resigned ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_59_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Resigned");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_59_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r329 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_59_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r329); const ctx_r328 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r328.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_59_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_59_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r331 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 127)(2, "mat-label");
        i0.ɵɵtext(3, "Resigned");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 128);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_59_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r331); const ctx_r330 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r330.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_59_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r331); const ctx_r332 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r332.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_59_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_59_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r325 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r325.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r325.view.recordStatus == "update" && ctx_r325.notSaved("resigned", ctx_r325.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r325.view.recordStatus == "update" && ctx_r325.isSaved("resigned", ctx_r325.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_59_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_59_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_59_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_61_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r334 = i0.ɵɵnextContext(2).index;
        const ctx_r337 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r337.findColumnDisplayValue(rowIndex_r334, "notes", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 250 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r345 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r345); const ctx_r344 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r344.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r347 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 129);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r347); const ctx_r346 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r346.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r347); const ctx_r348 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r348.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r333 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r338 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r338.hasError("notes", "maxlength", rowForm_r333));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r338.view.recordStatus == "update" && ctx_r338.notSaved("notes", rowForm_r333));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r338.view.recordStatus == "update" && ctx_r338.isSaved("notes", rowForm_r333));
    } }
    function dibexTestClientContactGridComponent_td_61_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_61_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_61_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_61_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_61_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r333 = i0.ɵɵnextContext().$implicit;
        const ctx_r335 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r335.excelEditing == false && rowForm_r333.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r335.excelEditing == true || rowForm_r333.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r335.excelEditing == false && rowForm_r333.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_61_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r333 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r333);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r333.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_62_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_62_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_62_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r357 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_62_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r357); const ctx_r356 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r356.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_62_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_62_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r359 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 130)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 131);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_62_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r359); const ctx_r358 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r358.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_62_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r359); const ctx_r360 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r360.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_62_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_62_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r353 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r353.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r353.view.recordStatus == "update" && ctx_r353.notSaved("notes", ctx_r353.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r353.view.recordStatus == "update" && ctx_r353.isSaved("notes", ctx_r353.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_62_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_62_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_62_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
    } }
    function dibexTestClientContactGridComponent_td_64_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r362 = i0.ɵɵnextContext(2).index;
        const ctx_r365 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r365.findColumnDisplayValue(rowIndex_r362, "updated", "none", "datetime"), "");
    } }
    function dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r373 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r373); const ctx_r372 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r372.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r375 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 132);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 125);
        i0.ɵɵelementStart(3, "input", 133);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r375); const ctx_r374 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r374.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r375); const ctx_r376 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r376.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 134);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r371 = i0.ɵɵreference(7);
        const rowForm_r361 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r366 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r371);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r371);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r366.view.recordStatus == "update" && ctx_r366.notSaved("updated", rowForm_r361));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r366.view.recordStatus == "update" && ctx_r366.isSaved("updated", rowForm_r361));
    } }
    function dibexTestClientContactGridComponent_td_64_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_td_64_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_td_64_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_td_64_ng_container_1_span_4_Template, 8, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_td_64_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r361 = i0.ɵɵnextContext().$implicit;
        const ctx_r363 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r363.excelEditing == false && rowForm_r361.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r363.excelEditing == true || rowForm_r361.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r363.excelEditing == false && rowForm_r361.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_td_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_td_64_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r361 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r361);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r361.getRawValue());
    } }
    function dibexTestClientContactGridComponent_th_65_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_65_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_65_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r385 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_th_65_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r385); const ctx_r384 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r384.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_65_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_th_65_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r387 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 135)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 136);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_th_65_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r387); const ctx_r386 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r386.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_th_65_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r387); const ctx_r388 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r388.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_th_65_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_th_65_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r381 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r381.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r381.view.recordStatus == "update" && ctx_r381.notSaved("updated", ctx_r381.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r381.view.recordStatus == "update" && ctx_r381.isSaved("updated", ctx_r381.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_th_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_th_65_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_th_65_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_th_65_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
    } }
    function dibexTestClientContactGridComponent_th_67_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 100);
    } }
    function dibexTestClientContactGridComponent_th_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 137);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_th_67_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 95);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r32.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r32.busy);
    } }
    function dibexTestClientContactGridComponent_th_69_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r390 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r390.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexTestClientContactGridComponent_th_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 138);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_th_69_span_1_Template, 2, 1, "span", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r33.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r33.busy && ctx_r33.tableDataSource.data.length == 0);
    } }
    function dibexTestClientContactGridComponent_ng_container_70_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 140);
    } }
    function dibexTestClientContactGridComponent_ng_container_70_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_container_70_tr_1_Template, 1, 0, "tr", 139);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r391 = ctx.$implicit;
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r34.columnHeaders.getArray(column_r391).items$));
    } }
    function dibexTestClientContactGridComponent_tr_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 141);
    } if (rf & 2) {
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r35.busy ? "visible" : "hidden"));
    } }
    function dibexTestClientContactGridComponent_tr_72_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 141);
    } if (rf & 2) {
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r36.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexTestClientContactGridComponent_tr_73_Template(rf, ctx) { if (rf & 1) {
        const _r396 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 142);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_tr_73_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r396); const row_r393 = restoredCtx.$implicit; const ctx_r395 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r395.rowClick(row_r393, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r393 = ctx.$implicit;
        const ctx_r37 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r37.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r37.isHighlighted(row_r393)));
    } }
    function dibexTestClientContactGridComponent_75_ng_template_0_Template(rf, ctx) { }
    function dibexTestClientContactGridComponent_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexTestClientContactGridComponent_75_ng_template_0_Template, 0, 0, "ng-template", 143);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r41 = i0.ɵɵreference(80);
        i0.ɵɵproperty("ngTemplateOutlet", _r41);
    } }
    function dibexTestClientContactGridComponent_mat_toolbar_78_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r402 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 149);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_mat_toolbar_78_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r402); const ctx_r401 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r401.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r398 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r398.numberOfSelectedItems + " ", "item", ctx_r398.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexTestClientContactGridComponent_mat_toolbar_78_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_mat_toolbar_78_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_mat_toolbar_78_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r406 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 150);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_mat_toolbar_78_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r406); const ctx_r405 = i0.ɵɵnextContext(2); ctx_r405.gridShowClipboardDefault = !ctx_r405.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r405.gridShowClipboardDefault && ctx_r405.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_mat_toolbar_78_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 47);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_mat_toolbar_78_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 47);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r399 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r399.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r399.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r399.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexTestClientContactGridComponent_mat_toolbar_78_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r409 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 151, 152);
        i0.ɵɵlistener("page", function dibexTestClientContactGridComponent_mat_toolbar_78_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r409); const ctx_r408 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r408.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r400 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r400.page.totalRecords)("pageSize", ctx_r400.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexTestClientContactGridComponent_mat_toolbar_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 144);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_mat_toolbar_78_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 145);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_mat_toolbar_78_button_3_Template, 4, 3, "button", 146);
        i0.ɵɵelement(4, "span", 147);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_mat_toolbar_78_mat_paginator_5_Template, 2, 4, "mat-paginator", 148);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r40.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r40.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 60);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 61);
        i0.ɵɵelement(4, "dib-icon", 62);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4458");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_2_ng_container_1_Template, 5, 5, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r441 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r441);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r441.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 63);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 64);
        i0.ɵɵelement(2, "dib-icon", 62);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_5_ng_container_1_Template, 3, 4, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r445 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r445);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r445.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 63);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r450 = i0.ɵɵnextContext(2).index;
        const ctx_r453 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r453.findColumnDisplayValue(rowIndex_r450, "id", "none", "number"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r461 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r461); const ctx_r460 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r460.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r463 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 69)(2, "input", 157);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r463); const ctx_r462 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r462.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r463); const ctx_r464 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r464.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r449 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r454 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.hasError("id", "required", rowForm_r449));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.view.recordStatus == "update" && ctx_r454.notSaved("id", rowForm_r449));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.view.recordStatus == "update" && ctx_r454.isSaved("id", rowForm_r449));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r449 = i0.ɵɵnextContext().$implicit;
        const ctx_r451 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == true || rowForm_r449.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_8_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r449 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r449);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r449.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_9_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r467 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r467.editorOpen);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r474 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r474); const ctx_r473 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r473.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r476 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 86)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 87);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r476); const ctx_r475 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r475.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r476); const ctx_r477 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r477.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r469 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r469.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.notSaved("id", ctx_r469.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.isSaved("id", ctx_r469.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_9_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_9_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_9_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r415 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r415.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r415.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r415.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r479 = i0.ɵɵnextContext(2).index;
        const ctx_r482 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r482.findColumnDisplayValue(rowIndex_r479, "client_id", "dropdown", "select"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_button_6_Template(rf, ctx) { if (rf & 1) {
        const _r494 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 99);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_button_6_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r494); i0.ɵɵnextContext(); const _r486 = i0.ɵɵreference(4); const _r487 = i0.ɵɵreference(5); const rowForm_r478 = i0.ɵɵnextContext(2).$implicit; const ctx_r492 = i0.ɵɵnextContext(2); ctx_r492.clearDropdown(rowForm_r478.get("client_id"), $event, ctx_r492.lists.list4461, _r486); return i0.ɵɵresetView(_r487.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_mat_progress_bar_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 100);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_mat_option_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 101);
    } if (rf & 2) {
        const item_r495 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r495.id == "0"))("value", item_r495)("innerHtml", item_r495.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r497 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "div", 88)(2, "mat-form-field", 89);
        i0.ɵɵelement(3, "input", 90, 91);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_button_6_Template, 3, 0, "button", 92);
        i0.ɵɵelementStart(7, "mat-autocomplete", 93, 94);
        i0.ɵɵlistener("opened", function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_Template_mat_autocomplete_opened_7_listener() { i0.ɵɵrestoreView(_r497); const ctx_r496 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r496.lists.list4461.refresh()); });
        i0.ɵɵtemplate(9, dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_mat_progress_bar_9_Template, 1, 0, "mat-progress-bar", 95);
        i0.ɵɵtemplate(10, dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_mat_option_10_Template, 1, 5, "mat-option", 96);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(11, "button", 97);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_Template_button_click_11_listener($event) { i0.ɵɵrestoreView(_r497); const row_r481 = i0.ɵɵnextContext().ngIf; const ctx_r498 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r498.goToForDropdowns("dibexTestClientForm", "", true, "client_id", "id", ctx_r498.model, row_r481, $event)); });
        i0.ɵɵelement(12, "dib-icon", 98);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r489 = i0.ɵɵreference(8);
        const rowForm_r478 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r483 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("matAutocomplete", _r489);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r483.showDropdownClearButton(rowForm_r478.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r483.dropdownValueTranslate.bind(ctx_r483, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r483.lists.list4461.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r483.lists.list4461.lastItems);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        const _r502 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span")(1, "button", 97);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_5_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r502); const row_r481 = i0.ɵɵnextContext().ngIf; const ctx_r501 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r501.goToForDropdowns("dibexTestClientForm", "", true, "client_id", "id", ctx_r501.model, row_r481, $event)); });
        i0.ɵɵelement(2, "dib-icon", 98);
        i0.ɵɵelementEnd()();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_4_Template, 13, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_span_5_Template, 3, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r478 = i0.ɵɵnextContext().$implicit;
        const ctx_r480 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r480.excelEditing == false && rowForm_r478.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r480.excelEditing == true || rowForm_r478.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r480.excelEditing == false && rowForm_r478.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_11_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r478 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r478);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r478.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_12_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r505 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r505.editorOpen);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r516 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 99);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r516); i0.ɵɵnextContext(); const _r509 = i0.ɵɵreference(5); const _r510 = i0.ɵɵreference(6); const ctx_r515 = i0.ɵɵnextContext(3); ctx_r515.clearDropdown(ctx_r515.model.modelItems.client_id.formControl, $event, ctx_r515.lists.list4461, _r509); return i0.ɵɵresetView(_r510.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 100);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 101);
    } if (rf & 2) {
        const item_r517 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r517.id == "0"))("value", item_r517)("innerHtml", item_r517.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r519 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 103, 91);
        i0.ɵɵtemplate(7, dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_button_7_Template, 3, 0, "button", 92);
        i0.ɵɵelementStart(8, "mat-autocomplete", 93, 94);
        i0.ɵɵlistener("opened", function dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r519); const ctx_r518 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r518.lists.list4461.refresh()); });
        i0.ɵɵtemplate(10, dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 95);
        i0.ɵɵtemplate(11, dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_mat_option_11_Template, 1, 5, "mat-option", 96);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r512 = i0.ɵɵreference(9);
        const ctx_r507 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r507.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r512);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r507.showDropdownClearButton(ctx_r507.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r507.dropdownValueTranslate.bind(ctx_r507, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r507.lists.list4461.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r507.lists.list4461.lastItems);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_12_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_12_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_12_div_4_Template, 12, 6, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r417 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r417.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r417.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r417.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r521 = i0.ɵɵnextContext(2).index;
        const ctx_r524 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r524.findColumnDisplayValue(rowIndex_r521, "first_name", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r533 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r533); const ctx_r532 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r532.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r535 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r535); const ctx_r534 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r534.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r535); const ctx_r536 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r536.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r520 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r525 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r525.hasError("first_name", "required", rowForm_r520));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r525.hasError("first_name", "maxlength", rowForm_r520));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r525.view.recordStatus == "update" && ctx_r525.notSaved("first_name", rowForm_r520));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r525.view.recordStatus == "update" && ctx_r525.isSaved("first_name", rowForm_r520));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_4_Template, 7, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r520 = i0.ɵɵnextContext().$implicit;
        const ctx_r522 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r522.excelEditing == false && rowForm_r520.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r522.excelEditing == true || rowForm_r520.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r522.excelEditing == false && rowForm_r520.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_14_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r520 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r520);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r520.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_15_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_15_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r539 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r539.editorOpen);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r546 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r546); const ctx_r545 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r545.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r548 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r548); const ctx_r547 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r547.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r548); const ctx_r549 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r549.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r541 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r541.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r541.view.recordStatus == "update" && ctx_r541.notSaved("first_name", ctx_r541.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r541.view.recordStatus == "update" && ctx_r541.isSaved("first_name", ctx_r541.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_15_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_15_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_15_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r419 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r419.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r419.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r419.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r551 = i0.ɵɵnextContext(2).index;
        const ctx_r554 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r554.findColumnDisplayValue(rowIndex_r551, "last_name", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r563 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r563); const ctx_r562 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r562.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r565 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r565); const ctx_r564 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r564.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r565); const ctx_r566 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r566.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r550 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r555 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.hasError("last_name", "required", rowForm_r550));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.hasError("last_name", "maxlength", rowForm_r550));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.view.recordStatus == "update" && ctx_r555.notSaved("last_name", rowForm_r550));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.view.recordStatus == "update" && ctx_r555.isSaved("last_name", rowForm_r550));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_4_Template, 7, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r550 = i0.ɵɵnextContext().$implicit;
        const ctx_r552 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r552.excelEditing == false && rowForm_r550.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.excelEditing == true || rowForm_r550.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.excelEditing == false && rowForm_r550.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_17_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r550 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r550);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r550.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_18_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 83);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_18_div_2_span_2_Template, 2, 0, "span", 82);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r569 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r569.editorOpen);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r576 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r576); const ctx_r575 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r575.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r578 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r578); const ctx_r577 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r577.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r578); const ctx_r579 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r579.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r571 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r571.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r571.view.recordStatus == "update" && ctx_r571.notSaved("last_name", ctx_r571.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r571.view.recordStatus == "update" && ctx_r571.isSaved("last_name", ctx_r571.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_18_div_2_Template, 3, 1, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_18_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_18_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r421 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r421.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r581 = i0.ɵɵnextContext(2).index;
        const ctx_r584 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r584.findColumnDisplayValue(rowIndex_r581, "position", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r592 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r592); const ctx_r591 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r591.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r594 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r594); const ctx_r593 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r593.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r594); const ctx_r595 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r595.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r580 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r585 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r585.hasError("position", "maxlength", rowForm_r580));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r585.view.recordStatus == "update" && ctx_r585.notSaved("position", rowForm_r580));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r585.view.recordStatus == "update" && ctx_r585.isSaved("position", rowForm_r580));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r580 = i0.ɵɵnextContext().$implicit;
        const ctx_r582 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r582.excelEditing == false && rowForm_r580.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r582.excelEditing == true || rowForm_r580.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r582.excelEditing == false && rowForm_r580.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_20_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r580 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r580);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r580.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Position ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r604 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r604); const ctx_r603 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r603.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r606 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r606); const ctx_r605 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r605.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r606); const ctx_r607 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r607.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r600 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r600.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r600.view.recordStatus == "update" && ctx_r600.notSaved("position", ctx_r600.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r600.view.recordStatus == "update" && ctx_r600.isSaved("position", ctx_r600.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_21_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_21_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_21_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r423 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r423.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r423.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r423.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r609 = i0.ɵɵnextContext(2).index;
        const ctx_r612 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r612.findColumnDisplayValue(rowIndex_r609, "email", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 150 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r620 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r620); const ctx_r619 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r619.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r622 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r622); const ctx_r621 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r621.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r622); const ctx_r623 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r623.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r608 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r613 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r613.hasError("email", "maxlength", rowForm_r608));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r613.view.recordStatus == "update" && ctx_r613.notSaved("email", rowForm_r608));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r613.view.recordStatus == "update" && ctx_r613.isSaved("email", rowForm_r608));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r608 = i0.ɵɵnextContext().$implicit;
        const ctx_r610 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r610.excelEditing == false && rowForm_r608.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r610.excelEditing == true || rowForm_r608.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r610.excelEditing == false && rowForm_r608.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_23_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r608 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r608);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r608.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r632 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r632); const ctx_r631 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r631.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r634 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r634); const ctx_r633 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r633.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r634); const ctx_r635 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r635.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r628 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r628.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r628.view.recordStatus == "update" && ctx_r628.notSaved("email", ctx_r628.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r628.view.recordStatus == "update" && ctx_r628.isSaved("email", ctx_r628.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_24_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_24_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_24_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r425 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r425.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r637 = i0.ɵɵnextContext(2).index;
        const ctx_r640 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r640.findColumnDisplayValue(rowIndex_r637, "phone_w", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r648 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r648); const ctx_r647 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r647.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r650 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r650); const ctx_r649 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r649.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r650); const ctx_r651 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r651.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r636 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r641 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r641.hasError("phone_w", "maxlength", rowForm_r636));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r641.view.recordStatus == "update" && ctx_r641.notSaved("phone_w", rowForm_r636));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r641.view.recordStatus == "update" && ctx_r641.isSaved("phone_w", rowForm_r636));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r636 = i0.ɵɵnextContext().$implicit;
        const ctx_r638 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r638.excelEditing == false && rowForm_r636.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r638.excelEditing == true || rowForm_r636.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r638.excelEditing == false && rowForm_r636.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_26_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r636 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r636);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r636.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Phone W ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Phone W");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r660 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r660); const ctx_r659 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r659.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r662 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "Phone W");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r662); const ctx_r661 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r661.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r662); const ctx_r663 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r663.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r656 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r656.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r656.view.recordStatus == "update" && ctx_r656.notSaved("phone_w", ctx_r656.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r656.view.recordStatus == "update" && ctx_r656.isSaved("phone_w", ctx_r656.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_27_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_27_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_27_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r427 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r427.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r427.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r427.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r665 = i0.ɵɵnextContext(2).index;
        const ctx_r668 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r668.findColumnDisplayValue(rowIndex_r665, "mobile", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r676 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r676); const ctx_r675 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r675.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r678 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r678); const ctx_r677 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r677.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r678); const ctx_r679 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r679.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r664 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r669 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r669.hasError("mobile", "maxlength", rowForm_r664));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r669.view.recordStatus == "update" && ctx_r669.notSaved("mobile", rowForm_r664));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r669.view.recordStatus == "update" && ctx_r669.isSaved("mobile", rowForm_r664));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r664 = i0.ɵɵnextContext().$implicit;
        const ctx_r666 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r666.excelEditing == false && rowForm_r664.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r666.excelEditing == true || rowForm_r664.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r666.excelEditing == false && rowForm_r664.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_29_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r664 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r664);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r664.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Mobile ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r688 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r688); const ctx_r687 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r687.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r690 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r690); const ctx_r689 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r689.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r690); const ctx_r691 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r691.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r684 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r684.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r684.view.recordStatus == "update" && ctx_r684.notSaved("mobile", ctx_r684.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r684.view.recordStatus == "update" && ctx_r684.isSaved("mobile", ctx_r684.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_30_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_30_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_30_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r429 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r429.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r429.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r429.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r693 = i0.ɵɵnextContext(2).index;
        const ctx_r696 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r696.findColumnDisplayValue(rowIndex_r693, "resigned", "none", "date"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r704 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r704); const ctx_r703 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r703.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r706 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 123)(2, "input", 124);
        i0.ɵɵlistener("focus", function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r706); const _r700 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r700.open()); })("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r706); const ctx_r707 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r707.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r706); const ctx_r708 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r708.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 125)(4, "mat-datepicker", null, 126);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(7, dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r700 = i0.ɵɵreference(5);
        const rowForm_r692 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r697 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r700);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r700);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r697.view.recordStatus == "update" && ctx_r697.notSaved("resigned", rowForm_r692));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r697.view.recordStatus == "update" && ctx_r697.isSaved("resigned", rowForm_r692));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_4_Template, 8, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r692 = i0.ɵɵnextContext().$implicit;
        const ctx_r694 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r694.excelEditing == false && rowForm_r692.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r694.excelEditing == true || rowForm_r692.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r694.excelEditing == false && rowForm_r692.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_32_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r692 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r692);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r692.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Resigned ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Resigned");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r717 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r717); const ctx_r716 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r716.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r719 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 127)(2, "mat-label");
        i0.ɵɵtext(3, "Resigned");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 128);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r719); const ctx_r718 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r718.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r719); const ctx_r720 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r720.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r713 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r713.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r713.view.recordStatus == "update" && ctx_r713.notSaved("resigned", ctx_r713.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r713.view.recordStatus == "update" && ctx_r713.isSaved("resigned", ctx_r713.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_33_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_33_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_33_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r431 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r431.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r431.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r431.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r722 = i0.ɵɵnextContext(2).index;
        const ctx_r725 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r725.findColumnDisplayValue(rowIndex_r722, "notes", "none", "text"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 250 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r733 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r733); const ctx_r732 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r732.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r735 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 104)(2, "input", 129);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r735); const ctx_r734 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r734.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r735); const ctx_r736 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r736.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r721 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r726 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r726.hasError("notes", "maxlength", rowForm_r721));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r726.view.recordStatus == "update" && ctx_r726.notSaved("notes", rowForm_r721));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r726.view.recordStatus == "update" && ctx_r726.isSaved("notes", rowForm_r721));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_4_Template, 6, 4, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r721 = i0.ɵɵnextContext().$implicit;
        const ctx_r723 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r723.excelEditing == false && rowForm_r721.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r723.excelEditing == true || rowForm_r721.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r723.excelEditing == false && rowForm_r721.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_35_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r721 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r721);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r721.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_36_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_36_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r745 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r745); const ctx_r744 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r744.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r747 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 130)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 131);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r747); const ctx_r746 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r746.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r747); const ctx_r748 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r748.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r741 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r741.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r741.view.recordStatus == "update" && ctx_r741.notSaved("notes", ctx_r741.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r741.view.recordStatus == "update" && ctx_r741.isSaved("notes", ctx_r741.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_36_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_36_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_36_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r433 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r433.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r433.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r433.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r750 = i0.ɵɵnextContext(2).index;
        const ctx_r753 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r753.findColumnDisplayValue(rowIndex_r750, "updated", "none", "datetime"), "");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r761 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r761); const ctx_r760 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r760.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r763 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 68)(1, "mat-form-field", 132);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 125);
        i0.ɵɵelementStart(3, "input", 133);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r763); const ctx_r762 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r762.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r763); const ctx_r764 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r764.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 134);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r759 = i0.ɵɵreference(7);
        const rowForm_r749 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r754 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r759);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r759);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r754.view.recordStatus == "update" && ctx_r754.notSaved("updated", rowForm_r749));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r754.view.recordStatus == "update" && ctx_r754.isSaved("updated", rowForm_r749));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 65)(2, "span", 66);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_3_Template, 2, 1, "span", 67);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_4_Template, 8, 5, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r749 = i0.ɵɵnextContext().$implicit;
        const ctx_r751 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r751.excelEditing == false && rowForm_r749.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r751.excelEditing == true || rowForm_r749.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r751.excelEditing == false && rowForm_r749.get("__edit").value === false);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 59);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_td_38_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r749 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r749);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r749.getRawValue());
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_39_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_39_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r773 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r773); const ctx_r772 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r772.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r775 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 85)(1, "mat-form-field", 135)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 136);
        i0.ɵɵlistener("keydown.enter", function dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r775); const ctx_r774 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r774.searchGrid(false)); })("keydown.esc", function dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r775); const ctx_r776 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r776.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r769 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r769.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r769.view.recordStatus == "update" && ctx_r769.notSaved("updated", ctx_r769.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r769.view.recordStatus == "update" && ctx_r769.isSaved("updated", ctx_r769.model.$formGroup));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 63)(1, "div", 77);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_th_39_div_2_Template, 2, 0, "div", 78);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_39_div_3_Template, 2, 0, "div", 79);
        i0.ɵɵtemplate(4, dibexTestClientContactGridComponent_ng_template_79_th_39_div_4_Template, 7, 4, "div", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r435 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r435.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r435.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r435.showSearch);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_41_Template(rf, ctx) { if (rf & 1) {
        const _r778 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 55)(1, "mat-checkbox", 158);
        i0.ɵɵlistener("change", function dibexTestClientContactGridComponent_ng_template_79_th_41_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r778); const ctx_r777 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r777.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r436 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r436.masterIsChecked)("indeterminate", ctx_r436.masterIsIndeterminate);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_td_42_Template(rf, ctx) { if (rf & 1) {
        const _r782 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 159)(1, "mat-checkbox", 58);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_td_42_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexTestClientContactGridComponent_ng_template_79_td_42_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r782); const row_r779 = restoredCtx.$implicit; const ctx_r781 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r781.selection.toggle(row_r779) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r779 = ctx.$implicit;
        const ctx_r437 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r437.isHighlighted(row_r779));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_44_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 100);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 160);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_th_44_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 95);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r438 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r438.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r438.busy);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_46_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r784 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r784.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 138);
        i0.ɵɵtemplate(1, dibexTestClientContactGridComponent_ng_template_79_th_46_span_1_Template, 2, 1, "span", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r439 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r439.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r439.busy && ctx_r439.tableDataSource.data.length == 0);
    } }
    function dibexTestClientContactGridComponent_ng_template_79_tr_47_Template(rf, ctx) { if (rf & 1) {
        const _r787 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 161);
        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_ng_template_79_tr_47_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r787); const row_r785 = restoredCtx.$implicit; const ctx_r786 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r786.rowClick(row_r785, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r785 = ctx.$implicit;
        const ctx_r440 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r440.isHighlighted(row_r785)));
    } }
    function dibexTestClientContactGridComponent_ng_template_79_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 153);
        i0.ɵɵelementContainerStart(1, 25);
        i0.ɵɵtemplate(2, dibexTestClientContactGridComponent_ng_template_79_td_2_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(3, dibexTestClientContactGridComponent_ng_template_79_th_3_Template, 1, 0, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 28);
        i0.ɵɵtemplate(5, dibexTestClientContactGridComponent_ng_template_79_td_5_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(6, dibexTestClientContactGridComponent_ng_template_79_th_6_Template, 1, 0, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 29);
        i0.ɵɵtemplate(8, dibexTestClientContactGridComponent_ng_template_79_td_8_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(9, dibexTestClientContactGridComponent_ng_template_79_th_9_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 30);
        i0.ɵɵtemplate(11, dibexTestClientContactGridComponent_ng_template_79_td_11_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(12, dibexTestClientContactGridComponent_ng_template_79_th_12_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 31);
        i0.ɵɵtemplate(14, dibexTestClientContactGridComponent_ng_template_79_td_14_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(15, dibexTestClientContactGridComponent_ng_template_79_th_15_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 32);
        i0.ɵɵtemplate(17, dibexTestClientContactGridComponent_ng_template_79_td_17_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(18, dibexTestClientContactGridComponent_ng_template_79_th_18_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 33);
        i0.ɵɵtemplate(20, dibexTestClientContactGridComponent_ng_template_79_td_20_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(21, dibexTestClientContactGridComponent_ng_template_79_th_21_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 34);
        i0.ɵɵtemplate(23, dibexTestClientContactGridComponent_ng_template_79_td_23_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(24, dibexTestClientContactGridComponent_ng_template_79_th_24_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 35);
        i0.ɵɵtemplate(26, dibexTestClientContactGridComponent_ng_template_79_td_26_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(27, dibexTestClientContactGridComponent_ng_template_79_th_27_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 36);
        i0.ɵɵtemplate(29, dibexTestClientContactGridComponent_ng_template_79_td_29_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(30, dibexTestClientContactGridComponent_ng_template_79_th_30_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 37);
        i0.ɵɵtemplate(32, dibexTestClientContactGridComponent_ng_template_79_td_32_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(33, dibexTestClientContactGridComponent_ng_template_79_th_33_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 38);
        i0.ɵɵtemplate(35, dibexTestClientContactGridComponent_ng_template_79_td_35_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(36, dibexTestClientContactGridComponent_ng_template_79_th_36_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 39);
        i0.ɵɵtemplate(38, dibexTestClientContactGridComponent_ng_template_79_td_38_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(39, dibexTestClientContactGridComponent_ng_template_79_th_39_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 22);
        i0.ɵɵtemplate(41, dibexTestClientContactGridComponent_ng_template_79_th_41_Template, 2, 2, "th", 23);
        i0.ɵɵtemplate(42, dibexTestClientContactGridComponent_ng_template_79_td_42_Template, 2, 1, "td", 154);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(43, 40);
        i0.ɵɵtemplate(44, dibexTestClientContactGridComponent_ng_template_79_th_44_Template, 2, 2, "th", 155);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(45, 42);
        i0.ɵɵtemplate(46, dibexTestClientContactGridComponent_ng_template_79_th_46_Template, 2, 2, "th", 43);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(47, dibexTestClientContactGridComponent_ng_template_79_tr_47_Template, 1, 3, "tr", 156);
        i0.ɵɵpipe(48, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r42 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r42.selectionDataSource);
        i0.ɵɵadvance(47);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(48, 2, ctx_r42.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i19 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
                i8 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i20 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i21 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i9 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i13 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i18 = card_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i7 = autocomplete_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i11 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            },
            function (i17_1) {
                i17 = i17_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "extra-node": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function () { return ["_dibBusy"]; };
            _c6 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexTestClientContactGridComponent = class dibexTestClientContactGridComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 178, name: 'dibexTestClientContactGrid', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'client_id', 'first_name', 'last_name', 'position', 'email', 'phone_w', 'mobile', 'resigned', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'client_id', 'first_name', 'last_name', 'position', 'email', 'phone_w', 'mobile', 'resigned', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list4461 = new shared_3.DibList("/peff/Crud/componentlist?containerName=dibexTestClientContactGrid&containerItemId=4461", null, null, 40);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexTestClientContactGrid');
                    this.containerName = 'dibexTestClientContactGrid'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 4460, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, client_id: { itemId: 4461, type: 'select', fieldAlias: 'client_id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'change' }), create: true, update: true, required: true, itemAlias: null, default: '@{parent_value_id}', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 4461 }, first_name: { itemId: 4462, type: 'text', fieldAlias: 'first_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 4463, type: 'text', fieldAlias: 'last_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, position: { itemId: 4464, type: 'text', fieldAlias: 'position', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 4465, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(150)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, phone_w: { itemId: 4466, type: 'text', fieldAlias: 'phone_w', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, mobile: { itemId: 4467, type: 'text', fieldAlias: 'mobile', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, resigned: { itemId: 4468, type: 'date', fieldAlias: 'resigned', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, notes: { itemId: 4469, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(250)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, updated: { itemId: 4470, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('client_id', this.model.modelItems.client_id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('position', this.model.modelItems.position.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('phone_w', this.model.modelItems.phone_w.formControl);
                    this.model.$formGroup.addControl('mobile', this.model.modelItems.mobile.formControl);
                    this.model.$formGroup.addControl('resigned', this.model.modelItems.resigned.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource4461 = this.lists.list4461.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange4461 = new Date().getTime();
                    let previousUrlChange4461;
                    let previousResponse4461;
                    this.lists.list4461.items = rxjs_1.combineLatest([this.lists.list4461.updatedList$, itemsUpdateSource4461]).pipe(operators_1.tap(() => { this.lists.list4461.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange4461 - new Date().getTime()) / 1000;
                        previousTimeChange4461 = new Date().getTime();
                        previousUrlChange4461 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse4461 = response;
                            this.lists.list4461.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list4461.items.subscribe(records => this.lists.list4461.lastItems = records);
                    this.lists.list4461.multiSelected = [];
                    this.lists.list4461.reset = function (isOpen) { if (isOpen) {
                        self.lists.list4461.updatedList$.next([]);
                        self.lists.list4461.searchForm.setValue('', { emitEvent: false });
                        self.lists.list4461.refresh();
                    }
                    else {
                        self.lists.list4461.searchForm.setValue('');
                        self.lists.list4461.updatedList$.next(self.lists.list4461.multiSelected);
                        self.model.modelItems.client_id.formControl.setValue(self.lists.list4461.multiSelected);
                    } };
                    this.lists.list4461.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list4461.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list4461.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list4461.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list4461.multiSelected.push(value);
                            }
                        }
                        lists.list4461.multiSelected = self.removeDuplicateIdsFromArray(lists.list4461.multiSelected);
                    };
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'id', 'client_id', 'first_name', 'last_name', 'position', 'email', 'phone_w', 'mobile', 'resigned', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); this.lists.list4461.setupModel(this.model.modelItems.client_id.formControl); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() {
                    this.excelEditing = !this.excelEditing;
                    this.editorOpen = true;
                    if (this.excelEditing) {
                        this.editorOpen = false;
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                                control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => {
                                    if (!!control.controls.client_id.value.id == false) {
                                        return;
                                    }
                                    if (control.pristine == false) {
                                        this.submit$.next(control);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                    }
                }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexTestClientContactGrid`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexTestClientContactGrid`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexTestClientContactGrid`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4460 };
                    formDefaultsConfigs['client_id'] = { contentType: "integer", type: "dropdown", defaultValue: "@{parent_value_id}", listId: 4461 };
                    formDefaultsConfigs['first_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4462 };
                    formDefaultsConfigs['last_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4463 };
                    formDefaultsConfigs['position'] = { contentType: "text", type: "none", defaultValue: "", listId: 4464 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 4465 };
                    formDefaultsConfigs['phone_w'] = { contentType: "text", type: "none", defaultValue: "", listId: 4466 };
                    formDefaultsConfigs['mobile'] = { contentType: "text", type: "none", defaultValue: "", listId: 4467 };
                    formDefaultsConfigs['resigned'] = { contentType: "date", type: "none", defaultValue: "", listId: 4468 };
                    formDefaultsConfigs['notes'] = { contentType: "text", type: "none", defaultValue: "", listId: 4469 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 4470 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4460, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), client_id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "client_id", "dropdown", false, formDefaults['client_id'], 4461, "select"), { validators: [forms_2.Validators.required], updateOn: 'change' }), first_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "first_name", "none", false, formDefaults['first_name'], 4462, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(35)], updateOn: 'blur' }), last_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "last_name", "none", false, formDefaults['last_name'], 4463, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(35)], updateOn: 'blur' }), position: new forms_2.FormControl(this.calculateInitialColumnValue(row, "position", "none", false, formDefaults['position'], 4464, "text"), { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 4465, "text"), { validators: [forms_2.Validators.maxLength(150)], updateOn: 'blur' }), phone_w: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone_w", "none", false, formDefaults['phone_w'], 4466, "text"), { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), mobile: new forms_2.FormControl(this.calculateInitialColumnValue(row, "mobile", "none", false, formDefaults['mobile'], 4467, "text"), { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), resigned: new forms_2.FormControl(this.calculateInitialColumnValue(row, "resigned", "none", false, formDefaults['resigned'], 4468, "date"), { validators: [], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 4469, "text"), { validators: [forms_2.Validators.maxLength(250)], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 4470, "datetime"), { validators: [], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { this.lists.list4461.setupModel(formGroup.controls.client_id); });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list4461.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexTestClientContactGrid', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexTestClientContactGrid' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexTestClientContactGridComponent_Factory(t) { return new (t || dibexTestClientContactGridComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexTestClientContactGridComponent, selectors: [["dibex-test-client-contact-grid"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 81, vars: 38, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci4447", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 0px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci4448", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci4449", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci4455", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci4453", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4451", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci4452", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci4450", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci4454", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci4456", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "btnGridEdit"], ["matColumnDef", "id"], ["matColumnDef", "client_id"], ["matColumnDef", "first_name"], ["matColumnDef", "last_name"], ["matColumnDef", "position"], ["matColumnDef", "email"], ["matColumnDef", "phone_w"], ["matColumnDef", "mobile"], ["matColumnDef", "resigned"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexTestClientContactGrid", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci4451", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4452", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci4454", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-mini-fab", "", "color", "primary", "id", "ci4459", "dibComponent", "button", "aria-label", "View/edit this record", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition"], ["src", "edit"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "button", "aria-label", "View/edit this record", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4460", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], [2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%"], ["required", "true", "type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["auto4461trigger", "matAutocompleteTrigger", "input4461", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto4461", "matAutocomplete"], ["mode", "indeterminate", 4, "ngIf"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["type", "button", "aria-label", "Link to page for dibexTestClientForm", "mat-icon-button", "", 3, "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], ["mode", "indeterminate"], [3, "ngClass", "value", "innerHtml"], ["id", "ci4461", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "35", "required", "true", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4462", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "35", "required", "true", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4463", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "last_name", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "position", "maxlength", "50", "name", "position", 3, "keydown.enter", "keydown.esc"], ["id", "ci4464", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "position", "name", "position", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "150", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci4465", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone_w", "maxlength", "35", "name", "phone_w", 3, "keydown.enter", "keydown.esc"], ["id", "ci4466", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "phone_w", "name", "phone_w", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "mobile", "maxlength", "35", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["id", "ci4467", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "mobile", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["datepicker", "", "dibComponent", "datePicker"], ["matInput", "", "formControlName", "resigned", "name", "resigned", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker4468", ""], ["id", "ci4468", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "resigned", "name", "resigned", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "notes", "maxlength", "250", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci4469", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker4470", ""], ["id", "ci4470", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexTestClientContactGridComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexTestClientContactGridComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_Template_button_click_4_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_Template_button_click_6_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(8, "span", 8);
                        i0.ɵɵpipe(9, "safeHtml");
                        i0.ɵɵelementStart(10, "button", 9);
                        i0.ɵɵlistener("click", function dibexTestClientContactGridComponent_Template_button_click_10_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(11, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(12, dibexTestClientContactGridComponent_button_12_Template, 2, 4, "button", 11);
                        i0.ɵɵtemplate(13, dibexTestClientContactGridComponent_button_13_Template, 2, 4, "button", 12);
                        i0.ɵɵelement(14, "span", 13);
                        i0.ɵɵtemplate(15, dibexTestClientContactGridComponent_div_15_Template, 5, 3, "div", 14);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(16, "mat-card", 15)(17, "mat-card-content", 16);
                        i0.ɵɵelementContainerStart(18, 3);
                        i0.ɵɵelementStart(19, "div", 17, 18)(21, "form", 19);
                        i0.ɵɵelementContainerStart(22, 20);
                        i0.ɵɵelementStart(23, "table", 21);
                        i0.ɵɵelementContainerStart(24, 22);
                        i0.ɵɵtemplate(25, dibexTestClientContactGridComponent_th_25_Template, 2, 2, "th", 23);
                        i0.ɵɵtemplate(26, dibexTestClientContactGridComponent_td_26_Template, 2, 1, "td", 24);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(27, 25);
                        i0.ɵɵtemplate(28, dibexTestClientContactGridComponent_td_28_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(29, dibexTestClientContactGridComponent_th_29_Template, 1, 0, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(30, 28);
                        i0.ɵɵtemplate(31, dibexTestClientContactGridComponent_td_31_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(32, dibexTestClientContactGridComponent_th_32_Template, 1, 0, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(33, 29);
                        i0.ɵɵtemplate(34, dibexTestClientContactGridComponent_td_34_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(35, dibexTestClientContactGridComponent_th_35_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(36, 30);
                        i0.ɵɵtemplate(37, dibexTestClientContactGridComponent_td_37_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(38, dibexTestClientContactGridComponent_th_38_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(39, 31);
                        i0.ɵɵtemplate(40, dibexTestClientContactGridComponent_td_40_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(41, dibexTestClientContactGridComponent_th_41_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(42, 32);
                        i0.ɵɵtemplate(43, dibexTestClientContactGridComponent_td_43_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(44, dibexTestClientContactGridComponent_th_44_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(45, 33);
                        i0.ɵɵtemplate(46, dibexTestClientContactGridComponent_td_46_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(47, dibexTestClientContactGridComponent_th_47_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(48, 34);
                        i0.ɵɵtemplate(49, dibexTestClientContactGridComponent_td_49_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(50, dibexTestClientContactGridComponent_th_50_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(51, 35);
                        i0.ɵɵtemplate(52, dibexTestClientContactGridComponent_td_52_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(53, dibexTestClientContactGridComponent_th_53_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(54, 36);
                        i0.ɵɵtemplate(55, dibexTestClientContactGridComponent_td_55_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(56, dibexTestClientContactGridComponent_th_56_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(57, 37);
                        i0.ɵɵtemplate(58, dibexTestClientContactGridComponent_td_58_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(59, dibexTestClientContactGridComponent_th_59_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(60, 38);
                        i0.ɵɵtemplate(61, dibexTestClientContactGridComponent_td_61_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(62, dibexTestClientContactGridComponent_th_62_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(63, 39);
                        i0.ɵɵtemplate(64, dibexTestClientContactGridComponent_td_64_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(65, dibexTestClientContactGridComponent_th_65_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(66, 40);
                        i0.ɵɵtemplate(67, dibexTestClientContactGridComponent_th_67_Template, 2, 2, "th", 41);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(68, 42);
                        i0.ɵɵtemplate(69, dibexTestClientContactGridComponent_th_69_Template, 2, 2, "th", 43);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(70, dibexTestClientContactGridComponent_ng_container_70_Template, 3, 3, "ng-container", 44);
                        i0.ɵɵtemplate(71, dibexTestClientContactGridComponent_tr_71_Template, 1, 3, "tr", 45);
                        i0.ɵɵtemplate(72, dibexTestClientContactGridComponent_tr_72_Template, 1, 3, "tr", 45);
                        i0.ɵɵtemplate(73, dibexTestClientContactGridComponent_tr_73_Template, 1, 4, "tr", 46);
                        i0.ɵɵpipe(74, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(75, dibexTestClientContactGridComponent_75_Template, 1, 1, null, 47);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(76, "div", null, 48);
                        i0.ɵɵtemplate(78, dibexTestClientContactGridComponent_mat_toolbar_78_Template, 6, 3, "mat-toolbar", 47);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(79, dibexTestClientContactGridComponent_ng_template_79_Template, 49, 4, "ng-template", null, 49, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r39 = i0.ɵɵreference(77);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(34, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4447");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(9, 30, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4456");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r39);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(47);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(36, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(37, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(74, 32, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibAutocompleteScrollToOnFocusDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatAutocomplete, i8.MatOption, i7.MatAutocompleteTrigger, i9.MatButton, i9.MatIconButton, i9.MatMiniFabButton, i10.MatCheckbox, i11.MatDatepicker, i11.MatDatepickerInput, i11.MatDatepickerToggle, i12.MatFormField, i12.MatLabel, i12.MatError, i12.MatPrefix, i12.MatSuffix, i13.MatIcon, i14.MatInput, i15.MatProgressBar, i16.MatToolbar, i16.MatToolbarRow, i17.MatTooltip, i18.MatCard, i18.MatCardContent, i19.MatTable, i19.MatHeaderCellDef, i19.MatHeaderRowDef, i19.MatColumnDef, i19.MatCellDef, i19.MatRowDef, i19.MatHeaderCell, i19.MatCell, i19.MatHeaderRow, i19.MatRow, i20.MatSort, i20.MatSortHeader, i21.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexTestClientContactGrid'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexTestClientContactGridComponent.prototype, "reloadContainer", null);
            exports_1("dibexTestClientContactGridComponent", dibexTestClientContactGridComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestClientContactGridComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-test-client-contact-grid', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 0px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci4447 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4447'" ><button mat-mini-fab color=accent  id=ci4448 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"  [matTooltip]="'Delete selected record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button   mat-mini-fab color=accent  id=ci4449 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><span  id=ci4455 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci4453 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4451 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4452 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci4450 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci4454 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Test Client Contacts: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci4456 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4456'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexTestClientContactGrid" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4458'" ><button  mat-mini-fab color=primary  id=ci4459 dibComponent=button   style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4460 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><div   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  " dibComponent=autocomplete   ><mat-form-field style="display:flex; flex-direction:column; flex: 1 1 0%"  ><input #auto4461trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input4461  [matAutocomplete]="auto4461"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list4461, auto4461trigger); input4461.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4461=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4461).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4461).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4461.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field><button type=button  aria-label="Link to page for dibexTestClientForm"  mat-icon-button  (click)="goToForDropdowns(  'dibexTestClientForm',  '',  true,  'client_id',  'id',  model,  row,  $event  );"  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"></dib-icon></button></div></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><button type=button  aria-label="Link to page for dibexTestClientForm"  mat-icon-button  (click)="goToForDropdowns(  'dibexTestClientForm',  '',  true,  'client_id',  'id',  model,  row,  $event  );"  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"></dib-icon></button></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4461 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Client</mat-label><input #auto4461trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input4461  [matAutocomplete]="auto4461"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list4461, auto4461trigger); input4461.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4461=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4461).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4461).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4461.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='35'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4462 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='35'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4463 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=position   maxlength='50'  name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('position','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4464 dibComponent=inputText   style="  " ><mat-label >Position</mat-label><input   matInput  type=text   formControlName=position   name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='150'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 150 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4465 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone_w  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone_w','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone_w   maxlength='35'  name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone_w','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone W  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone W</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4466 dibComponent=inputText   style="  " ><mat-label >Phone W</mat-label><input   matInput  type=text   formControlName=phone_w   name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='35'  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4467 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=resigned  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'resigned','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4468"   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (focus)="datePicker4468.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4468" ></mat-datepicker-toggle><mat-datepicker #datePicker4468 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Resigned  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Resigned</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4468 dibComponent=inputText   style="  " ><mat-label >Resigned</mat-label><input   matInput  type=text   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=notes   maxlength='250'  name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('notes','maxlength',rowForm)">Please enter 250 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4469 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4470"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4470"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4470></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4470 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexTestClientContactGrid><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4458'" ><button  mat-mini-fab color=primary  id=ci4459 dibComponent=button   style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4460 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><div   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  " dibComponent=autocomplete   ><mat-form-field style="display:flex; flex-direction:column; flex: 1 1 0%"  ><input #auto4461trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input4461  [matAutocomplete]="auto4461"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list4461, auto4461trigger); input4461.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4461=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4461).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4461).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4461.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field><button type=button  aria-label="Link to page for dibexTestClientForm"  mat-icon-button  (click)="goToForDropdowns(  'dibexTestClientForm',  '',  true,  'client_id',  'id',  model,  row,  $event  );"  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"></dib-icon></button></div></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><button type=button  aria-label="Link to page for dibexTestClientForm"  mat-icon-button  (click)="goToForDropdowns(  'dibexTestClientForm',  '',  true,  'client_id',  'id',  model,  row,  $event  );"  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/link.svg"></dib-icon></button></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4461 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Client</mat-label><input #auto4461trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input4461  [matAutocomplete]="auto4461"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list4461, auto4461trigger); input4461.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4461=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4461).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4461).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4461.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='35'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4462 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='35'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4463 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=position   maxlength='50'  name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('position','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4464 dibComponent=inputText   style="  " ><mat-label >Position</mat-label><input   matInput  type=text   formControlName=position   name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='150'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 150 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4465 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone_w  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone_w','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone_w   maxlength='35'  name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone_w','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone W  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone W</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4466 dibComponent=inputText   style="  " ><mat-label >Phone W</mat-label><input   matInput  type=text   formControlName=phone_w   name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='35'  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4467 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=resigned  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'resigned','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4468"   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (focus)="datePicker4468.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4468" ></mat-datepicker-toggle><mat-datepicker #datePicker4468 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Resigned  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Resigned</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4468 dibComponent=inputText   style="  " ><mat-label >Resigned</mat-label><input   matInput  type=text   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=notes   maxlength='250'  name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('notes','maxlength',rowForm)">Please enter 250 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4469 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4470"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4470"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4470></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4470 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexTestClientContactGridModule = class dibexTestClientContactGridModule {
                static entry = dibexTestClientContactGridComponent;
                static ɵfac = function dibexTestClientContactGridModule_Factory(t) { return new (t || dibexTestClientContactGridModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexTestClientContactGridModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexTestClientContactGridModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestClientContactGridModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexTestClientContactGridComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexTestClientContactGridModule, { declarations: [dibexTestClientContactGridComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
