System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/material/core", "rxjs/operators", "@angular/common", "@angular/material/card", "@angular/material/button", "@angular/material/icon", "@ngbracket/ngx-layout/extended", "@angular/forms", "@angular/material/progress-bar"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, core_2, shared_3, operators_1, core_3, common_1, shared_4, shared_5, card_1, button_1, icon_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, _c0, importsRequired, dibexPhpFilesEleutheriaComponent, containerModules, fullDateTimeOptions, dibexPhpFilesEleutheriaModule;
    var __moduleName = context_1 && context_1.id;
    function dibexPhpFilesEleutheriaComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 13);
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i2 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i3 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i8 = card_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i6 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
            },
            function (i4_1) {
                i4 = i4_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i7_1) {
                i7 = i7_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexPhpFilesEleutheriaComponent = class dibexPhpFilesEleutheriaComponent extends shared_1.BaseComponent {
                httpClient;
                sd;
                cd;
                view = { container: { id: 222, name: 'dibexPhpFilesEleutheria', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*5608'] }, dropin: 'plain', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: [], recordStatus: 'create', debug: false, debugItem: false };
                clientData;
                allClientData;
                model;
                constructor(injector, httpClient, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexPhpFilesEleutheria');
                    this.containerName = 'dibexPhpFilesEleutheria'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = {};
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "docx", actionType: "click", responseType: 'new-tab', submitUrl: "/dropins/dibExamples/Files/buildDocxXslx", itemAlias: "docx", waitForCompletion: false, containerName: "dibexPhpFilesEleutheria", handlers: [] }, this.clientData, { itemEventId: 'ie285-dib', itemId: '5639', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "pdf", actionType: "click", responseType: 'new-tab', submitUrl: "/dropins/dibExamples/Files/buildPdf", itemAlias: "pdf", waitForCompletion: false, containerName: "dibexPhpFilesEleutheria", handlers: [] }, this.clientData, { itemEventId: 'ie286-dib', itemId: '5640', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "xlsx", actionType: "click", responseType: 'new-tab', submitUrl: "/dropins/dibExamples/Files/buildDocxXslx", itemAlias: "xlsx", waitForCompletion: false, containerName: "dibexPhpFilesEleutheria", handlers: [] }, this.clientData, { itemEventId: 'ie287-dib', itemId: '5641', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnSimpleDocx", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Files/simpleDocx", itemAlias: "btnSimpleDocx", waitForCompletion: false, containerName: "dibexPhpFilesEleutheria", handlers: [] }, this.clientData, { itemEventId: 'ie292-dib', itemId: '5658', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.reloadContainer();
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexPhpFilesEleutheria', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexPhpFilesEleutheria' });
                    this.reloadSubcontainers();
                }
                static ɵfac = function dibexPhpFilesEleutheriaComponent_Factory(t) { return new (t || dibexPhpFilesEleutheriaComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexPhpFilesEleutheriaComponent, selectors: [["dibex-php-files-eleutheria"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 20, vars: 15, consts: [["mode", "indeterminate", 4, "ngIf"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5608", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexPhpFilesEleutheria", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci5638", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "15px", "flex-wrap", "nowrap"], [3, "dibPort"], ["mat-raised-button", "", "color", "primary", "id", "ci5658", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnSimpleDocx", "type", "button", 3, "containerPortId"], [1, "dibButtonCaption"], ["mat-raised-button", "", "color", "primary", "id", "ci5641", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "xlsx", "item-alias", "xlsx", "type", "button", 3, "containerPortId"], ["mat-raised-button", "", "color", "primary", "id", "ci5639", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "docx", "item-alias", "docx", "type", "button", 3, "containerPortId"], ["mat-raised-button", "", "color", "primary", "id", "ci5640", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "pdf", "type", "button", 3, "containerPortId"], ["mode", "indeterminate"]], template: function dibexPhpFilesEleutheriaComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵtemplate(0, dibexPhpFilesEleutheriaComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexPhpFilesEleutheriaComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
                        i0.ɵɵelementContainer(4, 4);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(5, "mat-card", 5)(6, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(7, 7);
                        i0.ɵɵelementStart(8, "button", 8)(9, "span", 9);
                        i0.ɵɵtext(10, "Simple .docx Merge");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(11, "button", 10)(12, "span", 9);
                        i0.ɵɵtext(13, "Merge .xlsx Tmpl");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(14, "button", 11)(15, "span", 9);
                        i0.ɵɵtext(16, "Merge .docx Tmpl");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(17, "button", 12)(18, "span", 9);
                        i0.ɵɵtext(19, "Merge .html Tmpl & Build PDF");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                    } if (rf & 2) {
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(13, _c0, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5608");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5638");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Simple .docx Merge");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Merge .xlsx Tmpl");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Merge .docx Tmpl");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Merge .html Tmpl & Build PDF");
                    } }, dependencies: [i3.NgClass, i3.NgIf, i4.DefaultClassDirective, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i2.DibPortDirective, i2.DibListenersDirective, i6.MatButton, i7.MatProgressBar, i8.MatCard, i8.MatCardContent], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexPhpFilesEleutheria'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexPhpFilesEleutheriaComponent.prototype, "reloadContainer", null);
            exports_1("dibexPhpFilesEleutheriaComponent", dibexPhpFilesEleutheriaComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPhpFilesEleutheriaComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-php-files-eleutheria', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5608 dibComponent=subcontainer   ><ng-container [dibPort]="'5608'" parentContainerName=dibexPhpFilesEleutheria  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5638 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 15px;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5638'" ><button  mat-raised-button color=primary  id=ci5658 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnSimpleDocx   style="  "  [attr.aria-label]="'Simple .docx Merge'"  type=button  ><span class=dibButtonCaption >Simple .docx Merge</span></button><button  mat-raised-button color=primary  id=ci5641 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=xlsx   style="  "  item-alias=xlsx   [attr.aria-label]="'Merge .xlsx Tmpl'"  type=button  ><span class=dibButtonCaption >Merge .xlsx Tmpl</span></button><button  mat-raised-button color=primary  id=ci5639 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=docx   style="  "  item-alias=docx   [attr.aria-label]="'Merge .docx Tmpl'"  type=button  ><span class=dibButtonCaption >Merge .docx Tmpl</span></button><button  mat-raised-button color=primary  id=ci5640 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=pdf   style="  "  [attr.aria-label]="'Merge .html Tmpl & Build PDF'"  type=button  ><span class=dibButtonCaption >Merge .html Tmpl & Build PDF</span></button></ng-container></mat-card-content></mat-card></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, button_1.MatButtonModule, icon_1.MatIconModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexPhpFilesEleutheriaModule = class dibexPhpFilesEleutheriaModule {
                static entry = dibexPhpFilesEleutheriaComponent;
                static ɵfac = function dibexPhpFilesEleutheriaModule_Factory(t) { return new (t || dibexPhpFilesEleutheriaModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexPhpFilesEleutheriaModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexPhpFilesEleutheriaModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPhpFilesEleutheriaModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexPhpFilesEleutheriaComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexPhpFilesEleutheriaModule, { declarations: [dibexPhpFilesEleutheriaComponent], imports: [common_1.CommonModule, shared_4.SharedModule, card_1.MatCardModule, button_1.MatButtonModule, icon_1.MatIconModule] }); })();
        }
    };
});
