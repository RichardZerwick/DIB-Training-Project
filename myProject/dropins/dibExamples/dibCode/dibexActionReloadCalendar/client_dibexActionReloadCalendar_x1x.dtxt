System.register(["tslib", "@angular/core", "shared", "@angular/common/http", "@angular/forms", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/common", "@angular/material/card", "@angular/material/button", "@angular/material/icon", "@angular/material/select", "@ngbracket/ngx-layout/extended", "@angular/cdk/scrolling", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, shared_1, shared_2, http_1, forms_1, core_2, shared_3, rxjs_1, operators_1, core_3, common_1, shared_4, shared_5, card_1, button_1, icon_1, select_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, _c0, _c1, _c2, importsRequired, dibexActionReloadCalendarComponent, containerModules, fullDateTimeOptions, dibexActionReloadCalendarModule;
    var __moduleName = context_1 && context_1.id;
    function dibexActionReloadCalendarComponent_mat_progress_bar_0_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 34);
    } }
    function dibexActionReloadCalendarComponent_mat_progress_bar_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 34);
    } }
    function dibexActionReloadCalendarComponent_mat_option_25_Template(rf, ctx) { if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-option", 35, 36);
        i0.ɵɵlistener("onSelectionChange", function dibexActionReloadCalendarComponent_mat_option_25_Template_mat_option_onSelectionChange_0_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.lists.list6957.onSelectionChange($event)); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r5 = ctx.$implicit;
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵproperty("hidden", !!ctx_r4.lists.list6957.busy)("value", item_r5);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", item_r5.id_display_value, "");
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_3 = core_1_1;
                i0 = core_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                i2 = shared_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                i6 = forms_1_1;
            },
            function (core_2_1) {
                core_2 = core_2_1;
                i7 = core_2_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i3 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i14 = card_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i8 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i12 = select_1_1;
            },
            function (i4_1) {
                i4 = i4_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i9_1) {
                i9 = i9_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i13_1) {
                i13 = i13_1;
            }
        ],
        execute: function () {
            _c0 = ["cdk6957"];
            _c1 = ["cdkMatOption6957"];
            _c2 = function (a0) { return { "dib-editor": a0 }; };
            importsRequired = [];
            dibexActionReloadCalendarComponent = class dibexActionReloadCalendarComponent extends shared_1.BaseComponent {
                httpClient;
                sd;
                cd;
                cdkVirtualScrollViewPort6957;
                listOptions6957;
                view = { container: { id: 303, name: 'dibexActionReloadCalendar', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*6907'] }, dropin: 'plain', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: [], recordStatus: 'create', debug: false, debugItem: false };
                clientData;
                allClientData;
                model;
                constructor(injector, httpClient, viewContainerRef, sd, cd) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.sd = sd;
                    this.cd = cd;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list6957 = new shared_2.DibList("/peff/Crud/componentlist?containerName=dibexActionReloadCalendar&containerItemId=6957", null, null, 40);
                }
                ngOnInit() {
                    this.model = new shared_2.DibContainerModel(this.injector, 'dibexActionReloadCalendar');
                    this.containerName = 'dibexActionReloadCalendar'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { selectStaff: { itemId: 6957, type: 'multiselect', fieldAlias: 'selectStaff', formControl: new forms_1.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: 'selectStaff', default: '', dataType: 'multiselect', contentType: 'integer', changeUrl: false,
                            listId: 6957 }, };
                    this.model.$formGroup.addControl('selectStaff', this.model.modelItems.selectStaff.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.setInnerHtml('spanF12', `<i>View network requests in Developer Console (press F12 in Chrome -> Network)</i>`);
                    this.setInnerHtml('spanF12', `<i>View network requests in Developer Console (press F12 in Chrome -> Network)</i>`);
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnClientside", actionType: "click", responseType: 'actions', submitUrl: "shared.action.reload-calendar?containerName=self&itemAlias=calendar", itemAlias: "btnClientside", waitForCompletion: false, containerName: "dibexActionReloadCalendar", handlers: [] }, this.clientData, { itemEventId: 'ie398-dib', itemId: '6911', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnServerside", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Action/reloadCalendar", itemAlias: "btnServerside", waitForCompletion: false, containerName: "dibexActionReloadCalendar", handlers: [] }, this.clientData, { itemEventId: 'ie399-dib', itemId: '6912', });
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource6957 = this.lists.list6957.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange6957 = new Date().getTime();
                    let previousUrlChange6957;
                    let previousResponse6957;
                    this.lists.list6957.items = rxjs_1.combineLatest([this.lists.list6957.updatedList$, itemsUpdateSource6957]).pipe(operators_1.tap(() => { this.lists.list6957.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange6957 - new Date().getTime()) / 1000;
                        previousTimeChange6957 = new Date().getTime();
                        previousUrlChange6957 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse6957 = response;
                            this.lists.list6957.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list6957.items.subscribe(records => this.lists.list6957.lastItems = records);
                    this.lists.list6957.multiSelected = [];
                    this.lists.list6957.reset = function (isOpen) { if (isOpen) {
                        self.lists.list6957.updatedList$.next([]);
                        self.cdkVirtualScrollViewPort6957.scrollToIndex(5);
                        self.cdkVirtualScrollViewPort6957.scrollToIndex(0);
                        self.cdkVirtualScrollViewPort6957.checkViewportSize();
                        self.lists.list6957.searchForm.setValue('', { emitEvent: false });
                        self.lists.list6957.refresh();
                    }
                    else {
                        self.lists.list6957.searchForm.setValue('');
                        self.lists.list6957.updatedList$.next(self.lists.list6957.multiSelected);
                        self.model.modelItems.selectStaff.formControl.setValue(self.lists.list6957.multiSelected);
                    } };
                    this.lists.list6957.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list6957.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list6957.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list6957.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list6957.multiSelected.push(value);
                            }
                        }
                        lists.list6957.multiSelected = self.removeDuplicateIdsFromArray(lists.list6957.multiSelected);
                    };
                    lists = this.lists;
                    this.reloadContainer();
                }
                ngAfterViewInit() {
                    super.ngAfterViewInit();
                    this.lists.list6957.setupModel(this.model.modelItems.selectStaff.formControl);
                    this.sd
                        .scrolled().pipe(operators_1.takeUntil(this.onDestroy)).pipe(operators_1.filter(scrollable => this.cdkVirtualScrollViewPort6957 === scrollable)).subscribe(() => { this.refreshMultiSelectedItems(this.listOptions6957, this.lists.list6957, this.cd); });
                    this.lists.list6957.items.pipe(operators_1.takeUntil(this.onDestroy)).subscribe((items) => { this.refreshMultiSelectedItems(this.listOptions6957, this.lists.list6957, this.cd); });
                    window.dispatchEvent(new Event('resize'));
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list6957.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexActionReloadCalendar', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexActionReloadCalendar' });
                    this.reloadSubcontainers();
                }
                static ɵfac = function dibexActionReloadCalendarComponent_Factory(t) { return new (t || dibexActionReloadCalendarComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexActionReloadCalendarComponent, selectors: [["dibex-action-reload-calendar"]], viewQuery: function dibexActionReloadCalendarComponent_Query(rf, ctx) { if (rf & 1) {
                        i0.ɵɵviewQuery(_c0, 5);
                        i0.ɵɵviewQuery(_c1, 5);
                    } if (rf & 2) {
                        let _t;
                        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cdkVirtualScrollViewPort6957 = _t.first);
                        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOptions6957 = _t);
                    } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 44, vars: 30, consts: [["mode", "indeterminate", 4, "ngIf"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci6907", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexActionReloadCalendar", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci6908", "dibComponent", "card", 2, "width", "1035px !important", "overflow", "auto !important"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "gap", "15px"], [3, "dibPort"], ["id", "ci6913", "dibComponent", "span", 3, "innerHtml"], ["id", "ci6909", "dibComponent", "section", 2, "width", "800px !important", "overflow", "auto !important"], [2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px"], ["item-alias", "selectStaff", "id", "ci6957", "dibComponent", "selectMulti", "appearance", "standard", 2, "width", "350px !important", "display", "flex", "flex-direction", "column"], ["multiple", "", "formControlName", "selectStaff", "panelClass", "dib-combo-panel", 3, "compareWith", "openedChange"], ["select6957", ""], [2, "width", "100%"], ["autocomplete", "off", "aria-label", "Search", "matInput", "", 3, "placeholder", "formControl"], [2, "display", "flex", "flex-direction", "row"], [2, "display", "flex", "flex-direction", "column", "flex", "1 1 0%"], ["itemSize", "10"], ["cdk6957", ""], [3, "hidden", "value", "onSelectionChange", 4, "cdkVirtualFor", "cdkVirtualForOf"], [2, "display", "flex", "flex-direction", "column", "padding", "0px 6px"], ["aria-label", "Close", "matTooltip", "Close", "matTooltipClass", "dib-tooltip", 3, "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "close"], ["aria-label", "Clear", "matTooltip", "Clear", "matTooltipClass", "dib-tooltip", 3, "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "layers_clear"], ["id", "ci6910", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex", "1 1 0%", "overflow", "auto !important"], ["mat-raised-button", "", "color", "primary", "id", "ci6911", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnClientside", "type", "button", 2, "width", "150px !important", 3, "containerPortId"], [1, "dibButtonCaption"], ["mat-raised-button", "", "color", "primary", "id", "ci6912", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnServerside", "type", "button", 2, "width", "150px !important", 3, "containerPortId"], ["id", "ci6955", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "nowrap"], ["id", "ci6956", "dibComponent", "calendar", 3, "click"], ["crudUrl", "/dropins/dibExamples/Calendar", "crudContainerName", "testStaffProjectForm", "titleColumnName", "caption", "endDateColumnName", "date_to", "startDateColumnName", "date_from", "primaryIds", "id", "identifier", "calendar", 3, "container", "openEvent", "onCreateEvent"], ["mode", "indeterminate"], [3, "hidden", "value", "onSelectionChange"], ["cdkMatOption6957", ""]], template: function dibexActionReloadCalendarComponent_Template(rf, ctx) { if (rf & 1) {
                        const _r9 = i0.ɵɵgetCurrentView();
                        i0.ɵɵtemplate(0, dibexActionReloadCalendarComponent_mat_progress_bar_0_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(1, "form", 1);
                        i0.ɵɵlistener("ngSubmit", function dibexActionReloadCalendarComponent_Template_form_ngSubmit_1_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
                        i0.ɵɵelementContainer(4, 4);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(5, "mat-card", 5)(6, "mat-card-content", 6);
                        i0.ɵɵelementContainerStart(7, 7);
                        i0.ɵɵelement(8, "span", 8);
                        i0.ɵɵpipe(9, "safeHtml");
                        i0.ɵɵelementStart(10, "mat-card", 9)(11, "mat-card-content", 10)(12, "mat-form-field", 11)(13, "mat-label");
                        i0.ɵɵtext(14, "Select Staff (Leave Blank for All)");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(15, "mat-select", 12, 13);
                        i0.ɵɵlistener("openedChange", function dibexActionReloadCalendarComponent_Template_mat_select_openedChange_15_listener($event) { return ctx.lists.list6957.reset($event, ctx.model.modelItems.selectStaff.formControl); });
                        i0.ɵɵelementStart(17, "mat-optgroup");
                        i0.ɵɵtemplate(18, dibexActionReloadCalendarComponent_mat_progress_bar_18_Template, 1, 0, "mat-progress-bar", 0);
                        i0.ɵɵelementStart(19, "mat-form-field", 14);
                        i0.ɵɵelement(20, "input", 15);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(21, "div", 16)(22, "div", 17)(23, "cdk-virtual-scroll-viewport", 18, 19);
                        i0.ɵɵtemplate(25, dibexActionReloadCalendarComponent_mat_option_25_Template, 3, 3, "mat-option", 20);
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(26, "div", 21)(27, "span", 22);
                        i0.ɵɵlistener("click", function dibexActionReloadCalendarComponent_Template_span_click_27_listener() { i0.ɵɵrestoreView(_r9); const _r1 = i0.ɵɵreference(16); return i0.ɵɵresetView(_r1.toggle()); });
                        i0.ɵɵelement(28, "dib-icon", 23);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(29, "span", 24);
                        i0.ɵɵlistener("click", function dibexActionReloadCalendarComponent_Template_span_click_29_listener() { i0.ɵɵrestoreView(_r9); const _r1 = i0.ɵɵreference(16); ctx.lists.list6957.multiSelected = []; return i0.ɵɵresetView(_r1.toggle()); });
                        i0.ɵɵelement(30, "dib-icon", 25);
                        i0.ɵɵelementEnd()()()()()()();
                        i0.ɵɵelementStart(31, "div", 26);
                        i0.ɵɵelementContainerStart(32, 7);
                        i0.ɵɵelementStart(33, "button", 27)(34, "span", 28);
                        i0.ɵɵtext(35, "Origin: Client-side");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(36, "button", 29)(37, "span", 28);
                        i0.ɵɵtext(38, "Origin: Server-side");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(39, "mat-card", 30)(40, "mat-card-content", 31);
                        i0.ɵɵelementContainerStart(41, 7);
                        i0.ɵɵelementStart(42, "div", 32);
                        i0.ɵɵlistener("click", function dibexActionReloadCalendarComponent_Template_div_click_42_listener($event) { return ctx.navigationService.goTo("dibexTestStaffProjectForm", "main", "", { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx }); });
                        i0.ɵɵelementStart(43, "calendar", 33);
                        i0.ɵɵlistener("openEvent", function dibexActionReloadCalendarComponent_Template_calendar_openEvent_43_listener($event) { return ctx.navigationService.goTo("dibexTestStaffProjectForm", "main", $event, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx }); })("onCreateEvent", function dibexActionReloadCalendarComponent_Template_calendar_onCreateEvent_43_listener($event) { return ctx.navigationService.goTo("dibexTestStaffProjectForm", "main", $event, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx }); });
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                    } if (rf & 2) {
                        i0.ɵɵproperty("ngIf", ctx.busy);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(28, _c2, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6907");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6908");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(9, 26, ctx.getHtml("spanF12")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(7);
                        i0.ɵɵproperty("compareWith", ctx.selectCompareFn);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.lists.list6957.busy);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("placeholder", ctx.translate("global.dropdown.Search", "Search"))("formControl", ctx.lists.list6957.searchForm);
                        i0.ɵɵadvance(3);
                        i0.ɵɵstyleProp("height", 4 * 48, "px");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("cdkVirtualForOf", ctx.lists.list6957.lastItems);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6910");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Origin: Client-side");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Origin: Server-side");
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("dibPort", "6955");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("container", ctx.self);
                    } }, dependencies: [i3.NgClass, i3.NgIf, i4.DefaultClassDirective, i5.CdkFixedSizeVirtualScroll, i5.CdkVirtualForOf, i5.CdkVirtualScrollViewport, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormControlDirective, i6.FormGroupDirective, i6.FormControlName, i2.DibIconComponent, i2.CalendarComponent, i2.DibPortDirective, i2.DibListenersDirective, i2.DibRemoveFocusDirective, i7.MatOption, i7.MatOptgroup, i8.MatButton, i9.MatFormField, i9.MatLabel, i10.MatInput, i11.MatProgressBar, i12.MatSelect, i13.MatTooltip, i14.MatCard, i14.MatCardContent, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_1.EventHandler('reloaddibexActionReloadCalendar'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexActionReloadCalendarComponent.prototype, "reloadContainer", null);
            exports_1("dibexActionReloadCalendarComponent", dibexActionReloadCalendarComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexActionReloadCalendarComponent, [{
                    type: core_1.Component,
                    args: [{ selector: 'dibex-action-reload-calendar', template: `
<mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar><form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci6907 dibComponent=subcontainer   ><ng-container [dibPort]="'6907'" parentContainerName=dibexActionReloadCalendar  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><mat-card   style="  width:1035px !important;   overflow:auto !important;" id=ci6908 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 15px;"  ><ng-container [dibPort]="'6908'" ><span  id=ci6913 dibComponent=span   style="  "  [innerHtml]="getHtml('spanF12') | safeHtml" ></span><mat-card   style="  width:800px !important;   overflow:auto !important;" id=ci6909 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;"  ><mat-form-field style="display:flex; flex-direction:column; flex: 1 1 0%"  style="  width:350px !important;   display:flex; flex-direction: column;  "  item-alias=selectStaff  id=ci6957 dibComponent=selectMulti   appearance=standard   ><mat-label>Select Staff (Leave Blank for All)</mat-label><mat-select #select6957 multiple [compareWith]="selectCompareFn"   formControlName=selectStaff    panelClass=dib-combo-panel    (openedChange)="lists.list6957.reset($event,model.modelItems.selectStaff.formControl)"  ><mat-optgroup ><mat-progress-bar *ngIf="lists.list6957.busy" mode=indeterminate ></mat-progress-bar><mat-form-field style="width:100%;"><input autocomplete=off  [placeholder]="translate('global.dropdown.Search','Search')" aria-label=Search  matInput   [formControl]="lists.list6957.searchForm"></mat-form-field></mat-optgroup><div style="display: flex; flex-direction: row"><div style="display: flex; flex-direction: column;flex: 1 1 0%;"><cdk-virtual-scroll-viewport #cdk6957 itemSize=10  [style.height.px]=4*48><mat-option #cdkMatOption6957 (onSelectionChange)="lists.list6957.onSelectionChange($event)" [hidden]="!!lists.list6957.busy"  *cdkVirtualFor="let item of lists.list6957.lastItems" [value]="item"> {{item.id_display_value}}</mat-option></cdk-virtual-scroll-viewport></div><div style="display:flex;flex-direction:column; padding:0px 6px"><span (click)="select6957.toggle()"  aria-label=Close   matTooltip=Close   [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ><dib-icon src=close ></dib-icon></span><span (click)="lists.list6957.multiSelected = [];select6957.toggle()"  aria-label=Clear   matTooltip=Clear   [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   ><dib-icon src=layers_clear ></dib-icon></span></div></div></mat-select></mat-form-field></mat-card-content></mat-card><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex: 1 1 0%;  overflow:auto !important;" id=ci6910 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6910'" ><button  mat-raised-button color=primary  id=ci6911 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientside   style="  width:150px !important;   "  [attr.aria-label]="'Origin: Client-side'"  type=button  ><span class=dibButtonCaption >Origin: Client-side</span></button><button  mat-raised-button color=primary  id=ci6912 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnServerside   style="  width:150px !important;   "  [attr.aria-label]="'Origin: Server-side'"  type=button  ><span class=dibButtonCaption >Origin: Server-side</span></button></ng-container></div></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci6955 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'6955'" ><div  style="  " id=ci6956 dibComponent=calendar   (click)="navigationService.goTo(  'dibexTestStaffProjectForm',  'main',  '',   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });" ><calendar  style="  "  crudUrl = "/dropins/dibExamples/Calendar"  crudContainerName = "testStaffProjectForm"  titleColumnName = 'caption'  endDateColumnName = 'date_to'  startDateColumnName = 'date_from'  primaryIds = 'id'  identifier ="calendar"  [container] = "self"  (openEvent)="navigationService.goTo('dibexTestStaffProjectForm','main',$event,{changeUrl: true, target: '', mouseEvent: $event, originContainer : this});"  (onCreateEvent)="navigationService.goTo('dibexTestStaffProjectForm','main',$event,{changeUrl: true, target: '', mouseEvent: $event, originContainer : this});" ></calendar></div></ng-container></mat-card-content></mat-card></div></form>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }]; }, { cdkVirtualScrollViewPort6957: [{
                        type: core_1.ViewChild,
                        args: ["cdk6957", { static: false }]
                    }], listOptions6957: [{
                        type: core_1.ViewChildren,
                        args: ["cdkMatOption6957"]
                    }], reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, button_1.MatButtonModule, icon_1.MatIconModule, select_1.MatSelectModule];
            fullDateTimeOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }; // Can also add seconds
            dibexActionReloadCalendarModule = class dibexActionReloadCalendarModule {
                static entry = dibexActionReloadCalendarComponent;
                static ɵfac = function dibexActionReloadCalendarModule_Factory(t) { return new (t || dibexActionReloadCalendarModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexActionReloadCalendarModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], imports: [common_1.CommonModule, shared_4.SharedModule, containerModules] });
            };
            exports_1("default", dibexActionReloadCalendarModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexActionReloadCalendarModule, [{
                    type: core_3.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_4.SharedModule, ...containerModules], providers: [{ provide: core_2.DateAdapter, useClass: shared_5.DateFnsDateAdapter, deps: [core_2.MAT_DATE_LOCALE] },], declarations: [dibexActionReloadCalendarComponent], }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexActionReloadCalendarModule, { declarations: [dibexActionReloadCalendarComponent], imports: [common_1.CommonModule, shared_4.SharedModule, card_1.MatCardModule, button_1.MatButtonModule, icon_1.MatIconModule, select_1.MatSelectModule] }); })();
        }
    };
});
