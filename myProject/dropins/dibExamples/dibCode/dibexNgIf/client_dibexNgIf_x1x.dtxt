System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/card", "@angular/material/datepicker", "@angular/material/select", "@angular/material/checkbox", "@angular/material/button", "@angular/material/icon", "@ngbracket/ngx-layout/extended", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, card_1, datepicker_1, core_5, select_1, checkbox_1, button_1, icon_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, _c0, _c1, _c2, _c3, _c4, _c5, _c6, _c7, importsRequired, dibexNgIfComponent, containerModules, dibexNgIfModule;
    var __moduleName = context_1 && context_1.id;
    function dibexNgIfComponent_mat_option_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 68);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r33 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r33.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r33.id_display_value, "");
    } }
    function dibexNgIfComponent_mat_form_field_36_Template(rf, ctx) { if (rf & 1) {
        const _r36 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-form-field", 69)(1, "mat-label");
        i0.ɵɵtext(2, "datepicker");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "input", 70);
        i0.ɵɵlistener("focus", function dibexNgIfComponent_mat_form_field_36_Template_input_focus_3_listener() { i0.ɵɵrestoreView(_r36); const _r34 = i0.ɵɵreference(6); return i0.ɵɵresetView(_r34.open()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "mat-datepicker-toggle", 71)(5, "mat-datepicker", null, 72);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r34 = i0.ɵɵreference(6);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("matDatepicker", _r34)("placeholder", "datepicker");
        i0.ɵɵattribute("aria-label", "datepicker");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r34);
    } }
    function dibexNgIfComponent_mat_card_52_mat_form_field_13_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-form-field", 79)(1, "mat-label");
        i0.ɵɵtext(2, "inputText");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "input", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵattribute("aria-label", "inputText");
    } }
    function dibexNgIfComponent_mat_card_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-card", 73)(1, "mat-card-content", 26)(2, "mat-form-field", 74)(3, "mat-label");
        i0.ɵɵtext(4, "inputNumber");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(5, "input", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(6, "span", 76)(7, "div", 8)(8, "b");
        i0.ɵɵtext(9, "*ngIf=\"!!getValue('datepicker')\"");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(10, "br");
        i0.ɵɵelementStart(11, "i");
        i0.ɵɵtext(12, "Include inputText only if datepicker has a value");
        i0.ɵɵelementEnd()()();
        i0.ɵɵtemplate(13, dibexNgIfComponent_mat_card_52_mat_form_field_13_Template, 4, 1, "mat-form-field", 77);
        i0.ɵɵelementStart(14, "mat-checkbox", 78);
        i0.ɵɵtext(15, " checkbox ");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(5);
        i0.ɵɵattribute("aria-label", "inputNumber");
        i0.ɵɵadvance(8);
        i0.ɵɵproperty("ngIf", !!ctx_r2.getValue("datepicker"));
    } }
    function dibexNgIfComponent_th_78_Template(rf, ctx) { if (rf & 1) {
        const _r39 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 81)(1, "mat-checkbox", 82);
        i0.ɵɵlistener("click", function dibexNgIfComponent_th_78_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r38 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r38.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexNgIfComponent_td_79_Template(rf, ctx) { if (rf & 1) {
        const _r43 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 83)(1, "mat-checkbox", 84);
        i0.ɵɵlistener("click", function dibexNgIfComponent_td_79_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexNgIfComponent_td_79_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r43); const row_r40 = restoredCtx.$implicit; const ctx_r42 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r42.selection.toggle(row_r40) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r40 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r40));
    } }
    function dibexNgIfComponent_td_81_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r45 = i0.ɵɵnextContext(2).index;
        const ctx_r48 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r48.findColumnDisplayValue(rowIndex_r45, "id", "none", "number"), "");
    } }
    function dibexNgIfComponent_td_81_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_81_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r57 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_td_81_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r57); const ctx_r56 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r56.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_81_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_81_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 97);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_81_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89)(1, "mat-form-field", 90);
        i0.ɵɵelement(2, "input", 91);
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_81_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 65);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_81_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_81_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵtemplate(6, dibexNgIfComponent_td_81_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 94);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r44 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r49 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r49.hasError("id", "required", rowForm_r44));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r49.view.recordStatus == "update" && ctx_r49.notSaved("id", rowForm_r44));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r49.view.recordStatus == "update" && ctx_r49.isSaved("id", rowForm_r44));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r49.isInvalid("id", rowForm_r44));
    } }
    function dibexNgIfComponent_td_81_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_td_81_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 87);
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_81_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_81_ng_container_1_span_4_Template, 7, 5, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_81_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r44 = i0.ɵɵnextContext().$implicit;
        const ctx_r46 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r46.excelEditing == false && rowForm_r44.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r46.excelEditing == true || rowForm_r44.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r46.excelEditing == false && rowForm_r44.get("__edit").value === false);
    } }
    function dibexNgIfComponent_td_81_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 85);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_81_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r44 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r44);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r44.getRawValue());
    } }
    function dibexNgIfComponent_th_82_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 105);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_82_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexNgIfComponent_th_82_div_2_span_2_Template, 2, 0, "span", 104);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r60 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r60.editorOpen);
    } }
    function dibexNgIfComponent_th_82_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_82_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r67 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_th_82_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r67); const ctx_r66 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r66.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_82_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_82_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r69 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 108)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_th_82_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r69); const ctx_r68 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r68.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_th_82_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r69); const ctx_r70 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r70.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_th_82_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_th_82_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r62 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r62.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.view.recordStatus == "update" && ctx_r62.notSaved("id", ctx_r62.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.view.recordStatus == "update" && ctx_r62.isSaved("id", ctx_r62.model.$formGroup));
    } }
    function dibexNgIfComponent_th_82_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 98)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_th_82_div_2_Template, 3, 1, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_th_82_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_th_82_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
    } }
    function dibexNgIfComponent_td_84_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r72 = i0.ɵɵnextContext(2).index;
        const ctx_r75 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r75.findColumnDisplayValue(rowIndex_r72, "name", "none", "text"), "");
    } }
    function dibexNgIfComponent_td_84_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_84_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_84_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r84 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_td_84_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r84); const ctx_r83 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r83.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_84_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_84_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r86 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 89)(1, "mat-form-field", 112)(2, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_td_84_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r86); const ctx_r85 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r85.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_td_84_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r86); const ctx_r87 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r87.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_84_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 65);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_84_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 65);
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_84_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_td_84_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r71 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r76 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r76.hasError("name", "required", rowForm_r71));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r76.hasError("name", "maxlength", rowForm_r71));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r76.view.recordStatus == "update" && ctx_r76.notSaved("name", rowForm_r71));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r76.view.recordStatus == "update" && ctx_r76.isSaved("name", rowForm_r71));
    } }
    function dibexNgIfComponent_td_84_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_td_84_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 111);
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_84_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_84_ng_container_1_span_4_Template, 7, 5, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_84_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r73 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r73.excelEditing == false && rowForm_r71.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r73.excelEditing == true || rowForm_r71.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r73.excelEditing == false && rowForm_r71.get("__edit").value === false);
    } }
    function dibexNgIfComponent_td_84_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 110);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_84_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r71 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r71);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r71.getRawValue());
    } }
    function dibexNgIfComponent_th_85_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 105);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_85_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexNgIfComponent_th_85_div_2_span_2_Template, 2, 0, "span", 104);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r90 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r90.editorOpen);
    } }
    function dibexNgIfComponent_th_85_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_85_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r97 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_th_85_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r97); const ctx_r96 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r96.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_85_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_85_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r99 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_th_85_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r99); const ctx_r98 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r98.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_th_85_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r99); const ctx_r100 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r100.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_th_85_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_th_85_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r92 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r92.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.view.recordStatus == "update" && ctx_r92.notSaved("name", ctx_r92.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.view.recordStatus == "update" && ctx_r92.isSaved("name", ctx_r92.model.$formGroup));
    } }
    function dibexNgIfComponent_th_85_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_th_85_div_2_Template, 3, 1, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_th_85_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_th_85_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexNgIfComponent_td_87_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r102 = i0.ɵɵnextContext(2).index;
        const ctx_r105 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r105.findColumnDisplayValue(rowIndex_r102, "notes", "none", "text"), "");
    } }
    function dibexNgIfComponent_td_87_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r112 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_td_87_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r112); const ctx_r111 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r111.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_87_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_87_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r114 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 89)(1, "mat-form-field", 119)(2, "textarea", 120);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_td_87_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r114); const ctx_r113 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r113.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_td_87_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r114); const ctx_r115 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r115.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_87_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_87_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r101 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r106 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r106.view.recordStatus == "update" && ctx_r106.notSaved("notes", rowForm_r101));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r106.view.recordStatus == "update" && ctx_r106.isSaved("notes", rowForm_r101));
    } }
    function dibexNgIfComponent_td_87_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_td_87_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 118);
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_87_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_87_ng_container_1_span_4_Template, 5, 3, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_87_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r101 = i0.ɵɵnextContext().$implicit;
        const ctx_r103 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r103.excelEditing == false && rowForm_r101.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r103.excelEditing == true || rowForm_r101.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r103.excelEditing == false && rowForm_r101.get("__edit").value === false);
    } }
    function dibexNgIfComponent_td_87_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 117);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_87_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r101 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r101);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r101.getRawValue());
    } }
    function dibexNgIfComponent_th_88_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_88_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_88_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r124 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_th_88_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r124); const ctx_r123 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r123.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_88_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_88_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r126 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 122)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_th_88_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r126); const ctx_r125 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r125.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_th_88_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r126); const ctx_r127 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r127.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_th_88_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_th_88_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r120 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r120.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.notSaved("notes", ctx_r120.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.isSaved("notes", ctx_r120.model.$formGroup));
    } }
    function dibexNgIfComponent_th_88_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 121)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_th_88_div_2_Template, 2, 0, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_th_88_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_th_88_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexNgIfComponent_td_90_ng_container_1_button_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "button", 127)(1, "span", 14);
        i0.ɵɵtext(2, "Show If VIP");
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r131 = i0.ɵɵnextContext().ngIf;
        const ctx_r132 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("actionData", row_r131)("containerPortId", ctx_r132.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show If VIP");
    } }
    function dibexNgIfComponent_td_90_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 125)(2, "div");
        i0.ɵɵelementContainerStart(3, 6);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_90_ng_container_1_button_4_Template, 3, 3, "button", 126);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r131 = ctx.ngIf;
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "6750");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r131.vip == 1);
    } }
    function dibexNgIfComponent_td_90_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 124);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_90_ng_container_1_Template, 5, 2, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r128 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r128);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r128.getRawValue());
    } }
    function dibexNgIfComponent_th_91_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 128)(1, "div", 99)(2, "div");
        i0.ɵɵtext(3, " Actions ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgIfComponent_td_93_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "button", 131)(1, "span", 14);
        i0.ɵɵtext(2, "Show If VIP");
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r137 = i0.ɵɵnextContext().ngIf;
        const ctx_r138 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("actionData", row_r137)("containerPortId", ctx_r138.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show If VIP");
    } }
    function dibexNgIfComponent_td_93_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_93_ng_container_1_button_1_Template, 3, 3, "button", 130);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r137 = ctx.ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r137.vip == 1);
    } }
    function dibexNgIfComponent_td_93_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 129);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_93_ng_container_1_Template, 2, 1, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r134 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r134);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r134.getRawValue());
    } }
    function dibexNgIfComponent_th_94_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132)(1, "div", 99)(2, "div");
        i0.ɵɵtext(3, " Show If VIP ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgIfComponent_td_96_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r141 = i0.ɵɵnextContext(2).index;
        const ctx_r144 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r144.findColumnDisplayValue(rowIndex_r141, "start_date", "none", "date"), "");
    } }
    function dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r153 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r153); const ctx_r152 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r152.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
        const _r155 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-form-field", 136)(1, "input", 137);
        i0.ɵɵlistener("focus", function dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_Template_input_focus_1_listener() { i0.ɵɵrestoreView(_r155); const _r149 = i0.ɵɵreference(4); return i0.ɵɵresetView(_r149.open()); })("keydown.enter", function dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_Template_input_keydown_enter_1_listener() { i0.ɵɵrestoreView(_r155); const ctx_r156 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r156.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_Template_input_keydown_esc_1_listener() { i0.ɵɵrestoreView(_r155); const ctx_r157 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r157.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(2, "mat-datepicker-toggle", 71)(3, "mat-datepicker", null, 138);
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r149 = i0.ɵɵreference(4);
        const rowForm_r140 = i0.ɵɵnextContext(3).$implicit;
        const ctx_r148 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matDatepicker", _r149);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r149);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r148.view.recordStatus == "update" && ctx_r148.notSaved("start_date", rowForm_r140));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r148.view.recordStatus == "update" && ctx_r148.isSaved("start_date", rowForm_r140));
    } }
    function dibexNgIfComponent_td_96_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_96_ng_container_1_span_4_mat_form_field_1_Template, 7, 5, "mat-form-field", 135);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r143 = i0.ɵɵnextContext().ngIf;
        const ctx_r145 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !!row_r143.notes && row_r143.notes.toLowerCase() > "n" || ctx_r145.formatDate("datepicker", "yyyy-MM-dd") > ctx_r145.resolve("dibDate"));
    } }
    function dibexNgIfComponent_td_96_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_td_96_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 134);
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_96_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_96_ng_container_1_span_4_Template, 2, 1, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_96_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r140 = i0.ɵɵnextContext().$implicit;
        const ctx_r142 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r142.excelEditing == false && rowForm_r140.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r142.excelEditing == true || rowForm_r140.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r142.excelEditing == false && rowForm_r140.get("__edit").value === false);
    } }
    function dibexNgIfComponent_td_96_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 133);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_96_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r140 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r140);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r140.getRawValue());
    } }
    function dibexNgIfComponent_th_97_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_97_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_97_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r167 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_th_97_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r167); const ctx_r166 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r166.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_97_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_97_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r169 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 140)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 141);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_th_97_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r169); const ctx_r168 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r168.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_th_97_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r169); const ctx_r170 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r170.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_th_97_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_th_97_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r163 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r163.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r163.view.recordStatus == "update" && ctx_r163.notSaved("start_date", ctx_r163.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r163.view.recordStatus == "update" && ctx_r163.isSaved("start_date", ctx_r163.model.$formGroup));
    } }
    function dibexNgIfComponent_th_97_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 139)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_th_97_div_2_Template, 2, 0, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_th_97_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_th_97_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexNgIfComponent_td_99_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 145);
        i0.ɵɵelement(1, "div", 146);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r172 = i0.ɵɵnextContext(2).index;
        const ctx_r175 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c0, ctx_r175.findColumnDisplayValue(rowIndex_r172, "vip", "none", "boolean") == 1));
    } }
    function dibexNgIfComponent_td_99_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵelement(1, "mat-checkbox", 147);
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_td_99_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_td_99_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 143);
        i0.ɵɵtemplate(3, dibexNgIfComponent_td_99_ng_container_1_span_3_Template, 2, 3, "span", 144);
        i0.ɵɵtemplate(4, dibexNgIfComponent_td_99_ng_container_1_span_4_Template, 2, 0, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_td_99_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r171 = i0.ɵɵnextContext().$implicit;
        const ctx_r173 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r173.excelEditing == false && rowForm_r171.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r173.excelEditing == true || rowForm_r171.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r173.excelEditing == false && rowForm_r171.get("__edit").value === false);
    } }
    function dibexNgIfComponent_td_99_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 142);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_99_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r171 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r171);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r171.getRawValue());
    } }
    function dibexNgIfComponent_th_100_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Vip ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_100_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Vip");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_100_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r186 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_th_100_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r186); const ctx_r185 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r185.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_100_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_th_100_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r188 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 149)(2, "mat-label");
        i0.ɵɵtext(3, "Vip");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 150);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_th_100_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r188); const ctx_r187 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r187.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_th_100_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r188); const ctx_r189 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r189.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_th_100_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_th_100_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r182 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r182.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Vip");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r182.view.recordStatus == "update" && ctx_r182.notSaved("vip", ctx_r182.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r182.view.recordStatus == "update" && ctx_r182.isSaved("vip", ctx_r182.model.$formGroup));
    } }
    function dibexNgIfComponent_th_100_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 148)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_th_100_div_2_Template, 2, 0, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_th_100_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_th_100_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexNgIfComponent_td_102_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 151);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r192 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate2("", ctx_r192.formatDate("datepicker", "yyyy-MM-dd"), "\u00A0 > \u00A0 ", ctx_r192.resolve("dibDate"), "");
    } }
    function dibexNgIfComponent_td_102_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 129);
        i0.ɵɵtemplate(1, dibexNgIfComponent_td_102_ng_container_1_Template, 3, 2, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r190 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r190);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r190.getRawValue());
    } }
    function dibexNgIfComponent_th_103_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132)(1, "div", 99)(2, "div", 103);
        i0.ɵɵtext(3, " Interpolation ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgIfComponent_th_105_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 154);
    } }
    function dibexNgIfComponent_th_105_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 152);
        i0.ɵɵtemplate(1, dibexNgIfComponent_th_105_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 153);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r22 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r22.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r22.busy);
    } }
    function dibexNgIfComponent_th_107_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r195 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r195.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexNgIfComponent_th_107_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 155);
        i0.ɵɵtemplate(1, dibexNgIfComponent_th_107_span_1_Template, 2, 1, "span", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r23.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r23.busy && ctx_r23.tableDataSource.data.length == 0);
    } }
    function dibexNgIfComponent_ng_container_108_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 157);
    } }
    function dibexNgIfComponent_ng_container_108_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_container_108_tr_1_Template, 1, 0, "tr", 156);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r196 = ctx.$implicit;
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r24.columnHeaders.getArray(column_r196).items$));
    } }
    function dibexNgIfComponent_tr_109_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 158);
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r25.busy ? "visible" : "hidden"));
    } }
    function dibexNgIfComponent_tr_110_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 158);
    } if (rf & 2) {
        const ctx_r26 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r26.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexNgIfComponent_tr_111_Template(rf, ctx) { if (rf & 1) {
        const _r201 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 159);
        i0.ɵɵlistener("click", function dibexNgIfComponent_tr_111_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r201); const row_r198 = restoredCtx.$implicit; const ctx_r200 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r200.rowClick(row_r198, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r198 = ctx.$implicit;
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r27.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r27.isHighlighted(row_r198)));
    } }
    function dibexNgIfComponent_113_ng_template_0_Template(rf, ctx) { }
    function dibexNgIfComponent_113_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexNgIfComponent_113_ng_template_0_Template, 0, 0, "ng-template", 160);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r31 = i0.ɵɵreference(118);
        i0.ɵɵproperty("ngTemplateOutlet", _r31);
    } }
    function dibexNgIfComponent_mat_toolbar_116_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r207 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 166);
        i0.ɵɵlistener("click", function dibexNgIfComponent_mat_toolbar_116_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r207); const ctx_r206 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r206.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r203 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r203.numberOfSelectedItems + " ", "item", ctx_r203.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexNgIfComponent_mat_toolbar_116_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_mat_toolbar_116_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_mat_toolbar_116_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r211 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 167);
        i0.ɵɵlistener("click", function dibexNgIfComponent_mat_toolbar_116_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r211); const ctx_r210 = i0.ɵɵnextContext(2); ctx_r210.gridShowClipboardDefault = !ctx_r210.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r210.gridShowClipboardDefault && ctx_r210.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexNgIfComponent_mat_toolbar_116_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(2, dibexNgIfComponent_mat_toolbar_116_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r204 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r204.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r204.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r204.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexNgIfComponent_mat_toolbar_116_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r214 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 168, 169);
        i0.ɵɵlistener("page", function dibexNgIfComponent_mat_toolbar_116_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r214); const ctx_r213 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r213.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r205 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r205.page.totalRecords)("pageSize", ctx_r205.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexNgIfComponent_mat_toolbar_116_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 161);
        i0.ɵɵtemplate(2, dibexNgIfComponent_mat_toolbar_116_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 162);
        i0.ɵɵtemplate(3, dibexNgIfComponent_mat_toolbar_116_button_3_Template, 4, 3, "button", 163);
        i0.ɵɵelement(4, "span", 164);
        i0.ɵɵtemplate(5, dibexNgIfComponent_mat_toolbar_116_mat_paginator_5_Template, 2, 4, "mat-paginator", 165);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r30.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", false);
    } }
    function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r237 = i0.ɵɵnextContext(2).index;
        const ctx_r240 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r240.findColumnDisplayValue(rowIndex_r237, "id", "none", "number"), "");
    } }
    function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r248 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r248); const ctx_r247 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r247.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r250 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 89)(1, "mat-form-field", 90)(2, "input", 174);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r250); const ctx_r249 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r249.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r250); const ctx_r251 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r251.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 65);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r236 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r241 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r241.hasError("id", "required", rowForm_r236));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r241.view.recordStatus == "update" && ctx_r241.notSaved("id", rowForm_r236));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r241.view.recordStatus == "update" && ctx_r241.isSaved("id", rowForm_r236));
    } }
    function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_ng_template_117_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 87);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_4_Template, 6, 4, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_2_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r236 = i0.ɵɵnextContext().$implicit;
        const ctx_r238 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r238.excelEditing == false && rowForm_r236.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r238.excelEditing == true || rowForm_r236.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r238.excelEditing == false && rowForm_r236.get("__edit").value === false);
    } }
    function dibexNgIfComponent_ng_template_117_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 85);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_2_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r236 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r236);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r236.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_3_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 105);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_3_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_th_3_div_2_span_2_Template, 2, 0, "span", 104);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r254 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r254.editorOpen);
    } }
    function dibexNgIfComponent_ng_template_117_th_3_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_3_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r261 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_th_3_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r261); const ctx_r260 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r260.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_3_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_3_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r263 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 108)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_th_3_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r263); const ctx_r262 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r262.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_th_3_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r263); const ctx_r264 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r264.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_th_3_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_th_3_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r256 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r256.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r256.view.recordStatus == "update" && ctx_r256.notSaved("id", ctx_r256.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r256.view.recordStatus == "update" && ctx_r256.isSaved("id", ctx_r256.model.$formGroup));
    } }
    function dibexNgIfComponent_ng_template_117_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 98)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_th_3_div_2_Template, 3, 1, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_th_3_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_th_3_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r216 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r216.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r216.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r216.showSearch);
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r266 = i0.ɵɵnextContext(2).index;
        const ctx_r269 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r269.findColumnDisplayValue(rowIndex_r266, "name", "none", "text"), "");
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r278 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r278); const ctx_r277 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r277.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r280 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 89)(1, "mat-form-field", 112)(2, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r280); const ctx_r279 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r279.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r280); const ctx_r281 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r281.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 65);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 65);
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r265 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r270 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.hasError("name", "required", rowForm_r265));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.hasError("name", "maxlength", rowForm_r265));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.view.recordStatus == "update" && ctx_r270.notSaved("name", rowForm_r265));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.view.recordStatus == "update" && ctx_r270.isSaved("name", rowForm_r265));
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_ng_template_117_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 111);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_4_Template, 7, 5, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r265 = i0.ɵɵnextContext().$implicit;
        const ctx_r267 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r267.excelEditing == false && rowForm_r265.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.excelEditing == true || rowForm_r265.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.excelEditing == false && rowForm_r265.get("__edit").value === false);
    } }
    function dibexNgIfComponent_ng_template_117_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 110);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_5_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r265 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r265);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r265.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 105);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_th_6_div_2_span_2_Template, 2, 0, "span", 104);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r284 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r284.editorOpen);
    } }
    function dibexNgIfComponent_ng_template_117_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r291 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r291); const ctx_r290 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r290.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r293 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r293); const ctx_r292 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r292.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r293); const ctx_r294 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r294.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r286 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r286.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.view.recordStatus == "update" && ctx_r286.notSaved("name", ctx_r286.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.view.recordStatus == "update" && ctx_r286.isSaved("name", ctx_r286.model.$formGroup));
    } }
    function dibexNgIfComponent_ng_template_117_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 114)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_th_6_div_2_Template, 3, 1, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_th_6_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_th_6_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r218 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r218.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r218.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r218.showSearch);
    } }
    function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r296 = i0.ɵɵnextContext(2).index;
        const ctx_r299 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r299.findColumnDisplayValue(rowIndex_r296, "notes", "none", "text"), "");
    } }
    function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r306 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r306); const ctx_r305 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r305.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r308 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 89)(1, "mat-form-field", 119)(2, "textarea", 120);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r308); const ctx_r307 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r307.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r308); const ctx_r309 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r309.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r295 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r300 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.view.recordStatus == "update" && ctx_r300.notSaved("notes", rowForm_r295));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.view.recordStatus == "update" && ctx_r300.isSaved("notes", rowForm_r295));
    } }
    function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_ng_template_117_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 118);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_4_Template, 5, 3, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_8_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r295 = i0.ɵɵnextContext().$implicit;
        const ctx_r297 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r297.excelEditing == false && rowForm_r295.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r297.excelEditing == true || rowForm_r295.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r297.excelEditing == false && rowForm_r295.get("__edit").value === false);
    } }
    function dibexNgIfComponent_ng_template_117_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 117);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_8_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r295 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r295);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r295.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r318 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r318); const ctx_r317 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r317.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r320 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 122)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r320); const ctx_r319 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r319.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r320); const ctx_r321 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r321.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r314 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r314.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r314.view.recordStatus == "update" && ctx_r314.notSaved("notes", ctx_r314.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r314.view.recordStatus == "update" && ctx_r314.isSaved("notes", ctx_r314.model.$formGroup));
    } }
    function dibexNgIfComponent_ng_template_117_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 121)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_th_9_div_2_Template, 2, 0, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_th_9_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_th_9_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r220 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r220.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r220.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r220.showSearch);
    } }
    function dibexNgIfComponent_ng_template_117_td_11_ng_container_1_button_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "button", 127)(1, "span", 14);
        i0.ɵɵtext(2, "Show If VIP");
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r325 = i0.ɵɵnextContext().ngIf;
        const ctx_r326 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("actionData", row_r325)("containerPortId", ctx_r326.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show If VIP");
    } }
    function dibexNgIfComponent_ng_template_117_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 125)(2, "div");
        i0.ɵɵelementContainerStart(3, 6);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_11_ng_container_1_button_4_Template, 3, 3, "button", 126);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r325 = ctx.ngIf;
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "6750");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r325.vip == 1);
    } }
    function dibexNgIfComponent_ng_template_117_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 124);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_11_ng_container_1_Template, 5, 2, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r322 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r322);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r322.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 128)(1, "div", 99)(2, "div");
        i0.ɵɵtext(3, " Actions ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgIfComponent_ng_template_117_td_14_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "button", 131)(1, "span", 14);
        i0.ɵɵtext(2, "Show If VIP");
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r331 = i0.ɵɵnextContext().ngIf;
        const ctx_r332 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("actionData", row_r331)("containerPortId", ctx_r332.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show If VIP");
    } }
    function dibexNgIfComponent_ng_template_117_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_14_ng_container_1_button_1_Template, 3, 3, "button", 130);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r331 = ctx.ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r331.vip == 1);
    } }
    function dibexNgIfComponent_ng_template_117_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 129);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_14_ng_container_1_Template, 2, 1, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r328 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r328);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r328.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132)(1, "div", 99)(2, "div");
        i0.ɵɵtext(3, " Show If VIP ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r335 = i0.ɵɵnextContext(2).index;
        const ctx_r338 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r338.findColumnDisplayValue(rowIndex_r335, "start_date", "none", "date"), "");
    } }
    function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r347 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r347); const ctx_r346 = i0.ɵɵnextContext(6); return i0.ɵɵresetView(ctx_r346.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
        const _r349 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-form-field", 136)(1, "input", 137);
        i0.ɵɵlistener("focus", function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_Template_input_focus_1_listener() { i0.ɵɵrestoreView(_r349); const _r343 = i0.ɵɵreference(4); return i0.ɵɵresetView(_r343.open()); })("keydown.enter", function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_Template_input_keydown_enter_1_listener() { i0.ɵɵrestoreView(_r349); const ctx_r350 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r350.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_Template_input_keydown_esc_1_listener() { i0.ɵɵrestoreView(_r349); const ctx_r351 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r351.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(2, "mat-datepicker-toggle", 71)(3, "mat-datepicker", null, 138);
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r343 = i0.ɵɵreference(4);
        const rowForm_r334 = i0.ɵɵnextContext(3).$implicit;
        const ctx_r342 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matDatepicker", _r343);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r343);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r342.view.recordStatus == "update" && ctx_r342.notSaved("start_date", rowForm_r334));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r342.view.recordStatus == "update" && ctx_r342.isSaved("start_date", rowForm_r334));
    } }
    function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_mat_form_field_1_Template, 7, 5, "mat-form-field", 135);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r337 = i0.ɵɵnextContext().ngIf;
        const ctx_r339 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !!row_r337.notes && row_r337.notes.toLowerCase() > "n" || ctx_r339.formatDate("datepicker", "yyyy-MM-dd") > ctx_r339.resolve("dibDate"));
    } }
    function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_ng_template_117_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 134);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_3_Template, 2, 1, "span", 88);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_4_Template, 2, 1, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_17_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r334 = i0.ɵɵnextContext().$implicit;
        const ctx_r336 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r336.excelEditing == false && rowForm_r334.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r336.excelEditing == true || rowForm_r334.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r336.excelEditing == false && rowForm_r334.get("__edit").value === false);
    } }
    function dibexNgIfComponent_ng_template_117_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 133);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_17_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r334 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r334);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r334.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r361 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r361); const ctx_r360 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r360.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r363 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 140)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 141);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r363); const ctx_r362 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r362.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r363); const ctx_r364 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r364.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r357 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r357.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r357.view.recordStatus == "update" && ctx_r357.notSaved("start_date", ctx_r357.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r357.view.recordStatus == "update" && ctx_r357.isSaved("start_date", ctx_r357.model.$formGroup));
    } }
    function dibexNgIfComponent_ng_template_117_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 139)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_th_18_div_2_Template, 2, 0, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_th_18_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_th_18_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r226 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r226.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r226.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r226.showSearch);
    } }
    function dibexNgIfComponent_ng_template_117_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 145);
        i0.ɵɵelement(1, "div", 146);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r366 = i0.ɵɵnextContext(2).index;
        const ctx_r369 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c0, ctx_r369.findColumnDisplayValue(rowIndex_r366, "vip", "none", "boolean") == 1));
    } }
    function dibexNgIfComponent_ng_template_117_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 89);
        i0.ɵɵelement(1, "mat-checkbox", 147);
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgIfComponent_ng_template_117_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 86)(2, "span", 143);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_td_20_ng_container_1_span_3_Template, 2, 3, "span", 144);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_td_20_ng_container_1_span_4_Template, 2, 0, "span", 88);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_20_ng_container_1_span_5_Template, 1, 0, "span", 65);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r365 = i0.ɵɵnextContext().$implicit;
        const ctx_r367 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r367.excelEditing == false && rowForm_r365.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r367.excelEditing == true || rowForm_r365.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r367.excelEditing == false && rowForm_r365.get("__edit").value === false);
    } }
    function dibexNgIfComponent_ng_template_117_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 142);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_20_ng_container_1_Template, 6, 3, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r365 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r365);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r365.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, " Vip ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 106);
        i0.ɵɵtext(1, "Vip");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r380 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r380); const ctx_r379 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r379.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 96);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgIfComponent_ng_template_117_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r382 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107)(1, "mat-form-field", 149)(2, "mat-label");
        i0.ɵɵtext(3, "Vip");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 150);
        i0.ɵɵlistener("keydown.enter", function dibexNgIfComponent_ng_template_117_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r382); const ctx_r381 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r381.searchGrid(false)); })("keydown.esc", function dibexNgIfComponent_ng_template_117_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r382); const ctx_r383 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r383.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 93);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r376 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r376.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Vip");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r376.view.recordStatus == "update" && ctx_r376.notSaved("vip", ctx_r376.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r376.view.recordStatus == "update" && ctx_r376.isSaved("vip", ctx_r376.model.$formGroup));
    } }
    function dibexNgIfComponent_ng_template_117_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 148)(1, "div", 99);
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_th_21_div_2_Template, 2, 0, "div", 100);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_th_21_div_3_Template, 2, 0, "div", 101);
        i0.ɵɵtemplate(4, dibexNgIfComponent_ng_template_117_th_21_div_4_Template, 7, 4, "div", 102);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r228 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r228.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r228.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r228.showSearch);
    } }
    function dibexNgIfComponent_ng_template_117_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 151);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r386 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate2("", ctx_r386.formatDate("datepicker", "yyyy-MM-dd"), "\u00A0 > \u00A0 ", ctx_r386.resolve("dibDate"), "");
    } }
    function dibexNgIfComponent_ng_template_117_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 129);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_td_23_ng_container_1_Template, 3, 2, "ng-container", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r384 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r384);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r384.getRawValue());
    } }
    function dibexNgIfComponent_ng_template_117_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132)(1, "div", 99)(2, "div", 103);
        i0.ɵɵtext(3, " Interpolation ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgIfComponent_ng_template_117_th_26_Template(rf, ctx) { if (rf & 1) {
        const _r389 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 81)(1, "mat-checkbox", 175);
        i0.ɵɵlistener("change", function dibexNgIfComponent_ng_template_117_th_26_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r389); const ctx_r388 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r388.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r231 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r231.masterIsChecked)("indeterminate", ctx_r231.masterIsIndeterminate);
    } }
    function dibexNgIfComponent_ng_template_117_td_27_Template(rf, ctx) { if (rf & 1) {
        const _r393 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 176)(1, "mat-checkbox", 84);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_td_27_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexNgIfComponent_ng_template_117_td_27_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r393); const row_r390 = restoredCtx.$implicit; const ctx_r392 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r392.selection.toggle(row_r390) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r390 = ctx.$implicit;
        const ctx_r232 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r232.isHighlighted(row_r390));
    } }
    function dibexNgIfComponent_ng_template_117_th_29_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 154);
    } }
    function dibexNgIfComponent_ng_template_117_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 177);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_th_29_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 153);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r233 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r233.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r233.busy);
    } }
    function dibexNgIfComponent_ng_template_117_th_31_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r395 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r395.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexNgIfComponent_ng_template_117_th_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 155);
        i0.ɵɵtemplate(1, dibexNgIfComponent_ng_template_117_th_31_span_1_Template, 2, 1, "span", 65);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r234 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r234.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r234.busy && ctx_r234.tableDataSource.data.length == 0);
    } }
    function dibexNgIfComponent_ng_template_117_tr_32_Template(rf, ctx) { if (rf & 1) {
        const _r398 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 178);
        i0.ɵɵlistener("click", function dibexNgIfComponent_ng_template_117_tr_32_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r398); const row_r396 = restoredCtx.$implicit; const ctx_r397 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r397.rowClick(row_r396, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r396 = ctx.$implicit;
        const ctx_r235 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r235.isHighlighted(row_r396)));
    } }
    function dibexNgIfComponent_ng_template_117_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 170);
        i0.ɵɵelementContainerStart(1, 36);
        i0.ɵɵtemplate(2, dibexNgIfComponent_ng_template_117_td_2_Template, 2, 2, "td", 37);
        i0.ɵɵtemplate(3, dibexNgIfComponent_ng_template_117_th_3_Template, 5, 3, "th", 38);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 39);
        i0.ɵɵtemplate(5, dibexNgIfComponent_ng_template_117_td_5_Template, 2, 2, "td", 40);
        i0.ɵɵtemplate(6, dibexNgIfComponent_ng_template_117_th_6_Template, 5, 3, "th", 41);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 42);
        i0.ɵɵtemplate(8, dibexNgIfComponent_ng_template_117_td_8_Template, 2, 2, "td", 43);
        i0.ɵɵtemplate(9, dibexNgIfComponent_ng_template_117_th_9_Template, 5, 3, "th", 44);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 45);
        i0.ɵɵtemplate(11, dibexNgIfComponent_ng_template_117_td_11_Template, 2, 2, "td", 46);
        i0.ɵɵtemplate(12, dibexNgIfComponent_ng_template_117_th_12_Template, 4, 0, "th", 47);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 48);
        i0.ɵɵtemplate(14, dibexNgIfComponent_ng_template_117_td_14_Template, 2, 2, "td", 49);
        i0.ɵɵtemplate(15, dibexNgIfComponent_ng_template_117_th_15_Template, 4, 0, "th", 50);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 51);
        i0.ɵɵtemplate(17, dibexNgIfComponent_ng_template_117_td_17_Template, 2, 2, "td", 52);
        i0.ɵɵtemplate(18, dibexNgIfComponent_ng_template_117_th_18_Template, 5, 3, "th", 53);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 54);
        i0.ɵɵtemplate(20, dibexNgIfComponent_ng_template_117_td_20_Template, 2, 2, "td", 55);
        i0.ɵɵtemplate(21, dibexNgIfComponent_ng_template_117_th_21_Template, 5, 3, "th", 56);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 57);
        i0.ɵɵtemplate(23, dibexNgIfComponent_ng_template_117_td_23_Template, 2, 2, "td", 49);
        i0.ɵɵtemplate(24, dibexNgIfComponent_ng_template_117_th_24_Template, 4, 0, "th", 50);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 33);
        i0.ɵɵtemplate(26, dibexNgIfComponent_ng_template_117_th_26_Template, 2, 2, "th", 34);
        i0.ɵɵtemplate(27, dibexNgIfComponent_ng_template_117_td_27_Template, 2, 1, "td", 171);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 58);
        i0.ɵɵtemplate(29, dibexNgIfComponent_ng_template_117_th_29_Template, 2, 2, "th", 172);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(30, 60);
        i0.ɵɵtemplate(31, dibexNgIfComponent_ng_template_117_th_31_Template, 2, 2, "th", 61);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(32, dibexNgIfComponent_ng_template_117_tr_32_Template, 1, 3, "tr", 173);
        i0.ɵɵpipe(33, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r32.selectionDataSource);
        i0.ɵɵadvance(32);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(33, 2, ctx_r32.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i18 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
                i6 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i19 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i20 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i14 = select_1_1;
            },
            function (checkbox_1_1) {
                checkbox_1 = checkbox_1_1;
                i8 = checkbox_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "checked": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function () { return ["A", "C"]; };
            _c6 = function () { return ["_dibBusy"]; };
            _c7 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexNgIfComponent = class dibexNgIfComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 209, name: 'dibexNgIf', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*6688'] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = true; //default:false
                gridExcelEditingAutoSave = true; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'name', 'vip', 'start_date', 'notes', 'spanInterpolation1',]);
                allColumnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'name', 'vip', 'start_date', 'notes', 'spanInterpolation1',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list6700 = new shared_3.DibEnumList(this.translationService, this.eventService, 'selectEnum', ['A', 'B', 'C', 'D'], false);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexNgIf');
                    this.containerName = 'dibexNgIf'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { datepicker: { itemId: 6693, type: 'date', fieldAlias: 'datepicker', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: 'datepicker', default: '@{dibDate}', dataType: 'date', contentType: 'date', changeUrl: false }, inputNumber: { itemId: 6698, type: 'number', fieldAlias: 'inputNumber', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: 'inputNumber', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, selectEnum: { itemId: 6700, type: 'text', fieldAlias: 'selectEnum', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['A', 'B', 'C', 'D'] }, inputText: { itemId: 6701, type: 'text', fieldAlias: 'inputText', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: 'inputText', default: 'Hello World!', dataType: 'text', contentType: 'text', changeUrl: false }, checkbox: { itemId: 6702, type: 'boolean', fieldAlias: 'checkbox', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'boolean', contentType: 'tick', changeUrl: false }, id: { itemId: 6746, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: null, default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 6747, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, notes: { itemId: 6748, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, start_date: { itemId: 6752, type: 'date', fieldAlias: 'start_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, vip: { itemId: 6753, type: 'boolean', fieldAlias: 'vip', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'boolean', contentType: 'tick', changeUrl: false }, };
                    this.model.$formGroup.addControl('datepicker', this.model.modelItems.datepicker.formControl);
                    this.model.$formGroup.addControl('inputNumber', this.model.modelItems.inputNumber.formControl);
                    this.model.$formGroup.addControl('selectEnum', this.model.modelItems.selectEnum.formControl);
                    this.model.$formGroup.addControl('inputText', this.model.modelItems.inputText.formControl);
                    this.model.$formGroup.addControl('checkbox', this.model.modelItems.checkbox.formControl);
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('vip', this.model.modelItems.vip.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "buttonShowClientData", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/General/showClientData", itemAlias: "buttonShowClientData", waitForCompletion: false, containerName: "dibexNgIf", handlers: [] }, this.clientData, { itemEventId: 'ie381-dib', itemId: '6705', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnVip", actionType: "click", responseType: 'actions', submitUrl: "shared.action.message?messageText=@{actionData.name}", itemAlias: "btnVip", waitForCompletion: false, containerName: "dibexNgIf", handlers: [] }, this.clientData, { itemEventId: 'ie384-dib', itemId: '6751', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['columnHeader', 'id', 'name', 'vip', 'start_date', 'notes', 'spanInterpolation1']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexNgIf`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexNgIf`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexNgIf`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 6746 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 6747 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 6748 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 6752 };
                    formDefaultsConfigs['vip'] = { contentType: "tick", type: "none", defaultValue: "", listId: 6753 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 6746, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 6747, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 6748, "text"), { validators: [], updateOn: 'blur' }), start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 6752, "date"), { validators: [], updateOn: 'blur' }), vip: new forms_2.FormControl(this.calculateInitialColumnValue(row, "vip", "none", false, formDefaults['vip'], 6753, "boolean"), { validators: [], updateOn: 'change' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list6700.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexNgIf', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexNgIf' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexNgIfComponent_Factory(t) { return new (t || dibexNgIfComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexNgIfComponent, selectors: [["dibex-ng-if"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 119, vars: 31, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci6688", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexNgIf", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci6689", "dibComponent", "card", 2, "flex", "1 1 0%", "max-width", "1300px"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "nowrap"], [3, "dibPort"], ["id", "ci6690", "dibComponent", "comment"], [1, "dib-comment"], ["id", "ci6699", "dibComponent", "div", 2, "flex", "0 1 auto"], ["id", "ci6700", "dibComponent", "selectEnum", "appearance", "standard", 2, "width", "200px !important", "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["formControlName", "selectEnum"], [3, "value", 4, "ngFor", "ngForOf"], ["mat-raised-button", "", "color", "primary", "id", "ci6705", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "buttonShowClientData", "type", "button", 3, "containerPortId"], [1, "dibButtonCaption"], ["id", "ci6691", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%", "max-width", "1200px"], ["id", "ci6692", "dibComponent", "section", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap"], ["id", "ci6694", "dibComponent", "comment"], ["id", "ci6693", "dibComponent", "datePicker", "style", "  ", "item-alias", "datepicker", "appearance", "standard", 4, "ngIf"], ["id", "ci6703", "dibComponent", "spanInterpolation"], ["id", "ci6695", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci6696", "dibComponent", "comment"], ["style", "  width:400px !important;   flex: 1 1 0%;  ", "id", "ci6697", "dibComponent", "section", 4, "ngIf"], ["id", "ci6800", "dibComponent", "spanInterpolation"], ["id", "ci6744", "dibComponent", "card", 2, "flex", "1 1 0%", "max-width", "1300px"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px"], ["id", "ci6749", "dibComponent", "comment"], [2, "height", "400px", "overflow", "auto"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; width:60px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:60px; ", 4, "matHeaderCellDef"], ["matColumnDef", "name"], ["mat-cell", "", "style", "padding: 2px; width:200px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:200px; ", 4, "matHeaderCellDef"], ["matColumnDef", "notes"], ["mat-cell", "", "style", "padding: 2px; width:300px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:300px; ", 4, "matHeaderCellDef"], ["matColumnDef", "columnHeader"], ["mat-cell", "", "style", "padding: 2px; width:120px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:120px; ", 4, "matHeaderCellDef"], ["matColumnDef", "btnVip"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "start_date"], ["mat-cell", "", "style", "padding: 2px; width:150px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:150px; ", 4, "matHeaderCellDef"], ["matColumnDef", "vip"], ["mat-cell", "", "style", "padding: 2px; width:80px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:80px; ", 4, "matHeaderCellDef"], ["matColumnDef", "spanInterpolation1"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexNgIf", ""], ["_selectedTable", ""], [3, "value"], ["id", "ci6693", "dibComponent", "datePicker", "item-alias", "datepicker", "appearance", "standard"], ["matInput", "", "formControlName", "datepicker", "name", "datepicker", 3, "matDatepicker", "placeholder", "focus"], ["matPrefix", "", 3, "for"], ["datePicker6693", ""], ["id", "ci6697", "dibComponent", "section", 2, "width", "400px !important", "flex", "1 1 0%"], ["id", "ci6698", "dibComponent", "inputNumber", "item-alias", "inputNumber", "appearance", "standard"], ["matInput", "", "type", "number", "formControlName", "inputNumber", "name", "inputNumber"], ["id", "ci6704", "dibComponent", "comment"], ["id", "ci6701", "dibComponent", "inputText", "style", "  ", "item-alias", "inputText", "appearance", "standard", 4, "ngIf"], ["id", "ci6702", "dibComponent", "checkbox", "formControlName", "checkbox"], ["id", "ci6701", "dibComponent", "inputText", "item-alias", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "inputText", "name", "inputText"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", "width", "60px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell", 2, "width", "60px"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", 2, "width", "60px !important"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "60px"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci6746", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "width", "200px", 3, "formGroup"], [1, "dib-cell", 2, "width", "200px"], ["dibComponent", "inputText", 2, "width", "200px !important"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "80", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "200px"], ["id", "ci6747", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "width", "300px", 3, "formGroup"], [1, "dib-cell", 2, "width", "300px"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "dibComponent", "inputTextArea", 2, "width", "300px !important"], ["matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "300px"], ["id", "ci6748", "dibComponent", "inputText"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "width", "120px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "width", "120px !important"], ["mat-raised-button", "", "color", "primary", "id", "ci6751", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnVip", "style", "  ", "type", "button", 3, "actionData", "containerPortId", 4, "ngIf"], ["mat-raised-button", "", "color", "primary", "id", "ci6751", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnVip", "type", "button", 3, "actionData", "containerPortId"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "120px"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["mat-raised-button", "", "color", "primary", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnVip", "style", "  ", "type", "button", 3, "actionData", "containerPortId", 4, "ngIf"], ["mat-raised-button", "", "color", "primary", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnVip", "type", "button", 3, "actionData", "containerPortId"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], ["mat-cell", "", 2, "padding", "2px", "width", "150px", 3, "formGroup"], [1, "dib-cell", 2, "width", "150px"], ["dibComponent", "datePicker", "style", "  width:150px !important;   ", 4, "ngIf"], ["dibComponent", "datePicker", 2, "width", "150px !important"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["datePicker6752", ""], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "150px"], ["id", "ci6752", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "start_date", "name", "start_date", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "width", "80px", 3, "formGroup"], [1, "dib-cell", 2, "width", "80px"], ["style", "display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;", 4, "ngIf"], [2, "display", "flex", "flex-direction", "row", "justify-content", "center", "flex", "1 1 0%"], [1, "grid-read-only-checkbox", 3, "ngClass"], ["dibComponent", "checkbox", "formControlName", "vip", 2, "width", "80px !important"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "80px"], ["id", "ci6753", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "vip", "name", "vip", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "spanInterpolation"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexNgIfComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexNgIfComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "mat-card", 4)(5, "mat-card-content", 5);
                        i0.ɵɵelementContainerStart(6, 6);
                        i0.ɵɵelementStart(7, "span", 7)(8, "div", 8);
                        i0.ɵɵtext(9, " Select values below ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(10, "div", 9);
                        i0.ɵɵelementContainerStart(11, 6);
                        i0.ɵɵelementStart(12, "mat-form-field", 10)(13, "mat-label")(14, "b");
                        i0.ɵɵtext(15, "selectEnum");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(16, "mat-select", 11);
                        i0.ɵɵtemplate(17, dibexNgIfComponent_mat_option_17_Template, 2, 2, "mat-option", 12);
                        i0.ɵɵpipe(18, "async");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(19, "button", 13)(20, "span", 14);
                        i0.ɵɵtext(21, "Show ClientData");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(22, "div", 15);
                        i0.ɵɵelementContainerStart(23, 6);
                        i0.ɵɵelementStart(24, "mat-card", 16)(25, "mat-card-header")(26, "mat-card-title");
                        i0.ɵɵtext(27, "Include item");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(28, "mat-card-content", 17)(29, "span", 18)(30, "div", 8)(31, "b");
                        i0.ɵɵtext(32, "*ngIf=\"getValue('selectEnum') != 'A'\"");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(33, "br");
                        i0.ɵɵelementStart(34, "i");
                        i0.ɵɵtext(35, "Only include the datepicker in the browser (the DOM),\u00A0if selectEnum is not 'A'");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵtemplate(36, dibexNgIfComponent_mat_form_field_36_Template, 7, 4, "mat-form-field", 19);
                        i0.ɵɵelementStart(37, "span", 20)(38, "b");
                        i0.ɵɵtext(39);
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵelementStart(40, "mat-card", 21)(41, "mat-card-header")(42, "mat-card-title");
                        i0.ɵɵtext(43, "Include whole section");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(44, "mat-card-content", 17)(45, "span", 22)(46, "div", 8)(47, "b");
                        i0.ɵɵtext(48, "*ngIf=\"['A','C'].includes(getValue('selectEnum'))\"");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(49, "br");
                        i0.ɵɵelementStart(50, "i");
                        i0.ɵɵtext(51, "Include whole section containing other items if selectEnum is 'A' or 'C'");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵtemplate(52, dibexNgIfComponent_mat_card_52_Template, 16, 2, "mat-card", 23);
                        i0.ɵɵelementStart(53, "span", 24)(54, "b");
                        i0.ɵɵtext(55);
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(56, "mat-card", 25)(57, "mat-card-header")(58, "mat-card-title");
                        i0.ɵɵtext(59, "*ngIf in Grid");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(60, "mat-card-content", 26);
                        i0.ɵɵelementContainerStart(61, 6);
                        i0.ɵɵelementStart(62, "span", 27)(63, "div", 8)(64, "b");
                        i0.ɵɵtext(65, "Button:\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 *ngIf=\"row.vip==1\"");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(66, "br");
                        i0.ɵɵelementStart(67, "b");
                        i0.ɵɵtext(68, "Start Date: *ngIf=\"row.notes.toLowerCase() > 'n' || formatDate('datepicker', 'yyyy-MM-dd') > resolve('dibDate')\"");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(69, "br");
                        i0.ɵɵelementStart(70, "i");
                        i0.ɵɵtext(71, "Note, grid rows are editable...");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(72, "div", 28, 29)(74, "form", 30);
                        i0.ɵɵelementContainerStart(75, 31);
                        i0.ɵɵelementStart(76, "table", 32);
                        i0.ɵɵelementContainerStart(77, 33);
                        i0.ɵɵtemplate(78, dibexNgIfComponent_th_78_Template, 2, 2, "th", 34);
                        i0.ɵɵtemplate(79, dibexNgIfComponent_td_79_Template, 2, 1, "td", 35);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(80, 36);
                        i0.ɵɵtemplate(81, dibexNgIfComponent_td_81_Template, 2, 2, "td", 37);
                        i0.ɵɵtemplate(82, dibexNgIfComponent_th_82_Template, 5, 3, "th", 38);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(83, 39);
                        i0.ɵɵtemplate(84, dibexNgIfComponent_td_84_Template, 2, 2, "td", 40);
                        i0.ɵɵtemplate(85, dibexNgIfComponent_th_85_Template, 5, 3, "th", 41);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(86, 42);
                        i0.ɵɵtemplate(87, dibexNgIfComponent_td_87_Template, 2, 2, "td", 43);
                        i0.ɵɵtemplate(88, dibexNgIfComponent_th_88_Template, 5, 3, "th", 44);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(89, 45);
                        i0.ɵɵtemplate(90, dibexNgIfComponent_td_90_Template, 2, 2, "td", 46);
                        i0.ɵɵtemplate(91, dibexNgIfComponent_th_91_Template, 4, 0, "th", 47);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(92, 48);
                        i0.ɵɵtemplate(93, dibexNgIfComponent_td_93_Template, 2, 2, "td", 49);
                        i0.ɵɵtemplate(94, dibexNgIfComponent_th_94_Template, 4, 0, "th", 50);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(95, 51);
                        i0.ɵɵtemplate(96, dibexNgIfComponent_td_96_Template, 2, 2, "td", 52);
                        i0.ɵɵtemplate(97, dibexNgIfComponent_th_97_Template, 5, 3, "th", 53);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(98, 54);
                        i0.ɵɵtemplate(99, dibexNgIfComponent_td_99_Template, 2, 2, "td", 55);
                        i0.ɵɵtemplate(100, dibexNgIfComponent_th_100_Template, 5, 3, "th", 56);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(101, 57);
                        i0.ɵɵtemplate(102, dibexNgIfComponent_td_102_Template, 2, 2, "td", 49);
                        i0.ɵɵtemplate(103, dibexNgIfComponent_th_103_Template, 4, 0, "th", 50);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(104, 58);
                        i0.ɵɵtemplate(105, dibexNgIfComponent_th_105_Template, 2, 2, "th", 59);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(106, 60);
                        i0.ɵɵtemplate(107, dibexNgIfComponent_th_107_Template, 2, 2, "th", 61);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(108, dibexNgIfComponent_ng_container_108_Template, 3, 3, "ng-container", 62);
                        i0.ɵɵtemplate(109, dibexNgIfComponent_tr_109_Template, 1, 3, "tr", 63);
                        i0.ɵɵtemplate(110, dibexNgIfComponent_tr_110_Template, 1, 3, "tr", 63);
                        i0.ɵɵtemplate(111, dibexNgIfComponent_tr_111_Template, 1, 4, "tr", 64);
                        i0.ɵɵpipe(112, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(113, dibexNgIfComponent_113_Template, 1, 1, null, 65);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(114, "div", null, 66);
                        i0.ɵɵtemplate(116, dibexNgIfComponent_mat_toolbar_116_Template, 6, 3, "mat-toolbar", 65);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(117, dibexNgIfComponent_ng_template_117_Template, 34, 4, "ng-template", null, 67, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(26, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6688");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6689");
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("dibPort", "6699");
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(18, 22, ctx.lists.list6700.items));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Show ClientData");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("dibPort", "6691");
                        i0.ɵɵadvance(13);
                        i0.ɵɵproperty("ngIf", ctx.getValue("selectEnum") != "A");
                        i0.ɵɵadvance(3);
                        i0.ɵɵtextInterpolate1("Date Picker value: ", ctx.formatDate("datepicker", "yyyy-MM-dd"), "");
                        i0.ɵɵadvance(13);
                        i0.ɵɵproperty("ngIf", i0.ɵɵpureFunction0(28, _c5).includes(ctx.getValue("selectEnum")));
                        i0.ɵɵadvance(3);
                        i0.ɵɵtextInterpolate1("Input Text's value: ", ctx.getValue("inputText"), "");
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("dibPort", "6744");
                        i0.ɵɵadvance(13);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(32);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(29, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(30, _c7));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(112, 24, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || false);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibPortDirective, i2.DibListenersDirective, i2.DibRemoveFocusDirective, i6.MatOption, i7.MatButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatSelect, i15.MatToolbar, i15.MatToolbarRow, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i17.MatCardHeader, i17.MatCardTitle, i18.MatTable, i18.MatHeaderCellDef, i18.MatHeaderRowDef, i18.MatColumnDef, i18.MatCellDef, i18.MatRowDef, i18.MatHeaderCell, i18.MatCell, i18.MatHeaderRow, i18.MatRow, i19.MatSort, i19.MatSortHeader, i20.MatPaginator, i4.AsyncPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexNgIf'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexNgIfComponent.prototype, "reloadContainer", null);
            exports_1("dibexNgIfComponent", dibexNgIfComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexNgIfComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-ng-if', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci6688 dibComponent=subcontainer   ><ng-container [dibPort]="'6688'" parentContainerName=dibexNgIf  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><mat-card   style="  flex: 1 1 0%;  max-width:1300px" id=ci6689 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'6689'" ><span  id=ci6690 dibComponent=comment   style="  " ><div class=dib-comment > Select values below  </div></span><div   style="  flex: 0 1 auto;  " id=ci6699 dibComponent=div  ><ng-container [dibPort]="'6699'" ><mat-form-field  id=ci6700 dibComponent=selectEnum   style="  width:200px !important;   display:flex; flex-direction: column;  flex-wrap: nowrap;  "  appearance=standard   ><mat-label><b>selectEnum</b></mat-label><mat-select formControlName=selectEnum    ><mat-option *ngFor="let item of lists.list6700.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field><button  mat-raised-button color=primary  id=ci6705 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=buttonShowClientData   style="  "  [attr.aria-label]="'Show ClientData'"  type=button  ><span class=dibButtonCaption >Show ClientData</span></button></ng-container></div><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  max-width:1200px" id=ci6691 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6691'" ><mat-card   style="  flex: 1 1 0%;  " id=ci6692 dibComponent=section  ><mat-card-header ><mat-card-title >Include item</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;"  ><span  id=ci6694 dibComponent=comment   style="  " ><div class=dib-comment ><b>*ngIf="getValue('selectEnum') != 'A'"</b><br><i>Only include the datepicker in the browser (the DOM),&nbsp;if selectEnum is not 'A'</i></div></span><mat-form-field *ngIf="getValue('selectEnum')!='A'" id=ci6693 dibComponent=datePicker   style="  "  item-alias=datepicker   appearance=standard  ><mat-label>datepicker</mat-label><input   matInput [matDatepicker]="datePicker6693"   [placeholder]="'datepicker'"   formControlName=datepicker   name=datepicker   [attr.aria-label]="'datepicker'"  (focus)="datePicker6693.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker6693" ></mat-datepicker-toggle><mat-datepicker #datePicker6693 ></mat-datepicker></mat-form-field><span  id=ci6703 dibComponent=spanInterpolation   style="  " ><b>Date Picker value: {{formatDate('datepicker', 'yyyy-MM-dd')}}</b></span></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci6695 dibComponent=section  ><mat-card-header ><mat-card-title >Include whole section</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;"  ><span  id=ci6696 dibComponent=comment   style="  " ><div class=dib-comment ><b>*ngIf="['A','C'].includes(getValue('selectEnum'))"</b><br><i>Include whole section containing other items if selectEnum is 'A' or 'C'</i></div></span><mat-card   *ngIf="['A','C'].includes(getValue('selectEnum'))"  style="  width:400px !important;   flex: 1 1 0%;  " id=ci6697 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><mat-form-field  id=ci6698 dibComponent=inputNumber   style="  "  item-alias=inputNumber   appearance=standard  ><mat-label >inputNumber</mat-label><input   matInput  type=number   formControlName=inputNumber   name=inputNumber   [attr.aria-label]="'inputNumber'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><span  id=ci6704 dibComponent=comment   style="  " ><div class=dib-comment ><b>*ngIf="!!getValue('datepicker')"</b><br><i>Include inputText only if datepicker has a value</i></div></span><mat-form-field  *ngIf="!!getValue('datepicker')" id=ci6701 dibComponent=inputText   style="  "  item-alias=inputText   appearance=standard  ><mat-label >inputText</mat-label><input   matInput  type=text   formControlName=inputText   name=inputText   [attr.aria-label]="'inputText'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-checkbox  id=ci6702 dibComponent=checkbox   style="  "  formControlName=checkbox   >   checkbox  </mat-checkbox></mat-card-content></mat-card><span  id=ci6800 dibComponent=spanInterpolation   style="  " ><b>Input Text's value: {{getValue('inputText')}}</b></span></mat-card-content></mat-card></ng-container></div></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  max-width:1300px" id=ci6744 dibComponent=card  ><mat-card-header ><mat-card-title >*ngIf in Grid</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><ng-container [dibPort]="'6744'" ><span  id=ci6749 dibComponent=comment   style="  " ><div class=dib-comment ><b>Button:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *ngIf="row.vip==1"</b><br><b>Start Date: *ngIf="row.notes.toLowerCase() > 'n' || formatDate('datepicker', 'yyyy-MM-dd') > resolve('dibDate')"</b><br><i>Note, grid rows are editable...</i></div></span><!-- <div style="height:400px; overflow:auto;" dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll style="height:400px; overflow:auto;" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:60px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:60px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:60px !important;   " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:60px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6746 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:200px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:200px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:200px !important;   " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:200px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6747 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:300px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:300px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  width:300px !important;   " ><textarea   matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:300px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6748 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:120px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  width:120px !important;   " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'6750'" ><button  mat-raised-button color=primary  *ngIf="row.vip==1" [actionData]="row" id=ci6751 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Show If VIP'"  type=button  ><span class=dibButtonCaption >Show If VIP</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:120px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Actions  </div></div></th></ng-container><ng-container matColumnDef=btnVip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button color=primary  *ngIf="row.vip==1" [actionData]="row" dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Show If VIP'"  type=button  ><span class=dibButtonCaption >Show If VIP</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Show If VIP  </div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field *ngIf="(!!row.notes && row.notes.toLowerCase() > 'n') || formatDate('datepicker', 'yyyy-MM-dd') > resolve('dibDate')" dibComponent=datePicker   style="  width:150px !important;   " ><input   matInput [matDatepicker]="datePicker6752"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker6752.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker6752" ></mat-datepicker-toggle><mat-datepicker #datePicker6752 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6752 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=vip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:80px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:80px;   "  ><span style="display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><div class=grid-read-only-checkbox  [ngClass]="{'checked': findColumnDisplayValue(rowIndex,'vip','none','boolean') == 1}"></div></span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-checkbox  dibComponent=checkbox   style="  width:80px !important;   "  formControlName=vip   ></mat-checkbox></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:80px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Vip  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Vip</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6753 dibComponent=inputText   style="  " ><mat-label >Vip</mat-label><input   matInput  type=text   formControlName=vip   name=vip   [attr.aria-label]="'Vip'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('vip', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('vip', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=spanInterpolation1  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span  dibComponent=spanInterpolation   style="  " >{{formatDate('datepicker', 'yyyy-MM-dd')}}&nbsp; > &nbsp; {{resolve('dibDate')}}</span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div mat-sort-header> Interpolation  </div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexNgIf><mat-toolbar *ngIf="gridMultiselect || false"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=false  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:60px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:60px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:60px !important;   " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:60px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6746 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:200px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:200px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:200px !important;   " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:200px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6747 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:300px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:300px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  width:300px !important;   " ><textarea   matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:300px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6748 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:120px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  width:120px !important;   " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'6750'" ><button  mat-raised-button color=primary  *ngIf="row.vip==1" [actionData]="row" id=ci6751 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Show If VIP'"  type=button  ><span class=dibButtonCaption >Show If VIP</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:120px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Actions  </div></div></th></ng-container><ng-container matColumnDef=btnVip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button color=primary  *ngIf="row.vip==1" [actionData]="row" dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Show If VIP'"  type=button  ><span class=dibButtonCaption >Show If VIP</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Show If VIP  </div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field *ngIf="(!!row.notes && row.notes.toLowerCase() > 'n') || formatDate('datepicker', 'yyyy-MM-dd') > resolve('dibDate')" dibComponent=datePicker   style="  width:150px !important;   " ><input   matInput [matDatepicker]="datePicker6752"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker6752.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker6752" ></mat-datepicker-toggle><mat-datepicker #datePicker6752 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6752 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=vip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:80px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:80px;   "  ><span style="display:flex; flex-direction:row; justify-content:center; flex:1 1 0%;" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"><div class=grid-read-only-checkbox  [ngClass]="{'checked': findColumnDisplayValue(rowIndex,'vip','none','boolean') == 1}"></div></span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-checkbox  dibComponent=checkbox   style="  width:80px !important;   "  formControlName=vip   ></mat-checkbox></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:80px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Vip  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Vip</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6753 dibComponent=inputText   style="  " ><mat-label >Vip</mat-label><input   matInput  type=text   formControlName=vip   name=vip   [attr.aria-label]="'Vip'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('vip', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('vip', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=spanInterpolation1  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span  dibComponent=spanInterpolation   style="  " >{{formatDate('datepicker', 'yyyy-MM-dd')}}&nbsp; > &nbsp; {{resolve('dibDate')}}</span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div mat-sort-header> Interpolation  </div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, select_1.MatSelectModule, checkbox_1.MatCheckboxModule, button_1.MatButtonModule, icon_1.MatIconModule];
            dibexNgIfModule = class dibexNgIfModule {
                static entry = dibexNgIfComponent;
                static ɵfac = function dibexNgIfModule_Factory(t) { return new (t || dibexNgIfModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexNgIfModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexNgIfModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexNgIfModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexNgIfComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexNgIfModule, { declarations: [dibexNgIfComponent], imports: [common_1.CommonModule, shared_5.SharedModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, select_1.MatSelectModule, checkbox_1.MatCheckboxModule, button_1.MatButtonModule, icon_1.MatIconModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
