System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/datepicker", "@angular/material/select", "@ngbracket/ngx-layout/extended", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, datepicker_1, core_5, select_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexSimpleGridComponent, containerModules, dibexSimpleGridModule;
    var __moduleName = context_1 && context_1.id;
    function dibexSimpleGridComponent_button_13_Template(rf, ctx) { if (rf & 1) {
        const _r42 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 50);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r41.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexSimpleGridComponent_button_14_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 52);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_button_14_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexSimpleGridComponent_th_27_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 55);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_27_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r45.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexSimpleGridComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 56)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_28_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexSimpleGridComponent_td_28_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r50); const row_r47 = restoredCtx.$implicit; const ctx_r49 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r49.selection.toggle(row_r47) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r47 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r47));
    } }
    function dibexSimpleGridComponent_td_30_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 59);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 60)(4, "span", 7);
        i0.ɵɵtext(5, "Show Client Data");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r53 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5400");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("containerPortId", ctx_r53.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show Client Data");
    } }
    function dibexSimpleGridComponent_td_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_30_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r51 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r51);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r51.getRawValue());
    } }
    function dibexSimpleGridComponent_th_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexSimpleGridComponent_td_33_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 62)(2, "span", 7);
        i0.ɵɵtext(3, "Show Client Data");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r57 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("containerPortId", ctx_r57.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show Client Data");
    } }
    function dibexSimpleGridComponent_td_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_33_ng_container_1_Template, 4, 2, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r55 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r55);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r55.getRawValue());
    } }
    function dibexSimpleGridComponent_th_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63)(2, "div");
        i0.ɵɵtext(3, " Show Client Data ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r60 = i0.ɵɵnextContext(2).index;
        const ctx_r63 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r63.findColumnDisplayValue(rowIndex_r60, "id", "none", "number"), "");
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r72 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r72); const ctx_r71 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r71.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 75);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 68);
        i0.ɵɵelement(2, "input", 69);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_td_36_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 72);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r59 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r64 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r64.hasError("id", "required", rowForm_r59));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r64.view.recordStatus == "update" && ctx_r64.notSaved("id", rowForm_r59));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r64.view.recordStatus == "update" && ctx_r64.isSaved("id", rowForm_r59));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r64.isInvalid("id", rowForm_r59));
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_36_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_36_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_36_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_36_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r59 = i0.ɵɵnextContext().$implicit;
        const ctx_r61 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r61.excelEditing == false && rowForm_r59.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r61.excelEditing == true || rowForm_r59.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r61.excelEditing == false && rowForm_r59.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_36_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r59 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r59);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r59.getRawValue());
    } }
    function dibexSimpleGridComponent_th_37_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_37_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_37_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r75 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r75.editorOpen);
    } }
    function dibexSimpleGridComponent_th_37_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_37_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r82 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_37_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r82); const ctx_r81 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r81.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_37_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_37_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r84 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_37_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r84); const ctx_r83 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r83.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_37_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r84); const ctx_r85 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r85.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_37_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_37_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r77 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r77.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.view.recordStatus == "update" && ctx_r77.notSaved("id", ctx_r77.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.view.recordStatus == "update" && ctx_r77.isSaved("id", ctx_r77.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_37_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_37_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_37_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r87 = i0.ɵɵnextContext(2).index;
        const ctx_r90 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r90.findColumnDisplayValue(rowIndex_r87, "first_name", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r99 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r99); const ctx_r98 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r98.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r101 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 86)(2, "input", 87);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_td_39_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r101); const ctx_r100 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r100.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_39_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r101); const ctx_r102 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r102.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_td_39_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r86 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r91 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r91.hasError("first_name", "required", rowForm_r86));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r91.hasError("first_name", "maxlength", rowForm_r86));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r91.view.recordStatus == "update" && ctx_r91.notSaved("first_name", rowForm_r86));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r91.view.recordStatus == "update" && ctx_r91.isSaved("first_name", rowForm_r86));
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_39_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_39_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_39_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_39_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r86 = i0.ɵɵnextContext().$implicit;
        const ctx_r88 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r88.excelEditing == false && rowForm_r86.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r88.excelEditing == true || rowForm_r86.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r88.excelEditing == false && rowForm_r86.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_39_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r86 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r86);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r86.getRawValue());
    } }
    function dibexSimpleGridComponent_th_40_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_40_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_40_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r105 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r105.editorOpen);
    } }
    function dibexSimpleGridComponent_th_40_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_40_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r112 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_40_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r112); const ctx_r111 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r111.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_40_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_40_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r114 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 88)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 89);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_40_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r114); const ctx_r113 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r113.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_40_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r114); const ctx_r115 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r115.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_40_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_40_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r107 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r107.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r107.view.recordStatus == "update" && ctx_r107.notSaved("first_name", ctx_r107.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r107.view.recordStatus == "update" && ctx_r107.isSaved("first_name", ctx_r107.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_40_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_40_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_40_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r117 = i0.ɵɵnextContext(2).index;
        const ctx_r120 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r120.findColumnDisplayValue(rowIndex_r117, "last_name", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r129 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r129); const ctx_r128 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r128.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r131 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_td_42_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r131); const ctx_r130 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r130.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_42_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r131); const ctx_r132 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r132.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_td_42_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r116 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r121 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r121.hasError("last_name", "required", rowForm_r116));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r121.hasError("last_name", "maxlength", rowForm_r116));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r121.view.recordStatus == "update" && ctx_r121.notSaved("last_name", rowForm_r116));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r121.view.recordStatus == "update" && ctx_r121.isSaved("last_name", rowForm_r116));
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_42_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_42_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_42_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_42_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r116 = i0.ɵɵnextContext().$implicit;
        const ctx_r118 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r118.excelEditing == false && rowForm_r116.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r118.excelEditing == true || rowForm_r116.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r118.excelEditing == false && rowForm_r116.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_42_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r116 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r116);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r116.getRawValue());
    } }
    function dibexSimpleGridComponent_th_43_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_43_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_43_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r135 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r135.editorOpen);
    } }
    function dibexSimpleGridComponent_th_43_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_43_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r142 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_43_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r142); const ctx_r141 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r141.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_43_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_43_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r144 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_43_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r144); const ctx_r143 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r143.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_43_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r144); const ctx_r145 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r145.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_43_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_43_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r137 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r137.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.view.recordStatus == "update" && ctx_r137.notSaved("last_name", ctx_r137.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.view.recordStatus == "update" && ctx_r137.isSaved("last_name", ctx_r137.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_43_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_43_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_43_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r147 = i0.ɵɵnextContext(2).index;
        const ctx_r150 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r150.findColumnDisplayValue(rowIndex_r147, "email", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r159 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r159); const ctx_r158 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r158.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r161 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_td_45_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r161); const ctx_r160 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r160.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_45_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r161); const ctx_r162 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r162.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_td_45_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r146 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r151 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r151.hasError("email", "required", rowForm_r146));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r151.hasError("email", "maxlength", rowForm_r146));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r151.view.recordStatus == "update" && ctx_r151.notSaved("email", rowForm_r146));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r151.view.recordStatus == "update" && ctx_r151.isSaved("email", rowForm_r146));
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_45_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_45_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_45_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r146 = i0.ɵɵnextContext().$implicit;
        const ctx_r148 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r148.excelEditing == false && rowForm_r146.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r148.excelEditing == true || rowForm_r146.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r148.excelEditing == false && rowForm_r146.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_45_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r146 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r146);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r146.getRawValue());
    } }
    function dibexSimpleGridComponent_th_46_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_46_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Email \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_46_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r165 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r165.editorOpen);
    } }
    function dibexSimpleGridComponent_th_46_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_46_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r172 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_46_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r172); const ctx_r171 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r171.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_46_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_46_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r174 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_46_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r174); const ctx_r173 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r173.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_46_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r174); const ctx_r175 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r175.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_46_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_46_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r167 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r167.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.view.recordStatus == "update" && ctx_r167.notSaved("email", ctx_r167.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.view.recordStatus == "update" && ctx_r167.isSaved("email", ctx_r167.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_46_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_46_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_46_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexSimpleGridComponent_td_48_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r177 = i0.ɵɵnextContext(2).index;
        const ctx_r180 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r180.findColumnDisplayValue(rowIndex_r177, "join_date", "none", "date"), "");
    } }
    function dibexSimpleGridComponent_td_48_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r189 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_48_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r189); const ctx_r188 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r188.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_48_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_48_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_48_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r191 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 97)(2, "input", 98);
        i0.ɵɵlistener("focus", function dibexSimpleGridComponent_td_48_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r191); const _r184 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r184.open()); })("keydown.enter", function dibexSimpleGridComponent_td_48_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r191); const ctx_r192 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r192.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_48_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r191); const ctx_r193 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r193.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 99)(4, "mat-datepicker", null, 100);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_td_48_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(7, dibexSimpleGridComponent_td_48_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(8, dibexSimpleGridComponent_td_48_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 47);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r184 = i0.ɵɵreference(5);
        const rowForm_r176 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r181 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r184);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r184);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r181.view.recordStatus == "update" && ctx_r181.notSaved("join_date", rowForm_r176));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r181.view.recordStatus == "update" && ctx_r181.isSaved("join_date", rowForm_r176));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r181.hasError("join_date", "required", rowForm_r176));
    } }
    function dibexSimpleGridComponent_td_48_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_48_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_48_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_48_ng_container_1_span_4_Template, 9, 6, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_48_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r176 = i0.ɵɵnextContext().$implicit;
        const ctx_r178 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r178.excelEditing == false && rowForm_r176.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r178.excelEditing == true || rowForm_r176.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r178.excelEditing == false && rowForm_r176.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_48_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r176 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r176);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r176.getRawValue());
    } }
    function dibexSimpleGridComponent_th_49_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_49_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Join Date \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_49_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r196 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r196.editorOpen);
    } }
    function dibexSimpleGridComponent_th_49_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Join Date");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_49_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r203 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_49_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r203); const ctx_r202 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r202.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_49_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_49_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r205 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Join Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_49_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r205); const ctx_r204 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r204.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_49_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r205); const ctx_r206 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r206.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_49_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_49_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r198 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r198.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r198.view.recordStatus == "update" && ctx_r198.notSaved("join_date", ctx_r198.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r198.view.recordStatus == "update" && ctx_r198.isSaved("join_date", ctx_r198.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_49_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_49_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_49_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexSimpleGridComponent_td_51_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r208 = i0.ɵɵnextContext(2).index;
        const ctx_r211 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r211.findColumnDisplayValue(rowIndex_r208, "position", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_td_51_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r216 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r216.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r216.id_display_value, "");
    } }
    function dibexSimpleGridComponent_td_51_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 103)(2, "mat-select", 104);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_51_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r212 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r212.lists.list5439.items));
    } }
    function dibexSimpleGridComponent_td_51_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_51_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_51_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_51_ng_container_1_span_4_Template, 5, 3, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_51_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r207 = i0.ɵɵnextContext().$implicit;
        const ctx_r209 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r209.excelEditing == false && rowForm_r207.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.excelEditing == true || rowForm_r207.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.excelEditing == false && rowForm_r207.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_51_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r207 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r207);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r207.getRawValue());
    } }
    function dibexSimpleGridComponent_th_52_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_52_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_52_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r218 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r218.editorOpen);
    } }
    function dibexSimpleGridComponent_th_52_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_52_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r223 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r223.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r223.id_display_value, "");
    } }
    function dibexSimpleGridComponent_th_52_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 108);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_52_div_4_mat_option_5_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r220 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r220.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r220.lists.list5439.items));
    } }
    function dibexSimpleGridComponent_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_52_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_52_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_52_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r225 = i0.ɵɵnextContext(2).index;
        const ctx_r228 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r228.findColumnDisplayValue(rowIndex_r225, "staff_code", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 10 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r237 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r237); const ctx_r236 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r236.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r239 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_td_54_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r239); const ctx_r238 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r238.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_54_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r239); const ctx_r240 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r240.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_td_54_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r224 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r229 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.hasError("staff_code", "required", rowForm_r224));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.hasError("staff_code", "maxlength", rowForm_r224));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.view.recordStatus == "update" && ctx_r229.notSaved("staff_code", rowForm_r224));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.view.recordStatus == "update" && ctx_r229.isSaved("staff_code", rowForm_r224));
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_54_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_54_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_54_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_54_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r224 = i0.ɵɵnextContext().$implicit;
        const ctx_r226 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r226.excelEditing == false && rowForm_r224.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r226.excelEditing == true || rowForm_r224.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r226.excelEditing == false && rowForm_r224.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_54_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r224 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r224);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r224.getRawValue());
    } }
    function dibexSimpleGridComponent_th_55_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_55_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Staff Code \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_55_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r243 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r243.editorOpen);
    } }
    function dibexSimpleGridComponent_th_55_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Staff Code");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_55_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r250 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_55_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r250); const ctx_r249 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r249.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_55_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_55_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r252 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Staff Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_55_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r252); const ctx_r251 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r251.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_55_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r252); const ctx_r253 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r253.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_55_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_55_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r245 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r245.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r245.view.recordStatus == "update" && ctx_r245.notSaved("staff_code", ctx_r245.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r245.view.recordStatus == "update" && ctx_r245.isSaved("staff_code", ctx_r245.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_55_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_55_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_55_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexSimpleGridComponent_td_57_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r255 = i0.ɵɵnextContext(2).index;
        const ctx_r258 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r258.findColumnDisplayValue(rowIndex_r255, "address", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_td_57_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r265 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_57_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r265); const ctx_r264 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r264.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_57_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_57_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r267 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 112)(2, "textarea", 113);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_td_57_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r267); const ctx_r266 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r266.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_57_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r267); const ctx_r268 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r268.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_57_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_57_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r254 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r259 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r259.view.recordStatus == "update" && ctx_r259.notSaved("address", rowForm_r254));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r259.view.recordStatus == "update" && ctx_r259.isSaved("address", rowForm_r254));
    } }
    function dibexSimpleGridComponent_td_57_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_57_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_57_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_57_ng_container_1_span_4_Template, 5, 3, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_57_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r254 = i0.ɵɵnextContext().$implicit;
        const ctx_r256 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r256.excelEditing == false && rowForm_r254.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r256.excelEditing == true || rowForm_r254.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r256.excelEditing == false && rowForm_r254.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_57_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r254 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r254);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r254.getRawValue());
    } }
    function dibexSimpleGridComponent_th_58_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_58_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_58_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r277 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_58_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r277); const ctx_r276 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r276.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_58_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_58_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r279 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 114)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 115);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_58_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r279); const ctx_r278 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r278.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_58_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r279); const ctx_r280 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r280.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_58_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_58_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r273 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r273.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r273.view.recordStatus == "update" && ctx_r273.notSaved("address", ctx_r273.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r273.view.recordStatus == "update" && ctx_r273.isSaved("address", ctx_r273.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_58_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_58_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_58_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexSimpleGridComponent_td_60_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r282 = i0.ɵɵnextContext(2).index;
        const ctx_r285 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r285.findColumnDisplayValue(rowIndex_r282, "color", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_td_60_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_60_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r293 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_60_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r293); const ctx_r292 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r292.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_60_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_60_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r295 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_td_60_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r295); const ctx_r294 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r294.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_60_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r295); const ctx_r296 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r296.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_60_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_60_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_60_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r281 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r286 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.hasError("color", "maxlength", rowForm_r281));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.view.recordStatus == "update" && ctx_r286.notSaved("color", rowForm_r281));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r286.view.recordStatus == "update" && ctx_r286.isSaved("color", rowForm_r281));
    } }
    function dibexSimpleGridComponent_td_60_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_60_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_60_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_60_ng_container_1_span_4_Template, 6, 4, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_60_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r281 = i0.ɵɵnextContext().$implicit;
        const ctx_r283 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r283.excelEditing == false && rowForm_r281.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.excelEditing == true || rowForm_r281.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.excelEditing == false && rowForm_r281.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_60_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r281 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r281);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r281.getRawValue());
    } }
    function dibexSimpleGridComponent_th_61_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Color ");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_61_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Color");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_61_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r305 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_61_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r305); const ctx_r304 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r304.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_61_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_61_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r307 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Color");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_61_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r307); const ctx_r306 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r306.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_61_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r307); const ctx_r308 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r308.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_61_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_61_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r301 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r301.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.view.recordStatus == "update" && ctx_r301.notSaved("color", ctx_r301.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.view.recordStatus == "update" && ctx_r301.isSaved("color", ctx_r301.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_61_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_61_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_61_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexSimpleGridComponent_td_63_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r310 = i0.ɵɵnextContext(2).index;
        const ctx_r313 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r313.findColumnDisplayValue(rowIndex_r310, "latitude", "none", "number"), "");
    } }
    function dibexSimpleGridComponent_td_63_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r320 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_td_63_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r320); const ctx_r319 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r319.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_63_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_td_63_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r322 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 119)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_td_63_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r322); const ctx_r321 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r321.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_td_63_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r322); const ctx_r323 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r323.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_63_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_63_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r309 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r314 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Latitude");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r314.view.recordStatus == "update" && ctx_r314.notSaved("latitude", rowForm_r309));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r314.view.recordStatus == "update" && ctx_r314.isSaved("latitude", rowForm_r309));
    } }
    function dibexSimpleGridComponent_td_63_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_td_63_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_td_63_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_td_63_ng_container_1_span_4_Template, 5, 3, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_td_63_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r309 = i0.ɵɵnextContext().$implicit;
        const ctx_r311 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r311.excelEditing == false && rowForm_r309.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r311.excelEditing == true || rowForm_r309.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r311.excelEditing == false && rowForm_r309.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_td_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_td_63_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r309 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r309);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r309.getRawValue());
    } }
    function dibexSimpleGridComponent_th_64_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Latitude ");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_64_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Latitude");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_64_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r332 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_th_64_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r332); const ctx_r331 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r331.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_64_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_th_64_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r334 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Latitude");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_th_64_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r334); const ctx_r333 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r333.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_th_64_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r334); const ctx_r335 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r335.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_th_64_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_th_64_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r328 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r328.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Latitude");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r328.view.recordStatus == "update" && ctx_r328.notSaved("latitude", ctx_r328.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r328.view.recordStatus == "update" && ctx_r328.isSaved("latitude", ctx_r328.model.$formGroup));
    } }
    function dibexSimpleGridComponent_th_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_th_64_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_th_64_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_th_64_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
    } }
    function dibexSimpleGridComponent_th_66_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 125);
    } }
    function dibexSimpleGridComponent_th_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 123);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_th_66_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 124);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r30.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.busy);
    } }
    function dibexSimpleGridComponent_th_68_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r337 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r337.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexSimpleGridComponent_th_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 126);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_th_68_span_1_Template, 2, 1, "span", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r31.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r31.busy && ctx_r31.tableDataSource.data.length == 0);
    } }
    function dibexSimpleGridComponent_ng_container_69_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 128);
    } }
    function dibexSimpleGridComponent_ng_container_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_container_69_tr_1_Template, 1, 0, "tr", 127);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r338 = ctx.$implicit;
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r32.columnHeaders.getArray(column_r338).items$));
    } }
    function dibexSimpleGridComponent_tr_70_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 129);
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r33.busy ? "visible" : "hidden"));
    } }
    function dibexSimpleGridComponent_tr_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 129);
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r34.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexSimpleGridComponent_tr_72_Template(rf, ctx) { if (rf & 1) {
        const _r343 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 130);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_tr_72_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r343); const row_r340 = restoredCtx.$implicit; const ctx_r342 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r342.rowClick(row_r340, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r340 = ctx.$implicit;
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r35.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r35.isHighlighted(row_r340)));
    } }
    function dibexSimpleGridComponent_74_ng_template_0_Template(rf, ctx) { }
    function dibexSimpleGridComponent_74_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexSimpleGridComponent_74_ng_template_0_Template, 0, 0, "ng-template", 131);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r39 = i0.ɵɵreference(79);
        i0.ɵɵproperty("ngTemplateOutlet", _r39);
    } }
    function dibexSimpleGridComponent_mat_toolbar_77_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r349 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 137);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_mat_toolbar_77_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r349); const ctx_r348 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r348.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r345 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r345.numberOfSelectedItems + " ", "item", ctx_r345.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexSimpleGridComponent_mat_toolbar_77_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_mat_toolbar_77_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_mat_toolbar_77_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r353 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 138);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_mat_toolbar_77_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r353); const ctx_r352 = i0.ɵɵnextContext(2); ctx_r352.gridShowClipboardDefault = !ctx_r352.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r352.gridShowClipboardDefault && ctx_r352.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_mat_toolbar_77_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 47);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_mat_toolbar_77_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 47);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r346 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r346.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r346.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r346.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexSimpleGridComponent_mat_toolbar_77_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r356 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 139, 15);
        i0.ɵɵlistener("page", function dibexSimpleGridComponent_mat_toolbar_77_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r356); const ctx_r355 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r355.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r347 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r347.page.totalRecords)("pageSize", ctx_r347.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexSimpleGridComponent_mat_toolbar_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 132);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_mat_toolbar_77_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 133);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_mat_toolbar_77_button_3_Template, 4, 3, "button", 134);
        i0.ɵɵelement(4, "span", 135);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_mat_toolbar_77_mat_paginator_5_Template, 2, 4, "mat-paginator", 136);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r38.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r38.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 59);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 60)(4, "span", 7);
        i0.ɵɵtext(5, "Show Client Data");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r388 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5400");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("containerPortId", ctx_r388.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show Client Data");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_2_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r386 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r386);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r386.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 62)(2, "span", 7);
        i0.ɵɵtext(3, "Show Client Data");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r392 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("containerPortId", ctx_r392.containerActionReference());
        i0.ɵɵattribute("aria-label", "Show Client Data");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_5_ng_container_1_Template, 4, 2, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r390 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r390);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r390.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63)(2, "div");
        i0.ɵɵtext(3, " Show Client Data ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r395 = i0.ɵɵnextContext(2).index;
        const ctx_r398 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r398.findColumnDisplayValue(rowIndex_r395, "id", "none", "number"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r406 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r406); const ctx_r405 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r405.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r408 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 68)(2, "input", 144);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r408); const ctx_r407 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r407.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r408); const ctx_r409 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r409.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r394 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r399 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r399.hasError("id", "required", rowForm_r394));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r399.view.recordStatus == "update" && ctx_r399.notSaved("id", rowForm_r394));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r399.view.recordStatus == "update" && ctx_r399.isSaved("id", rowForm_r394));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_4_Template, 6, 4, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r394 = i0.ɵɵnextContext().$implicit;
        const ctx_r396 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r396.excelEditing == false && rowForm_r394.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.excelEditing == true || rowForm_r394.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.excelEditing == false && rowForm_r394.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_8_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r394 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r394);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r394.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_9_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r412 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r412.editorOpen);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r419 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r419); const ctx_r418 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r418.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r421 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r421); const ctx_r420 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r420.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r421); const ctx_r422 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r422.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r414 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r414.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.view.recordStatus == "update" && ctx_r414.notSaved("id", ctx_r414.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.view.recordStatus == "update" && ctx_r414.isSaved("id", ctx_r414.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_9_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_9_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_9_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r362 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r362.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r362.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r362.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r424 = i0.ɵɵnextContext(2).index;
        const ctx_r427 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r427.findColumnDisplayValue(rowIndex_r424, "first_name", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r436 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r436); const ctx_r435 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r435.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r438 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 86)(2, "input", 87);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r438); const ctx_r437 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r437.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r438); const ctx_r439 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r439.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r423 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r428 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r428.hasError("first_name", "required", rowForm_r423));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r428.hasError("first_name", "maxlength", rowForm_r423));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r428.view.recordStatus == "update" && ctx_r428.notSaved("first_name", rowForm_r423));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r428.view.recordStatus == "update" && ctx_r428.isSaved("first_name", rowForm_r423));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r423 = i0.ɵɵnextContext().$implicit;
        const ctx_r425 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r425.excelEditing == false && rowForm_r423.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.excelEditing == true || rowForm_r423.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.excelEditing == false && rowForm_r423.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_11_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r423 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r423);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r423.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_12_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r442 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r442.editorOpen);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r449 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r449); const ctx_r448 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r448.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r451 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 88)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 89);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r451); const ctx_r450 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r450.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r451); const ctx_r452 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r452.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r444 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r444.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r444.view.recordStatus == "update" && ctx_r444.notSaved("first_name", ctx_r444.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r444.view.recordStatus == "update" && ctx_r444.isSaved("first_name", ctx_r444.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_12_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_12_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_12_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r364 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r364.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r454 = i0.ɵɵnextContext(2).index;
        const ctx_r457 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r457.findColumnDisplayValue(rowIndex_r454, "last_name", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r466 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r466); const ctx_r465 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r465.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r468 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r468); const ctx_r467 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r467.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r468); const ctx_r469 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r469.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r453 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r458 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r458.hasError("last_name", "required", rowForm_r453));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r458.hasError("last_name", "maxlength", rowForm_r453));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r458.view.recordStatus == "update" && ctx_r458.notSaved("last_name", rowForm_r453));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r458.view.recordStatus == "update" && ctx_r458.isSaved("last_name", rowForm_r453));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r453 = i0.ɵɵnextContext().$implicit;
        const ctx_r455 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r455.excelEditing == false && rowForm_r453.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r455.excelEditing == true || rowForm_r453.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r455.excelEditing == false && rowForm_r453.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_14_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r453 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r453);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r453.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_15_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_15_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r472 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r472.editorOpen);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r479 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r479); const ctx_r478 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r478.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r481 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r481); const ctx_r480 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r480.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r481); const ctx_r482 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r482.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r474 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r474.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r474.view.recordStatus == "update" && ctx_r474.notSaved("last_name", ctx_r474.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r474.view.recordStatus == "update" && ctx_r474.isSaved("last_name", ctx_r474.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_15_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_15_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_15_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r366 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r366.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r366.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r366.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r484 = i0.ɵɵnextContext(2).index;
        const ctx_r487 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r487.findColumnDisplayValue(rowIndex_r484, "email", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r496 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r496); const ctx_r495 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r495.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r498 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r498); const ctx_r497 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r497.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r498); const ctx_r499 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r499.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r483 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r488 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r488.hasError("email", "required", rowForm_r483));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r488.hasError("email", "maxlength", rowForm_r483));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r488.view.recordStatus == "update" && ctx_r488.notSaved("email", rowForm_r483));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r488.view.recordStatus == "update" && ctx_r488.isSaved("email", rowForm_r483));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r483 = i0.ɵɵnextContext().$implicit;
        const ctx_r485 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r485.excelEditing == false && rowForm_r483.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r485.excelEditing == true || rowForm_r483.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r485.excelEditing == false && rowForm_r483.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_17_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r483 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r483);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r483.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_18_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Email \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_18_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r502 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r502.editorOpen);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r509 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r509); const ctx_r508 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r508.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r511 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r511); const ctx_r510 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r510.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r511); const ctx_r512 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r512.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r504 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r504.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.view.recordStatus == "update" && ctx_r504.notSaved("email", ctx_r504.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.view.recordStatus == "update" && ctx_r504.isSaved("email", ctx_r504.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_18_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_18_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_18_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r368 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r368.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r514 = i0.ɵɵnextContext(2).index;
        const ctx_r517 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r517.findColumnDisplayValue(rowIndex_r514, "join_date", "none", "date"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r526 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r526); const ctx_r525 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r525.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r528 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 97)(2, "input", 98);
        i0.ɵɵlistener("focus", function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r528); const _r521 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r521.open()); })("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r528); const ctx_r529 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r529.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r528); const ctx_r530 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r530.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 99)(4, "mat-datepicker", null, 100);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(7, dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵtemplate(8, dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 47);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r521 = i0.ɵɵreference(5);
        const rowForm_r513 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r518 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r521);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r521);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r518.view.recordStatus == "update" && ctx_r518.notSaved("join_date", rowForm_r513));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.view.recordStatus == "update" && ctx_r518.isSaved("join_date", rowForm_r513));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.hasError("join_date", "required", rowForm_r513));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_4_Template, 9, 6, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r513 = i0.ɵɵnextContext().$implicit;
        const ctx_r515 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r515.excelEditing == false && rowForm_r513.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r515.excelEditing == true || rowForm_r513.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r515.excelEditing == false && rowForm_r513.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_20_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r513 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r513);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r513.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_21_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Join Date \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_21_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r533 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r533.editorOpen);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Join Date");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r540 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r540); const ctx_r539 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r539.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r542 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Join Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r542); const ctx_r541 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r541.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r542); const ctx_r543 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r543.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r535 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r535.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r535.view.recordStatus == "update" && ctx_r535.notSaved("join_date", ctx_r535.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r535.view.recordStatus == "update" && ctx_r535.isSaved("join_date", ctx_r535.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_21_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_21_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_21_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r370 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r370.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r370.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r370.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r545 = i0.ɵɵnextContext(2).index;
        const ctx_r548 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r548.findColumnDisplayValue(rowIndex_r545, "position", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r553 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r553.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r553.id_display_value, "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 103)(2, "mat-select", 104);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r549 = i0.ɵɵnextContext(4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r549.lists.list5439.items));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_4_Template, 5, 3, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r544 = i0.ɵɵnextContext().$implicit;
        const ctx_r546 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r546.excelEditing == false && rowForm_r544.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.excelEditing == true || rowForm_r544.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.excelEditing == false && rowForm_r544.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_23_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r544 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r544);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r544.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_24_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_24_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r555 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r555.editorOpen);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_24_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r560 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r560.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r560.id_display_value, "");
    } }
    function dibexSimpleGridComponent_ng_template_78_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 108);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_24_div_4_mat_option_5_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r557 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r557.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r557.lists.list5439.items));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_24_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_24_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_24_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r372 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r372.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r372.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r372.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r562 = i0.ɵɵnextContext(2).index;
        const ctx_r565 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r565.findColumnDisplayValue(rowIndex_r562, "staff_code", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 10 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r574 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r574); const ctx_r573 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r573.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r576 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r576); const ctx_r575 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r575.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r576); const ctx_r577 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r577.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r561 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r566 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.hasError("staff_code", "required", rowForm_r561));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.hasError("staff_code", "maxlength", rowForm_r561));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.view.recordStatus == "update" && ctx_r566.notSaved("staff_code", rowForm_r561));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.view.recordStatus == "update" && ctx_r566.isSaved("staff_code", rowForm_r561));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_4_Template, 7, 5, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r561 = i0.ɵɵnextContext().$implicit;
        const ctx_r563 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r563.excelEditing == false && rowForm_r561.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r563.excelEditing == true || rowForm_r561.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r563.excelEditing == false && rowForm_r561.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_26_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r561 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r561);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r561.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_27_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Staff Code \u00A0");
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_27_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r580 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r580.editorOpen);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Staff Code");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r587 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r587); const ctx_r586 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r586.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r589 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Staff Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r589); const ctx_r588 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r588.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r589); const ctx_r590 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r590.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r582 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r582.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r582.view.recordStatus == "update" && ctx_r582.notSaved("staff_code", ctx_r582.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r582.view.recordStatus == "update" && ctx_r582.isSaved("staff_code", ctx_r582.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_27_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_27_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_27_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r374 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r374.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r374.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r374.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r592 = i0.ɵɵnextContext(2).index;
        const ctx_r595 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r595.findColumnDisplayValue(rowIndex_r592, "address", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r602 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r602); const ctx_r601 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r601.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r604 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 112)(2, "textarea", 113);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r604); const ctx_r603 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r603.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r604); const ctx_r605 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r605.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r591 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r596 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r596.view.recordStatus == "update" && ctx_r596.notSaved("address", rowForm_r591));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r596.view.recordStatus == "update" && ctx_r596.isSaved("address", rowForm_r591));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_4_Template, 5, 3, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r591 = i0.ɵɵnextContext().$implicit;
        const ctx_r593 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r593.excelEditing == false && rowForm_r591.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r593.excelEditing == true || rowForm_r591.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r593.excelEditing == false && rowForm_r591.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_29_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r591 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r591);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r591.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r614 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r614); const ctx_r613 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r613.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r616 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 114)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 115);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r616); const ctx_r615 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r615.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r616); const ctx_r617 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r617.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r610 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r610.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r610.view.recordStatus == "update" && ctx_r610.notSaved("address", ctx_r610.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r610.view.recordStatus == "update" && ctx_r610.isSaved("address", ctx_r610.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_30_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_30_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_30_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r376 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r376.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r376.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r376.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r619 = i0.ɵɵnextContext(2).index;
        const ctx_r622 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r622.findColumnDisplayValue(rowIndex_r619, "color", "none", "text"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r630 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r630); const ctx_r629 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r629.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r632 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 90)(2, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r632); const ctx_r631 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r631.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r632); const ctx_r633 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r633.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 47);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r618 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r623 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r623.hasError("color", "maxlength", rowForm_r618));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r623.view.recordStatus == "update" && ctx_r623.notSaved("color", rowForm_r618));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r623.view.recordStatus == "update" && ctx_r623.isSaved("color", rowForm_r618));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_4_Template, 6, 4, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r618 = i0.ɵɵnextContext().$implicit;
        const ctx_r620 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r620.excelEditing == false && rowForm_r618.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r620.excelEditing == true || rowForm_r618.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r620.excelEditing == false && rowForm_r618.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_32_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r618 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r618);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r618.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Color ");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Color");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r642 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r642); const ctx_r641 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r641.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r644 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Color");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r644); const ctx_r643 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r643.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r644); const ctx_r645 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r645.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r638 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r638.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r638.view.recordStatus == "update" && ctx_r638.notSaved("color", ctx_r638.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r638.view.recordStatus == "update" && ctx_r638.isSaved("color", ctx_r638.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_33_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_33_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_33_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r378 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r378.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 67);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r647 = i0.ɵɵnextContext(2).index;
        const ctx_r650 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r650.findColumnDisplayValue(rowIndex_r647, "latitude", "none", "number"), "");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r657 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r657); const ctx_r656 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r656.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r659 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 67)(1, "mat-form-field", 119)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r659); const ctx_r658 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r658.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r659); const ctx_r660 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r660.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r646 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r651 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Latitude");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r651.view.recordStatus == "update" && ctx_r651.notSaved("latitude", rowForm_r646));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r651.view.recordStatus == "update" && ctx_r651.isSaved("latitude", rowForm_r646));
    } }
    function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 64)(2, "span", 65);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_3_Template, 2, 1, "span", 66);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_4_Template, 5, 3, "span", 66);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_span_5_Template, 1, 0, "span", 47);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r646 = i0.ɵɵnextContext().$implicit;
        const ctx_r648 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r648.excelEditing == false && rowForm_r646.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r648.excelEditing == true || rowForm_r646.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r648.excelEditing == false && rowForm_r646.get("__edit").value === false);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_td_35_ng_container_1_Template, 6, 3, "ng-container", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r646 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r646);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r646.getRawValue());
    } }
    function dibexSimpleGridComponent_ng_template_78_th_36_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Latitude ");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_36_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Latitude");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_36_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r669 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_th_36_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r669); const ctx_r668 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r668.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_36_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 74);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexSimpleGridComponent_ng_template_78_th_36_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r671 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Latitude");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexSimpleGridComponent_ng_template_78_th_36_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r671); const ctx_r670 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r670.searchGrid(false)); })("keydown.esc", function dibexSimpleGridComponent_ng_template_78_th_36_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r671); const ctx_r672 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r672.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_th_36_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_36_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 71);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r665 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r665.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Latitude");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r665.view.recordStatus == "update" && ctx_r665.notSaved("latitude", ctx_r665.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r665.view.recordStatus == "update" && ctx_r665.isSaved("latitude", ctx_r665.model.$formGroup));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 63);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_th_36_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_36_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexSimpleGridComponent_ng_template_78_th_36_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r380 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r380.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r380.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r380.showSearch);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_38_Template(rf, ctx) { if (rf & 1) {
        const _r674 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 145);
        i0.ɵɵlistener("change", function dibexSimpleGridComponent_ng_template_78_th_38_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r674); const ctx_r673 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r673.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r381 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r381.masterIsChecked)("indeterminate", ctx_r381.masterIsIndeterminate);
    } }
    function dibexSimpleGridComponent_ng_template_78_td_39_Template(rf, ctx) { if (rf & 1) {
        const _r678 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 146)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_td_39_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexSimpleGridComponent_ng_template_78_td_39_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r678); const row_r675 = restoredCtx.$implicit; const ctx_r677 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r677.selection.toggle(row_r675) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r675 = ctx.$implicit;
        const ctx_r382 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r382.isHighlighted(row_r675));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_41_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 125);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 147);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_th_41_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 124);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r383 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r383.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r383.busy);
    } }
    function dibexSimpleGridComponent_ng_template_78_th_43_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r680 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r680.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexSimpleGridComponent_ng_template_78_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 126);
        i0.ɵɵtemplate(1, dibexSimpleGridComponent_ng_template_78_th_43_span_1_Template, 2, 1, "span", 47);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r384 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r384.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r384.busy && ctx_r384.tableDataSource.data.length == 0);
    } }
    function dibexSimpleGridComponent_ng_template_78_tr_44_Template(rf, ctx) { if (rf & 1) {
        const _r683 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 148);
        i0.ɵɵlistener("click", function dibexSimpleGridComponent_ng_template_78_tr_44_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r683); const row_r681 = restoredCtx.$implicit; const ctx_r682 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r682.rowClick(row_r681, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r681 = ctx.$implicit;
        const ctx_r385 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r385.isHighlighted(row_r681)));
    } }
    function dibexSimpleGridComponent_ng_template_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 140);
        i0.ɵɵelementContainerStart(1, 26);
        i0.ɵɵtemplate(2, dibexSimpleGridComponent_ng_template_78_td_2_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(3, dibexSimpleGridComponent_ng_template_78_th_3_Template, 1, 0, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 29);
        i0.ɵɵtemplate(5, dibexSimpleGridComponent_ng_template_78_td_5_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(6, dibexSimpleGridComponent_ng_template_78_th_6_Template, 4, 0, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 30);
        i0.ɵɵtemplate(8, dibexSimpleGridComponent_ng_template_78_td_8_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(9, dibexSimpleGridComponent_ng_template_78_th_9_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 31);
        i0.ɵɵtemplate(11, dibexSimpleGridComponent_ng_template_78_td_11_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(12, dibexSimpleGridComponent_ng_template_78_th_12_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 32);
        i0.ɵɵtemplate(14, dibexSimpleGridComponent_ng_template_78_td_14_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(15, dibexSimpleGridComponent_ng_template_78_th_15_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 33);
        i0.ɵɵtemplate(17, dibexSimpleGridComponent_ng_template_78_td_17_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(18, dibexSimpleGridComponent_ng_template_78_th_18_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 34);
        i0.ɵɵtemplate(20, dibexSimpleGridComponent_ng_template_78_td_20_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(21, dibexSimpleGridComponent_ng_template_78_th_21_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 35);
        i0.ɵɵtemplate(23, dibexSimpleGridComponent_ng_template_78_td_23_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(24, dibexSimpleGridComponent_ng_template_78_th_24_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 36);
        i0.ɵɵtemplate(26, dibexSimpleGridComponent_ng_template_78_td_26_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(27, dibexSimpleGridComponent_ng_template_78_th_27_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 37);
        i0.ɵɵtemplate(29, dibexSimpleGridComponent_ng_template_78_td_29_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(30, dibexSimpleGridComponent_ng_template_78_th_30_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 38);
        i0.ɵɵtemplate(32, dibexSimpleGridComponent_ng_template_78_td_32_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(33, dibexSimpleGridComponent_ng_template_78_th_33_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 39);
        i0.ɵɵtemplate(35, dibexSimpleGridComponent_ng_template_78_td_35_Template, 2, 2, "td", 27);
        i0.ɵɵtemplate(36, dibexSimpleGridComponent_ng_template_78_th_36_Template, 5, 3, "th", 28);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 23);
        i0.ɵɵtemplate(38, dibexSimpleGridComponent_ng_template_78_th_38_Template, 2, 2, "th", 24);
        i0.ɵɵtemplate(39, dibexSimpleGridComponent_ng_template_78_td_39_Template, 2, 1, "td", 141);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 40);
        i0.ɵɵtemplate(41, dibexSimpleGridComponent_ng_template_78_th_41_Template, 2, 2, "th", 142);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(42, 42);
        i0.ɵɵtemplate(43, dibexSimpleGridComponent_ng_template_78_th_43_Template, 2, 2, "th", 43);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(44, dibexSimpleGridComponent_ng_template_78_tr_44_Template, 1, 3, "tr", 143);
        i0.ɵɵpipe(45, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r40.selectionDataSource);
        i0.ɵɵadvance(44);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(45, 2, ctx_r40.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i18 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
                i6 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i19 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i20 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i14 = select_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexSimpleGridComponent = class dibexSimpleGridComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 217, name: 'dibexSimpleGrid', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = true; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(["_select", 'hdrActions', 'id', 'first_name', 'last_name', 'staff_code', 'position', 'join_date', 'email', 'address', 'color', 'latitude',]);
                allColumnsToDisplay = new shared_3.DibArray(["_select", 'hdrActions', 'id', 'first_name', 'last_name', 'staff_code', 'position', 'join_date', 'email', 'address', 'color', 'latitude',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list5439 = new shared_3.DibEnumList(this.translationService, this.eventService, 'position', ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'], true);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexSimpleGrid');
                    this.containerName = 'dibexSimpleGrid'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 5434, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, first_name: { itemId: 5435, type: 'text', fieldAlias: 'first_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'first_name', default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 5436, type: 'text', fieldAlias: 'last_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 5437, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(200)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, join_date: { itemId: 5438, type: 'date', fieldAlias: 'join_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'join_date', default: '', dataType: 'date', contentType: 'date', changeUrl: false }, position: { itemId: 5439, type: 'text', fieldAlias: 'position', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'position', default: '', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'] }, staff_code: { itemId: 5440, type: 'text', fieldAlias: 'staff_code', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(10)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, address: { itemId: 5441, type: 'text', fieldAlias: 'address', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, color: { itemId: 5442, type: 'text', fieldAlias: 'color', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, latitude: { itemId: 5443, type: 'number', fieldAlias: 'latitude', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('join_date', this.model.modelItems.join_date.formControl);
                    this.model.$formGroup.addControl('position', this.model.modelItems.position.formControl);
                    this.model.$formGroup.addControl('staff_code', this.model.modelItems.staff_code.formControl);
                    this.model.$formGroup.addControl('address', this.model.modelItems.address.formControl);
                    this.model.$formGroup.addControl('color', this.model.modelItems.color.formControl);
                    this.model.$formGroup.addControl('latitude', this.model.modelItems.latitude.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnClientData", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/General/showClientData", itemAlias: "btnClientData", waitForCompletion: false, containerName: "dibexSimpleGrid", handlers: [] }, this.clientData, { itemEventId: 'ie259-dib', itemId: '5401', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnClientDataInline", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/General/showClientData", itemAlias: "btnClientDataInline", waitForCompletion: false, containerName: "dibexSimpleGrid", handlers: [] }, this.clientData, { itemEventId: 'ie260-dib', itemId: '5402', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['_select', 'hdrActions', 'id', 'first_name', 'last_name', 'staff_code', 'position', 'join_date', 'email', 'address', 'color', 'latitude']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexSimpleGrid`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexSimpleGrid`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexSimpleGrid`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 5434 };
                    formDefaultsConfigs['first_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5435 };
                    formDefaultsConfigs['last_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5436 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 5437 };
                    formDefaultsConfigs['join_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 5438 };
                    formDefaultsConfigs['position'] = { contentType: "text", type: "none", defaultValue: "", listId: 5439 };
                    formDefaultsConfigs['staff_code'] = { contentType: "text", type: "none", defaultValue: "", listId: 5440 };
                    formDefaultsConfigs['address'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 5441 };
                    formDefaultsConfigs['color'] = { contentType: "text", type: "none", defaultValue: "", listId: 5442 };
                    formDefaultsConfigs['latitude'] = { contentType: "integer", type: "none", defaultValue: "", listId: 5443 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 5434, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), first_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "first_name", "none", false, formDefaults['first_name'], 5435, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), last_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "last_name", "none", false, formDefaults['last_name'], 5436, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 5437, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(200)], updateOn: 'blur' }), join_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "join_date", "none", false, formDefaults['join_date'], 5438, "date"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), position: new forms_2.FormControl(this.calculateInitialColumnValue(row, "position", "none", false, formDefaults['position'], 5439, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(255)], updateOn: 'blur' }), staff_code: new forms_2.FormControl(this.calculateInitialColumnValue(row, "staff_code", "none", false, formDefaults['staff_code'], 5440, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(10)], updateOn: 'blur' }), address: new forms_2.FormControl(this.calculateInitialColumnValue(row, "address", "none", false, formDefaults['address'], 5441, "text"), { validators: [], updateOn: 'blur' }), color: new forms_2.FormControl(this.calculateInitialColumnValue(row, "color", "none", false, formDefaults['color'], 5442, "text"), { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), latitude: new forms_2.FormControl(this.calculateInitialColumnValue(row, "latitude", "none", false, formDefaults['latitude'], 5443, "number"), { validators: [], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list5439.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexSimpleGrid', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexSimpleGrid' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexSimpleGridComponent_Factory(t) { return new (t || dibexSimpleGridComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexSimpleGridComponent, selectors: [["dibex-simple-grid"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 80, vars: 39, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5391", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci5392", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-raised-button", "", "color", "accent", "id", "ci5401", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnClientData", "type", "button", 3, "containerPortId"], [1, "dibButtonCaption"], ["id", "ci5397", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci5396", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5394", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci5395", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci5393", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["id", "ci5411", "dibComponent", "gridPaging", 2, "display", "flex", "flex-direction", "row", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["id", "ci5398", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "btnClientDataInline"], ["matColumnDef", "id"], ["matColumnDef", "first_name"], ["matColumnDef", "last_name"], ["matColumnDef", "email"], ["matColumnDef", "join_date"], ["matColumnDef", "position"], ["matColumnDef", "staff_code"], ["matColumnDef", "address"], ["matColumnDef", "color"], ["matColumnDef", "latitude"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexSimpleGrid", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci5394", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5395", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-raised-button", "", "color", "accent", "id", "ci5402", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnClientDataInline", "type", "button", 3, "containerPortId"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], ["mat-raised-button", "", "color", "accent", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnClientDataInline", "type", "button", 3, "containerPortId"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci5434", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText", "item-alias", "first_name"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "50", "required", "true", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5435", "dibComponent", "inputText", "item-alias", "first_name"], ["matInput", "", "type", "text", "formControlName", "first_name", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "50", "required", "true", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5436", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "last_name", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "200", "required", "true", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci5437", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "datePicker", "item-alias", "join_date"], ["matInput", "", "formControlName", "join_date", "name", "join_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker5438", ""], ["id", "ci5438", "dibComponent", "inputText", "item-alias", "join_date"], ["matInput", "", "type", "text", "formControlName", "join_date", "name", "join_date", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "selectEnum", "item-alias", "position", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "position", "required", "true"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["id", "ci5439", "dibComponent", "selectEnum", "item-alias", "position", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "position"], ["matInput", "", "type", "text", "formControlName", "staff_code", "maxlength", "10", "required", "true", "name", "staff_code", 3, "keydown.enter", "keydown.esc"], ["id", "ci5440", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "staff_code", "name", "staff_code", 3, "keydown.enter", "keydown.esc"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "dibComponent", "inputTextArea"], ["matInput", "", "formControlName", "address", "name", "address", 3, "keydown.enter", "keydown.esc"], ["id", "ci5441", "dibComponent", "inputText"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "matInput", "", "type", "text", "formControlName", "address", "name", "address", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "color", "maxlength", "50", "name", "color", 3, "keydown.enter", "keydown.esc"], ["id", "ci5442", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "color", "name", "color", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputNumber"], ["matInput", "", "type", "number", "formControlName", "latitude", "name", "latitude", 3, "keydown.enter", "keydown.esc"], ["id", "ci5443", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "latitude", "name", "latitude", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexSimpleGridComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexSimpleGridComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexSimpleGridComponent_Template_button_click_4_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6)(7, "span", 7);
                        i0.ɵɵtext(8, "Show Client Data");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(9, "span", 8);
                        i0.ɵɵpipe(10, "safeHtml");
                        i0.ɵɵelementStart(11, "button", 9);
                        i0.ɵɵlistener("click", function dibexSimpleGridComponent_Template_button_click_11_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(12, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(13, dibexSimpleGridComponent_button_13_Template, 2, 4, "button", 11);
                        i0.ɵɵtemplate(14, dibexSimpleGridComponent_button_14_Template, 2, 4, "button", 12);
                        i0.ɵɵelement(15, "span", 13);
                        i0.ɵɵelementStart(16, "mat-paginator", 14, 15);
                        i0.ɵɵlistener("page", function dibexSimpleGridComponent_Template_mat_paginator_page_16_listener($event) { return ctx.changePage($event); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(18, "mat-card", 16)(19, "mat-card-content", 17);
                        i0.ɵɵelementContainerStart(20, 3);
                        i0.ɵɵelementStart(21, "div", 18, 19)(23, "form", 20);
                        i0.ɵɵelementContainerStart(24, 21);
                        i0.ɵɵelementStart(25, "table", 22);
                        i0.ɵɵelementContainerStart(26, 23);
                        i0.ɵɵtemplate(27, dibexSimpleGridComponent_th_27_Template, 2, 2, "th", 24);
                        i0.ɵɵtemplate(28, dibexSimpleGridComponent_td_28_Template, 2, 1, "td", 25);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(29, 26);
                        i0.ɵɵtemplate(30, dibexSimpleGridComponent_td_30_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(31, dibexSimpleGridComponent_th_31_Template, 1, 0, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(32, 29);
                        i0.ɵɵtemplate(33, dibexSimpleGridComponent_td_33_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(34, dibexSimpleGridComponent_th_34_Template, 4, 0, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(35, 30);
                        i0.ɵɵtemplate(36, dibexSimpleGridComponent_td_36_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(37, dibexSimpleGridComponent_th_37_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(38, 31);
                        i0.ɵɵtemplate(39, dibexSimpleGridComponent_td_39_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(40, dibexSimpleGridComponent_th_40_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(41, 32);
                        i0.ɵɵtemplate(42, dibexSimpleGridComponent_td_42_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(43, dibexSimpleGridComponent_th_43_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(44, 33);
                        i0.ɵɵtemplate(45, dibexSimpleGridComponent_td_45_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(46, dibexSimpleGridComponent_th_46_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(47, 34);
                        i0.ɵɵtemplate(48, dibexSimpleGridComponent_td_48_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(49, dibexSimpleGridComponent_th_49_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(50, 35);
                        i0.ɵɵtemplate(51, dibexSimpleGridComponent_td_51_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(52, dibexSimpleGridComponent_th_52_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(53, 36);
                        i0.ɵɵtemplate(54, dibexSimpleGridComponent_td_54_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(55, dibexSimpleGridComponent_th_55_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(56, 37);
                        i0.ɵɵtemplate(57, dibexSimpleGridComponent_td_57_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(58, dibexSimpleGridComponent_th_58_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(59, 38);
                        i0.ɵɵtemplate(60, dibexSimpleGridComponent_td_60_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(61, dibexSimpleGridComponent_th_61_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(62, 39);
                        i0.ɵɵtemplate(63, dibexSimpleGridComponent_td_63_Template, 2, 2, "td", 27);
                        i0.ɵɵtemplate(64, dibexSimpleGridComponent_th_64_Template, 5, 3, "th", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(65, 40);
                        i0.ɵɵtemplate(66, dibexSimpleGridComponent_th_66_Template, 2, 2, "th", 41);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(67, 42);
                        i0.ɵɵtemplate(68, dibexSimpleGridComponent_th_68_Template, 2, 2, "th", 43);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(69, dibexSimpleGridComponent_ng_container_69_Template, 3, 3, "ng-container", 44);
                        i0.ɵɵtemplate(70, dibexSimpleGridComponent_tr_70_Template, 1, 3, "tr", 45);
                        i0.ɵɵtemplate(71, dibexSimpleGridComponent_tr_71_Template, 1, 3, "tr", 45);
                        i0.ɵɵtemplate(72, dibexSimpleGridComponent_tr_72_Template, 1, 4, "tr", 46);
                        i0.ɵɵpipe(73, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(74, dibexSimpleGridComponent_74_Template, 1, 1, null, 47);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(75, "div", null, 48);
                        i0.ɵɵtemplate(77, dibexSimpleGridComponent_mat_toolbar_77_Template, 6, 3, "mat-toolbar", 47);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(78, dibexSimpleGridComponent_ng_template_78_Template, 46, 4, "ng-template", null, 49, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r37 = i0.ɵɵreference(76);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(34, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5391");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Show Client Data");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(10, 30, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("length", ctx.page.totalRecords)("pageSize", ctx.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(36, _c2));
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("dibPort", "5398");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r37);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(44);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(37, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(38, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(73, 32, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || false);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibListenersDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.MatOption, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatSelect, i15.MatToolbar, i15.MatToolbarRow, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i18.MatTable, i18.MatHeaderCellDef, i18.MatHeaderRowDef, i18.MatColumnDef, i18.MatCellDef, i18.MatRowDef, i18.MatHeaderCell, i18.MatCell, i18.MatHeaderRow, i18.MatRow, i19.MatSort, i19.MatSortHeader, i20.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexSimpleGrid'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexSimpleGridComponent.prototype, "reloadContainer", null);
            exports_1("dibexSimpleGridComponent", dibexSimpleGridComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexSimpleGridComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-simple-grid', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci5391 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5391'" ><button   mat-mini-fab color=primary  id=ci5392 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button  mat-raised-button color=accent  id=ci5401 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientData   style="  "  [attr.aria-label]="'Show Client Data'"  type=button  ><span class=dibButtonCaption >Show Client Data</span></button><span  id=ci5397 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci5396 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5394 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5395 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci5393 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><mat-paginator  id=ci5411 dibComponent=gridPaging   style="  display:flex; flex-direction: row;  "  #paginator  [length]="page.totalRecords"   (page)="changePage($event)"   [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]"  ></mat-paginator></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5398 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5398'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexSimpleGrid" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'5400'" ><button  mat-raised-button color=accent  id=ci5402 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientDataInline   style="  "  [attr.aria-label]="'Show Client Data'"  type=button  ><span class=dibButtonCaption >Show Client Data</span></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnClientDataInline  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button color=accent  dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientDataInline   style="  "  [attr.aria-label]="'Show Client Data'"  type=button  ><span class=dibButtonCaption >Show Client Data</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Show Client Data  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5434 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  "  item-alias=first_name  ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5435 dibComponent=inputText   style="  "  item-alias=first_name  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5436 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='200'  required=true  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5437 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=join_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'join_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  "  item-alias=join_date  ><input   matInput [matDatepicker]="datePicker5438"   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (focus)="datePicker5438.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5438" ></mat-datepicker-toggle><mat-datepicker #datePicker5438 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', rowForm)" matSuffix >done_all</mat-icon><mat-error *ngIf="hasError('join_date','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Join Date  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Join Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5438 dibComponent=inputText   style="  "  item-alias=join_date  ><mat-label >Join Date</mat-label><input   matInput  type=text   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list5439.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5439 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list5439.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=staff_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'staff_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=staff_code   maxlength='10'  required=true  name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('staff_code','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('staff_code','maxlength',rowForm)">Please enter 10 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Staff Code  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Staff Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5440 dibComponent=inputText   style="  " ><mat-label >Staff Code</mat-label><input   matInput  type=text   formControlName=staff_code   name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  " ><textarea   matInput  formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5441 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=color  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'color','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=color   maxlength='50'  name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('color','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Color  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Color</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5442 dibComponent=inputText   style="  " ><mat-label >Color</mat-label><input   matInput  type=text   formControlName=color   name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=latitude  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'latitude','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=latitude   name=latitude   [attr.aria-label]="'Latitude'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('latitude', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('latitude', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Latitude  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Latitude</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5443 dibComponent=inputText   style="  " ><mat-label >Latitude</mat-label><input   matInput  type=text   formControlName=latitude   name=latitude   [attr.aria-label]="'Latitude'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('latitude', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('latitude', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexSimpleGrid><mat-toolbar *ngIf="gridMultiselect || false"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=false  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'5400'" ><button  mat-raised-button color=accent  id=ci5402 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientDataInline   style="  "  [attr.aria-label]="'Show Client Data'"  type=button  ><span class=dibButtonCaption >Show Client Data</span></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnClientDataInline  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button color=accent  dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientDataInline   style="  "  [attr.aria-label]="'Show Client Data'"  type=button  ><span class=dibButtonCaption >Show Client Data</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Show Client Data  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5434 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  "  item-alias=first_name  ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5435 dibComponent=inputText   style="  "  item-alias=first_name  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5436 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='200'  required=true  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5437 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=join_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'join_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  "  item-alias=join_date  ><input   matInput [matDatepicker]="datePicker5438"   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (focus)="datePicker5438.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5438" ></mat-datepicker-toggle><mat-datepicker #datePicker5438 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', rowForm)" matSuffix >done_all</mat-icon><mat-error *ngIf="hasError('join_date','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Join Date  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Join Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5438 dibComponent=inputText   style="  "  item-alias=join_date  ><mat-label >Join Date</mat-label><input   matInput  type=text   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list5439.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5439 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list5439.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=staff_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'staff_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=staff_code   maxlength='10'  required=true  name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('staff_code','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('staff_code','maxlength',rowForm)">Please enter 10 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Staff Code  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Staff Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5440 dibComponent=inputText   style="  " ><mat-label >Staff Code</mat-label><input   matInput  type=text   formControlName=staff_code   name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field   cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10  dibComponent=inputTextArea   style="  " ><textarea   matInput  formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5441 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=color  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'color','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=color   maxlength='50'  name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('color','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Color  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Color</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5442 dibComponent=inputText   style="  " ><mat-label >Color</mat-label><input   matInput  type=text   formControlName=color   name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=latitude  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'latitude','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=latitude   name=latitude   [attr.aria-label]="'Latitude'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('latitude', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('latitude', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Latitude  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Latitude</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5443 dibComponent=inputText   style="  " ><mat-label >Latitude</mat-label><input   matInput  type=text   formControlName=latitude   name=latitude   [attr.aria-label]="'Latitude'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('latitude', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('latitude', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, select_1.MatSelectModule];
            dibexSimpleGridModule = class dibexSimpleGridModule {
                static entry = dibexSimpleGridComponent;
                static ɵfac = function dibexSimpleGridModule_Factory(t) { return new (t || dibexSimpleGridModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexSimpleGridModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexSimpleGridModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexSimpleGridModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexSimpleGridComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexSimpleGridModule, { declarations: [dibexSimpleGridComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, select_1.MatSelectModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
