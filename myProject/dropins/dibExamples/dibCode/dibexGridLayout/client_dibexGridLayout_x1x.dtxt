System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexGridLayoutComponent, containerModules, dibexGridLayoutModule;
    var __moduleName = context_1 && context_1.id;
    function dibexGridLayoutComponent_th_15_Template(rf, ctx) { if (rf & 1) {
        const _r45 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 44)(1, "mat-checkbox", 45);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_th_15_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r45); const ctx_r44 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r44.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r1.masterIsChecked)("indeterminate", ctx_r1.masterIsIndeterminate);
    } }
    function dibexGridLayoutComponent_td_16_Template(rf, ctx) { if (rf & 1) {
        const _r49 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 46)(1, "mat-checkbox", 47);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_16_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridLayoutComponent_td_16_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r49); const row_r46 = restoredCtx.$implicit; const ctx_r48 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r48.selection.toggle(row_r46) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r46 = ctx.$implicit;
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r2.isHighlighted(row_r46));
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r51 = i0.ɵɵnextContext(2).index;
        const ctx_r54 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r54.findColumnDisplayValue(rowIndex_r51, "id", "none", "number"), "");
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r63 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r63); const ctx_r62 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r62.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 60);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 53);
        i0.ɵɵelement(2, "input", 54);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_td_18_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 57);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r50 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r55 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r55.hasError("id", "required", rowForm_r50));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r55.view.recordStatus == "update" && ctx_r55.notSaved("id", rowForm_r50));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r55.view.recordStatus == "update" && ctx_r55.isSaved("id", rowForm_r50));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r55.isInvalid("id", rowForm_r50));
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_td_18_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_18_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_18_ng_container_1_span_4_Template, 7, 5, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_18_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r50 = i0.ɵɵnextContext().$implicit;
        const ctx_r52 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r52.excelEditing == false && rowForm_r50.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r52.excelEditing == true || rowForm_r50.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r52.excelEditing == false && rowForm_r50.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_td_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_18_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r50 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r50);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r50.getRawValue());
    } }
    function dibexGridLayoutComponent_th_19_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_19_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 66);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_th_19_div_2_span_2_Template, 2, 0, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r66 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r66.editorOpen);
    } }
    function dibexGridLayoutComponent_th_19_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 69);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_19_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r73 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_th_19_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r73); const ctx_r72 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r72.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_19_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_19_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r75 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 70)(1, "mat-form-field", 71)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 72);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_th_19_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r75); const ctx_r74 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r74.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_th_19_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r75); const ctx_r76 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r76.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_th_19_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_th_19_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r68 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r68.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.view.recordStatus == "update" && ctx_r68.notSaved("id", ctx_r68.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.view.recordStatus == "update" && ctx_r68.isSaved("id", ctx_r68.model.$formGroup));
    } }
    function dibexGridLayoutComponent_th_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_th_19_div_2_Template, 3, 1, "div", 63);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_th_19_div_3_Template, 2, 0, "div", 64);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_th_19_div_4_Template, 7, 4, "div", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r4.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r4.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r4.showSearch);
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r78 = i0.ɵɵnextContext(2).index;
        const ctx_r81 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r81.findColumnDisplayValue(rowIndex_r78, "name", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r90 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r90); const ctx_r89 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r89.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r92 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 74);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_21_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r92); const ctx_r91 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r91.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_21_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r92); const ctx_r93 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r93.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_td_21_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r77 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r82 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r82.hasError("name", "required", rowForm_r77));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r82.hasError("name", "maxlength", rowForm_r77));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r82.view.recordStatus == "update" && ctx_r82.notSaved("name", rowForm_r77));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r82.view.recordStatus == "update" && ctx_r82.isSaved("name", rowForm_r77));
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_td_21_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_21_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_21_ng_container_1_span_4_Template, 7, 5, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_21_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r77 = i0.ɵɵnextContext().$implicit;
        const ctx_r79 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r79.excelEditing == false && rowForm_r77.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r79.excelEditing == true || rowForm_r77.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r79.excelEditing == false && rowForm_r77.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_td_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_21_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r77 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r77);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r77.getRawValue());
    } }
    function dibexGridLayoutComponent_th_22_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_22_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 66);
        i0.ɵɵtext(1, " Name2 \u00A0");
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_th_22_div_2_span_2_Template, 2, 0, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r96 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r96.editorOpen);
    } }
    function dibexGridLayoutComponent_th_22_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 69);
        i0.ɵɵtext(1, "Name2");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_22_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r103 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_th_22_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r103); const ctx_r102 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r102.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_22_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_22_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r105 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 70)(1, "mat-form-field", 75)(2, "mat-label");
        i0.ɵɵtext(3, "Name2");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 76);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_th_22_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r105); const ctx_r104 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r104.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_th_22_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r105); const ctx_r106 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r106.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_th_22_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_th_22_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r98 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r98.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r98.view.recordStatus == "update" && ctx_r98.notSaved("name", ctx_r98.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r98.view.recordStatus == "update" && ctx_r98.isSaved("name", ctx_r98.model.$formGroup));
    } }
    function dibexGridLayoutComponent_th_22_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_th_22_div_2_Template, 3, 1, "div", 63);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_th_22_div_3_Template, 2, 0, "div", 64);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_th_22_div_4_Template, 7, 4, "div", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r6.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r6.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r6.showSearch);
    } }
    function dibexGridLayoutComponent_td_24_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r108 = i0.ɵɵnextContext(2).index;
        const ctx_r111 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r111.findColumnDisplayValue(rowIndex_r108, "email", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_td_24_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_24_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r119 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_24_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r119); const ctx_r118 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r118.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_24_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_24_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r121 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 77);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_24_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r121); const ctx_r120 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r120.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_24_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r121); const ctx_r122 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r122.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_24_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_24_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_24_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r107 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r112 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r112.hasError("email", "maxlength", rowForm_r107));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r112.view.recordStatus == "update" && ctx_r112.notSaved("email", rowForm_r107));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r112.view.recordStatus == "update" && ctx_r112.isSaved("email", rowForm_r107));
    } }
    function dibexGridLayoutComponent_td_24_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_td_24_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_24_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_24_ng_container_1_span_4_Template, 6, 4, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_24_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r107 = i0.ɵɵnextContext().$implicit;
        const ctx_r109 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r109.excelEditing == false && rowForm_r107.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r109.excelEditing == true || rowForm_r107.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r109.excelEditing == false && rowForm_r107.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_td_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_24_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r107 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r107);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r107.getRawValue());
    } }
    function dibexGridLayoutComponent_th_25_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 66);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_25_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 69);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_25_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r131 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_th_25_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r131); const ctx_r130 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r130.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_25_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_th_25_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r133 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 70)(1, "mat-form-field", 78)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 79);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_th_25_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r133); const ctx_r132 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r132.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_th_25_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r133); const ctx_r134 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r134.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_th_25_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_th_25_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r127 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r127.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r127.view.recordStatus == "update" && ctx_r127.notSaved("email", ctx_r127.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r127.view.recordStatus == "update" && ctx_r127.isSaved("email", ctx_r127.model.$formGroup));
    } }
    function dibexGridLayoutComponent_th_25_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_th_25_div_2_Template, 2, 0, "div", 63);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_th_25_div_3_Template, 2, 0, "div", 64);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_th_25_div_4_Template, 7, 4, "div", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r8 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r8.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r8.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r8.showSearch);
    } }
    function dibexGridLayoutComponent_td_27_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r136 = i0.ɵɵnextContext(2).index;
        const ctx_r139 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r139.findColumnDisplayValue(rowIndex_r136, "country", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_td_27_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_27_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r147 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_27_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r147); const ctx_r146 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r146.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_27_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_27_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r149 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 80);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_27_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r149); const ctx_r148 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r148.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_27_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r149); const ctx_r150 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r150.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_27_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_27_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_27_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r135 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r140 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r140.hasError("country", "maxlength", rowForm_r135));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r140.view.recordStatus == "update" && ctx_r140.notSaved("country", rowForm_r135));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r140.view.recordStatus == "update" && ctx_r140.isSaved("country", rowForm_r135));
    } }
    function dibexGridLayoutComponent_td_27_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_td_27_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_27_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_27_ng_container_1_span_4_Template, 6, 3, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_27_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r135 = i0.ɵɵnextContext().$implicit;
        const ctx_r137 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r137.excelEditing == false && rowForm_r135.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.excelEditing == true || rowForm_r135.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r137.excelEditing == false && rowForm_r135.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_td_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_27_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r135 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r135);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r135.getRawValue());
    } }
    function dibexGridLayoutComponent_th_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_td_30_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r154 = i0.ɵɵnextContext(2).index;
        const ctx_r157 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r157.findColumnDisplayValue(rowIndex_r154, "city_town", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_td_30_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_30_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r165 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_30_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r165); const ctx_r164 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r164.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_30_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_30_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r167 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_30_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r167); const ctx_r166 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r166.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_30_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r167); const ctx_r168 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r168.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_30_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_30_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_30_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r153 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r158 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r158.hasError("city_town", "maxlength", rowForm_r153));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r158.view.recordStatus == "update" && ctx_r158.notSaved("city_town", rowForm_r153));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r158.view.recordStatus == "update" && ctx_r158.isSaved("city_town", rowForm_r153));
    } }
    function dibexGridLayoutComponent_td_30_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_td_30_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_30_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_30_ng_container_1_span_4_Template, 6, 3, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_30_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r153 = i0.ɵɵnextContext().$implicit;
        const ctx_r155 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r155.excelEditing == false && rowForm_r153.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r155.excelEditing == true || rowForm_r153.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r155.excelEditing == false && rowForm_r153.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_td_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_30_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r153 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r153);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r153.getRawValue());
    } }
    function dibexGridLayoutComponent_th_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_td_33_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r172 = i0.ɵɵnextContext(2).index;
        const ctx_r175 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r175.findColumnDisplayValue(rowIndex_r172, "phone", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_td_33_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_33_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r183 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_33_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r183); const ctx_r182 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r182.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_33_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_33_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r185 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_33_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r185); const ctx_r184 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r184.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_33_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r185); const ctx_r186 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r186.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_33_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_33_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_33_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r171 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r176 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r176.hasError("phone", "maxlength", rowForm_r171));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r176.view.recordStatus == "update" && ctx_r176.notSaved("phone", rowForm_r171));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r176.view.recordStatus == "update" && ctx_r176.isSaved("phone", rowForm_r171));
    } }
    function dibexGridLayoutComponent_td_33_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_td_33_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_33_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_33_ng_container_1_span_4_Template, 6, 3, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_33_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r171 = i0.ɵɵnextContext().$implicit;
        const ctx_r173 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r173.excelEditing == false && rowForm_r171.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r173.excelEditing == true || rowForm_r171.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r173.excelEditing == false && rowForm_r171.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_td_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_33_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r171 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r171);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r171.getRawValue());
    } }
    function dibexGridLayoutComponent_th_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_td_36_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r190 = i0.ɵɵnextContext(2).index;
        const ctx_r193 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r193.findColumnDisplayValue(rowIndex_r190, "start_date", "none", "date"), "");
    } }
    function dibexGridLayoutComponent_td_36_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r201 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_36_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r201); const ctx_r200 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r200.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_36_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_36_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r203 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 83)(2, "input", 84);
        i0.ɵɵlistener("focus", function dibexGridLayoutComponent_td_36_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r203); const _r197 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r197.open()); })("keydown.enter", function dibexGridLayoutComponent_td_36_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r203); const ctx_r204 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r204.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_36_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r203); const ctx_r205 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r205.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 85)(4, "mat-datepicker", null, 86);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_td_36_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_td_36_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r197 = i0.ɵɵreference(5);
        const rowForm_r189 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r194 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r197);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r197);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r194.view.recordStatus == "update" && ctx_r194.notSaved("start_date", rowForm_r189));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r194.view.recordStatus == "update" && ctx_r194.isSaved("start_date", rowForm_r189));
    } }
    function dibexGridLayoutComponent_td_36_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_td_36_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_td_36_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_td_36_ng_container_1_span_4_Template, 8, 4, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_36_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r189 = i0.ɵɵnextContext().$implicit;
        const ctx_r191 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r191.excelEditing == false && rowForm_r189.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r191.excelEditing == true || rowForm_r189.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r191.excelEditing == false && rowForm_r189.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_td_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_36_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r189 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r189);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r189.getRawValue());
    } }
    function dibexGridLayoutComponent_th_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_mat_error_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_mat_error_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        const _r220 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_12_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r220); const ctx_r219 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r219.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_13_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_mat_error_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_19_Template(rf, ctx) { if (rf & 1) {
        const _r222 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_19_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r222); const ctx_r221 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r221.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_39_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r224 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div", 7);
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "div", 88);
        i0.ɵɵelementContainerStart(5, 3);
        i0.ɵɵelementStart(6, "mat-form-field", 89)(7, "mat-label");
        i0.ɵɵtext(8, "Name2");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(9, "input", 74);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_39_ng_container_1_Template_input_keydown_enter_9_listener() { i0.ɵɵrestoreView(_r224); const ctx_r223 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r223.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_39_ng_container_1_Template_input_keydown_esc_9_listener() { i0.ɵɵrestoreView(_r224); const ctx_r225 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r225.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_td_39_ng_container_1_mat_error_10_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(11, dibexGridLayoutComponent_td_39_ng_container_1_mat_error_11_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(12, dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(13, dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_13_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "mat-form-field", 90)(15, "mat-label");
        i0.ɵɵtext(16, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(17, "input", 77);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_39_ng_container_1_Template_input_keydown_enter_17_listener() { i0.ɵɵrestoreView(_r224); const ctx_r226 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r226.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_39_ng_container_1_Template_input_keydown_esc_17_listener() { i0.ɵɵrestoreView(_r224); const ctx_r227 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r227.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(18, dibexGridLayoutComponent_td_39_ng_container_1_mat_error_18_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(19, dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_19_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(20, dibexGridLayoutComponent_td_39_ng_container_1_mat_icon_20_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r210 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4932");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4939");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.hasError("name", "required", ctx_r210.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.hasError("name", "maxlength", ctx_r210.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.view.recordStatus == "update" && ctx_r210.notSaved("name", ctx_r210.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.view.recordStatus == "update" && ctx_r210.isSaved("name", ctx_r210.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.hasError("email", "maxlength", ctx_r210.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.view.recordStatus == "update" && ctx_r210.notSaved("email", ctx_r210.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r210.view.recordStatus == "update" && ctx_r210.isSaved("email", ctx_r210.model.$formGroup));
    } }
    function dibexGridLayoutComponent_td_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_39_ng_container_1_Template, 21, 11, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r208 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r208);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r208.getRawValue());
    } }
    function dibexGridLayoutComponent_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colA ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_td_42_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r239 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r239); const ctx_r238 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r238.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_42_ng_container_1_mat_error_13_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_14_Template(rf, ctx) { if (rf & 1) {
        const _r241 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_14_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r241); const ctx_r240 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r240.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_42_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r243 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "div", 91);
        i0.ɵɵelementContainerStart(5, 3);
        i0.ɵɵelementStart(6, "mat-form-field", 92)(7, "input", 80);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_42_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r243); const ctx_r242 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r242.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_42_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r243); const ctx_r244 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r244.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridLayoutComponent_td_42_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(9, dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 93)(12, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_42_ng_container_1_Template_input_keydown_enter_12_listener() { i0.ɵɵrestoreView(_r243); const ctx_r245 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r245.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_42_ng_container_1_Template_input_keydown_esc_12_listener() { i0.ɵɵrestoreView(_r243); const ctx_r246 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r246.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(13, dibexGridLayoutComponent_td_42_ng_container_1_mat_error_13_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(14, dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_14_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(15, dibexGridLayoutComponent_td_42_ng_container_1_mat_icon_15_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r230 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4933");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4934");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r230.hasError("country", "maxlength", ctx_r230.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r230.view.recordStatus == "update" && ctx_r230.notSaved("country", ctx_r230.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r230.view.recordStatus == "update" && ctx_r230.isSaved("country", ctx_r230.model.$formGroup));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r230.hasError("city_town", "maxlength", ctx_r230.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r230.view.recordStatus == "update" && ctx_r230.notSaved("city_town", ctx_r230.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r230.view.recordStatus == "update" && ctx_r230.isSaved("city_town", ctx_r230.model.$formGroup));
    } }
    function dibexGridLayoutComponent_td_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_42_ng_container_1_Template, 16, 8, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r228 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r228);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r228.getRawValue());
    } }
    function dibexGridLayoutComponent_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colB ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_td_45_ng_container_1_mat_error_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r258 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r258); const ctx_r257 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r257.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_45_ng_container_1_mat_error_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_11_Template(rf, ctx) { if (rf & 1) {
        const _r260 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_11_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r260); const ctx_r259 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r259.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r262 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 94);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "mat-form-field", 92)(4, "input", 80);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_45_ng_container_1_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r262); const ctx_r261 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r261.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_45_ng_container_1_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r262); const ctx_r263 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r263.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_45_ng_container_1_mat_error_5_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_6_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_7_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "mat-form-field", 93)(9, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_45_ng_container_1_Template_input_keydown_enter_9_listener() { i0.ɵɵrestoreView(_r262); const ctx_r264 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r264.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_45_ng_container_1_Template_input_keydown_esc_9_listener() { i0.ɵɵrestoreView(_r262); const ctx_r265 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r265.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_td_45_ng_container_1_mat_error_10_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(11, dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_11_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(12, dibexGridLayoutComponent_td_45_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r249 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4934");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r249.hasError("country", "maxlength", ctx_r249.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r249.view.recordStatus == "update" && ctx_r249.notSaved("country", ctx_r249.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r249.view.recordStatus == "update" && ctx_r249.isSaved("country", ctx_r249.model.$formGroup));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r249.hasError("city_town", "maxlength", ctx_r249.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r249.view.recordStatus == "update" && ctx_r249.notSaved("city_town", ctx_r249.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r249.view.recordStatus == "update" && ctx_r249.isSaved("city_town", ctx_r249.model.$formGroup));
    } }
    function dibexGridLayoutComponent_td_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_45_ng_container_1_Template, 13, 7, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r247 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r247);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r247.getRawValue());
    } }
    function dibexGridLayoutComponent_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridLayoutComponent_td_48_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r277 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r277); const ctx_r276 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r276.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_16_Template(rf, ctx) { if (rf & 1) {
        const _r279 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_16_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r279); const ctx_r278 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r278.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_48_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r281 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "div", 95);
        i0.ɵɵelementContainerStart(5, 3);
        i0.ɵɵelementStart(6, "mat-form-field", 96)(7, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_48_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r281); const ctx_r280 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r280.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_48_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r281); const ctx_r282 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r282.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridLayoutComponent_td_48_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(9, dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 97)(12, "input", 84);
        i0.ɵɵlistener("focus", function dibexGridLayoutComponent_td_48_ng_container_1_Template_input_focus_12_listener() { i0.ɵɵrestoreView(_r281); const _r273 = i0.ɵɵreference(15); return i0.ɵɵresetView(_r273.open()); })("keydown.enter", function dibexGridLayoutComponent_td_48_ng_container_1_Template_input_keydown_enter_12_listener() { i0.ɵɵrestoreView(_r281); const ctx_r284 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r284.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_48_ng_container_1_Template_input_keydown_esc_12_listener() { i0.ɵɵrestoreView(_r281); const ctx_r285 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r285.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(13, "mat-datepicker-toggle", 85)(14, "mat-datepicker", null, 86);
        i0.ɵɵtemplate(16, dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_16_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(17, dibexGridLayoutComponent_td_48_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r273 = i0.ɵɵreference(15);
        const ctx_r268 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4935");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4936");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r268.hasError("phone", "maxlength", ctx_r268.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.notSaved("phone", ctx_r268.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.isSaved("phone", ctx_r268.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r273);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r273);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.notSaved("start_date", ctx_r268.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.isSaved("start_date", ctx_r268.model.$formGroup));
    } }
    function dibexGridLayoutComponent_td_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_48_ng_container_1_Template, 18, 9, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r266 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r266);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r266.getRawValue());
    } }
    function dibexGridLayoutComponent_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colC ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_td_51_ng_container_1_mat_error_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r297 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r297); const ctx_r296 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r296.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_13_Template(rf, ctx) { if (rf & 1) {
        const _r299 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_13_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r299); const ctx_r298 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r298.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_51_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r301 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 94);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "mat-form-field", 96)(4, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_51_ng_container_1_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r301); const ctx_r300 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r300.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_51_ng_container_1_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r301); const ctx_r302 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r302.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_td_51_ng_container_1_mat_error_5_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_6_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_7_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "mat-form-field", 97)(9, "input", 84);
        i0.ɵɵlistener("focus", function dibexGridLayoutComponent_td_51_ng_container_1_Template_input_focus_9_listener() { i0.ɵɵrestoreView(_r301); const _r293 = i0.ɵɵreference(12); return i0.ɵɵresetView(_r293.open()); })("keydown.enter", function dibexGridLayoutComponent_td_51_ng_container_1_Template_input_keydown_enter_9_listener() { i0.ɵɵrestoreView(_r301); const ctx_r304 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r304.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_51_ng_container_1_Template_input_keydown_esc_9_listener() { i0.ɵɵrestoreView(_r301); const ctx_r305 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r305.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(10, "mat-datepicker-toggle", 85)(11, "mat-datepicker", null, 86);
        i0.ɵɵtemplate(13, dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_13_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(14, dibexGridLayoutComponent_td_51_ng_container_1_mat_icon_14_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r293 = i0.ɵɵreference(12);
        const ctx_r288 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4936");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r288.hasError("phone", "maxlength", ctx_r288.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r288.view.recordStatus == "update" && ctx_r288.notSaved("phone", ctx_r288.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r288.view.recordStatus == "update" && ctx_r288.isSaved("phone", ctx_r288.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r293);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r293);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r288.view.recordStatus == "update" && ctx_r288.notSaved("start_date", ctx_r288.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r288.view.recordStatus == "update" && ctx_r288.isSaved("start_date", ctx_r288.model.$formGroup));
    } }
    function dibexGridLayoutComponent_td_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_51_ng_container_1_Template, 15, 8, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r286 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r286);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r286.getRawValue());
    } }
    function dibexGridLayoutComponent_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridLayoutComponent_td_54_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "button", 98);
        i0.ɵɵelement(5, "dib-icon", 99);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4937");
    } }
    function dibexGridLayoutComponent_td_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_54_ng_container_1_Template, 6, 1, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r306 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r306);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r306.getRawValue());
    } }
    function dibexGridLayoutComponent_th_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colA ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_td_57_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 100);
        i0.ɵɵelement(2, "dib-icon", 99);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } }
    function dibexGridLayoutComponent_td_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_57_ng_container_1_Template, 3, 0, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r310 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r310);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r310.getRawValue());
    } }
    function dibexGridLayoutComponent_th_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_mat_error_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r326 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r326); const ctx_r325 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r325.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_mat_error_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_16_Template(rf, ctx) { if (rf & 1) {
        const _r328 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_16_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r328); const ctx_r327 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r327.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_td_60_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r330 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 102);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "mat-form-field", 89)(4, "mat-label");
        i0.ɵɵtext(5, "Name2");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(6, "input", 74);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_60_ng_container_1_Template_input_keydown_enter_6_listener() { i0.ɵɵrestoreView(_r330); const ctx_r329 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r329.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_60_ng_container_1_Template_input_keydown_esc_6_listener() { i0.ɵɵrestoreView(_r330); const ctx_r331 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r331.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_td_60_ng_container_1_mat_error_7_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(8, dibexGridLayoutComponent_td_60_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(9, dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 90)(12, "mat-label");
        i0.ɵɵtext(13, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "input", 77);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_td_60_ng_container_1_Template_input_keydown_enter_14_listener() { i0.ɵɵrestoreView(_r330); const ctx_r332 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r332.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_td_60_ng_container_1_Template_input_keydown_esc_14_listener() { i0.ɵɵrestoreView(_r330); const ctx_r333 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r333.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(15, dibexGridLayoutComponent_td_60_ng_container_1_mat_error_15_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(16, dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_16_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(17, dibexGridLayoutComponent_td_60_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r316 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4939");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.hasError("name", "required", ctx_r316.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.hasError("name", "maxlength", ctx_r316.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.view.recordStatus == "update" && ctx_r316.notSaved("name", ctx_r316.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.view.recordStatus == "update" && ctx_r316.isSaved("name", ctx_r316.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.hasError("email", "maxlength", ctx_r316.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.view.recordStatus == "update" && ctx_r316.notSaved("email", ctx_r316.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r316.view.recordStatus == "update" && ctx_r316.isSaved("email", ctx_r316.model.$formGroup));
    } }
    function dibexGridLayoutComponent_td_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 101);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_td_60_ng_container_1_Template, 18, 10, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r314 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r314);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r314.getRawValue());
    } }
    function dibexGridLayoutComponent_th_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridLayoutComponent_th_63_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 105);
    } }
    function dibexGridLayoutComponent_th_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_th_63_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 104);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r33.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r33.busy);
    } }
    function dibexGridLayoutComponent_th_65_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r335 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r335.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridLayoutComponent_th_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 106);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_th_65_span_1_Template, 2, 1, "span", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r34.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r34.busy && ctx_r34.tableDataSource.data.length == 0);
    } }
    function dibexGridLayoutComponent_ng_container_66_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 108);
    } }
    function dibexGridLayoutComponent_ng_container_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_container_66_tr_1_Template, 1, 0, "tr", 107);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r336 = ctx.$implicit;
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r35.columnHeaders.getArray(column_r336).items$));
    } }
    function dibexGridLayoutComponent_tr_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 109);
    } if (rf & 2) {
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r36.busy ? "visible" : "hidden"));
    } }
    function dibexGridLayoutComponent_tr_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 109);
    } if (rf & 2) {
        const ctx_r37 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r37.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexGridLayoutComponent_tr_69_Template(rf, ctx) { if (rf & 1) {
        const _r341 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 110);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_tr_69_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r341); const row_r338 = restoredCtx.$implicit; const ctx_r340 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r340.rowClick(row_r338, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r338 = ctx.$implicit;
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r38.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r38.isHighlighted(row_r338)));
    } }
    function dibexGridLayoutComponent_71_ng_template_0_Template(rf, ctx) { }
    function dibexGridLayoutComponent_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexGridLayoutComponent_71_ng_template_0_Template, 0, 0, "ng-template", 111);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r42 = i0.ɵɵreference(76);
        i0.ɵɵproperty("ngTemplateOutlet", _r42);
    } }
    function dibexGridLayoutComponent_mat_toolbar_74_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r347 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 117);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_mat_toolbar_74_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r347); const ctx_r346 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r346.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r343 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r343.numberOfSelectedItems + " ", "item", ctx_r343.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexGridLayoutComponent_mat_toolbar_74_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_mat_toolbar_74_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_mat_toolbar_74_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r351 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 118);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_mat_toolbar_74_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r351); const ctx_r350 = i0.ɵɵnextContext(2); ctx_r350.gridShowClipboardDefault = !ctx_r350.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r350.gridShowClipboardDefault && ctx_r350.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_mat_toolbar_74_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 41);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_mat_toolbar_74_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 41);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r344 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r344.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r344.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r344.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexGridLayoutComponent_mat_toolbar_74_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r354 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 119, 120);
        i0.ɵɵlistener("page", function dibexGridLayoutComponent_mat_toolbar_74_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r354); const ctx_r353 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r353.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r345 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r345.page.totalRecords)("pageSize", ctx_r345.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexGridLayoutComponent_mat_toolbar_74_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 112);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_mat_toolbar_74_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 113);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_mat_toolbar_74_button_3_Template, 4, 3, "button", 114);
        i0.ɵɵelement(4, "span", 115);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_mat_toolbar_74_mat_paginator_5_Template, 2, 4, "mat-paginator", 116);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r41 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r41.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r41.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r391 = i0.ɵɵnextContext(2).index;
        const ctx_r394 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r394.findColumnDisplayValue(rowIndex_r391, "id", "none", "number"), "");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r402 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r402); const ctx_r401 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r401.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r404 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 53)(2, "input", 125);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r404); const ctx_r403 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r403.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r404); const ctx_r405 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r405.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r390 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r395 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r395.hasError("id", "required", rowForm_r390));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r395.view.recordStatus == "update" && ctx_r395.notSaved("id", rowForm_r390));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r395.view.recordStatus == "update" && ctx_r395.isSaved("id", rowForm_r390));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_4_Template, 6, 4, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r390 = i0.ɵɵnextContext().$implicit;
        const ctx_r392 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r392.excelEditing == false && rowForm_r390.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r392.excelEditing == true || rowForm_r390.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r392.excelEditing == false && rowForm_r390.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_2_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r390 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r390);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r390.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_3_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_3_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 66);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_ng_template_75_th_3_div_2_span_2_Template, 2, 0, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r408 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r408.editorOpen);
    } }
    function dibexGridLayoutComponent_ng_template_75_th_3_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 69);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_3_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r415 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_th_3_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r415); const ctx_r414 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r414.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_3_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_3_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r417 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 70)(1, "mat-form-field", 71)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 72);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_th_3_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r417); const ctx_r416 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r416.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_th_3_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r417); const ctx_r418 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r418.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_th_3_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_th_3_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r410 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r410.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.view.recordStatus == "update" && ctx_r410.notSaved("id", ctx_r410.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.view.recordStatus == "update" && ctx_r410.isSaved("id", ctx_r410.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_ng_template_75_th_3_div_2_Template, 3, 1, "div", 63);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_th_3_div_3_Template, 2, 0, "div", 64);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_th_3_div_4_Template, 7, 4, "div", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r356 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r356.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r356.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r356.showSearch);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r420 = i0.ɵɵnextContext(2).index;
        const ctx_r423 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r423.findColumnDisplayValue(rowIndex_r420, "name", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r432 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r432); const ctx_r431 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r431.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r434 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 74);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r434); const ctx_r433 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r433.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r434); const ctx_r435 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r435.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r419 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r424 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.hasError("name", "required", rowForm_r419));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.hasError("name", "maxlength", rowForm_r419));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.view.recordStatus == "update" && ctx_r424.notSaved("name", rowForm_r419));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.view.recordStatus == "update" && ctx_r424.isSaved("name", rowForm_r419));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_4_Template, 7, 5, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r419 = i0.ɵɵnextContext().$implicit;
        const ctx_r421 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r421.excelEditing == false && rowForm_r419.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.excelEditing == true || rowForm_r419.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.excelEditing == false && rowForm_r419.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_5_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r419 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r419);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r419.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 68);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 66);
        i0.ɵɵtext(1, " Name2 \u00A0");
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_ng_template_75_th_6_div_2_span_2_Template, 2, 0, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r438 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r438.editorOpen);
    } }
    function dibexGridLayoutComponent_ng_template_75_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 69);
        i0.ɵɵtext(1, "Name2");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r445 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r445); const ctx_r444 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r444.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r447 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 70)(1, "mat-form-field", 75)(2, "mat-label");
        i0.ɵɵtext(3, "Name2");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 76);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r447); const ctx_r446 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r446.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r447); const ctx_r448 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r448.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r440 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r440.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r440.view.recordStatus == "update" && ctx_r440.notSaved("name", ctx_r440.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r440.view.recordStatus == "update" && ctx_r440.isSaved("name", ctx_r440.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_ng_template_75_th_6_div_2_Template, 3, 1, "div", 63);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_th_6_div_3_Template, 2, 0, "div", 64);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_th_6_div_4_Template, 7, 4, "div", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r358 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r358.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r358.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r358.showSearch);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r450 = i0.ɵɵnextContext(2).index;
        const ctx_r453 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r453.findColumnDisplayValue(rowIndex_r450, "email", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r461 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r461); const ctx_r460 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r460.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r463 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 77);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r463); const ctx_r462 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r462.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r463); const ctx_r464 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r464.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r449 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r454 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.hasError("email", "maxlength", rowForm_r449));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.view.recordStatus == "update" && ctx_r454.notSaved("email", rowForm_r449));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r454.view.recordStatus == "update" && ctx_r454.isSaved("email", rowForm_r449));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_4_Template, 6, 4, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r449 = i0.ɵɵnextContext().$implicit;
        const ctx_r451 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == true || rowForm_r449.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_8_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r449 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r449);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r449.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 66);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 69);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r473 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r473); const ctx_r472 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r472.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r475 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 70)(1, "mat-form-field", 78)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 79);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r475); const ctx_r474 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r474.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r475); const ctx_r476 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r476.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r469 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r469.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.notSaved("email", ctx_r469.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.isSaved("email", ctx_r469.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_ng_template_75_th_9_div_2_Template, 2, 0, "div", 63);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_th_9_div_3_Template, 2, 0, "div", 64);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_th_9_div_4_Template, 7, 4, "div", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r360 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r360.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r360.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r360.showSearch);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r478 = i0.ɵɵnextContext(2).index;
        const ctx_r481 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r481.findColumnDisplayValue(rowIndex_r478, "country", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r489 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r489); const ctx_r488 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r488.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r491 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 80);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r491); const ctx_r490 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r490.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r491); const ctx_r492 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r492.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r477 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r482 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r482.hasError("country", "maxlength", rowForm_r477));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r482.view.recordStatus == "update" && ctx_r482.notSaved("country", rowForm_r477));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r482.view.recordStatus == "update" && ctx_r482.isSaved("country", rowForm_r477));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_4_Template, 6, 3, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r477 = i0.ɵɵnextContext().$implicit;
        const ctx_r479 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r479.excelEditing == false && rowForm_r477.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r479.excelEditing == true || rowForm_r477.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r479.excelEditing == false && rowForm_r477.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_11_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r477 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r477);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r477.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r496 = i0.ɵɵnextContext(2).index;
        const ctx_r499 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r499.findColumnDisplayValue(rowIndex_r496, "city_town", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r507 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r507); const ctx_r506 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r506.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r509 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r509); const ctx_r508 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r508.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r509); const ctx_r510 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r510.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r495 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r500 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r500.hasError("city_town", "maxlength", rowForm_r495));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r500.view.recordStatus == "update" && ctx_r500.notSaved("city_town", rowForm_r495));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r500.view.recordStatus == "update" && ctx_r500.isSaved("city_town", rowForm_r495));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_4_Template, 6, 3, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r495 = i0.ɵɵnextContext().$implicit;
        const ctx_r497 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r497.excelEditing == false && rowForm_r495.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r497.excelEditing == true || rowForm_r495.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r497.excelEditing == false && rowForm_r495.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_14_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r495 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r495);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r495.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r514 = i0.ɵɵnextContext(2).index;
        const ctx_r517 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r517.findColumnDisplayValue(rowIndex_r514, "phone", "none", "text"), "");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r525 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r525); const ctx_r524 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r524.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r527 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 73)(2, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r527); const ctx_r526 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r526.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r527); const ctx_r528 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r528.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r513 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r518 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r518.hasError("phone", "maxlength", rowForm_r513));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.view.recordStatus == "update" && ctx_r518.notSaved("phone", rowForm_r513));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.view.recordStatus == "update" && ctx_r518.isSaved("phone", rowForm_r513));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_4_Template, 6, 3, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r513 = i0.ɵɵnextContext().$implicit;
        const ctx_r515 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r515.excelEditing == false && rowForm_r513.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r515.excelEditing == true || rowForm_r513.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r515.excelEditing == false && rowForm_r513.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_17_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r513 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r513);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r513.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 52);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r532 = i0.ɵɵnextContext(2).index;
        const ctx_r535 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r535.findColumnDisplayValue(rowIndex_r532, "start_date", "none", "date"), "");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r543 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r543); const ctx_r542 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r542.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r545 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 52)(1, "mat-form-field", 83)(2, "input", 84);
        i0.ɵɵlistener("focus", function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r545); const _r539 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r539.open()); })("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r545); const ctx_r546 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r546.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r545); const ctx_r547 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r547.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 85)(4, "mat-datepicker", null, 86);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r539 = i0.ɵɵreference(5);
        const rowForm_r531 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r536 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r539);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r539);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r536.view.recordStatus == "update" && ctx_r536.notSaved("start_date", rowForm_r531));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r536.view.recordStatus == "update" && ctx_r536.isSaved("start_date", rowForm_r531));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 49)(2, "span", 50);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_3_Template, 2, 1, "span", 51);
        i0.ɵɵtemplate(4, dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_4_Template, 8, 4, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_span_5_Template, 1, 0, "span", 41);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r531 = i0.ɵɵnextContext().$implicit;
        const ctx_r533 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r533.excelEditing == false && rowForm_r531.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r533.excelEditing == true || rowForm_r531.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r533.excelEditing == false && rowForm_r531.get("__edit").value === false);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_20_ng_container_1_Template, 6, 3, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r531 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r531);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r531.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_error_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_error_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        const _r562 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_12_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r562); const ctx_r561 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r561.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_13_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_error_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_19_Template(rf, ctx) { if (rf & 1) {
        const _r564 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_19_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r564); const ctx_r563 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r563.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r566 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div", 7);
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "div", 88);
        i0.ɵɵelementContainerStart(5, 3);
        i0.ɵɵelementStart(6, "mat-form-field", 89)(7, "mat-label");
        i0.ɵɵtext(8, "Name2");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(9, "input", 74);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_Template_input_keydown_enter_9_listener() { i0.ɵɵrestoreView(_r566); const ctx_r565 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r565.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_Template_input_keydown_esc_9_listener() { i0.ɵɵrestoreView(_r566); const ctx_r567 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r567.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_error_10_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(11, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_error_11_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(12, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(13, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_13_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "mat-form-field", 90)(15, "mat-label");
        i0.ɵɵtext(16, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(17, "input", 77);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_Template_input_keydown_enter_17_listener() { i0.ɵɵrestoreView(_r566); const ctx_r568 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r568.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_Template_input_keydown_esc_17_listener() { i0.ɵɵrestoreView(_r566); const ctx_r569 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r569.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(18, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_error_18_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(19, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_19_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(20, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_mat_icon_20_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r552 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4932");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4939");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.hasError("name", "required", ctx_r552.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.hasError("name", "maxlength", ctx_r552.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.view.recordStatus == "update" && ctx_r552.notSaved("name", ctx_r552.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.view.recordStatus == "update" && ctx_r552.isSaved("name", ctx_r552.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.hasError("email", "maxlength", ctx_r552.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.view.recordStatus == "update" && ctx_r552.notSaved("email", ctx_r552.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r552.view.recordStatus == "update" && ctx_r552.isSaved("email", ctx_r552.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_23_ng_container_1_Template, 21, 11, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r550 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r550);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r550.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colA ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r581 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r581); const ctx_r580 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r580.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_error_13_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_14_Template(rf, ctx) { if (rf & 1) {
        const _r583 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_14_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r583); const ctx_r582 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r582.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r585 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "div", 91);
        i0.ɵɵelementContainerStart(5, 3);
        i0.ɵɵelementStart(6, "mat-form-field", 92)(7, "input", 80);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r585); const ctx_r584 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r584.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r585); const ctx_r586 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r586.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(9, dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 93)(12, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_Template_input_keydown_enter_12_listener() { i0.ɵɵrestoreView(_r585); const ctx_r587 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r587.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_Template_input_keydown_esc_12_listener() { i0.ɵɵrestoreView(_r585); const ctx_r588 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r588.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(13, dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_error_13_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(14, dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_14_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(15, dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_mat_icon_15_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r572 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4933");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4934");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r572.hasError("country", "maxlength", ctx_r572.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r572.view.recordStatus == "update" && ctx_r572.notSaved("country", ctx_r572.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r572.view.recordStatus == "update" && ctx_r572.isSaved("country", ctx_r572.model.$formGroup));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r572.hasError("city_town", "maxlength", ctx_r572.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r572.view.recordStatus == "update" && ctx_r572.notSaved("city_town", ctx_r572.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r572.view.recordStatus == "update" && ctx_r572.isSaved("city_town", ctx_r572.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_26_ng_container_1_Template, 16, 8, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r570 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r570);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r570.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colB ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_error_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r600 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r600); const ctx_r599 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r599.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_error_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_11_Template(rf, ctx) { if (rf & 1) {
        const _r602 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_11_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r602); const ctx_r601 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r601.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r604 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 94);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "mat-form-field", 92)(4, "input", 80);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r604); const ctx_r603 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r603.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r604); const ctx_r605 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r605.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_error_5_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_6_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_7_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "mat-form-field", 93)(9, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_Template_input_keydown_enter_9_listener() { i0.ɵɵrestoreView(_r604); const ctx_r606 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r606.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_Template_input_keydown_esc_9_listener() { i0.ɵɵrestoreView(_r604); const ctx_r607 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r607.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_error_10_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(11, dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_11_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(12, dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_mat_icon_12_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r591 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4934");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r591.hasError("country", "maxlength", ctx_r591.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r591.view.recordStatus == "update" && ctx_r591.notSaved("country", ctx_r591.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r591.view.recordStatus == "update" && ctx_r591.isSaved("country", ctx_r591.model.$formGroup));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r591.hasError("city_town", "maxlength", ctx_r591.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r591.view.recordStatus == "update" && ctx_r591.notSaved("city_town", ctx_r591.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r591.view.recordStatus == "update" && ctx_r591.isSaved("city_town", ctx_r591.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_29_ng_container_1_Template, 13, 7, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r589 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r589);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r589.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r619 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r619); const ctx_r618 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r618.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_16_Template(rf, ctx) { if (rf & 1) {
        const _r621 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_16_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r621); const ctx_r620 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r620.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r623 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "div", 95);
        i0.ɵɵelementContainerStart(5, 3);
        i0.ɵɵelementStart(6, "mat-form-field", 96)(7, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_Template_input_keydown_enter_7_listener() { i0.ɵɵrestoreView(_r623); const ctx_r622 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r622.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_Template_input_keydown_esc_7_listener() { i0.ɵɵrestoreView(_r623); const ctx_r624 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r624.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(9, dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 97)(12, "input", 84);
        i0.ɵɵlistener("focus", function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_Template_input_focus_12_listener() { i0.ɵɵrestoreView(_r623); const _r615 = i0.ɵɵreference(15); return i0.ɵɵresetView(_r615.open()); })("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_Template_input_keydown_enter_12_listener() { i0.ɵɵrestoreView(_r623); const ctx_r626 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r626.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_Template_input_keydown_esc_12_listener() { i0.ɵɵrestoreView(_r623); const ctx_r627 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r627.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(13, "mat-datepicker-toggle", 85)(14, "mat-datepicker", null, 86);
        i0.ɵɵtemplate(16, dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_16_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(17, dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r615 = i0.ɵɵreference(15);
        const ctx_r610 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4935");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4936");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r610.hasError("phone", "maxlength", ctx_r610.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r610.view.recordStatus == "update" && ctx_r610.notSaved("phone", ctx_r610.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r610.view.recordStatus == "update" && ctx_r610.isSaved("phone", ctx_r610.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r615);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r615);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r610.view.recordStatus == "update" && ctx_r610.notSaved("start_date", ctx_r610.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r610.view.recordStatus == "update" && ctx_r610.isSaved("start_date", ctx_r610.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_32_ng_container_1_Template, 18, 9, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r608 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r608);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r608.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colC ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_error_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r639 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r639); const ctx_r638 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r638.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_13_Template(rf, ctx) { if (rf & 1) {
        const _r641 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_13_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r641); const ctx_r640 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r640.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r643 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 94);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "mat-form-field", 96)(4, "input", 82);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r643); const ctx_r642 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r642.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r643); const ctx_r644 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r644.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_error_5_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_6_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_7_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "mat-form-field", 97)(9, "input", 84);
        i0.ɵɵlistener("focus", function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_Template_input_focus_9_listener() { i0.ɵɵrestoreView(_r643); const _r635 = i0.ɵɵreference(12); return i0.ɵɵresetView(_r635.open()); })("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_Template_input_keydown_enter_9_listener() { i0.ɵɵrestoreView(_r643); const ctx_r646 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r646.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_Template_input_keydown_esc_9_listener() { i0.ɵɵrestoreView(_r643); const ctx_r647 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r647.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(10, "mat-datepicker-toggle", 85)(11, "mat-datepicker", null, 86);
        i0.ɵɵtemplate(13, dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_13_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(14, dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_mat_icon_14_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r635 = i0.ɵɵreference(12);
        const ctx_r630 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4936");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r630.hasError("phone", "maxlength", ctx_r630.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r630.view.recordStatus == "update" && ctx_r630.notSaved("phone", ctx_r630.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r630.view.recordStatus == "update" && ctx_r630.isSaved("phone", ctx_r630.model.$formGroup));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r635);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r635);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r630.view.recordStatus == "update" && ctx_r630.notSaved("start_date", ctx_r630.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r630.view.recordStatus == "update" && ctx_r630.isSaved("start_date", ctx_r630.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_35_ng_container_1_Template, 15, 8, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r628 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r628);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r628.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 87)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "button", 98);
        i0.ɵɵelement(5, "dib-icon", 99);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4937");
    } }
    function dibexGridLayoutComponent_ng_template_75_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_38_ng_container_1_Template, 6, 1, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r648 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r648);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r648.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 61)(1, "div", 62)(2, "div");
        i0.ɵɵtext(3, " colA ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_41_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 100);
        i0.ɵɵelement(2, "dib-icon", 99);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 48);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_41_ng_container_1_Template, 3, 0, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r652 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r652);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r652.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_error_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_9_Template(rf, ctx) { if (rf & 1) {
        const _r668 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_9_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r668); const ctx_r667 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r667.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_error_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_16_Template(rf, ctx) { if (rf & 1) {
        const _r670 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 58);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_16_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r670); const ctx_r669 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r669.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 59);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r672 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 102);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "mat-form-field", 89)(4, "mat-label");
        i0.ɵɵtext(5, "Name2");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(6, "input", 74);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_Template_input_keydown_enter_6_listener() { i0.ɵɵrestoreView(_r672); const ctx_r671 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r671.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_Template_input_keydown_esc_6_listener() { i0.ɵɵrestoreView(_r672); const ctx_r673 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r673.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(7, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_error_7_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(8, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_error_8_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(9, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_9_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(10, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_10_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "mat-form-field", 90)(12, "mat-label");
        i0.ɵɵtext(13, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "input", 77);
        i0.ɵɵlistener("keydown.enter", function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_Template_input_keydown_enter_14_listener() { i0.ɵɵrestoreView(_r672); const ctx_r674 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r674.searchGrid(false)); })("keydown.esc", function dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_Template_input_keydown_esc_14_listener() { i0.ɵɵrestoreView(_r672); const ctx_r675 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r675.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(15, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_error_15_Template, 2, 0, "mat-error", 41);
        i0.ɵɵtemplate(16, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_16_Template, 2, 0, "mat-icon", 55);
        i0.ɵɵtemplate(17, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_mat_icon_17_Template, 2, 0, "mat-icon", 56);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const ctx_r658 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4939");
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name2");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r658.hasError("name", "required", ctx_r658.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r658.hasError("name", "maxlength", ctx_r658.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r658.view.recordStatus == "update" && ctx_r658.notSaved("name", ctx_r658.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r658.view.recordStatus == "update" && ctx_r658.isSaved("name", ctx_r658.model.$formGroup));
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r658.hasError("email", "maxlength", ctx_r658.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r658.view.recordStatus == "update" && ctx_r658.notSaved("email", ctx_r658.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r658.view.recordStatus == "update" && ctx_r658.isSaved("email", ctx_r658.model.$formGroup));
    } }
    function dibexGridLayoutComponent_ng_template_75_td_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 101);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_td_44_ng_container_1_Template, 18, 10, "ng-container", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r656 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r656);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r656.getRawValue());
    } }
    function dibexGridLayoutComponent_ng_template_75_th_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 61);
    } if (rf & 2) {
        i0.ɵɵattribute("colspan", 2);
    } }
    function dibexGridLayoutComponent_ng_template_75_th_47_Template(rf, ctx) { if (rf & 1) {
        const _r677 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 44)(1, "mat-checkbox", 126);
        i0.ɵɵlistener("change", function dibexGridLayoutComponent_ng_template_75_th_47_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r677); const ctx_r676 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r676.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r385 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r385.masterIsChecked)("indeterminate", ctx_r385.masterIsIndeterminate);
    } }
    function dibexGridLayoutComponent_ng_template_75_td_48_Template(rf, ctx) { if (rf & 1) {
        const _r681 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 127)(1, "mat-checkbox", 47);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_td_48_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridLayoutComponent_ng_template_75_td_48_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r681); const row_r678 = restoredCtx.$implicit; const ctx_r680 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r680.selection.toggle(row_r678) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r678 = ctx.$implicit;
        const ctx_r386 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r386.isHighlighted(row_r678));
    } }
    function dibexGridLayoutComponent_ng_template_75_th_50_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 105);
    } }
    function dibexGridLayoutComponent_ng_template_75_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 128);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_th_50_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 104);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r387 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r387.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r387.busy);
    } }
    function dibexGridLayoutComponent_ng_template_75_th_52_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r683 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r683.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridLayoutComponent_ng_template_75_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 106);
        i0.ɵɵtemplate(1, dibexGridLayoutComponent_ng_template_75_th_52_span_1_Template, 2, 1, "span", 41);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r388 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r388.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r388.busy && ctx_r388.tableDataSource.data.length == 0);
    } }
    function dibexGridLayoutComponent_ng_template_75_tr_53_Template(rf, ctx) { if (rf & 1) {
        const _r686 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 129);
        i0.ɵɵlistener("click", function dibexGridLayoutComponent_ng_template_75_tr_53_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r686); const row_r684 = restoredCtx.$implicit; const ctx_r685 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r685.rowClick(row_r684, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r684 = ctx.$implicit;
        const ctx_r389 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r389.isHighlighted(row_r684)));
    } }
    function dibexGridLayoutComponent_ng_template_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 121);
        i0.ɵɵelementContainerStart(1, 16);
        i0.ɵɵtemplate(2, dibexGridLayoutComponent_ng_template_75_td_2_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(3, dibexGridLayoutComponent_ng_template_75_th_3_Template, 5, 3, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 19);
        i0.ɵɵtemplate(5, dibexGridLayoutComponent_ng_template_75_td_5_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(6, dibexGridLayoutComponent_ng_template_75_th_6_Template, 5, 3, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 20);
        i0.ɵɵtemplate(8, dibexGridLayoutComponent_ng_template_75_td_8_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(9, dibexGridLayoutComponent_ng_template_75_th_9_Template, 5, 3, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 21);
        i0.ɵɵtemplate(11, dibexGridLayoutComponent_ng_template_75_td_11_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(12, dibexGridLayoutComponent_ng_template_75_th_12_Template, 1, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 22);
        i0.ɵɵtemplate(14, dibexGridLayoutComponent_ng_template_75_td_14_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(15, dibexGridLayoutComponent_ng_template_75_th_15_Template, 1, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 23);
        i0.ɵɵtemplate(17, dibexGridLayoutComponent_ng_template_75_td_17_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(18, dibexGridLayoutComponent_ng_template_75_th_18_Template, 1, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 24);
        i0.ɵɵtemplate(20, dibexGridLayoutComponent_ng_template_75_td_20_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(21, dibexGridLayoutComponent_ng_template_75_th_21_Template, 1, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 25);
        i0.ɵɵtemplate(23, dibexGridLayoutComponent_ng_template_75_td_23_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(24, dibexGridLayoutComponent_ng_template_75_th_24_Template, 4, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 26);
        i0.ɵɵtemplate(26, dibexGridLayoutComponent_ng_template_75_td_26_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(27, dibexGridLayoutComponent_ng_template_75_th_27_Template, 4, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 27);
        i0.ɵɵtemplate(29, dibexGridLayoutComponent_ng_template_75_td_29_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(30, dibexGridLayoutComponent_ng_template_75_th_30_Template, 1, 1, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 28);
        i0.ɵɵtemplate(32, dibexGridLayoutComponent_ng_template_75_td_32_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(33, dibexGridLayoutComponent_ng_template_75_th_33_Template, 4, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 29);
        i0.ɵɵtemplate(35, dibexGridLayoutComponent_ng_template_75_td_35_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(36, dibexGridLayoutComponent_ng_template_75_th_36_Template, 1, 1, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 30);
        i0.ɵɵtemplate(38, dibexGridLayoutComponent_ng_template_75_td_38_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(39, dibexGridLayoutComponent_ng_template_75_th_39_Template, 4, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 31);
        i0.ɵɵtemplate(41, dibexGridLayoutComponent_ng_template_75_td_41_Template, 2, 2, "td", 17);
        i0.ɵɵtemplate(42, dibexGridLayoutComponent_ng_template_75_th_42_Template, 1, 0, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(43, 32);
        i0.ɵɵtemplate(44, dibexGridLayoutComponent_ng_template_75_td_44_Template, 2, 2, "td", 33);
        i0.ɵɵtemplate(45, dibexGridLayoutComponent_ng_template_75_th_45_Template, 1, 1, "th", 18);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(46, 13);
        i0.ɵɵtemplate(47, dibexGridLayoutComponent_ng_template_75_th_47_Template, 2, 2, "th", 14);
        i0.ɵɵtemplate(48, dibexGridLayoutComponent_ng_template_75_td_48_Template, 2, 1, "td", 122);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(49, 34);
        i0.ɵɵtemplate(50, dibexGridLayoutComponent_ng_template_75_th_50_Template, 2, 2, "th", 123);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(51, 36);
        i0.ɵɵtemplate(52, dibexGridLayoutComponent_ng_template_75_th_52_Template, 2, 2, "th", 37);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(53, dibexGridLayoutComponent_ng_template_75_tr_53_Template, 1, 3, "tr", 124);
        i0.ɵɵpipe(54, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r43 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r43.selectionDataSource);
        i0.ɵɵadvance(53);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(54, 2, ctx_r43.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i16 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i17 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i18 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i6 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i10 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i15 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i8 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i7_1) {
                i7 = i7_1;
            },
            function (i9_1) {
                i9 = i9_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexGridLayoutComponent = class dibexGridLayoutComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 200, name: 'dibexGridLayout', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = true; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['columnHeader5', 'id', 'columnHeader1', 'columnHeader3', 'columnHeader4',]);
                allColumnsToDisplay = new shared_3.DibArray(['columnHeader5', 'id', 'columnHeader1', 'columnHeader3', 'columnHeader4',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexGridLayout');
                    this.containerName = 'dibexGridLayout'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 4925, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: null, default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 4926, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 4927, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, country: { itemId: 4928, type: 'text', fieldAlias: 'country', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, city_town: { itemId: 4929, type: 'text', fieldAlias: 'city_town', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, phone: { itemId: 4930, type: 'text', fieldAlias: 'phone', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, start_date: { itemId: 4931, type: 'date', fieldAlias: 'start_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, column4: { itemId: 4934, type: 'none', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'none', contentType: '', changeUrl: false }, column5: { itemId: 4936, type: 'none', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'none', contentType: '', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('country', this.model.modelItems.country.formControl);
                    this.model.$formGroup.addControl('city_town', this.model.modelItems.city_town.formControl);
                    this.model.$formGroup.addControl('phone', this.model.modelItems.phone.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('column4', this.model.modelItems.column4.formControl);
                    this.model.$formGroup.addControl('column5', this.model.modelItems.column5.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['columnHeader5', 'id', 'columnHeader1', 'columnHeader3', 'columnHeader4']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexGridLayout`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexGridLayout`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexGridLayout`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4925 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4926 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 4927 };
                    formDefaultsConfigs['country'] = { contentType: "text", type: "none", defaultValue: "", listId: 4928 };
                    formDefaultsConfigs['city_town'] = { contentType: "text", type: "none", defaultValue: "", listId: 4929 };
                    formDefaultsConfigs['phone'] = { contentType: "text", type: "none", defaultValue: "", listId: 4930 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 4931 };
                    formDefaultsConfigs['column4'] = { contentType: "", type: "none", defaultValue: "", listId: 4934 };
                    formDefaultsConfigs['column5'] = { contentType: "", type: "none", defaultValue: "", listId: 4936 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4925, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 4926, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 4927, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), country: new forms_2.FormControl(this.calculateInitialColumnValue(row, "country", "none", false, formDefaults['country'], 4928, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), city_town: new forms_2.FormControl(this.calculateInitialColumnValue(row, "city_town", "none", false, formDefaults['city_town'], 4929, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), phone: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone", "none", false, formDefaults['phone'], 4930, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 4931, "date"), { validators: [], updateOn: 'blur' }), column4: new forms_2.FormControl(this.calculateInitialColumnValue(row, "column4", "none", false, formDefaults['column4'], 4934, "none"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), column5: new forms_2.FormControl(this.calculateInitialColumnValue(row, "column5", "none", false, formDefaults['column5'], 4936, "none"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexGridLayout', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexGridLayout' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexGridLayoutComponent_Factory(t) { return new (t || dibexGridLayoutComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexGridLayoutComponent, selectors: [["dibex-grid-layout"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 77, vars: 24, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci4921", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%", "overflow", "auto !important"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci4922", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci4924", "dibComponent", "card", 2, "flex", "1 1 0%", "overflow", "auto !important"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "name"], ["matColumnDef", "email"], ["matColumnDef", "country"], ["matColumnDef", "city_town"], ["matColumnDef", "phone"], ["matColumnDef", "start_date"], ["matColumnDef", "columnHeader1"], ["matColumnDef", "columnHeader3"], ["matColumnDef", "column4"], ["matColumnDef", "columnHeader4"], ["matColumnDef", "column5"], ["matColumnDef", "columnHeader5"], ["matColumnDef", "button"], ["matColumnDef", "column"], ["mat-cell", "", "style", "padding: 2px; overflow:auto !important;", 3, "formGroup", 4, "matCellDef"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexGridLayout", ""], ["_selectedTable", ""], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4925", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "80", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4926", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "100", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci4927", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "country", "maxlength", "30", "name", "country", "aria-label", "country", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "city_town", "maxlength", "30", "name", "city_town", "aria-label", "city_town", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone", "maxlength", "100", "name", "phone", "aria-label", "phone", 3, "keydown.enter", "keydown.esc"], ["datepicker", "", "dibComponent", "datePicker"], ["matInput", "", "formControlName", "start_date", "name", "start_date", "aria-label", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker4931", ""], ["dibComponent", "columnHeader"], ["id", "ci4939", "dibComponent", "column", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%", "overflow", "auto !important"], ["id", "ci4926", "dibComponent", "inputText", "appearance", "standard"], ["id", "ci4927", "dibComponent", "inputText", "appearance", "standard"], ["id", "ci4934", "dibComponent", "column", "dib-inject-content", "replace"], ["id", "ci4928", "dibComponent", "inputText", "appearance", "standard"], ["id", "ci4929", "dibComponent", "inputText", "appearance", "standard"], ["dibComponent", "column", "dib-inject-content", "replace"], ["id", "ci4936", "dibComponent", "column", "dib-inject-content", "replace"], ["id", "ci4930", "dibComponent", "inputText", "appearance", "standard"], ["datepicker", "", "id", "ci4931", "dibComponent", "datePicker", "appearance", "standard"], ["mat-mini-fab", "", "color", "primary", "id", "ci4938", "dibComponent", "button", "type", "button"], ["src", "delete"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "button", "type", "button"], ["mat-cell", "", 2, "padding", "2px", "overflow", "auto !important", 3, "formGroup"], ["dibComponent", "column", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%", "overflow", "auto !important"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexGridLayoutComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexGridLayoutComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexGridLayoutComponent_Template_button_click_4_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "mat-card", 6)(7, "mat-card-content", 7);
                        i0.ɵɵelementContainerStart(8, 3);
                        i0.ɵɵelementStart(9, "div", 8, 9)(11, "form", 10);
                        i0.ɵɵelementContainerStart(12, 11);
                        i0.ɵɵelementStart(13, "table", 12);
                        i0.ɵɵelementContainerStart(14, 13);
                        i0.ɵɵtemplate(15, dibexGridLayoutComponent_th_15_Template, 2, 2, "th", 14);
                        i0.ɵɵtemplate(16, dibexGridLayoutComponent_td_16_Template, 2, 1, "td", 15);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(17, 16);
                        i0.ɵɵtemplate(18, dibexGridLayoutComponent_td_18_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(19, dibexGridLayoutComponent_th_19_Template, 5, 3, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(20, 19);
                        i0.ɵɵtemplate(21, dibexGridLayoutComponent_td_21_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(22, dibexGridLayoutComponent_th_22_Template, 5, 3, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(23, 20);
                        i0.ɵɵtemplate(24, dibexGridLayoutComponent_td_24_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(25, dibexGridLayoutComponent_th_25_Template, 5, 3, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(26, 21);
                        i0.ɵɵtemplate(27, dibexGridLayoutComponent_td_27_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(28, dibexGridLayoutComponent_th_28_Template, 1, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(29, 22);
                        i0.ɵɵtemplate(30, dibexGridLayoutComponent_td_30_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(31, dibexGridLayoutComponent_th_31_Template, 1, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(32, 23);
                        i0.ɵɵtemplate(33, dibexGridLayoutComponent_td_33_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(34, dibexGridLayoutComponent_th_34_Template, 1, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(35, 24);
                        i0.ɵɵtemplate(36, dibexGridLayoutComponent_td_36_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(37, dibexGridLayoutComponent_th_37_Template, 1, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(38, 25);
                        i0.ɵɵtemplate(39, dibexGridLayoutComponent_td_39_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(40, dibexGridLayoutComponent_th_40_Template, 4, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(41, 26);
                        i0.ɵɵtemplate(42, dibexGridLayoutComponent_td_42_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(43, dibexGridLayoutComponent_th_43_Template, 4, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(44, 27);
                        i0.ɵɵtemplate(45, dibexGridLayoutComponent_td_45_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(46, dibexGridLayoutComponent_th_46_Template, 1, 1, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(47, 28);
                        i0.ɵɵtemplate(48, dibexGridLayoutComponent_td_48_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(49, dibexGridLayoutComponent_th_49_Template, 4, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(50, 29);
                        i0.ɵɵtemplate(51, dibexGridLayoutComponent_td_51_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(52, dibexGridLayoutComponent_th_52_Template, 1, 1, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(53, 30);
                        i0.ɵɵtemplate(54, dibexGridLayoutComponent_td_54_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(55, dibexGridLayoutComponent_th_55_Template, 4, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(56, 31);
                        i0.ɵɵtemplate(57, dibexGridLayoutComponent_td_57_Template, 2, 2, "td", 17);
                        i0.ɵɵtemplate(58, dibexGridLayoutComponent_th_58_Template, 1, 0, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(59, 32);
                        i0.ɵɵtemplate(60, dibexGridLayoutComponent_td_60_Template, 2, 2, "td", 33);
                        i0.ɵɵtemplate(61, dibexGridLayoutComponent_th_61_Template, 1, 1, "th", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(62, 34);
                        i0.ɵɵtemplate(63, dibexGridLayoutComponent_th_63_Template, 2, 2, "th", 35);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(64, 36);
                        i0.ɵɵtemplate(65, dibexGridLayoutComponent_th_65_Template, 2, 2, "th", 37);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(66, dibexGridLayoutComponent_ng_container_66_Template, 3, 3, "ng-container", 38);
                        i0.ɵɵtemplate(67, dibexGridLayoutComponent_tr_67_Template, 1, 3, "tr", 39);
                        i0.ɵɵtemplate(68, dibexGridLayoutComponent_tr_68_Template, 1, 3, "tr", 39);
                        i0.ɵɵtemplate(69, dibexGridLayoutComponent_tr_69_Template, 1, 4, "tr", 40);
                        i0.ɵɵpipe(70, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(71, dibexGridLayoutComponent_71_Template, 1, 1, null, 41);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(72, "div", null, 42);
                        i0.ɵɵtemplate(74, dibexGridLayoutComponent_mat_toolbar_74_Template, 6, 3, "mat-toolbar", 41);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(75, dibexGridLayoutComponent_ng_template_75_Template, 55, 4, "ng-template", null, 43, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r40 = i0.ɵɵreference(73);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(20, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4921");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("dibPort", "4924");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r40);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(53);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(22, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(23, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(70, 18, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.MatButton, i6.MatMiniFabButton, i7.MatCheckbox, i8.MatDatepicker, i8.MatDatepickerInput, i8.MatDatepickerToggle, i9.MatFormField, i9.MatLabel, i9.MatError, i9.MatPrefix, i9.MatSuffix, i10.MatIcon, i11.MatInput, i12.MatProgressBar, i13.MatToolbar, i13.MatToolbarRow, i14.MatTooltip, i15.MatCard, i15.MatCardContent, i16.MatTable, i16.MatHeaderCellDef, i16.MatHeaderRowDef, i16.MatColumnDef, i16.MatCellDef, i16.MatRowDef, i16.MatHeaderCell, i16.MatCell, i16.MatHeaderRow, i16.MatRow, i17.MatSort, i17.MatSortHeader, i18.MatPaginator, i4.AsyncPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexGridLayout'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexGridLayoutComponent.prototype, "reloadContainer", null);
            exports_1("dibexGridLayoutComponent", dibexGridLayoutComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridLayoutComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-grid-layout', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  overflow:auto !important;" id=ci4921 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4921'" ><button   mat-mini-fab color=primary  id=ci4922 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button></ng-container></div><mat-card   style="  flex: 1 1 0%;  overflow:auto !important;" id=ci4924 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4924'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexGridLayout" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4925 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name2  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name2</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4926 dibComponent=inputText   style="  " ><mat-label >Name2</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4927 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   aria-label=country   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   aria-label=city_town   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   aria-label=phone   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4931"   formControlName=start_date   name=start_date   aria-label=start_date   (focus)="datePicker4931.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4931" ></mat-datepicker-toggle><mat-datepicker #datePicker4931 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=columnHeader1  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;" ><ng-container [dibPort]="'4932'" ><div   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  overflow:auto !important;" id=ci4939 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4939'" ><mat-form-field id=ci4926 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Name2</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4927 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colA  </div></div></th></ng-container><ng-container matColumnDef=columnHeader3  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4933'" ><div   style="  " id=ci4934 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4934'" ><mat-form-field id=ci4928 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   aria-label=country   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4929 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   aria-label=city_town   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colB  </div></div></th></ng-container><ng-container matColumnDef=column4  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4934'" ><mat-form-field id=ci4928 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   aria-label=country   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4929 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   aria-label=city_town   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=columnHeader4  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4935'" ><div   style="  " id=ci4936 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4936'" ><mat-form-field id=ci4930 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   aria-label=phone   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4931 dibComponent=datePicker   style="  "  appearance=standard  ><input   matInput [matDatepicker]="datePicker4931"   formControlName=start_date   name=start_date   aria-label=start_date   (focus)="datePicker4931.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4931" ></mat-datepicker-toggle><mat-datepicker #datePicker4931 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field></ng-container></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colC  </div></div></th></ng-container><ng-container matColumnDef=column5  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4936'" ><mat-form-field id=ci4930 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   aria-label=phone   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4931 dibComponent=datePicker   style="  "  appearance=standard  ><input   matInput [matDatepicker]="datePicker4931"   formControlName=start_date   name=start_date   aria-label=start_date   (focus)="datePicker4931.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4931" ></mat-datepicker-toggle><mat-datepicker #datePicker4931 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=columnHeader5  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4937'" ><button  mat-mini-fab color=primary  id=ci4938 dibComponent=button   style="  "  type=button  ><dib-icon src=delete ></dib-icon></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colA  </div></div></th></ng-container><ng-container matColumnDef=button  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   style="  "  type=button  ><dib-icon src=delete ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=column  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; overflow:auto !important;" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  overflow:auto !important;" dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4939'" ><mat-form-field id=ci4926 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Name2</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4927 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexGridLayout><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4925 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name2  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name2</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4926 dibComponent=inputText   style="  " ><mat-label >Name2</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4927 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   aria-label=country   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   aria-label=city_town   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   aria-label=phone   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4931"   formControlName=start_date   name=start_date   aria-label=start_date   (focus)="datePicker4931.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4931" ></mat-datepicker-toggle><mat-datepicker #datePicker4931 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=columnHeader1  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;" ><ng-container [dibPort]="'4932'" ><div   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  overflow:auto !important;" id=ci4939 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4939'" ><mat-form-field id=ci4926 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Name2</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4927 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colA  </div></div></th></ng-container><ng-container matColumnDef=columnHeader3  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4933'" ><div   style="  " id=ci4934 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4934'" ><mat-form-field id=ci4928 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   aria-label=country   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4929 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   aria-label=city_town   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colB  </div></div></th></ng-container><ng-container matColumnDef=column4  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4934'" ><mat-form-field id=ci4928 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   aria-label=country   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4929 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   aria-label=city_town   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',model.$formGroup)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=columnHeader4  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4935'" ><div   style="  " id=ci4936 dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4936'" ><mat-form-field id=ci4930 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   aria-label=phone   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4931 dibComponent=datePicker   style="  "  appearance=standard  ><input   matInput [matDatepicker]="datePicker4931"   formControlName=start_date   name=start_date   aria-label=start_date   (focus)="datePicker4931.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4931" ></mat-datepicker-toggle><mat-datepicker #datePicker4931 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field></ng-container></div></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colC  </div></div></th></ng-container><ng-container matColumnDef=column5  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4936'" ><mat-form-field id=ci4930 dibComponent=inputText   style="  "  appearance=standard  ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   aria-label=phone   (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field datepicker id=ci4931 dibComponent=datePicker   style="  "  appearance=standard  ><input   matInput [matDatepicker]="datePicker4931"   formControlName=start_date   name=start_date   aria-label=start_date   (focus)="datePicker4931.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4931" ></mat-datepicker-toggle><mat-datepicker #datePicker4931 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon></mat-form-field></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=columnHeader5  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4937'" ><button  mat-mini-fab color=primary  id=ci4938 dibComponent=button   style="  "  type=button  ><dib-icon src=delete ></dib-icon></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > colA  </div></div></th></ng-container><ng-container matColumnDef=button  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   style="  "  type=button  ><dib-icon src=delete ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=column  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; overflow:auto !important;" ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  overflow:auto !important;" dibComponent=column   dib-inject-content=replace  ><ng-container [dibPort]="'4939'" ><mat-form-field id=ci4926 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Name2</mat-label><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name2'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',model.$formGroup)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',model.$formGroup)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci4927 dibComponent=inputText   style="  "  appearance=standard  ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',model.$formGroup)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   [attr.colspan]="2"   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexGridLayoutModule = class dibexGridLayoutModule {
                static entry = dibexGridLayoutComponent;
                static ɵfac = function dibexGridLayoutModule_Factory(t) { return new (t || dibexGridLayoutModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexGridLayoutModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexGridLayoutModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridLayoutModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexGridLayoutComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexGridLayoutModule, { declarations: [dibexGridLayoutComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
