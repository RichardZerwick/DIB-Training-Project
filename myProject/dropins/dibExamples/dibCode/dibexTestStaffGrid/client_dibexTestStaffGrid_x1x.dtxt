System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/select", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/cdk/text-field", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, select_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexTestStaffGridComponent, containerModules, dibexTestStaffGridModule;
    var __moduleName = context_1 && context_1.id;
    function dibexTestStaffGridComponent_button_12_Template(rf, ctx) { if (rf & 1) {
        const _r42 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 49);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_button_12_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r41.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 50);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestStaffGridComponent_button_13_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 51);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 52);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexTestStaffGridComponent_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r45 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r45.page.toRecord, "\u00A0of\u00A0", ctx_r45.page.records, "");
    } }
    function dibexTestStaffGridComponent_div_15_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r46 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r46.page.totalRecords, ")");
    } }
    function dibexTestStaffGridComponent_div_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 53);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_div_15_span_2_Template, 2, 2, "span", 46);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_div_15_span_4_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Staff: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexTestStaffGridComponent_th_25_Template(rf, ctx) { if (rf & 1) {
        const _r48 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 55);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_25_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r47.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexTestStaffGridComponent_td_26_Template(rf, ctx) { if (rf & 1) {
        const _r52 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 56)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_26_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexTestStaffGridComponent_td_26_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r52); const row_r49 = restoredCtx.$implicit; const ctx_r51 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r51.selection.toggle(row_r49) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r49 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r49));
    } }
    function dibexTestStaffGridComponent_td_28_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 59);
        i0.ɵɵelementContainer(2, 3);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4170");
    } }
    function dibexTestStaffGridComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_28_ng_container_1_Template, 3, 1, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r53 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r53);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r53.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 60);
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r58 = i0.ɵɵnextContext(2).index;
        const ctx_r61 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r61.findColumnDisplayValue(rowIndex_r58, "id", "none", "number"), "");
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r70 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r70); const ctx_r69 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r69.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 65);
        i0.ɵɵelement(2, "input", 66);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_td_31_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r57 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r62 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.hasError("id", "required", rowForm_r57));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.view.recordStatus == "update" && ctx_r62.notSaved("id", rowForm_r57));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.view.recordStatus == "update" && ctx_r62.isSaved("id", rowForm_r57));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.isInvalid("id", rowForm_r57));
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_31_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_31_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_31_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_31_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r57 = i0.ɵɵnextContext().$implicit;
        const ctx_r59 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r59.excelEditing == false && rowForm_r57.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r59.excelEditing == true || rowForm_r57.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r59.excelEditing == false && rowForm_r57.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_31_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r57 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r57);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r57.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_32_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_32_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_32_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r73 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r73.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_32_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_32_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r80 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_32_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r80); const ctx_r79 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r79.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_32_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_32_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r82 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 82)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_32_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r82); const ctx_r81 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r81.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_32_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r82); const ctx_r83 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r83.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_32_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_32_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r75 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r75.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r75.view.recordStatus == "update" && ctx_r75.notSaved("id", ctx_r75.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r75.view.recordStatus == "update" && ctx_r75.isSaved("id", ctx_r75.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_32_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_32_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_32_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r85 = i0.ɵɵnextContext(2).index;
        const ctx_r88 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r88.findColumnDisplayValue(rowIndex_r85, "first_name", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r97 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r97); const ctx_r96 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r96.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r99 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r99); const ctx_r98 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r98.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_34_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r99); const ctx_r100 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r100.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r84 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r89 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r89.hasError("first_name", "required", rowForm_r84));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r89.hasError("first_name", "maxlength", rowForm_r84));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r89.view.recordStatus == "update" && ctx_r89.notSaved("first_name", rowForm_r84));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r89.view.recordStatus == "update" && ctx_r89.isSaved("first_name", rowForm_r84));
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_34_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_34_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_34_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_34_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r84 = i0.ɵɵnextContext().$implicit;
        const ctx_r86 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r86.excelEditing == false && rowForm_r84.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r86.excelEditing == true || rowForm_r84.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r86.excelEditing == false && rowForm_r84.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_34_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r84 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r84);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r84.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_35_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_35_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_35_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r103 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r103.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_35_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_35_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r110 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_35_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r110); const ctx_r109 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r109.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_35_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_35_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r112 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 86)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 87);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_35_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r112); const ctx_r111 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r111.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_35_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r112); const ctx_r113 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r113.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_35_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_35_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r105 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r105.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r105.view.recordStatus == "update" && ctx_r105.notSaved("first_name", ctx_r105.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r105.view.recordStatus == "update" && ctx_r105.isSaved("first_name", ctx_r105.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_35_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_35_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_35_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r115 = i0.ɵɵnextContext(2).index;
        const ctx_r118 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r118.findColumnDisplayValue(rowIndex_r115, "last_name", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r127 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r127); const ctx_r126 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r126.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r129 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 88);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r129); const ctx_r128 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r128.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_37_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r129); const ctx_r130 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r130.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_td_37_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r114 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r119 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r119.hasError("last_name", "required", rowForm_r114));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r119.hasError("last_name", "maxlength", rowForm_r114));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r119.view.recordStatus == "update" && ctx_r119.notSaved("last_name", rowForm_r114));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r119.view.recordStatus == "update" && ctx_r119.isSaved("last_name", rowForm_r114));
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_37_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_37_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_37_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_37_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r114 = i0.ɵɵnextContext().$implicit;
        const ctx_r116 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r116.excelEditing == false && rowForm_r114.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r116.excelEditing == true || rowForm_r114.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r116.excelEditing == false && rowForm_r114.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_37_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r114 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r114);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r114.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_38_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_38_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_38_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r133 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r133.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_38_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_38_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r140 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_38_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r140); const ctx_r139 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r139.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_38_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_38_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r142 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 89)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 90);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_38_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r142); const ctx_r141 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r141.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_38_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r142); const ctx_r143 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r143.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_38_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_38_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r135 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r135.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r135.view.recordStatus == "update" && ctx_r135.notSaved("last_name", ctx_r135.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r135.view.recordStatus == "update" && ctx_r135.isSaved("last_name", ctx_r135.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_38_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_38_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_38_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r145 = i0.ɵɵnextContext(2).index;
        const ctx_r148 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r148.findColumnDisplayValue(rowIndex_r145, "staff_code", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 10 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r157 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r157); const ctx_r156 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r156.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r159 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r159); const ctx_r158 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r158.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_40_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r159); const ctx_r160 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r160.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_td_40_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r144 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r149 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r149.hasError("staff_code", "required", rowForm_r144));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r149.hasError("staff_code", "maxlength", rowForm_r144));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r149.view.recordStatus == "update" && ctx_r149.notSaved("staff_code", rowForm_r144));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r149.view.recordStatus == "update" && ctx_r149.isSaved("staff_code", rowForm_r144));
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_40_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_40_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_40_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_40_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r144 = i0.ɵɵnextContext().$implicit;
        const ctx_r146 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r146.excelEditing == false && rowForm_r144.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.excelEditing == true || rowForm_r144.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.excelEditing == false && rowForm_r144.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_40_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r144 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r144);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r144.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_41_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_41_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Staff Code \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_41_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r163 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r163.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_41_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Staff Code");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_41_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r170 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_41_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r170); const ctx_r169 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r169.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_41_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_41_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r172 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Staff Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_41_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r172); const ctx_r171 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r171.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_41_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r172); const ctx_r173 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r173.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_41_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_41_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r165 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r165.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r165.view.recordStatus == "update" && ctx_r165.notSaved("staff_code", ctx_r165.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r165.view.recordStatus == "update" && ctx_r165.isSaved("staff_code", ctx_r165.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_41_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_41_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_41_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r175 = i0.ɵɵnextContext(2).index;
        const ctx_r178 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r178.findColumnDisplayValue(rowIndex_r175, "email", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r187 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r187); const ctx_r186 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r186.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r189 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r189); const ctx_r188 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r188.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_43_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r189); const ctx_r190 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r190.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_td_43_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r174 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r179 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r179.hasError("email", "required", rowForm_r174));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r179.hasError("email", "maxlength", rowForm_r174));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r179.view.recordStatus == "update" && ctx_r179.notSaved("email", rowForm_r174));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r179.view.recordStatus == "update" && ctx_r179.isSaved("email", rowForm_r174));
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_43_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_43_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_43_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_43_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r174 = i0.ɵɵnextContext().$implicit;
        const ctx_r176 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r176.excelEditing == false && rowForm_r174.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r176.excelEditing == true || rowForm_r174.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r176.excelEditing == false && rowForm_r174.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_43_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r174 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r174);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r174.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_44_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_44_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Email \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_44_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r193 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r193.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_44_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_44_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r200 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_44_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r200); const ctx_r199 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r199.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_44_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_44_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r202 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_44_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r202); const ctx_r201 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r201.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_44_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r202); const ctx_r203 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r203.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_44_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_44_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r195 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r195.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r195.view.recordStatus == "update" && ctx_r195.notSaved("email", ctx_r195.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r195.view.recordStatus == "update" && ctx_r195.isSaved("email", ctx_r195.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_44_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_44_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_44_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r205 = i0.ɵɵnextContext(2).index;
        const ctx_r208 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r208.findColumnDisplayValue(rowIndex_r205, "mobile", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r217 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r217); const ctx_r216 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r216.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r219 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r219); const ctx_r218 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r218.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r219); const ctx_r220 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r220.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_td_46_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r204 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r209 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.hasError("mobile", "required", rowForm_r204));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.hasError("mobile", "maxlength", rowForm_r204));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.view.recordStatus == "update" && ctx_r209.notSaved("mobile", rowForm_r204));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.view.recordStatus == "update" && ctx_r209.isSaved("mobile", rowForm_r204));
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_46_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_46_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_46_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r204 = i0.ɵɵnextContext().$implicit;
        const ctx_r206 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r206.excelEditing == false && rowForm_r204.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r206.excelEditing == true || rowForm_r204.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r206.excelEditing == false && rowForm_r204.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_46_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r204 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r204);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r204.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_47_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_47_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Mobile \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_47_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r223 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r223.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_47_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_47_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r230 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_47_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r230); const ctx_r229 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r229.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_47_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_47_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_47_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r232); const ctx_r231 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r231.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_47_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r232); const ctx_r233 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r233.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_47_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_47_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r225 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r225.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r225.view.recordStatus == "update" && ctx_r225.notSaved("mobile", ctx_r225.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r225.view.recordStatus == "update" && ctx_r225.isSaved("mobile", ctx_r225.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_47_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_47_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_47_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexTestStaffGridComponent_td_49_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r235 = i0.ɵɵnextContext(2).index;
        const ctx_r238 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r238.findColumnDisplayValue(rowIndex_r235, "skype", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_49_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 40 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r246 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r246); const ctx_r245 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r245.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_49_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_49_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r248 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 100);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_49_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r248); const ctx_r247 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r247.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_49_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r248); const ctx_r249 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r249.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_49_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_49_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r234 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r239 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Skype");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r239.hasError("skype", "maxlength", rowForm_r234));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r239.view.recordStatus == "update" && ctx_r239.notSaved("skype", rowForm_r234));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r239.view.recordStatus == "update" && ctx_r239.isSaved("skype", rowForm_r234));
    } }
    function dibexTestStaffGridComponent_td_49_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_49_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_49_ng_container_1_span_4_Template, 6, 4, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_49_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r234 = i0.ɵɵnextContext().$implicit;
        const ctx_r236 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r236.excelEditing == false && rowForm_r234.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.excelEditing == true || rowForm_r234.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.excelEditing == false && rowForm_r234.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_49_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r234 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r234);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r234.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_50_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Skype ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_50_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Skype");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_50_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r258 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_50_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r258); const ctx_r257 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r257.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_50_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_50_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r260 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Skype");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_50_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r260); const ctx_r259 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r259.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_50_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r260); const ctx_r261 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r261.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_50_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_50_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r254 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r254.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Skype");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r254.view.recordStatus == "update" && ctx_r254.notSaved("skype", ctx_r254.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r254.view.recordStatus == "update" && ctx_r254.isSaved("skype", ctx_r254.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_50_div_2_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_50_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_50_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexTestStaffGridComponent_td_52_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r263 = i0.ɵɵnextContext(2).index;
        const ctx_r266 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r266.findColumnDisplayValue(rowIndex_r263, "position", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_52_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r271 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r271.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r271.id_display_value, "");
    } }
    function dibexTestStaffGridComponent_td_52_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 103)(2, "mat-select", 104);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_52_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r267 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r267.lists.list4205.items));
    } }
    function dibexTestStaffGridComponent_td_52_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_52_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_52_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_52_ng_container_1_span_4_Template, 5, 3, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_52_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r262 = i0.ɵɵnextContext().$implicit;
        const ctx_r264 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r264.excelEditing == false && rowForm_r262.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.excelEditing == true || rowForm_r262.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.excelEditing == false && rowForm_r262.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_52_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r262 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r262);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r262.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_53_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_53_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_53_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r273 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r273.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_53_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_53_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r278 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r278.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r278.id_display_value, "");
    } }
    function dibexTestStaffGridComponent_th_53_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 108);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_53_div_4_mat_option_5_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r275 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r275.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r275.lists.list4205.items));
    } }
    function dibexTestStaffGridComponent_th_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_53_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_53_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_53_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexTestStaffGridComponent_td_55_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r280 = i0.ɵɵnextContext(2).index;
        const ctx_r283 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r283.findColumnDisplayValue(rowIndex_r280, "join_date", "none", "date"), "");
    } }
    function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r292 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r292); const ctx_r291 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r291.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r294 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 109)(2, "input", 110);
        i0.ɵɵlistener("focus", function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r294); const _r287 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r287.open()); })("keydown.enter", function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r294); const ctx_r295 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r295.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_55_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r294); const ctx_r296 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r296.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 111)(4, "mat-datepicker", null, 112);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_td_55_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(7, dibexTestStaffGridComponent_td_55_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(8, dibexTestStaffGridComponent_td_55_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 46);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r287 = i0.ɵɵreference(5);
        const rowForm_r279 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r284 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r287);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r287);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r284.view.recordStatus == "update" && ctx_r284.notSaved("join_date", rowForm_r279));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r284.view.recordStatus == "update" && ctx_r284.isSaved("join_date", rowForm_r279));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r284.hasError("join_date", "required", rowForm_r279));
    } }
    function dibexTestStaffGridComponent_td_55_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_55_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_55_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_55_ng_container_1_span_4_Template, 9, 6, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_55_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r279 = i0.ɵɵnextContext().$implicit;
        const ctx_r281 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r281.excelEditing == false && rowForm_r279.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r281.excelEditing == true || rowForm_r279.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r281.excelEditing == false && rowForm_r279.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_55_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r279 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r279);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r279.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_56_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_56_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Join Date \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_56_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r299 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r299.editorOpen);
    } }
    function dibexTestStaffGridComponent_th_56_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Join Date");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_56_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r306 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_56_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r306); const ctx_r305 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r305.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_56_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_56_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r308 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 113)(2, "mat-label");
        i0.ɵɵtext(3, "Join Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_56_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r308); const ctx_r307 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r307.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_56_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r308); const ctx_r309 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r309.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_56_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_56_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r301 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r301.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.view.recordStatus == "update" && ctx_r301.notSaved("join_date", ctx_r301.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.view.recordStatus == "update" && ctx_r301.isSaved("join_date", ctx_r301.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_56_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_56_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_56_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexTestStaffGridComponent_td_58_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r311 = i0.ɵɵnextContext(2).index;
        const ctx_r314 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r314.findColumnDisplayValue(rowIndex_r311, "notes", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_td_58_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r321 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_58_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r321); const ctx_r320 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r320.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_58_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_58_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r323 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 115)(2, "textarea", 116);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_58_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r323); const ctx_r322 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r322.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_58_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r323); const ctx_r324 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r324.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_58_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_58_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r310 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r315 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r315.view.recordStatus == "update" && ctx_r315.notSaved("notes", rowForm_r310));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r315.view.recordStatus == "update" && ctx_r315.isSaved("notes", rowForm_r310));
    } }
    function dibexTestStaffGridComponent_td_58_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_58_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_58_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_58_ng_container_1_span_4_Template, 5, 3, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_58_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r310 = i0.ɵɵnextContext().$implicit;
        const ctx_r312 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r312.excelEditing == false && rowForm_r310.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r312.excelEditing == true || rowForm_r310.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r312.excelEditing == false && rowForm_r310.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_58_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r310 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r310);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r310.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_59_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_59_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_59_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r333 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_59_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r333); const ctx_r332 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r332.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_59_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_59_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r335 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_59_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r335); const ctx_r334 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r334.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_59_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r335); const ctx_r336 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r336.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_59_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_59_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r329 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r329.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r329.view.recordStatus == "update" && ctx_r329.notSaved("notes", ctx_r329.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r329.view.recordStatus == "update" && ctx_r329.isSaved("notes", ctx_r329.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_59_div_2_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_59_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_59_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexTestStaffGridComponent_td_61_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r338 = i0.ɵɵnextContext(2).index;
        const ctx_r341 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r341.findColumnDisplayValue(rowIndex_r338, "updated", "none", "datetime"), "");
    } }
    function dibexTestStaffGridComponent_td_61_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r349 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_td_61_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r349); const ctx_r348 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r348.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_61_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_td_61_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r351 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 119);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 111);
        i0.ɵɵelementStart(3, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_td_61_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r351); const ctx_r350 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r350.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_td_61_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r351); const ctx_r352 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r352.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_61_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_61_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 121);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r347 = i0.ɵɵreference(7);
        const rowForm_r337 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r342 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r347);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r347);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r342.view.recordStatus == "update" && ctx_r342.notSaved("updated", rowForm_r337));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r342.view.recordStatus == "update" && ctx_r342.isSaved("updated", rowForm_r337));
    } }
    function dibexTestStaffGridComponent_td_61_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_td_61_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_td_61_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_td_61_ng_container_1_span_4_Template, 8, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_td_61_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r337 = i0.ɵɵnextContext().$implicit;
        const ctx_r339 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r339.excelEditing == false && rowForm_r337.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r339.excelEditing == true || rowForm_r337.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r339.excelEditing == false && rowForm_r337.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_td_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_td_61_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r337 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r337);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r337.getRawValue());
    } }
    function dibexTestStaffGridComponent_th_62_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_62_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_62_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r361 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_th_62_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r361); const ctx_r360 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r360.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_62_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_th_62_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r363 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 122)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_th_62_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r363); const ctx_r362 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r362.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_th_62_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r363); const ctx_r364 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r364.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_th_62_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_th_62_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r357 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r357.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r357.view.recordStatus == "update" && ctx_r357.notSaved("updated", ctx_r357.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r357.view.recordStatus == "update" && ctx_r357.isSaved("updated", ctx_r357.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_th_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_th_62_div_2_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_th_62_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_th_62_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
    } }
    function dibexTestStaffGridComponent_th_64_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 126);
    } }
    function dibexTestStaffGridComponent_th_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 124);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_th_64_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 125);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r30.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.busy);
    } }
    function dibexTestStaffGridComponent_th_66_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r366 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r366.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexTestStaffGridComponent_th_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 127);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_th_66_span_1_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r31.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r31.busy && ctx_r31.tableDataSource.data.length == 0);
    } }
    function dibexTestStaffGridComponent_ng_container_67_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 129);
    } }
    function dibexTestStaffGridComponent_ng_container_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_container_67_tr_1_Template, 1, 0, "tr", 128);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r367 = ctx.$implicit;
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r32.columnHeaders.getArray(column_r367).items$));
    } }
    function dibexTestStaffGridComponent_tr_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 130);
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r33.busy ? "visible" : "hidden"));
    } }
    function dibexTestStaffGridComponent_tr_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 130);
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r34.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexTestStaffGridComponent_tr_70_Template(rf, ctx) { if (rf & 1) {
        const _r372 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 131);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_tr_70_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r372); const row_r369 = restoredCtx.$implicit; const ctx_r371 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r371.rowClick(row_r369, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r369 = ctx.$implicit;
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r35.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r35.isHighlighted(row_r369)));
    } }
    function dibexTestStaffGridComponent_72_ng_template_0_Template(rf, ctx) { }
    function dibexTestStaffGridComponent_72_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexTestStaffGridComponent_72_ng_template_0_Template, 0, 0, "ng-template", 132);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r39 = i0.ɵɵreference(77);
        i0.ɵɵproperty("ngTemplateOutlet", _r39);
    } }
    function dibexTestStaffGridComponent_mat_toolbar_75_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r378 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 138);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_mat_toolbar_75_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r378); const ctx_r377 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r377.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r374 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r374.numberOfSelectedItems + " ", "item", ctx_r374.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexTestStaffGridComponent_mat_toolbar_75_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_mat_toolbar_75_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_mat_toolbar_75_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r382 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 139);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_mat_toolbar_75_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r382); const ctx_r381 = i0.ɵɵnextContext(2); ctx_r381.gridShowClipboardDefault = !ctx_r381.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r381.gridShowClipboardDefault && ctx_r381.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_mat_toolbar_75_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 46);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_mat_toolbar_75_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 46);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r375 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r375.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r375.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r375.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexTestStaffGridComponent_mat_toolbar_75_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r385 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 140, 141);
        i0.ɵɵlistener("page", function dibexTestStaffGridComponent_mat_toolbar_75_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r385); const ctx_r384 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r384.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r376 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r376.page.totalRecords)("pageSize", ctx_r376.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexTestStaffGridComponent_mat_toolbar_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 133);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_mat_toolbar_75_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 134);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_mat_toolbar_75_button_3_Template, 4, 3, "button", 135);
        i0.ɵɵelement(4, "span", 136);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_mat_toolbar_75_mat_paginator_5_Template, 2, 4, "mat-paginator", 137);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r38.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r38.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 59);
        i0.ɵɵelementContainer(2, 3);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4170");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_2_ng_container_1_Template, 3, 1, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r415 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r415);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r415.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 60);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r420 = i0.ɵɵnextContext(2).index;
        const ctx_r423 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r423.findColumnDisplayValue(rowIndex_r420, "id", "none", "number"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r431 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r431); const ctx_r430 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r430.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r433 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 65)(2, "input", 146);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r433); const ctx_r432 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r432.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r433); const ctx_r434 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r434.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r419 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r424 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.hasError("id", "required", rowForm_r419));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.view.recordStatus == "update" && ctx_r424.notSaved("id", rowForm_r419));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r424.view.recordStatus == "update" && ctx_r424.isSaved("id", rowForm_r419));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_4_Template, 6, 4, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r419 = i0.ɵɵnextContext().$implicit;
        const ctx_r421 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r421.excelEditing == false && rowForm_r419.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.excelEditing == true || rowForm_r419.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r421.excelEditing == false && rowForm_r419.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_5_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r419 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r419);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r419.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_6_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r437 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r437.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r444 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r444); const ctx_r443 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r443.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r446 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 82)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r446); const ctx_r445 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r445.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r446); const ctx_r447 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r447.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r439 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r439.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r439.view.recordStatus == "update" && ctx_r439.notSaved("id", ctx_r439.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r439.view.recordStatus == "update" && ctx_r439.isSaved("id", ctx_r439.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_6_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_6_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_6_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r389 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r389.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r389.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r389.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r449 = i0.ɵɵnextContext(2).index;
        const ctx_r452 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r452.findColumnDisplayValue(rowIndex_r449, "first_name", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r461 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r461); const ctx_r460 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r460.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r463 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r463); const ctx_r462 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r462.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r463); const ctx_r464 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r464.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r448 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r453 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r453.hasError("first_name", "required", rowForm_r448));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r453.hasError("first_name", "maxlength", rowForm_r448));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r453.view.recordStatus == "update" && ctx_r453.notSaved("first_name", rowForm_r448));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r453.view.recordStatus == "update" && ctx_r453.isSaved("first_name", rowForm_r448));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r448 = i0.ɵɵnextContext().$implicit;
        const ctx_r450 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r450.excelEditing == false && rowForm_r448.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r450.excelEditing == true || rowForm_r448.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r450.excelEditing == false && rowForm_r448.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_8_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r448 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r448);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r448.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_9_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r467 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r467.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r474 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r474); const ctx_r473 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r473.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r476 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 86)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 87);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r476); const ctx_r475 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r475.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r476); const ctx_r477 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r477.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r469 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r469.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.notSaved("first_name", ctx_r469.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r469.view.recordStatus == "update" && ctx_r469.isSaved("first_name", ctx_r469.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_9_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_9_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_9_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r391 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r391.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r391.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r391.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r479 = i0.ɵɵnextContext(2).index;
        const ctx_r482 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r482.findColumnDisplayValue(rowIndex_r479, "last_name", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r491 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r491); const ctx_r490 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r490.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r493 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 88);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r493); const ctx_r492 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r492.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r493); const ctx_r494 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r494.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r478 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r483 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r483.hasError("last_name", "required", rowForm_r478));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r483.hasError("last_name", "maxlength", rowForm_r478));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r483.view.recordStatus == "update" && ctx_r483.notSaved("last_name", rowForm_r478));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r483.view.recordStatus == "update" && ctx_r483.isSaved("last_name", rowForm_r478));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r478 = i0.ɵɵnextContext().$implicit;
        const ctx_r480 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r480.excelEditing == false && rowForm_r478.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r480.excelEditing == true || rowForm_r478.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r480.excelEditing == false && rowForm_r478.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_11_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r478 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r478);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r478.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_12_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r497 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r497.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r504 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r504); const ctx_r503 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r503.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r506 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 89)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 90);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r506); const ctx_r505 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r505.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r506); const ctx_r507 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r507.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r499 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r499.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r499.view.recordStatus == "update" && ctx_r499.notSaved("last_name", ctx_r499.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r499.view.recordStatus == "update" && ctx_r499.isSaved("last_name", ctx_r499.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_12_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_12_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_12_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r393 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r393.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r393.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r393.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r509 = i0.ɵɵnextContext(2).index;
        const ctx_r512 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r512.findColumnDisplayValue(rowIndex_r509, "staff_code", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 10 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r521 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r521); const ctx_r520 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r520.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r523 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r523); const ctx_r522 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r522.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r523); const ctx_r524 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r524.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r508 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r513 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r513.hasError("staff_code", "required", rowForm_r508));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r513.hasError("staff_code", "maxlength", rowForm_r508));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r513.view.recordStatus == "update" && ctx_r513.notSaved("staff_code", rowForm_r508));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r513.view.recordStatus == "update" && ctx_r513.isSaved("staff_code", rowForm_r508));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r508 = i0.ɵɵnextContext().$implicit;
        const ctx_r510 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r510.excelEditing == false && rowForm_r508.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r510.excelEditing == true || rowForm_r508.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r510.excelEditing == false && rowForm_r508.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_14_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r508 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r508);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r508.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_15_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Staff Code \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_15_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r527 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r527.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Staff Code");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r534 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r534); const ctx_r533 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r533.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r536 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Staff Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r536); const ctx_r535 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r535.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r536); const ctx_r537 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r537.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r529 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r529.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r529.view.recordStatus == "update" && ctx_r529.notSaved("staff_code", ctx_r529.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r529.view.recordStatus == "update" && ctx_r529.isSaved("staff_code", ctx_r529.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_15_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_15_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_15_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r395 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r395.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r395.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r395.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r539 = i0.ɵɵnextContext(2).index;
        const ctx_r542 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r542.findColumnDisplayValue(rowIndex_r539, "email", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r551 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r551); const ctx_r550 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r550.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r553 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r553); const ctx_r552 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r552.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r553); const ctx_r554 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r554.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r538 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r543 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r543.hasError("email", "required", rowForm_r538));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r543.hasError("email", "maxlength", rowForm_r538));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r543.view.recordStatus == "update" && ctx_r543.notSaved("email", rowForm_r538));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r543.view.recordStatus == "update" && ctx_r543.isSaved("email", rowForm_r538));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r538 = i0.ɵɵnextContext().$implicit;
        const ctx_r540 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r540.excelEditing == false && rowForm_r538.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r540.excelEditing == true || rowForm_r538.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r540.excelEditing == false && rowForm_r538.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_17_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r538 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r538);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r538.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_18_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Email \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_18_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r557 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r557.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r564 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r564); const ctx_r563 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r563.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r566 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r566); const ctx_r565 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r565.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r566); const ctx_r567 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r567.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r559 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r559.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r559.view.recordStatus == "update" && ctx_r559.notSaved("email", ctx_r559.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r559.view.recordStatus == "update" && ctx_r559.isSaved("email", ctx_r559.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_18_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_18_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_18_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r397 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r397.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r397.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r397.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r569 = i0.ɵɵnextContext(2).index;
        const ctx_r572 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r572.findColumnDisplayValue(rowIndex_r569, "mobile", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r581 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r581); const ctx_r580 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r580.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r583 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r583); const ctx_r582 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r582.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r583); const ctx_r584 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r584.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r568 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r573 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.hasError("mobile", "required", rowForm_r568));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.hasError("mobile", "maxlength", rowForm_r568));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.view.recordStatus == "update" && ctx_r573.notSaved("mobile", rowForm_r568));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.view.recordStatus == "update" && ctx_r573.isSaved("mobile", rowForm_r568));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_4_Template, 7, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r568 = i0.ɵɵnextContext().$implicit;
        const ctx_r570 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r570.excelEditing == false && rowForm_r568.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r570.excelEditing == true || rowForm_r568.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r570.excelEditing == false && rowForm_r568.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_20_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r568 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r568);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r568.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_21_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Mobile \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_21_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r587 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r587.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r594 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r594); const ctx_r593 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r593.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r596 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r596); const ctx_r595 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r595.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r596); const ctx_r597 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r597.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r589 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r589.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r589.view.recordStatus == "update" && ctx_r589.notSaved("mobile", ctx_r589.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r589.view.recordStatus == "update" && ctx_r589.isSaved("mobile", ctx_r589.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_21_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_21_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_21_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r399 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r399.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r399.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r399.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r599 = i0.ɵɵnextContext(2).index;
        const ctx_r602 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r602.findColumnDisplayValue(rowIndex_r599, "skype", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 40 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r610 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r610); const ctx_r609 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r609.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r612 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 84)(2, "input", 100);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r612); const ctx_r611 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r611.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r612); const ctx_r613 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r613.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r598 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r603 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Skype");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r603.hasError("skype", "maxlength", rowForm_r598));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r603.view.recordStatus == "update" && ctx_r603.notSaved("skype", rowForm_r598));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r603.view.recordStatus == "update" && ctx_r603.isSaved("skype", rowForm_r598));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_4_Template, 6, 4, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r598 = i0.ɵɵnextContext().$implicit;
        const ctx_r600 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r600.excelEditing == false && rowForm_r598.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r600.excelEditing == true || rowForm_r598.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r600.excelEditing == false && rowForm_r598.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_23_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r598 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r598);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r598.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Skype ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Skype");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r622 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r622); const ctx_r621 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r621.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r624 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Skype");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r624); const ctx_r623 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r623.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r624); const ctx_r625 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r625.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r618 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r618.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Skype");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r618.view.recordStatus == "update" && ctx_r618.notSaved("skype", ctx_r618.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r618.view.recordStatus == "update" && ctx_r618.isSaved("skype", ctx_r618.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_24_div_2_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_24_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_24_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r401 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r401.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r401.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r401.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r627 = i0.ɵɵnextContext(2).index;
        const ctx_r630 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r630.findColumnDisplayValue(rowIndex_r627, "position", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r635 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r635.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r635.id_display_value, "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 103)(2, "mat-select", 104);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r631 = i0.ɵɵnextContext(4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r631.lists.list4205.items));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_4_Template, 5, 3, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r626 = i0.ɵɵnextContext().$implicit;
        const ctx_r628 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r628.excelEditing == false && rowForm_r626.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r628.excelEditing == true || rowForm_r626.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r628.excelEditing == false && rowForm_r626.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_26_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r626 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r626);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r626.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_27_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_27_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r637 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r637.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_27_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 106);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r642 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r642.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r642.id_display_value, "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 108);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_27_div_4_mat_option_5_Template, 2, 2, "mat-option", 105);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r639 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r639.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r639.lists.list4205.items));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_27_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_27_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_27_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r403 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r403.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r403.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r403.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r644 = i0.ɵɵnextContext(2).index;
        const ctx_r647 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r647.findColumnDisplayValue(rowIndex_r644, "join_date", "none", "date"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r656 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r656); const ctx_r655 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r655.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r658 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 109)(2, "input", 110);
        i0.ɵɵlistener("focus", function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r658); const _r651 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r651.open()); })("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r658); const ctx_r659 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r659.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r658); const ctx_r660 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r660.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 111)(4, "mat-datepicker", null, 112);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(7, dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(8, dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 46);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r651 = i0.ɵɵreference(5);
        const rowForm_r643 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r648 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r651);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r651);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r648.view.recordStatus == "update" && ctx_r648.notSaved("join_date", rowForm_r643));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r648.view.recordStatus == "update" && ctx_r648.isSaved("join_date", rowForm_r643));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r648.hasError("join_date", "required", rowForm_r643));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_4_Template, 9, 6, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r643 = i0.ɵɵnextContext().$implicit;
        const ctx_r645 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r645.excelEditing == false && rowForm_r643.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r645.excelEditing == true || rowForm_r643.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r645.excelEditing == false && rowForm_r643.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_29_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r643 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r643);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r643.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_30_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 79);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Join Date \u00A0");
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_30_div_2_span_2_Template, 2, 0, "span", 78);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r663 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r663.editorOpen);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Join Date");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r670 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r670); const ctx_r669 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r669.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r672 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 113)(2, "mat-label");
        i0.ɵɵtext(3, "Join Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r672); const ctx_r671 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r671.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r672); const ctx_r673 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r673.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r665 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r665.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r665.view.recordStatus == "update" && ctx_r665.notSaved("join_date", ctx_r665.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r665.view.recordStatus == "update" && ctx_r665.isSaved("join_date", ctx_r665.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_30_div_2_Template, 3, 1, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_30_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_30_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r405 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r405.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r405.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r405.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r675 = i0.ɵɵnextContext(2).index;
        const ctx_r678 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r678.findColumnDisplayValue(rowIndex_r675, "notes", "none", "text"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r685 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r685); const ctx_r684 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r684.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r687 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 115)(2, "textarea", 116);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r687); const ctx_r686 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r686.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r687); const ctx_r688 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r688.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r674 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r679 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r679.view.recordStatus == "update" && ctx_r679.notSaved("notes", rowForm_r674));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r679.view.recordStatus == "update" && ctx_r679.isSaved("notes", rowForm_r674));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_4_Template, 5, 3, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r674 = i0.ɵɵnextContext().$implicit;
        const ctx_r676 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r676.excelEditing == false && rowForm_r674.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r676.excelEditing == true || rowForm_r674.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r676.excelEditing == false && rowForm_r674.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_32_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r674 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r674);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r674.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r697 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r697); const ctx_r696 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r696.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r699 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 117)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r699); const ctx_r698 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r698.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r699); const ctx_r700 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r700.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r693 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r693.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r693.view.recordStatus == "update" && ctx_r693.notSaved("notes", ctx_r693.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r693.view.recordStatus == "update" && ctx_r693.isSaved("notes", ctx_r693.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_33_div_2_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_33_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_33_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r407 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r407.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r407.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r407.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 64);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r702 = i0.ɵɵnextContext(2).index;
        const ctx_r705 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r705.findColumnDisplayValue(rowIndex_r702, "updated", "none", "datetime"), "");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r713 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r713); const ctx_r712 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r712.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r715 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 64)(1, "mat-form-field", 119);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 111);
        i0.ɵɵelementStart(3, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r715); const ctx_r714 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r714.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r715); const ctx_r716 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r716.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 121);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r711 = i0.ɵɵreference(7);
        const rowForm_r701 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r706 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r711);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r711);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r706.view.recordStatus == "update" && ctx_r706.notSaved("updated", rowForm_r701));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r706.view.recordStatus == "update" && ctx_r706.isSaved("updated", rowForm_r701));
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 61)(2, "span", 62);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_3_Template, 2, 1, "span", 63);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_4_Template, 8, 5, "span", 63);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r701 = i0.ɵɵnextContext().$implicit;
        const ctx_r703 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r703.excelEditing == false && rowForm_r701.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r703.excelEditing == true || rowForm_r701.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r703.excelEditing == false && rowForm_r701.get("__edit").value === false);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_td_35_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r701 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r701);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r701.getRawValue());
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_36_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 77);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_36_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_36_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r725 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 70);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_th_36_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r725); const ctx_r724 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r724.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_36_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_36_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r727 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 122)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 123);
        i0.ɵɵlistener("keydown.enter", function dibexTestStaffGridComponent_ng_template_76_th_36_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r727); const ctx_r726 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r726.searchGrid(false)); })("keydown.esc", function dibexTestStaffGridComponent_ng_template_76_th_36_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r727); const ctx_r728 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r728.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_th_36_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_36_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r721 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r721.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r721.view.recordStatus == "update" && ctx_r721.notSaved("updated", ctx_r721.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r721.view.recordStatus == "update" && ctx_r721.isSaved("updated", ctx_r721.model.$formGroup));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 73);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_th_36_div_2_Template, 2, 0, "div", 74);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_36_div_3_Template, 2, 0, "div", 75);
        i0.ɵɵtemplate(4, dibexTestStaffGridComponent_ng_template_76_th_36_div_4_Template, 7, 4, "div", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r409 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r409.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r409.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r409.showSearch);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_38_Template(rf, ctx) { if (rf & 1) {
        const _r730 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 147);
        i0.ɵɵlistener("change", function dibexTestStaffGridComponent_ng_template_76_th_38_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r730); const ctx_r729 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r729.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r410 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r410.masterIsChecked)("indeterminate", ctx_r410.masterIsIndeterminate);
    } }
    function dibexTestStaffGridComponent_ng_template_76_td_39_Template(rf, ctx) { if (rf & 1) {
        const _r734 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 148)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_td_39_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexTestStaffGridComponent_ng_template_76_td_39_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r734); const row_r731 = restoredCtx.$implicit; const ctx_r733 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r733.selection.toggle(row_r731) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r731 = ctx.$implicit;
        const ctx_r411 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r411.isHighlighted(row_r731));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_41_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 126);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 149);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_th_41_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 125);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r412 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r412.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r412.busy);
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_43_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r736 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r736.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexTestStaffGridComponent_ng_template_76_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 127);
        i0.ɵɵtemplate(1, dibexTestStaffGridComponent_ng_template_76_th_43_span_1_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r413 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r413.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r413.busy && ctx_r413.tableDataSource.data.length == 0);
    } }
    function dibexTestStaffGridComponent_ng_template_76_tr_44_Template(rf, ctx) { if (rf & 1) {
        const _r739 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 150);
        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_ng_template_76_tr_44_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r739); const row_r737 = restoredCtx.$implicit; const ctx_r738 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r738.rowClick(row_r737, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r737 = ctx.$implicit;
        const ctx_r414 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r414.isHighlighted(row_r737)));
    } }
    function dibexTestStaffGridComponent_ng_template_76_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 142);
        i0.ɵɵelementContainerStart(1, 25);
        i0.ɵɵtemplate(2, dibexTestStaffGridComponent_ng_template_76_td_2_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(3, dibexTestStaffGridComponent_ng_template_76_th_3_Template, 1, 0, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 28);
        i0.ɵɵtemplate(5, dibexTestStaffGridComponent_ng_template_76_td_5_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(6, dibexTestStaffGridComponent_ng_template_76_th_6_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 29);
        i0.ɵɵtemplate(8, dibexTestStaffGridComponent_ng_template_76_td_8_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(9, dibexTestStaffGridComponent_ng_template_76_th_9_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 30);
        i0.ɵɵtemplate(11, dibexTestStaffGridComponent_ng_template_76_td_11_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(12, dibexTestStaffGridComponent_ng_template_76_th_12_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 31);
        i0.ɵɵtemplate(14, dibexTestStaffGridComponent_ng_template_76_td_14_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(15, dibexTestStaffGridComponent_ng_template_76_th_15_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 32);
        i0.ɵɵtemplate(17, dibexTestStaffGridComponent_ng_template_76_td_17_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(18, dibexTestStaffGridComponent_ng_template_76_th_18_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 33);
        i0.ɵɵtemplate(20, dibexTestStaffGridComponent_ng_template_76_td_20_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(21, dibexTestStaffGridComponent_ng_template_76_th_21_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 34);
        i0.ɵɵtemplate(23, dibexTestStaffGridComponent_ng_template_76_td_23_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(24, dibexTestStaffGridComponent_ng_template_76_th_24_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 35);
        i0.ɵɵtemplate(26, dibexTestStaffGridComponent_ng_template_76_td_26_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(27, dibexTestStaffGridComponent_ng_template_76_th_27_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 36);
        i0.ɵɵtemplate(29, dibexTestStaffGridComponent_ng_template_76_td_29_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(30, dibexTestStaffGridComponent_ng_template_76_th_30_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 37);
        i0.ɵɵtemplate(32, dibexTestStaffGridComponent_ng_template_76_td_32_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(33, dibexTestStaffGridComponent_ng_template_76_th_33_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 38);
        i0.ɵɵtemplate(35, dibexTestStaffGridComponent_ng_template_76_td_35_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(36, dibexTestStaffGridComponent_ng_template_76_th_36_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 22);
        i0.ɵɵtemplate(38, dibexTestStaffGridComponent_ng_template_76_th_38_Template, 2, 2, "th", 23);
        i0.ɵɵtemplate(39, dibexTestStaffGridComponent_ng_template_76_td_39_Template, 2, 1, "td", 143);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 39);
        i0.ɵɵtemplate(41, dibexTestStaffGridComponent_ng_template_76_th_41_Template, 2, 2, "th", 144);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(42, 41);
        i0.ɵɵtemplate(43, dibexTestStaffGridComponent_ng_template_76_th_43_Template, 2, 2, "th", 42);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(44, dibexTestStaffGridComponent_ng_template_76_tr_44_Template, 1, 3, "tr", 145);
        i0.ɵɵpipe(45, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r40.selectionDataSource);
        i0.ɵɵadvance(44);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(45, 2, ctx_r40.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i20 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
                i7 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i21 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i22 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i8 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i12 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i19 = card_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i16 = select_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i10 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i9_1) {
                i9 = i9_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i17_1) {
                i17 = i17_1;
            },
            function (i18_1) {
                i18 = i18_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexTestStaffGridComponent = class dibexTestStaffGridComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 167, name: 'dibexTestStaffGrid', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'first_name', 'last_name', 'staff_code', 'email', 'mobile', 'skype', 'position', 'join_date', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'first_name', 'last_name', 'staff_code', 'email', 'mobile', 'skype', 'position', 'join_date', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list4205 = new shared_3.DibEnumList(this.translationService, this.eventService, 'position', ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'], true);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexTestStaffGrid');
                    this.containerName = 'dibexTestStaffGrid'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 4198, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, first_name: { itemId: 4199, type: 'text', fieldAlias: 'first_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 4200, type: 'text', fieldAlias: 'last_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, staff_code: { itemId: 4201, type: 'text', fieldAlias: 'staff_code', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(10)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 4202, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(200)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, mobile: { itemId: 4203, type: 'text', fieldAlias: 'mobile', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, skype: { itemId: 4204, type: 'text', fieldAlias: 'skype', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(40)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, position: { itemId: 4205, type: 'text', fieldAlias: 'position', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'] }, join_date: { itemId: 4206, type: 'date', fieldAlias: 'join_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, notes: { itemId: 4207, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, updated: { itemId: 4208, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('staff_code', this.model.modelItems.staff_code.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('mobile', this.model.modelItems.mobile.formControl);
                    this.model.$formGroup.addControl('skype', this.model.modelItems.skype.formControl);
                    this.model.$formGroup.addControl('position', this.model.modelItems.position.formControl);
                    this.model.$formGroup.addControl('join_date', this.model.modelItems.join_date.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'id', 'first_name', 'last_name', 'staff_code', 'email', 'mobile', 'skype', 'position', 'join_date', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexTestStaffGrid`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexTestStaffGrid`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexTestStaffGrid`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4198 };
                    formDefaultsConfigs['first_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4199 };
                    formDefaultsConfigs['last_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4200 };
                    formDefaultsConfigs['staff_code'] = { contentType: "text", type: "none", defaultValue: "", listId: 4201 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 4202 };
                    formDefaultsConfigs['mobile'] = { contentType: "text", type: "none", defaultValue: "", listId: 4203 };
                    formDefaultsConfigs['skype'] = { contentType: "text", type: "none", defaultValue: "", listId: 4204 };
                    formDefaultsConfigs['position'] = { contentType: "text", type: "none", defaultValue: "", listId: 4205 };
                    formDefaultsConfigs['join_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 4206 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 4207 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 4208 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4198, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), first_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "first_name", "none", false, formDefaults['first_name'], 4199, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), last_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "last_name", "none", false, formDefaults['last_name'], 4200, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), staff_code: new forms_2.FormControl(this.calculateInitialColumnValue(row, "staff_code", "none", false, formDefaults['staff_code'], 4201, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(10)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 4202, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(200)], updateOn: 'blur' }), mobile: new forms_2.FormControl(this.calculateInitialColumnValue(row, "mobile", "none", false, formDefaults['mobile'], 4203, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(30)], updateOn: 'blur' }), skype: new forms_2.FormControl(this.calculateInitialColumnValue(row, "skype", "none", false, formDefaults['skype'], 4204, "text"), { validators: [forms_2.Validators.maxLength(40)], updateOn: 'blur' }), position: new forms_2.FormControl(this.calculateInitialColumnValue(row, "position", "none", false, formDefaults['position'], 4205, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(255)], updateOn: 'blur' }), join_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "join_date", "none", false, formDefaults['join_date'], 4206, "date"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 4207, "text"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 4208, "datetime"), { validators: [], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list4205.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexTestStaffGrid', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexTestStaffGrid' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexTestStaffGridComponent_Factory(t) { return new (t || dibexTestStaffGridComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexTestStaffGridComponent, selectors: [["dibex-test-staff-grid"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 78, vars: 38, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci4160", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci4161", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4197", "dibComponent", "btnAuditTrail", "aria-label", "View audit trail of changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"], ["id", "ci4167", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci4165", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4163", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci4164", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci4162", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci4166", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci4168", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["matColumnDef", "first_name"], ["matColumnDef", "last_name"], ["matColumnDef", "staff_code"], ["matColumnDef", "email"], ["matColumnDef", "mobile"], ["matColumnDef", "skype"], ["matColumnDef", "position"], ["matColumnDef", "join_date"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexTestStaffGrid", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci4163", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4164", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci4166", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4198", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "50", "required", "true", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4199", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "50", "required", "true", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4200", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "last_name", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "staff_code", "maxlength", "10", "required", "true", "name", "staff_code", 3, "keydown.enter", "keydown.esc"], ["id", "ci4201", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "staff_code", "name", "staff_code", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "200", "required", "true", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci4202", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "mobile", "maxlength", "30", "required", "true", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["id", "ci4203", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "mobile", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "skype", "maxlength", "40", "name", "skype", 3, "keydown.enter", "keydown.esc"], ["id", "ci4204", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "skype", "name", "skype", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "selectEnum", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["formControlName", "position", "required", "true"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["id", "ci4205", "dibComponent", "selectEnum", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["formControlName", "position"], ["datepicker", "", "dibComponent", "datePicker"], ["matInput", "", "formControlName", "join_date", "name", "join_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker4206", ""], ["id", "ci4206", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "join_date", "name", "join_date", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputTextArea"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "3", "cdkAutosizeMaxRows", "10", "matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci4207", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker4208", ""], ["id", "ci4208", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexTestStaffGridComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexTestStaffGridComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_Template_button_click_4_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_Template_button_click_6_listener() { return ctx.openAuditTrail("70", "", ""); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(8, "span", 8);
                        i0.ɵɵpipe(9, "safeHtml");
                        i0.ɵɵelementStart(10, "button", 9);
                        i0.ɵɵlistener("click", function dibexTestStaffGridComponent_Template_button_click_10_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(11, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(12, dibexTestStaffGridComponent_button_12_Template, 2, 4, "button", 11);
                        i0.ɵɵtemplate(13, dibexTestStaffGridComponent_button_13_Template, 2, 4, "button", 12);
                        i0.ɵɵelement(14, "span", 13);
                        i0.ɵɵtemplate(15, dibexTestStaffGridComponent_div_15_Template, 5, 3, "div", 14);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(16, "mat-card", 15)(17, "mat-card-content", 16);
                        i0.ɵɵelementContainerStart(18, 3);
                        i0.ɵɵelementStart(19, "div", 17, 18)(21, "form", 19);
                        i0.ɵɵelementContainerStart(22, 20);
                        i0.ɵɵelementStart(23, "table", 21);
                        i0.ɵɵelementContainerStart(24, 22);
                        i0.ɵɵtemplate(25, dibexTestStaffGridComponent_th_25_Template, 2, 2, "th", 23);
                        i0.ɵɵtemplate(26, dibexTestStaffGridComponent_td_26_Template, 2, 1, "td", 24);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(27, 25);
                        i0.ɵɵtemplate(28, dibexTestStaffGridComponent_td_28_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(29, dibexTestStaffGridComponent_th_29_Template, 1, 0, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(30, 28);
                        i0.ɵɵtemplate(31, dibexTestStaffGridComponent_td_31_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(32, dibexTestStaffGridComponent_th_32_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(33, 29);
                        i0.ɵɵtemplate(34, dibexTestStaffGridComponent_td_34_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(35, dibexTestStaffGridComponent_th_35_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(36, 30);
                        i0.ɵɵtemplate(37, dibexTestStaffGridComponent_td_37_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(38, dibexTestStaffGridComponent_th_38_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(39, 31);
                        i0.ɵɵtemplate(40, dibexTestStaffGridComponent_td_40_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(41, dibexTestStaffGridComponent_th_41_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(42, 32);
                        i0.ɵɵtemplate(43, dibexTestStaffGridComponent_td_43_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(44, dibexTestStaffGridComponent_th_44_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(45, 33);
                        i0.ɵɵtemplate(46, dibexTestStaffGridComponent_td_46_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(47, dibexTestStaffGridComponent_th_47_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(48, 34);
                        i0.ɵɵtemplate(49, dibexTestStaffGridComponent_td_49_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(50, dibexTestStaffGridComponent_th_50_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(51, 35);
                        i0.ɵɵtemplate(52, dibexTestStaffGridComponent_td_52_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(53, dibexTestStaffGridComponent_th_53_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(54, 36);
                        i0.ɵɵtemplate(55, dibexTestStaffGridComponent_td_55_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(56, dibexTestStaffGridComponent_th_56_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(57, 37);
                        i0.ɵɵtemplate(58, dibexTestStaffGridComponent_td_58_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(59, dibexTestStaffGridComponent_th_59_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(60, 38);
                        i0.ɵɵtemplate(61, dibexTestStaffGridComponent_td_61_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(62, dibexTestStaffGridComponent_th_62_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(63, 39);
                        i0.ɵɵtemplate(64, dibexTestStaffGridComponent_th_64_Template, 2, 2, "th", 40);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(65, 41);
                        i0.ɵɵtemplate(66, dibexTestStaffGridComponent_th_66_Template, 2, 2, "th", 42);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(67, dibexTestStaffGridComponent_ng_container_67_Template, 3, 3, "ng-container", 43);
                        i0.ɵɵtemplate(68, dibexTestStaffGridComponent_tr_68_Template, 1, 3, "tr", 44);
                        i0.ɵɵtemplate(69, dibexTestStaffGridComponent_tr_69_Template, 1, 3, "tr", 44);
                        i0.ɵɵtemplate(70, dibexTestStaffGridComponent_tr_70_Template, 1, 4, "tr", 45);
                        i0.ɵɵpipe(71, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(72, dibexTestStaffGridComponent_72_Template, 1, 1, null, 46);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(73, "div", null, 47);
                        i0.ɵɵtemplate(75, dibexTestStaffGridComponent_mat_toolbar_75_Template, 6, 3, "mat-toolbar", 46);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(76, dibexTestStaffGridComponent_ng_template_76_Template, 46, 4, "ng-template", null, 48, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r37 = i0.ɵɵreference(74);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(34, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4160");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "View audit trail of changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(9, 30, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4168");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r37);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(44);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(36, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(37, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(71, 32, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatOption, i8.MatButton, i8.MatMiniFabButton, i9.MatCheckbox, i10.MatDatepicker, i10.MatDatepickerInput, i10.MatDatepickerToggle, i11.MatFormField, i11.MatLabel, i11.MatError, i11.MatPrefix, i11.MatSuffix, i12.MatIcon, i13.MatInput, i14.CdkTextareaAutosize, i15.MatProgressBar, i16.MatSelect, i17.MatToolbar, i17.MatToolbarRow, i18.MatTooltip, i19.MatCard, i19.MatCardContent, i20.MatTable, i20.MatHeaderCellDef, i20.MatHeaderRowDef, i20.MatColumnDef, i20.MatCellDef, i20.MatRowDef, i20.MatHeaderCell, i20.MatCell, i20.MatHeaderRow, i20.MatRow, i21.MatSort, i21.MatSortHeader, i22.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexTestStaffGrid'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexTestStaffGridComponent.prototype, "reloadContainer", null);
            exports_1("dibexTestStaffGridComponent", dibexTestStaffGridComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestStaffGridComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-test-staff-grid', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci4160 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4160'" ><button   mat-mini-fab color=primary  id=ci4161 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button   mat-mini-fab color=primary  id=ci4197 dibComponent=btnAuditTrail   style="  " aria-label="View audit trail of changes"  [matTooltip]="'View audit trail of changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="openAuditTrail('70','','')"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"></dib-icon></button><span  id=ci4167 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci4165 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4163 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4164 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci4162 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci4166 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Staff: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci4168 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4168'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexTestStaffGrid" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4170'" ></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4198 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4199 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4200 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=staff_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'staff_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=staff_code   maxlength='10'  required=true  name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('staff_code','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('staff_code','maxlength',rowForm)">Please enter 10 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Staff Code  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Staff Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4201 dibComponent=inputText   style="  " ><mat-label >Staff Code</mat-label><input   matInput  type=text   formControlName=staff_code   name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='200'  required=true  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4202 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='30'  required=true  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4203 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=skype  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'skype','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=skype   maxlength='40'  name=skype   [attr.aria-label]="'Skype'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('skype','maxlength',rowForm)">Please enter 40 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('skype', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('skype', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Skype  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Skype</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4204 dibComponent=inputText   style="  " ><mat-label >Skype</mat-label><input   matInput  type=text   formControlName=skype   name=skype   [attr.aria-label]="'Skype'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('skype', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('skype', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list4205.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4205 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list4205.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=join_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'join_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4206"   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (focus)="datePicker4206.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4206" ></mat-datepicker-toggle><mat-datepicker #datePicker4206 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', rowForm)" matSuffix >done_all</mat-icon><mat-error *ngIf="hasError('join_date','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Join Date  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Join Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4206 dibComponent=inputText   style="  " ><mat-label >Join Date</mat-label><input   matInput  type=text   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4207 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4208"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4208"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4208></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4208 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexTestStaffGrid><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4170'" ></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4198 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4199 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4200 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=staff_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'staff_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=staff_code   maxlength='10'  required=true  name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('staff_code','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('staff_code','maxlength',rowForm)">Please enter 10 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Staff Code  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Staff Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4201 dibComponent=inputText   style="  " ><mat-label >Staff Code</mat-label><input   matInput  type=text   formControlName=staff_code   name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='200'  required=true  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4202 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='30'  required=true  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4203 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=skype  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'skype','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=skype   maxlength='40'  name=skype   [attr.aria-label]="'Skype'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('skype','maxlength',rowForm)">Please enter 40 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('skype', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('skype', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Skype  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Skype</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4204 dibComponent=inputText   style="  " ><mat-label >Skype</mat-label><input   matInput  type=text   formControlName=skype   name=skype   [attr.aria-label]="'Skype'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('skype', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('skype', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list4205.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4205 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list4205.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=join_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'join_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4206"   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (focus)="datePicker4206.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4206" ></mat-datepicker-toggle><mat-datepicker #datePicker4206 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', rowForm)" matSuffix >done_all</mat-icon><mat-error *ngIf="hasError('join_date','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Join Date  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Join Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4206 dibComponent=inputText   style="  " ><mat-label >Join Date</mat-label><input   matInput  type=text   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=3  cdkAutosizeMaxRows=10    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4207 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4208"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4208"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4208></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4208 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, select_1.MatSelectModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexTestStaffGridModule = class dibexTestStaffGridModule {
                static entry = dibexTestStaffGridComponent;
                static ɵfac = function dibexTestStaffGridModule_Factory(t) { return new (t || dibexTestStaffGridModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexTestStaffGridModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexTestStaffGridModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexTestStaffGridModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexTestStaffGridComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexTestStaffGridModule, { declarations: [dibexTestStaffGridComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, select_1.MatSelectModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
