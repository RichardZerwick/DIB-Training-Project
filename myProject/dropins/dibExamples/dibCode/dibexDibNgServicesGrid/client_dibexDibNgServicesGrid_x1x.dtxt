System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/select", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, select_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexDibNgServicesGridComponent, containerModules, dibexDibNgServicesGridModule;
    var __moduleName = context_1 && context_1.id;
    function dibexDibNgServicesGridComponent_mat_option_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 54);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r44 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r44.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r44.id_display_value, "");
    } }
    function dibexDibNgServicesGridComponent_button_20_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 55);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_button_20_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r45.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 56);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDibNgServicesGridComponent_button_21_Template(rf, ctx) { if (rf & 1) {
        const _r48 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 57);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_button_21_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r47.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 58);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDibNgServicesGridComponent_div_23_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r49 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r49.page.toRecord, "\u00A0of\u00A0", ctx_r49.page.records, "");
    } }
    function dibexDibNgServicesGridComponent_div_23_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r50 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r50.page.totalRecords, ")");
    } }
    function dibexDibNgServicesGridComponent_div_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 59);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_div_23_span_2_Template, 2, 2, "span", 51);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_div_23_span_4_Template, 2, 1, "span", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Grid: ", ctx_r3.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r3.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r3.page.totalRecords != ctx_r3.page.records);
    } }
    function dibexDibNgServicesGridComponent_th_33_Template(rf, ctx) { if (rf & 1) {
        const _r52 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 60)(1, "mat-checkbox", 61);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_33_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r52); const ctx_r51 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r51.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.masterIsChecked)("indeterminate", ctx_r5.masterIsIndeterminate);
    } }
    function dibexDibNgServicesGridComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        const _r56 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 62)(1, "mat-checkbox", 63);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_34_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexDibNgServicesGridComponent_td_34_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r56); const row_r53 = restoredCtx.$implicit; const ctx_r55 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r55.selection.toggle(row_r53) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r53 = ctx.$implicit;
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r6.isHighlighted(row_r53));
    } }
    function dibexDibNgServicesGridComponent_td_36_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r62 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 65)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "button", 66);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_36_ng_container_1_Template_button_click_4_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r62); const row_r60 = restoredCtx.ngIf; const ctx_r61 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r61.navigationService.goTo("dibexStaffForm", "main", "?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=" + row_r60.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r61 })); });
        i0.ɵɵelementStart(5, "span", 8);
        i0.ɵɵtext(6, "Expr Fill In");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "5172");
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "Expr Fill In");
    } }
    function dibexDibNgServicesGridComponent_td_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_36_ng_container_1_Template, 7, 2, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r57 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r57);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r57.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68)(2, "div");
        i0.ɵɵtext(3, " Demo ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r64 = i0.ɵɵnextContext(2).index;
        const ctx_r67 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r67.findColumnDisplayValue(rowIndex_r64, "id", "none", "number"), "");
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r76 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r76); const ctx_r75 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r75.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 73);
        i0.ɵɵelement(2, "input", 74);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r63 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r68 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.hasError("id", "required", rowForm_r63));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.view.recordStatus == "update" && ctx_r68.notSaved("id", rowForm_r63));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.view.recordStatus == "update" && ctx_r68.isSaved("id", rowForm_r63));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r68.isInvalid("id", rowForm_r63));
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_39_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_39_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_39_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_39_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r63 = i0.ɵɵnextContext().$implicit;
        const ctx_r65 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r65.excelEditing == false && rowForm_r63.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r65.excelEditing == true || rowForm_r63.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r65.excelEditing == false && rowForm_r63.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_39_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r63 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r63);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r63.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_40_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_40_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_40_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r79 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r79.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_40_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_40_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r86 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_40_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r86); const ctx_r85 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r85.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_40_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_40_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r88 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 89)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 90);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_40_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r88); const ctx_r87 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r87.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_40_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r88); const ctx_r89 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r89.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_40_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_40_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r81 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r81.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.view.recordStatus == "update" && ctx_r81.notSaved("id", ctx_r81.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r81.view.recordStatus == "update" && ctx_r81.isSaved("id", ctx_r81.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_40_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_40_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_40_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r10 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r10.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r10.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r10.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r91 = i0.ɵɵnextContext(2).index;
        const ctx_r94 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r94.findColumnDisplayValue(rowIndex_r91, "first_name", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r103 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r103); const ctx_r102 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r102.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r105 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 91)(2, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r105); const ctx_r104 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r104.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r105); const ctx_r106 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r106.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r90 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r95 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r95.hasError("first_name", "required", rowForm_r90));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r95.hasError("first_name", "maxlength", rowForm_r90));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r95.view.recordStatus == "update" && ctx_r95.notSaved("first_name", rowForm_r90));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r95.view.recordStatus == "update" && ctx_r95.isSaved("first_name", rowForm_r90));
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_42_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_42_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_42_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_42_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r90 = i0.ɵɵnextContext().$implicit;
        const ctx_r92 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r92.excelEditing == false && rowForm_r90.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.excelEditing == true || rowForm_r90.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.excelEditing == false && rowForm_r90.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_42_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r90 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r90);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r90.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_43_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_43_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_43_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r109 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r109.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_43_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_43_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r116 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_43_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r116); const ctx_r115 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r115.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_43_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_43_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r118 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 93)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_43_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r118); const ctx_r117 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r117.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_43_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r118); const ctx_r119 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r119.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_43_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_43_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r111 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r111.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r111.view.recordStatus == "update" && ctx_r111.notSaved("first_name", ctx_r111.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r111.view.recordStatus == "update" && ctx_r111.isSaved("first_name", ctx_r111.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_43_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_43_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_43_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r12 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r12.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r12.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r12.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r121 = i0.ɵɵnextContext(2).index;
        const ctx_r124 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r124.findColumnDisplayValue(rowIndex_r121, "last_name", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r133 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r133); const ctx_r132 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r132.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r135 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 95)(2, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r135); const ctx_r134 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r134.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r135); const ctx_r136 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r136.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r120 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r125 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r125.hasError("last_name", "required", rowForm_r120));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r125.hasError("last_name", "maxlength", rowForm_r120));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r125.view.recordStatus == "update" && ctx_r125.notSaved("last_name", rowForm_r120));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r125.view.recordStatus == "update" && ctx_r125.isSaved("last_name", rowForm_r120));
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_45_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_45_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_45_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r120 = i0.ɵɵnextContext().$implicit;
        const ctx_r122 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r122.excelEditing == false && rowForm_r120.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.excelEditing == true || rowForm_r120.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r122.excelEditing == false && rowForm_r120.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_45_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r120 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r120);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r120.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_46_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_46_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_46_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r139 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r139.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_46_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_46_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r146 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_46_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r146); const ctx_r145 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r145.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_46_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_46_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r148 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_46_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r148); const ctx_r147 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r147.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_46_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r148); const ctx_r149 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r149.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_46_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_46_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r141 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r141.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r141.view.recordStatus == "update" && ctx_r141.notSaved("last_name", ctx_r141.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r141.view.recordStatus == "update" && ctx_r141.isSaved("last_name", ctx_r141.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_46_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_46_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_46_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r14 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r14.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r14.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r14.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_48_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r151 = i0.ɵɵnextContext(2).index;
        const ctx_r154 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r154.findColumnDisplayValue(rowIndex_r151, "position", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_td_48_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 54);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r159 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r159.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r159.id_display_value, "");
    } }
    function dibexDibNgServicesGridComponent_td_48_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 99)(2, "mat-select", 100);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_48_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 11);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r155 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r155.lists.list5176.items));
    } }
    function dibexDibNgServicesGridComponent_td_48_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_48_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_48_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_48_ng_container_1_span_4_Template, 5, 3, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_48_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r150 = i0.ɵɵnextContext().$implicit;
        const ctx_r152 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r152.excelEditing == false && rowForm_r150.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r152.excelEditing == true || rowForm_r150.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r152.excelEditing == false && rowForm_r150.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_48_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r150 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r150);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r150.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_49_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_49_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_49_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r161 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r161.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_49_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_49_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 54);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r166 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r166.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r166.id_display_value, "");
    } }
    function dibexDibNgServicesGridComponent_th_49_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 102);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_49_div_4_mat_option_5_Template, 2, 2, "mat-option", 11);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r163 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r163.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r163.lists.list5176.items));
    } }
    function dibexDibNgServicesGridComponent_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_49_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_49_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_49_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r16 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r16.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r16.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r16.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r168 = i0.ɵɵnextContext(2).index;
        const ctx_r171 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r171.findColumnDisplayValue(rowIndex_r168, "join_date", "none", "date"), "");
    } }
    function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r180 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r180); const ctx_r179 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r179.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r182 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 103)(2, "input", 104);
        i0.ɵɵlistener("focus", function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r182); const _r175 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r175.open()); })("keydown.enter", function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r182); const ctx_r183 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r183.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r182); const ctx_r184 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r184.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 105)(4, "mat-datepicker", null, 106);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(7, dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(8, dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 51);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r175 = i0.ɵɵreference(5);
        const rowForm_r167 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r172 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r175);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r175);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r172.view.recordStatus == "update" && ctx_r172.notSaved("join_date", rowForm_r167));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r172.view.recordStatus == "update" && ctx_r172.isSaved("join_date", rowForm_r167));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r172.hasError("join_date", "required", rowForm_r167));
    } }
    function dibexDibNgServicesGridComponent_td_51_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_51_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_51_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_51_ng_container_1_span_4_Template, 9, 6, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_51_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r167 = i0.ɵɵnextContext().$implicit;
        const ctx_r169 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r169.excelEditing == false && rowForm_r167.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r169.excelEditing == true || rowForm_r167.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r169.excelEditing == false && rowForm_r167.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_51_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r167 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r167);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r167.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_52_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_52_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Join Date \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_52_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r187 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r187.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_52_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Join Date");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_52_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r194 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_52_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r194); const ctx_r193 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r193.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_52_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_52_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r196 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Join Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_52_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r196); const ctx_r195 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r195.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_52_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r196); const ctx_r197 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r197.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_52_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_52_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r189 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r189.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r189.view.recordStatus == "update" && ctx_r189.notSaved("join_date", ctx_r189.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r189.view.recordStatus == "update" && ctx_r189.isSaved("join_date", ctx_r189.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_52_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_52_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_52_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r18 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r18.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r18.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r18.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r199 = i0.ɵɵnextContext(2).index;
        const ctx_r202 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r202.findColumnDisplayValue(rowIndex_r199, "color", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r210 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r210); const ctx_r209 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r209.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r212 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r212); const ctx_r211 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r211.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r212); const ctx_r213 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r213.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r198 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r203 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r203.hasError("color", "maxlength", rowForm_r198));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r203.view.recordStatus == "update" && ctx_r203.notSaved("color", rowForm_r198));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r203.view.recordStatus == "update" && ctx_r203.isSaved("color", rowForm_r198));
    } }
    function dibexDibNgServicesGridComponent_td_54_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_54_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_54_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_54_ng_container_1_span_4_Template, 6, 4, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_54_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r198 = i0.ɵɵnextContext().$implicit;
        const ctx_r200 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r200.excelEditing == false && rowForm_r198.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r200.excelEditing == true || rowForm_r198.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r200.excelEditing == false && rowForm_r198.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_54_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r198 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r198);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r198.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_55_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Color ");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_55_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Color");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_55_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r222 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_55_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r222); const ctx_r221 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r221.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_55_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_55_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r224 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Color");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_55_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r224); const ctx_r223 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r223.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_55_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r224); const ctx_r225 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r225.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_55_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_55_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r218 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r218.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r218.view.recordStatus == "update" && ctx_r218.notSaved("color", ctx_r218.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r218.view.recordStatus == "update" && ctx_r218.isSaved("color", ctx_r218.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_55_div_2_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_55_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_55_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r20 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r20.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r20.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r20.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_57_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r231 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 113);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_57_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r231); const row_r229 = restoredCtx.ngIf; const ctx_r230 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r230.navigationService.goTo("dibexStaffForm", "", "?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=" + row_r229.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r230 })); });
        i0.ɵɵelementStart(2, "span", 8);
        i0.ɵɵtext(3, "Expr Fill In");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "Expr Fill In");
    } }
    function dibexDibNgServicesGridComponent_td_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_57_ng_container_1_Template, 4, 1, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r226 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r226);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r226.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68)(2, "div", 84);
        i0.ɵɵtext(3, " Expr Fill In ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r233 = i0.ɵɵnextContext(2).index;
        const ctx_r236 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r236.findColumnDisplayValue(rowIndex_r233, "staff_code", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 10 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r245 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r245); const ctx_r244 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r244.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r247 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r247); const ctx_r246 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r246.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r247); const ctx_r248 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r248.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r232 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r237 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r237.hasError("staff_code", "required", rowForm_r232));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r237.hasError("staff_code", "maxlength", rowForm_r232));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r237.view.recordStatus == "update" && ctx_r237.notSaved("staff_code", rowForm_r232));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r237.view.recordStatus == "update" && ctx_r237.isSaved("staff_code", rowForm_r232));
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_60_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_60_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_60_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_60_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r232 = i0.ɵɵnextContext().$implicit;
        const ctx_r234 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r234.excelEditing == false && rowForm_r232.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r234.excelEditing == true || rowForm_r232.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r234.excelEditing == false && rowForm_r232.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_60_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r232 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r232);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r232.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_61_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_61_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Staff Code \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_61_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r251 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r251.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_61_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Staff Code");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_61_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r258 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_61_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r258); const ctx_r257 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r257.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_61_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_61_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r260 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Staff Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_61_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r260); const ctx_r259 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r259.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_61_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r260); const ctx_r261 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r261.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_61_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_61_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r253 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r253.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r253.view.recordStatus == "update" && ctx_r253.notSaved("staff_code", ctx_r253.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r253.view.recordStatus == "update" && ctx_r253.isSaved("staff_code", ctx_r253.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_61_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_61_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_61_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r24.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r24.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r24.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r263 = i0.ɵɵnextContext(2).index;
        const ctx_r266 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r266.findColumnDisplayValue(rowIndex_r263, "email", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r275 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r275); const ctx_r274 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r274.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r277 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r277); const ctx_r276 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r276.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r277); const ctx_r278 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r278.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r262 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r267 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.hasError("email", "required", rowForm_r262));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.hasError("email", "maxlength", rowForm_r262));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.view.recordStatus == "update" && ctx_r267.notSaved("email", rowForm_r262));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.view.recordStatus == "update" && ctx_r267.isSaved("email", rowForm_r262));
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_63_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_63_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_63_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_63_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r262 = i0.ɵɵnextContext().$implicit;
        const ctx_r264 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r264.excelEditing == false && rowForm_r262.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.excelEditing == true || rowForm_r262.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.excelEditing == false && rowForm_r262.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_63_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r262 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r262);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r262.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_64_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_64_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Email \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_64_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r281 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r281.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_64_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_64_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r288 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_64_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r288); const ctx_r287 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r287.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_64_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_64_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r290 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_64_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r290); const ctx_r289 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r289.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_64_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r290); const ctx_r291 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r291.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_64_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_64_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r283 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r283.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.view.recordStatus == "update" && ctx_r283.notSaved("email", ctx_r283.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.view.recordStatus == "update" && ctx_r283.isSaved("email", ctx_r283.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_64_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_64_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_64_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r26 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r26.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r26.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r26.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r293 = i0.ɵɵnextContext(2).index;
        const ctx_r296 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r296.findColumnDisplayValue(rowIndex_r293, "mobile", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r305 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r305); const ctx_r304 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r304.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r307 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r307); const ctx_r306 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r306.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r307); const ctx_r308 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r308.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r292 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r297 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r297.hasError("mobile", "required", rowForm_r292));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r297.hasError("mobile", "maxlength", rowForm_r292));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r297.view.recordStatus == "update" && ctx_r297.notSaved("mobile", rowForm_r292));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r297.view.recordStatus == "update" && ctx_r297.isSaved("mobile", rowForm_r292));
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_td_66_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_66_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_td_66_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_td_66_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r292 = i0.ɵɵnextContext().$implicit;
        const ctx_r294 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r294.excelEditing == false && rowForm_r292.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r294.excelEditing == true || rowForm_r292.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r294.excelEditing == false && rowForm_r292.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_td_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_66_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r292 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r292);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r292.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_67_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_67_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Mobile \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_67_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r311 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r311.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_th_67_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_67_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r318 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_th_67_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r318); const ctx_r317 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r317.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_67_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_th_67_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r320 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_th_67_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r320); const ctx_r319 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r319.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_th_67_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r320); const ctx_r321 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r321.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_th_67_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_th_67_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r313 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r313.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.notSaved("mobile", ctx_r313.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.isSaved("mobile", ctx_r313.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_th_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_th_67_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_th_67_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_th_67_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r28 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r28.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r28.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r28.showSearch);
    } }
    function dibexDibNgServicesGridComponent_td_69_ng_container_1_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r329 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 125);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_69_ng_container_1_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r329); const rowForm_r322 = i0.ɵɵnextContext(2).$implicit; const ctx_r327 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r327.editRow(rowForm_r322)); });
        i0.ɵɵelement(1, "dib-icon", 126);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDibNgServicesGridComponent_td_69_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 123);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_td_69_ng_container_1_button_3_Template, 2, 4, "button", 124);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r325 = ctx.ngIf;
        const rowForm_r322 = i0.ɵɵnextContext().$implicit;
        const ctx_r324 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5270");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r325.__new == true || ctx_r324.excelEditing == true && ctx_r324.gridExcelEditingAutoSave == false && rowForm_r322.dirty == true);
    } }
    function dibexDibNgServicesGridComponent_td_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_69_ng_container_1_Template, 4, 2, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r322 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r322);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r322.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_70_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 67);
    } }
    function dibexDibNgServicesGridComponent_td_72_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        const _r338 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 128);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_td_72_ng_container_1_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r338); const rowForm_r331 = i0.ɵɵnextContext(2).$implicit; const ctx_r336 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r336.editRow(rowForm_r331)); });
        i0.ɵɵelement(1, "dib-icon", 126);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDibNgServicesGridComponent_td_72_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_72_ng_container_1_button_1_Template, 2, 4, "button", 127);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r334 = ctx.ngIf;
        const rowForm_r331 = i0.ɵɵnextContext().$implicit;
        const ctx_r333 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r334.__new == true || ctx_r333.excelEditing == true && ctx_r333.gridExcelEditingAutoSave == false && rowForm_r331.dirty == true);
    } }
    function dibexDibNgServicesGridComponent_td_72_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_td_72_ng_container_1_Template, 2, 1, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r331 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r331);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r331.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_th_73_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 67);
    } }
    function dibexDibNgServicesGridComponent_th_75_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 131);
    } }
    function dibexDibNgServicesGridComponent_th_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_th_75_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 130);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r33.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r33.busy);
    } }
    function dibexDibNgServicesGridComponent_th_77_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r341 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r341.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexDibNgServicesGridComponent_th_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_th_77_span_1_Template, 2, 1, "span", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r34.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r34.busy && ctx_r34.tableDataSource.data.length == 0);
    } }
    function dibexDibNgServicesGridComponent_ng_container_78_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 134);
    } }
    function dibexDibNgServicesGridComponent_ng_container_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_container_78_tr_1_Template, 1, 0, "tr", 133);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r342 = ctx.$implicit;
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r35.columnHeaders.getArray(column_r342).items$));
    } }
    function dibexDibNgServicesGridComponent_tr_79_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 135);
    } if (rf & 2) {
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r36.busy ? "visible" : "hidden"));
    } }
    function dibexDibNgServicesGridComponent_tr_80_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 135);
    } if (rf & 2) {
        const ctx_r37 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r37.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexDibNgServicesGridComponent_tr_81_Template(rf, ctx) { if (rf & 1) {
        const _r347 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 136);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_tr_81_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r347); const row_r344 = restoredCtx.$implicit; const ctx_r346 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r346.rowClick(row_r344, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r344 = ctx.$implicit;
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r38.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r38.isHighlighted(row_r344)));
    } }
    function dibexDibNgServicesGridComponent_83_ng_template_0_Template(rf, ctx) { }
    function dibexDibNgServicesGridComponent_83_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexDibNgServicesGridComponent_83_ng_template_0_Template, 0, 0, "ng-template", 137);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r42 = i0.ɵɵreference(88);
        i0.ɵɵproperty("ngTemplateOutlet", _r42);
    } }
    function dibexDibNgServicesGridComponent_mat_toolbar_86_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r353 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 143);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_mat_toolbar_86_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r353); const ctx_r352 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r352.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r349 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r349.numberOfSelectedItems + " ", "item", ctx_r349.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexDibNgServicesGridComponent_mat_toolbar_86_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_mat_toolbar_86_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_mat_toolbar_86_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r357 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 144);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_mat_toolbar_86_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r357); const ctx_r356 = i0.ɵɵnextContext(2); ctx_r356.gridShowClipboardDefault = !ctx_r356.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r356.gridShowClipboardDefault && ctx_r356.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_mat_toolbar_86_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 51);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_mat_toolbar_86_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 51);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r350 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r350.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r350.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r350.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexDibNgServicesGridComponent_mat_toolbar_86_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r360 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 145, 146);
        i0.ɵɵlistener("page", function dibexDibNgServicesGridComponent_mat_toolbar_86_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r360); const ctx_r359 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r359.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r351 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r351.page.totalRecords)("pageSize", ctx_r351.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexDibNgServicesGridComponent_mat_toolbar_86_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 138);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_mat_toolbar_86_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 139);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_mat_toolbar_86_button_3_Template, 4, 3, "button", 140);
        i0.ɵɵelement(4, "span", 141);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_mat_toolbar_86_mat_paginator_5_Template, 2, 4, "mat-paginator", 142);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r41 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r41.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r41.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r397 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 65)(2, "div");
        i0.ɵɵelementContainerStart(3, 3);
        i0.ɵɵelementStart(4, "button", 66);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_2_ng_container_1_Template_button_click_4_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r397); const row_r395 = restoredCtx.ngIf; const ctx_r396 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r396.navigationService.goTo("dibexStaffForm", "main", "?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=" + row_r395.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r396 })); });
        i0.ɵɵelementStart(5, "span", 8);
        i0.ɵɵtext(6, "Expr Fill In");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "5172");
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "Expr Fill In");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_2_ng_container_1_Template, 7, 2, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r392 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r392);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r392.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68)(2, "div");
        i0.ɵɵtext(3, " Demo ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r399 = i0.ɵɵnextContext(2).index;
        const ctx_r402 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r402.findColumnDisplayValue(rowIndex_r399, "id", "none", "number"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r410 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r410); const ctx_r409 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r409.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r412 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 73)(2, "input", 151);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r412); const ctx_r411 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r411.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r412); const ctx_r413 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r413.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r398 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r403 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r403.hasError("id", "required", rowForm_r398));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r403.view.recordStatus == "update" && ctx_r403.notSaved("id", rowForm_r398));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r403.view.recordStatus == "update" && ctx_r403.isSaved("id", rowForm_r398));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_4_Template, 6, 4, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r398 = i0.ɵɵnextContext().$implicit;
        const ctx_r400 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r400.excelEditing == false && rowForm_r398.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.excelEditing == true || rowForm_r398.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.excelEditing == false && rowForm_r398.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_5_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r398 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r398);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r398.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_6_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r416 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r416.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r423 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r423); const ctx_r422 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r422.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r425 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 89)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 90);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r425); const ctx_r424 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r424.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r425); const ctx_r426 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r426.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r418 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r418.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r418.view.recordStatus == "update" && ctx_r418.notSaved("id", ctx_r418.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r418.view.recordStatus == "update" && ctx_r418.isSaved("id", ctx_r418.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_6_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_6_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_6_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r364 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r364.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r428 = i0.ɵɵnextContext(2).index;
        const ctx_r431 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r431.findColumnDisplayValue(rowIndex_r428, "first_name", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r440 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r440); const ctx_r439 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r439.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r442 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 91)(2, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r442); const ctx_r441 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r441.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r442); const ctx_r443 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r443.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r427 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r432 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.hasError("first_name", "required", rowForm_r427));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.hasError("first_name", "maxlength", rowForm_r427));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.view.recordStatus == "update" && ctx_r432.notSaved("first_name", rowForm_r427));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.view.recordStatus == "update" && ctx_r432.isSaved("first_name", rowForm_r427));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r427 = i0.ɵɵnextContext().$implicit;
        const ctx_r429 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r429.excelEditing == false && rowForm_r427.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r429.excelEditing == true || rowForm_r427.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r429.excelEditing == false && rowForm_r427.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_8_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r427 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r427);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r427.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_9_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r446 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r446.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r453 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r453); const ctx_r452 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r452.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r455 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 93)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r455); const ctx_r454 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r454.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r455); const ctx_r456 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r456.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r448 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r448.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r448.view.recordStatus == "update" && ctx_r448.notSaved("first_name", ctx_r448.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r448.view.recordStatus == "update" && ctx_r448.isSaved("first_name", ctx_r448.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_9_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_9_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_9_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r366 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r366.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r366.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r366.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r458 = i0.ɵɵnextContext(2).index;
        const ctx_r461 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r461.findColumnDisplayValue(rowIndex_r458, "last_name", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r470 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r470); const ctx_r469 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r469.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r472 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 95)(2, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r472); const ctx_r471 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r471.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r472); const ctx_r473 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r473.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r457 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r462 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r462.hasError("last_name", "required", rowForm_r457));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r462.hasError("last_name", "maxlength", rowForm_r457));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r462.view.recordStatus == "update" && ctx_r462.notSaved("last_name", rowForm_r457));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r462.view.recordStatus == "update" && ctx_r462.isSaved("last_name", rowForm_r457));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r457 = i0.ɵɵnextContext().$implicit;
        const ctx_r459 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r459.excelEditing == false && rowForm_r457.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r459.excelEditing == true || rowForm_r457.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r459.excelEditing == false && rowForm_r457.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_11_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r457 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r457);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r457.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_12_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r476 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r476.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r483 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r483); const ctx_r482 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r482.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r485 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r485); const ctx_r484 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r484.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r485); const ctx_r486 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r486.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r478 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r478.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r478.view.recordStatus == "update" && ctx_r478.notSaved("last_name", ctx_r478.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r478.view.recordStatus == "update" && ctx_r478.isSaved("last_name", ctx_r478.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_12_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_12_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_12_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r368 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r368.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r488 = i0.ɵɵnextContext(2).index;
        const ctx_r491 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r491.findColumnDisplayValue(rowIndex_r488, "position", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 54);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r496 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r496.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r496.id_display_value, "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 99)(2, "mat-select", 100);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 11);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r492 = i0.ɵɵnextContext(4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r492.lists.list5176.items));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_4_Template, 5, 3, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r487 = i0.ɵɵnextContext().$implicit;
        const ctx_r489 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r489.excelEditing == false && rowForm_r487.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r489.excelEditing == true || rowForm_r487.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r489.excelEditing == false && rowForm_r487.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_14_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r487 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r487);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r487.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_15_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_15_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r498 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r498.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_15_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 54);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r503 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r503.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r503.id_display_value, "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 102);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_15_div_4_mat_option_5_Template, 2, 2, "mat-option", 11);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r500 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r500.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r500.lists.list5176.items));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_15_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_15_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_15_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r370 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r370.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r370.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r370.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r505 = i0.ɵɵnextContext(2).index;
        const ctx_r508 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r508.findColumnDisplayValue(rowIndex_r505, "join_date", "none", "date"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r517 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r517); const ctx_r516 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r516.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r519 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 103)(2, "input", 104);
        i0.ɵɵlistener("focus", function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r519); const _r512 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r512.open()); })("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r519); const ctx_r520 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r520.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r519); const ctx_r521 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r521.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 105)(4, "mat-datepicker", null, 106);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(7, dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(8, dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 51);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r512 = i0.ɵɵreference(5);
        const rowForm_r504 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r509 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r512);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r512);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r509.view.recordStatus == "update" && ctx_r509.notSaved("join_date", rowForm_r504));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r509.view.recordStatus == "update" && ctx_r509.isSaved("join_date", rowForm_r504));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r509.hasError("join_date", "required", rowForm_r504));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_4_Template, 9, 6, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r504 = i0.ɵɵnextContext().$implicit;
        const ctx_r506 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r506.excelEditing == false && rowForm_r504.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r506.excelEditing == true || rowForm_r504.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r506.excelEditing == false && rowForm_r504.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_17_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r504 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r504);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r504.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Join Date \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_18_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r524 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r524.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Join Date");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r531 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r531); const ctx_r530 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r530.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r533 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Join Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r533); const ctx_r532 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r532.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r533); const ctx_r534 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r534.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r526 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r526.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Join Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r526.view.recordStatus == "update" && ctx_r526.notSaved("join_date", ctx_r526.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r526.view.recordStatus == "update" && ctx_r526.isSaved("join_date", ctx_r526.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_18_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_18_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_18_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r372 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r372.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r372.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r372.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r536 = i0.ɵɵnextContext(2).index;
        const ctx_r539 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r539.findColumnDisplayValue(rowIndex_r536, "color", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r547 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r547); const ctx_r546 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r546.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r549 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r549); const ctx_r548 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r548.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r549); const ctx_r550 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r550.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r535 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r540 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r540.hasError("color", "maxlength", rowForm_r535));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r540.view.recordStatus == "update" && ctx_r540.notSaved("color", rowForm_r535));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r540.view.recordStatus == "update" && ctx_r540.isSaved("color", rowForm_r535));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_4_Template, 6, 4, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r535 = i0.ɵɵnextContext().$implicit;
        const ctx_r537 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r537.excelEditing == false && rowForm_r535.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r537.excelEditing == true || rowForm_r535.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r537.excelEditing == false && rowForm_r535.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_20_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r535 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r535);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r535.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Color ");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Color");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r559 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r559); const ctx_r558 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r558.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r561 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Color");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r561); const ctx_r560 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r560.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r561); const ctx_r562 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r562.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r555 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r555.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.view.recordStatus == "update" && ctx_r555.notSaved("color", ctx_r555.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.view.recordStatus == "update" && ctx_r555.isSaved("color", ctx_r555.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_21_div_2_Template, 2, 0, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_21_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_21_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r374 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r374.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r374.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r374.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r568 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 113);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_23_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r568); const row_r566 = restoredCtx.ngIf; const ctx_r567 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r567.navigationService.goTo("dibexStaffForm", "", "?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=" + row_r566.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r567 })); });
        i0.ɵɵelementStart(2, "span", 8);
        i0.ɵɵtext(3, "Expr Fill In");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "Expr Fill In");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_23_ng_container_1_Template, 4, 1, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r563 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r563);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r563.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68)(2, "div", 84);
        i0.ɵɵtext(3, " Expr Fill In ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r570 = i0.ɵɵnextContext(2).index;
        const ctx_r573 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r573.findColumnDisplayValue(rowIndex_r570, "staff_code", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 10 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r582 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r582); const ctx_r581 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r581.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r584 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r584); const ctx_r583 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r583.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r584); const ctx_r585 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r585.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r569 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r574 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r574.hasError("staff_code", "required", rowForm_r569));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r574.hasError("staff_code", "maxlength", rowForm_r569));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r574.view.recordStatus == "update" && ctx_r574.notSaved("staff_code", rowForm_r569));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r574.view.recordStatus == "update" && ctx_r574.isSaved("staff_code", rowForm_r569));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r569 = i0.ɵɵnextContext().$implicit;
        const ctx_r571 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r571.excelEditing == false && rowForm_r569.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r571.excelEditing == true || rowForm_r569.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r571.excelEditing == false && rowForm_r569.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_26_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r569 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r569);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r569.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Staff Code \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_27_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r588 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r588.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Staff Code");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r595 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r595); const ctx_r594 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r594.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r597 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Staff Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r597); const ctx_r596 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r596.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r597); const ctx_r598 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r598.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r590 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r590.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Staff Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r590.view.recordStatus == "update" && ctx_r590.notSaved("staff_code", ctx_r590.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r590.view.recordStatus == "update" && ctx_r590.isSaved("staff_code", ctx_r590.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_27_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_27_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_27_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r378 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r378.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r600 = i0.ɵɵnextContext(2).index;
        const ctx_r603 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r603.findColumnDisplayValue(rowIndex_r600, "email", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 200 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r612 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r612); const ctx_r611 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r611.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r614 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r614); const ctx_r613 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r613.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r614); const ctx_r615 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r615.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r599 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r604 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r604.hasError("email", "required", rowForm_r599));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r604.hasError("email", "maxlength", rowForm_r599));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r604.view.recordStatus == "update" && ctx_r604.notSaved("email", rowForm_r599));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r604.view.recordStatus == "update" && ctx_r604.isSaved("email", rowForm_r599));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r599 = i0.ɵɵnextContext().$implicit;
        const ctx_r601 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r601.excelEditing == false && rowForm_r599.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r601.excelEditing == true || rowForm_r599.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r601.excelEditing == false && rowForm_r599.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_29_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r599 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r599);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r599.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Email \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_30_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r618 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r618.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r625 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r625); const ctx_r624 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r624.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r627 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r627); const ctx_r626 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r626.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r627); const ctx_r628 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r628.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r620 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r620.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r620.view.recordStatus == "update" && ctx_r620.notSaved("email", ctx_r620.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r620.view.recordStatus == "update" && ctx_r620.isSaved("email", ctx_r620.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_30_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_30_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_30_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r380 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r380.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r380.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r380.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 72);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r630 = i0.ɵɵnextContext(2).index;
        const ctx_r633 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r633.findColumnDisplayValue(rowIndex_r630, "mobile", "none", "text"), "");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r642 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r642); const ctx_r641 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r641.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r644 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 72)(1, "mat-form-field", 109)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r644); const ctx_r643 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r643.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r644); const ctx_r645 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r645.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 51);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r629 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r634 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r634.hasError("mobile", "required", rowForm_r629));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r634.hasError("mobile", "maxlength", rowForm_r629));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r634.view.recordStatus == "update" && ctx_r634.notSaved("mobile", rowForm_r629));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r634.view.recordStatus == "update" && ctx_r634.isSaved("mobile", rowForm_r629));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 69)(2, "span", 70);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_3_Template, 2, 1, "span", 71);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_4_Template, 7, 5, "span", 71);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_span_5_Template, 1, 0, "span", 51);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r629 = i0.ɵɵnextContext().$implicit;
        const ctx_r631 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r631.excelEditing == false && rowForm_r629.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r631.excelEditing == true || rowForm_r629.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r631.excelEditing == false && rowForm_r629.get("__edit").value === false);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_32_ng_container_1_Template, 6, 3, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r629 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r629);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r629.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 86);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 84);
        i0.ɵɵtext(1, " Mobile \u00A0");
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_33_div_2_span_2_Template, 2, 0, "span", 85);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r648 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r648.editorOpen);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r655 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 78);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r655); const ctx_r654 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r654.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r657 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 88)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r657); const ctx_r656 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r656.searchGrid(false)); })("keydown.esc", function dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r657); const ctx_r658 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r658.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 75);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r650 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r650.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r650.view.recordStatus == "update" && ctx_r650.notSaved("mobile", ctx_r650.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r650.view.recordStatus == "update" && ctx_r650.isSaved("mobile", ctx_r650.model.$formGroup));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 67)(1, "div", 68);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_th_33_div_2_Template, 3, 1, "div", 81);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_33_div_3_Template, 2, 0, "div", 82);
        i0.ɵɵtemplate(4, dibexDibNgServicesGridComponent_ng_template_87_th_33_div_4_Template, 7, 4, "div", 83);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r382 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r382.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r382.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r382.showSearch);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_35_ng_container_1_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r666 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 125);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_35_ng_container_1_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r666); const rowForm_r659 = i0.ɵɵnextContext(2).$implicit; const ctx_r664 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r664.editRow(rowForm_r659)); });
        i0.ɵɵelement(1, "dib-icon", 126);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 123);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_td_35_ng_container_1_button_3_Template, 2, 4, "button", 124);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r662 = ctx.ngIf;
        const rowForm_r659 = i0.ɵɵnextContext().$implicit;
        const ctx_r661 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5270");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r662.__new == true || ctx_r661.excelEditing == true && ctx_r661.gridExcelEditingAutoSave == false && rowForm_r659.dirty == true);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_35_ng_container_1_Template, 4, 2, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r659 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r659);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r659.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 67);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_38_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
        const _r675 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 128);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_38_ng_container_1_button_1_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r675); const rowForm_r668 = i0.ɵɵnextContext(2).$implicit; const ctx_r673 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r673.editRow(rowForm_r668)); });
        i0.ɵɵelement(1, "dib-icon", 126);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Save changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_38_ng_container_1_button_1_Template, 2, 4, "button", 127);
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r671 = ctx.ngIf;
        const rowForm_r668 = i0.ɵɵnextContext().$implicit;
        const ctx_r670 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", row_r671.__new == true || ctx_r670.excelEditing == true && ctx_r670.gridExcelEditingAutoSave == false && rowForm_r668.dirty == true);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_td_38_ng_container_1_Template, 2, 1, "ng-container", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r668 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r668);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r668.getRawValue());
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 67);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_41_Template(rf, ctx) { if (rf & 1) {
        const _r678 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 60)(1, "mat-checkbox", 152);
        i0.ɵɵlistener("change", function dibexDibNgServicesGridComponent_ng_template_87_th_41_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r678); const ctx_r677 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r677.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r387 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r387.masterIsChecked)("indeterminate", ctx_r387.masterIsIndeterminate);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_td_42_Template(rf, ctx) { if (rf & 1) {
        const _r682 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 153)(1, "mat-checkbox", 63);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_td_42_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexDibNgServicesGridComponent_ng_template_87_td_42_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r682); const row_r679 = restoredCtx.$implicit; const ctx_r681 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r681.selection.toggle(row_r679) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r679 = ctx.$implicit;
        const ctx_r388 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r388.isHighlighted(row_r679));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_44_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 131);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 154);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_th_44_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 130);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r389 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r389.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r389.busy);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_46_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r684 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r684.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132);
        i0.ɵɵtemplate(1, dibexDibNgServicesGridComponent_ng_template_87_th_46_span_1_Template, 2, 1, "span", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r390 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r390.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r390.busy && ctx_r390.tableDataSource.data.length == 0);
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_tr_47_Template(rf, ctx) { if (rf & 1) {
        const _r687 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 155);
        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_ng_template_87_tr_47_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r687); const row_r685 = restoredCtx.$implicit; const ctx_r686 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r686.rowClick(row_r685, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r685 = ctx.$implicit;
        const ctx_r391 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r391.isHighlighted(row_r685)));
    } }
    function dibexDibNgServicesGridComponent_ng_template_87_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 147);
        i0.ɵɵelementContainerStart(1, 29);
        i0.ɵɵtemplate(2, dibexDibNgServicesGridComponent_ng_template_87_td_2_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(3, dibexDibNgServicesGridComponent_ng_template_87_th_3_Template, 4, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 32);
        i0.ɵɵtemplate(5, dibexDibNgServicesGridComponent_ng_template_87_td_5_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(6, dibexDibNgServicesGridComponent_ng_template_87_th_6_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 33);
        i0.ɵɵtemplate(8, dibexDibNgServicesGridComponent_ng_template_87_td_8_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(9, dibexDibNgServicesGridComponent_ng_template_87_th_9_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 34);
        i0.ɵɵtemplate(11, dibexDibNgServicesGridComponent_ng_template_87_td_11_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(12, dibexDibNgServicesGridComponent_ng_template_87_th_12_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 35);
        i0.ɵɵtemplate(14, dibexDibNgServicesGridComponent_ng_template_87_td_14_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(15, dibexDibNgServicesGridComponent_ng_template_87_th_15_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 36);
        i0.ɵɵtemplate(17, dibexDibNgServicesGridComponent_ng_template_87_td_17_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(18, dibexDibNgServicesGridComponent_ng_template_87_th_18_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 37);
        i0.ɵɵtemplate(20, dibexDibNgServicesGridComponent_ng_template_87_td_20_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(21, dibexDibNgServicesGridComponent_ng_template_87_th_21_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 38);
        i0.ɵɵtemplate(23, dibexDibNgServicesGridComponent_ng_template_87_td_23_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(24, dibexDibNgServicesGridComponent_ng_template_87_th_24_Template, 4, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 39);
        i0.ɵɵtemplate(26, dibexDibNgServicesGridComponent_ng_template_87_td_26_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(27, dibexDibNgServicesGridComponent_ng_template_87_th_27_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 40);
        i0.ɵɵtemplate(29, dibexDibNgServicesGridComponent_ng_template_87_td_29_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(30, dibexDibNgServicesGridComponent_ng_template_87_th_30_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 41);
        i0.ɵɵtemplate(32, dibexDibNgServicesGridComponent_ng_template_87_td_32_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(33, dibexDibNgServicesGridComponent_ng_template_87_th_33_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 42);
        i0.ɵɵtemplate(35, dibexDibNgServicesGridComponent_ng_template_87_td_35_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(36, dibexDibNgServicesGridComponent_ng_template_87_th_36_Template, 1, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 43);
        i0.ɵɵtemplate(38, dibexDibNgServicesGridComponent_ng_template_87_td_38_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(39, dibexDibNgServicesGridComponent_ng_template_87_th_39_Template, 1, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 26);
        i0.ɵɵtemplate(41, dibexDibNgServicesGridComponent_ng_template_87_th_41_Template, 2, 2, "th", 27);
        i0.ɵɵtemplate(42, dibexDibNgServicesGridComponent_ng_template_87_td_42_Template, 2, 1, "td", 148);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(43, 44);
        i0.ɵɵtemplate(44, dibexDibNgServicesGridComponent_ng_template_87_th_44_Template, 2, 2, "th", 149);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(45, 46);
        i0.ɵɵtemplate(46, dibexDibNgServicesGridComponent_ng_template_87_th_46_Template, 2, 2, "th", 47);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(47, dibexDibNgServicesGridComponent_ng_template_87_tr_47_Template, 1, 3, "tr", 150);
        i0.ɵɵpipe(48, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r43 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r43.selectionDataSource);
        i0.ɵɵadvance(47);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(48, 2, ctx_r43.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i18 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
                i6 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i19 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i20 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i14 = select_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexDibNgServicesGridComponent = class dibexDibNgServicesGridComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 212, name: 'dibexDibNgServicesGrid', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: 'dibexDibNgServicesGrid', configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = true; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['columnHeader', 'demoExprFillIn', 'id', 'first_name', 'last_name', 'position', 'join_date', 'color', 'staff_code', 'email', 'mobile',]);
                allColumnsToDisplay = new shared_3.DibArray(['columnHeader', 'demoExprFillIn', 'id', 'first_name', 'last_name', 'position', 'join_date', 'color', 'staff_code', 'email', 'mobile',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list5176 = new shared_3.DibEnumList(this.translationService, this.eventService, 'position', ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'], true);
                    this.lists.list5220 = new shared_3.DibEnumList(this.translationService, this.eventService, 'positionFilter', ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director'], false);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexDibNgServicesGrid');
                    this.containerName = 'dibexDibNgServicesGrid'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 5173, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, first_name: { itemId: 5174, type: 'text', fieldAlias: 'first_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'first_name', default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 5175, type: 'text', fieldAlias: 'last_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'last_name', default: '', dataType: 'text', contentType: 'text', changeUrl: false }, position: { itemId: 5176, type: 'text', fieldAlias: 'position', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: 'position', default: '@{value_self_positionFilter}', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'] }, join_date: { itemId: 5177, type: 'date', fieldAlias: 'join_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '@{dibDate}', dataType: 'date', contentType: 'date', changeUrl: false }, color: { itemId: 5178, type: 'text', fieldAlias: 'color', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, positionFilter: { itemId: 5220, type: 'text', fieldAlias: 'positionFilter', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: 'positionFilter', default: 'Employee', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director'] }, staff_code: { itemId: 5266, type: 'text', fieldAlias: 'staff_code', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(10)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 5267, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(200)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, mobile: { itemId: 5268, type: 'text', fieldAlias: 'mobile', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('position', this.model.modelItems.position.formControl);
                    this.model.$formGroup.addControl('join_date', this.model.modelItems.join_date.formControl);
                    this.model.$formGroup.addControl('color', this.model.modelItems.color.formControl);
                    this.model.$formGroup.addControl('positionFilter', this.model.modelItems.positionFilter.formControl);
                    this.model.modelItems.positionFilter.formControl.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy), operators_1.switchMap((value) => this.eventService.on(`clientData_${this.view.container.name}`).pipe(operators_1.take(1), operators_1.map((result) => { return value; })))).subscribe(value => { if (value !== '' && value != null) {
                        this.actionService.handle(this.containerActionReference(), 'positionFilter', 'changed');
                    } });
                    this.model.$formGroup.addControl('staff_code', this.model.modelItems.staff_code.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('mobile', this.model.modelItems.mobile.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "positionFilter", actionType: "changed", responseType: 'actions', submitUrl: "shared.action.reload-container?containerName=self", itemAlias: "positionFilter", waitForCompletion: false, containerName: "dibexDibNgServicesGrid", handlers: [] }, this.clientData, { itemEventId: 'ie253-dib', itemId: '5220', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['columnHeader', 'demoExprFillIn', 'id', 'first_name', 'last_name', 'position', 'join_date', 'color', 'staff_code', 'email', 'mobile']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexDibNgServicesGrid`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexDibNgServicesGrid`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexDibNgServicesGrid`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 5173 };
                    formDefaultsConfigs['first_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5174 };
                    formDefaultsConfigs['last_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5175 };
                    formDefaultsConfigs['position'] = { contentType: "text", type: "none", defaultValue: "@{value_self_positionFilter}", listId: 5176 };
                    formDefaultsConfigs['join_date'] = { contentType: "date", type: "none", defaultValue: "@{dibDate}", listId: 5177 };
                    formDefaultsConfigs['color'] = { contentType: "text", type: "none", defaultValue: "", listId: 5178 };
                    formDefaultsConfigs['staff_code'] = { contentType: "text", type: "none", defaultValue: "", listId: 5266 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 5267 };
                    formDefaultsConfigs['mobile'] = { contentType: "text", type: "none", defaultValue: "", listId: 5268 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 5173, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), first_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "first_name", "none", false, formDefaults['first_name'], 5174, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), last_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "last_name", "none", false, formDefaults['last_name'], 5175, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), position: new forms_2.FormControl(this.calculateInitialColumnValue(row, "position", "none", false, formDefaults['position'], 5176, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(255)], updateOn: 'blur' }), join_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "join_date", "none", false, formDefaults['join_date'], 5177, "date"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), color: new forms_2.FormControl(this.calculateInitialColumnValue(row, "color", "none", false, formDefaults['color'], 5178, "text"), { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), staff_code: new forms_2.FormControl(this.calculateInitialColumnValue(row, "staff_code", "none", false, formDefaults['staff_code'], 5266, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(10)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 5267, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(200)], updateOn: 'blur' }), mobile: new forms_2.FormControl(this.calculateInitialColumnValue(row, "mobile", "none", false, formDefaults['mobile'], 5268, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(30)], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list5176.dispose();
                    this.lists.list5220.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexDibNgServicesGrid', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexDibNgServicesGrid' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexDibNgServicesGridComponent_Factory(t) { return new (t || dibexDibNgServicesGridComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexDibNgServicesGridComponent, selectors: [["dibex-dib-ng-services-grid"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 89, vars: 41, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5162", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci5163", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["color", "accent", "mat-raised-button", "", "id", "ci5269", "dibComponent", "btnGridInlineAdd", "aria-label", "Add new record inside the grid", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/add.svg"], [1, "dibButtonCaption"], ["id", "ci5220", "dibComponent", "selectEnum", "dibListeners", "", "eventList", "  changed ", "actionId", "positionFilter", "item-alias", "positionFilter", "appearance", "standard", 2, "display", "flex", "flex-direction", "column", 3, "containerPortId"], ["formControlName", "positionFilter"], [3, "value", 4, "ngFor", "ngForOf"], ["id", "ci5169", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci5167", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5165", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci5166", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci5164", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci5168", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci5170", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], [2, "max-height", "300px", "overflow", "auto"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "demoExprFillIn"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["matColumnDef", "first_name"], ["matColumnDef", "last_name"], ["matColumnDef", "position"], ["matColumnDef", "join_date"], ["matColumnDef", "color"], ["matColumnDef", "btnExpFillIn"], ["matColumnDef", "staff_code"], ["matColumnDef", "email"], ["matColumnDef", "mobile"], ["matColumnDef", "columnHeader"], ["matColumnDef", "btnGridInlineSave"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexDibNgServicesGrid", ""], ["_selectedTable", ""], [3, "value"], ["mat-mini-fab", "", "color", "primary", "id", "ci5165", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5166", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci5168", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["color", "primary", "mat-raised-button", "", "id", "ci5226", "dibComponent", "button", "type", "button", 3, "click"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci5173", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText", "item-alias", "first_name"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "50", "required", "true", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5174", "dibComponent", "inputText", "item-alias", "first_name"], ["matInput", "", "type", "text", "formControlName", "first_name", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText", "item-alias", "last_name"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "50", "required", "true", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5175", "dibComponent", "inputText", "item-alias", "last_name"], ["matInput", "", "type", "text", "formControlName", "last_name", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "selectEnum", "item-alias", "position", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "position", "required", "true"], ["id", "ci5176", "dibComponent", "selectEnum", "item-alias", "position", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "position"], ["dibComponent", "datePicker"], ["matInput", "", "formControlName", "join_date", "name", "join_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker5177", ""], ["id", "ci5177", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "join_date", "name", "join_date", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "color", "maxlength", "50", "name", "color", 3, "keydown.enter", "keydown.esc"], ["id", "ci5178", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "color", "name", "color", 3, "keydown.enter", "keydown.esc"], ["color", "primary", "mat-raised-button", "", "dibComponent", "button", "type", "button", 3, "click"], ["matInput", "", "type", "text", "formControlName", "staff_code", "maxlength", "10", "required", "true", "name", "staff_code", 3, "keydown.enter", "keydown.esc"], ["id", "ci5266", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "staff_code", "name", "staff_code", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "200", "required", "true", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci5267", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "mobile", "maxlength", "30", "required", "true", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["id", "ci5268", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "mobile", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "columnHeader"], ["mat-mini-fab", "", "color", "primary", "id", "ci5271", "dibComponent", "btnGridInlineSave", "style", "  ", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci5271", "dibComponent", "btnGridInlineSave", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/save.svg"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "btnGridInlineSave", "style", "  ", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "btnGridInlineSave", "aria-label", "Save changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexDibNgServicesGridComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexDibNgServicesGridComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_Template_button_click_4_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_Template_button_click_6_listener() { return ctx.inlineAddNewRow(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementStart(8, "span", 8);
                        i0.ɵɵtext(9, "Inline Add");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(10, "mat-form-field", 9)(11, "mat-label");
                        i0.ɵɵtext(12, "Filter Position");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(13, "mat-select", 10);
                        i0.ɵɵtemplate(14, dibexDibNgServicesGridComponent_mat_option_14_Template, 2, 2, "mat-option", 11);
                        i0.ɵɵpipe(15, "async");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(16, "span", 12);
                        i0.ɵɵpipe(17, "safeHtml");
                        i0.ɵɵelementStart(18, "button", 13);
                        i0.ɵɵlistener("click", function dibexDibNgServicesGridComponent_Template_button_click_18_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(19, "dib-icon", 14);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(20, dibexDibNgServicesGridComponent_button_20_Template, 2, 4, "button", 15);
                        i0.ɵɵtemplate(21, dibexDibNgServicesGridComponent_button_21_Template, 2, 4, "button", 16);
                        i0.ɵɵelement(22, "span", 17);
                        i0.ɵɵtemplate(23, dibexDibNgServicesGridComponent_div_23_Template, 5, 3, "div", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(24, "mat-card", 19)(25, "mat-card-content", 20);
                        i0.ɵɵelementContainerStart(26, 3);
                        i0.ɵɵelementStart(27, "div", 21, 22)(29, "form", 23);
                        i0.ɵɵelementContainerStart(30, 24);
                        i0.ɵɵelementStart(31, "table", 25);
                        i0.ɵɵelementContainerStart(32, 26);
                        i0.ɵɵtemplate(33, dibexDibNgServicesGridComponent_th_33_Template, 2, 2, "th", 27);
                        i0.ɵɵtemplate(34, dibexDibNgServicesGridComponent_td_34_Template, 2, 1, "td", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(35, 29);
                        i0.ɵɵtemplate(36, dibexDibNgServicesGridComponent_td_36_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(37, dibexDibNgServicesGridComponent_th_37_Template, 4, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(38, 32);
                        i0.ɵɵtemplate(39, dibexDibNgServicesGridComponent_td_39_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(40, dibexDibNgServicesGridComponent_th_40_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(41, 33);
                        i0.ɵɵtemplate(42, dibexDibNgServicesGridComponent_td_42_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(43, dibexDibNgServicesGridComponent_th_43_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(44, 34);
                        i0.ɵɵtemplate(45, dibexDibNgServicesGridComponent_td_45_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(46, dibexDibNgServicesGridComponent_th_46_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(47, 35);
                        i0.ɵɵtemplate(48, dibexDibNgServicesGridComponent_td_48_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(49, dibexDibNgServicesGridComponent_th_49_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(50, 36);
                        i0.ɵɵtemplate(51, dibexDibNgServicesGridComponent_td_51_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(52, dibexDibNgServicesGridComponent_th_52_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(53, 37);
                        i0.ɵɵtemplate(54, dibexDibNgServicesGridComponent_td_54_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(55, dibexDibNgServicesGridComponent_th_55_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(56, 38);
                        i0.ɵɵtemplate(57, dibexDibNgServicesGridComponent_td_57_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(58, dibexDibNgServicesGridComponent_th_58_Template, 4, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(59, 39);
                        i0.ɵɵtemplate(60, dibexDibNgServicesGridComponent_td_60_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(61, dibexDibNgServicesGridComponent_th_61_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(62, 40);
                        i0.ɵɵtemplate(63, dibexDibNgServicesGridComponent_td_63_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(64, dibexDibNgServicesGridComponent_th_64_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(65, 41);
                        i0.ɵɵtemplate(66, dibexDibNgServicesGridComponent_td_66_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(67, dibexDibNgServicesGridComponent_th_67_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(68, 42);
                        i0.ɵɵtemplate(69, dibexDibNgServicesGridComponent_td_69_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(70, dibexDibNgServicesGridComponent_th_70_Template, 1, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(71, 43);
                        i0.ɵɵtemplate(72, dibexDibNgServicesGridComponent_td_72_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(73, dibexDibNgServicesGridComponent_th_73_Template, 1, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(74, 44);
                        i0.ɵɵtemplate(75, dibexDibNgServicesGridComponent_th_75_Template, 2, 2, "th", 45);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(76, 46);
                        i0.ɵɵtemplate(77, dibexDibNgServicesGridComponent_th_77_Template, 2, 2, "th", 47);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(78, dibexDibNgServicesGridComponent_ng_container_78_Template, 3, 3, "ng-container", 48);
                        i0.ɵɵtemplate(79, dibexDibNgServicesGridComponent_tr_79_Template, 1, 3, "tr", 49);
                        i0.ɵɵtemplate(80, dibexDibNgServicesGridComponent_tr_80_Template, 1, 3, "tr", 49);
                        i0.ɵɵtemplate(81, dibexDibNgServicesGridComponent_tr_81_Template, 1, 4, "tr", 50);
                        i0.ɵɵpipe(82, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(83, dibexDibNgServicesGridComponent_83_Template, 1, 1, null, 51);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(84, "div", null, 52);
                        i0.ɵɵtemplate(86, dibexDibNgServicesGridComponent_mat_toolbar_86_Template, 6, 3, "mat-toolbar", 51);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(87, dibexDibNgServicesGridComponent_ng_template_87_Template, 49, 4, "ng-template", null, 53, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(37, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5162");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Add new record inside the grid")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵattribute("aria-label", "Inline Add");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(15, 31, ctx.lists.list5220.items));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(17, 33, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5170");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(47);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(39, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(40, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(82, 35, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibListenersDirective, i2.DibRemoveFocusDirective, i6.MatOption, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatSelect, i15.MatToolbar, i15.MatToolbarRow, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i18.MatTable, i18.MatHeaderCellDef, i18.MatHeaderRowDef, i18.MatColumnDef, i18.MatCellDef, i18.MatRowDef, i18.MatHeaderCell, i18.MatCell, i18.MatHeaderRow, i18.MatRow, i19.MatSort, i19.MatSortHeader, i20.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexDibNgServicesGrid'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexDibNgServicesGridComponent.prototype, "reloadContainer", null);
            exports_1("dibexDibNgServicesGridComponent", dibexDibNgServicesGridComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexDibNgServicesGridComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-dib-ng-services-grid', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 6px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  " id=ci5162 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5162'" ><button   mat-mini-fab color=primary  id=ci5163 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button color=accent  mat-raised-button id=ci5269 dibComponent=btnGridInlineAdd   style="  " aria-label="Add new record inside the grid"  [matTooltip]="'Add new record inside the grid'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="inlineAddNewRow()"  [attr.aria-label]="'Inline Add'"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/add.svg"></dib-icon><span class=dibButtonCaption >Inline Add</span></button><mat-form-field  id=ci5220 dibComponent=selectEnum  dibListeners eventList="  changed " [containerPortId]="containerActionReference()" actionId=positionFilter   style="  display:flex; flex-direction: column;  "  item-alias=positionFilter   appearance=standard   ><mat-label>Filter Position</mat-label><mat-select formControlName=positionFilter    ><mat-option *ngFor="let item of lists.list5220.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field><span  id=ci5169 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci5167 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5165 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5166 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci5164 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci5168 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Grid: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5170 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5170'" ><!-- <div style="max-height:300px; overflow:auto;" dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll style="max-height:300px; overflow:auto;" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=demoExprFillIn  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'5172'" ><button  color=primary  mat-raised-button id=ci5226 dibComponent=button   (click)="navigationService.goTo(  'dibexStaffForm',  'main',  '?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=' + row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  "  [attr.aria-label]="'Expr Fill In'"  type=button  ><span class=dibButtonCaption >Expr Fill In</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Demo  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5173 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  "  item-alias=first_name  ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5174 dibComponent=inputText   style="  "  item-alias=first_name  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  "  item-alias=last_name  ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5175 dibComponent=inputText   style="  "  item-alias=last_name  ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list5176.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5176 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list5176.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=join_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'join_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5177"   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (focus)="datePicker5177.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5177" ></mat-datepicker-toggle><mat-datepicker #datePicker5177 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', rowForm)" matSuffix >done_all</mat-icon><mat-error *ngIf="hasError('join_date','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Join Date  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Join Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5177 dibComponent=inputText   style="  " ><mat-label >Join Date</mat-label><input   matInput  type=text   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=color  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'color','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=color   maxlength='50'  name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('color','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Color  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Color</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5178 dibComponent=inputText   style="  " ><mat-label >Color</mat-label><input   matInput  type=text   formControlName=color   name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=btnExpFillIn  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  color=primary  mat-raised-button dibComponent=button   (click)="navigationService.goTo(  'dibexStaffForm',  '',  '?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=' + row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  "  [attr.aria-label]="'Expr Fill In'"  type=button  ><span class=dibButtonCaption >Expr Fill In</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div mat-sort-header> Expr Fill In  </div></div></th></ng-container><ng-container matColumnDef=staff_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'staff_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=staff_code   maxlength='10'  required=true  name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('staff_code','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('staff_code','maxlength',rowForm)">Please enter 10 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Staff Code  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Staff Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5266 dibComponent=inputText   style="  " ><mat-label >Staff Code</mat-label><input   matInput  type=text   formControlName=staff_code   name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='200'  required=true  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5267 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='30'  required=true  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5268 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><ng-container [dibPort]="'5270'" ><button   mat-mini-fab color=primary  id=ci5271 dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/save.svg"></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridInlineSave  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button   mat-mini-fab color=primary  dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/save.svg"></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexDibNgServicesGrid><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=demoExprFillIn  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'5172'" ><button  color=primary  mat-raised-button id=ci5226 dibComponent=button   (click)="navigationService.goTo(  'dibexStaffForm',  'main',  '?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=' + row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  "  [attr.aria-label]="'Expr Fill In'"  type=button  ><span class=dibButtonCaption >Expr Fill In</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Demo  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5173 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  "  item-alias=first_name  ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5174 dibComponent=inputText   style="  "  item-alias=first_name  ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  "  item-alias=last_name  ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5175 dibComponent=inputText   style="  "  item-alias=last_name  ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list5176.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci5176 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  item-alias=position   ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list5176.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=join_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'join_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5177"   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (focus)="datePicker5177.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5177" ></mat-datepicker-toggle><mat-datepicker #datePicker5177 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', rowForm)" matSuffix >done_all</mat-icon><mat-error *ngIf="hasError('join_date','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Join Date  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Join Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5177 dibComponent=inputText   style="  " ><mat-label >Join Date</mat-label><input   matInput  type=text   formControlName=join_date   name=join_date   [attr.aria-label]="'Join Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('join_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('join_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=color  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'color','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=color   maxlength='50'  name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('color','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Color  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Color</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5178 dibComponent=inputText   style="  " ><mat-label >Color</mat-label><input   matInput  type=text   formControlName=color   name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=btnExpFillIn  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  color=primary  mat-raised-button dibComponent=button   (click)="navigationService.goTo(  'dibexStaffForm',  '',  '?dibexStaffForm.selectedPosition=@{value_self_positionFilter}&primary_id=' + row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  "  [attr.aria-label]="'Expr Fill In'"  type=button  ><span class=dibButtonCaption >Expr Fill In</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div mat-sort-header> Expr Fill In  </div></div></th></ng-container><ng-container matColumnDef=staff_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'staff_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=staff_code   maxlength='10'  required=true  name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('staff_code','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('staff_code','maxlength',rowForm)">Please enter 10 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Staff Code  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Staff Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5266 dibComponent=inputText   style="  " ><mat-label >Staff Code</mat-label><input   matInput  type=text   formControlName=staff_code   name=staff_code   [attr.aria-label]="'Staff Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('staff_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('staff_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='200'  required=true  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 200 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5267 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='30'  required=true  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5268 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  " dibComponent=columnHeader  ><ng-container [dibPort]="'5270'" ><button   mat-mini-fab color=primary  id=ci5271 dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/save.svg"></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridInlineSave  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button   mat-mini-fab color=primary  dibComponent=btnGridInlineSave   style="  " aria-label="Save changes"  [matTooltip]="'Save changes'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="editRow(rowForm)"   *ngIf="(row.__new==true || (excelEditing == true && gridExcelEditingAutoSave == false && rowForm.dirty == true))"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/save.svg"></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, select_1.MatSelectModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexDibNgServicesGridModule = class dibexDibNgServicesGridModule {
                static entry = dibexDibNgServicesGridComponent;
                static ɵfac = function dibexDibNgServicesGridModule_Factory(t) { return new (t || dibexDibNgServicesGridModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexDibNgServicesGridModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexDibNgServicesGridModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexDibNgServicesGridModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexDibNgServicesGridComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexDibNgServicesGridModule, { declarations: [dibexDibNgServicesGridComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, select_1.MatSelectModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
