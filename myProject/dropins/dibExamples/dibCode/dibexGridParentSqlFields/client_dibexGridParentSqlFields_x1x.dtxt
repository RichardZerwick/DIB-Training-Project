System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@ngbracket/ngx-layout/extended", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexGridParentSqlFieldsComponent, containerModules, dibexGridParentSqlFieldsModule;
    var __moduleName = context_1 && context_1.id;
    function dibexGridParentSqlFieldsComponent_button_17_Template(rf, ctx) { if (rf & 1) {
        const _r30 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 49);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_button_17_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r30); const ctx_r29 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r29.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 50);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridParentSqlFieldsComponent_button_18_Template(rf, ctx) { if (rf & 1) {
        const _r32 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 51);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_button_18_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r32); const ctx_r31 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r31.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 52);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridParentSqlFieldsComponent_div_20_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r33.page.toRecord, "\u00A0of\u00A0", ctx_r33.page.records, "");
    } }
    function dibexGridParentSqlFieldsComponent_div_20_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r34.page.totalRecords, ")");
    } }
    function dibexGridParentSqlFieldsComponent_div_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 53);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_div_20_span_2_Template, 2, 2, "span", 46);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_div_20_span_4_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Parent and Other Fields on Grids: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexGridParentSqlFieldsComponent_th_30_Template(rf, ctx) { if (rf & 1) {
        const _r36 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 55);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_th_30_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r36); const ctx_r35 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r35.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexGridParentSqlFieldsComponent_td_31_Template(rf, ctx) { if (rf & 1) {
        const _r40 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 56)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_td_31_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridParentSqlFieldsComponent_td_31_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r40); const row_r37 = restoredCtx.$implicit; const ctx_r39 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r39.selection.toggle(row_r37) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r37 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r37));
    } }
    function dibexGridParentSqlFieldsComponent_td_33_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 59);
        i0.ɵɵelementContainer(2, 5);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4499");
    } }
    function dibexGridParentSqlFieldsComponent_td_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_td_33_ng_container_1_Template, 3, 1, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r41 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r41);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r41.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_th_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 60);
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r46 = i0.ɵɵnextContext(2).index;
        const ctx_r49 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r49.findColumnDisplayValue(rowIndex_r46, "id", "none", "number"), "");
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r58 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r58); const ctx_r57 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r57.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 66);
        i0.ɵɵelement(2, "input", 67);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r45 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r50 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.hasError("id", "required", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.view.recordStatus == "update" && ctx_r50.notSaved("id", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.view.recordStatus == "update" && ctx_r50.isSaved("id", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.isInvalid("id", rowForm_r45));
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_td_36_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_4_Template, 7, 5, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r45 = i0.ɵɵnextContext().$implicit;
        const ctx_r47 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == false && rowForm_r45.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == true || rowForm_r45.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == false && rowForm_r45.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_td_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_td_36_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r45 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r45);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r45.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_th_37_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_37_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_37_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r61 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r61.editorOpen);
    } }
    function dibexGridParentSqlFieldsComponent_th_37_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_37_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r68 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_th_37_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r68); const ctx_r67 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r67.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_37_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_37_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r70 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_th_37_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r69 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r69.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_th_37_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r71 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r71.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_th_37_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_th_37_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r63 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r63.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r63.view.recordStatus == "update" && ctx_r63.notSaved("id", ctx_r63.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r63.view.recordStatus == "update" && ctx_r63.isSaved("id", ctx_r63.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_th_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_37_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_th_37_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_th_37_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_td_39_ng_container_1_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r75 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r75.main_contact_display_value, "");
    } }
    function dibexGridParentSqlFieldsComponent_td_39_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r75 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r75.main_contact, "");
    } }
    function dibexGridParentSqlFieldsComponent_td_39_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 86);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_td_39_ng_container_1_span_2_Template, 2, 1, "span", 46);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_39_ng_container_1_span_3_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r75 = ctx.ngIf;
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !!row_r75 && !!row_r75.main_contact_display_value);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !!row_r75 && !row_r75.main_contact_display_value);
    } }
    function dibexGridParentSqlFieldsComponent_td_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_td_39_ng_container_1_Template, 4, 2, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r72 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r72);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r72.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_th_40_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_40_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Main Contact (SQL Insert Field) \u00A0");
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_40_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r80 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r80.editorOpen);
    } }
    function dibexGridParentSqlFieldsComponent_th_40_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Main Contact (SQL Insert Field)");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_40_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r85 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 87)(2, "mat-label");
        i0.ɵɵtext(3, "Main Contact (SQL Insert Field)");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 88);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_th_40_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r85); const ctx_r84 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r84.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_th_40_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r85); const ctx_r86 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r86.clearSearch()); });
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r82 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r82.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Main Contact (SQL Insert Field)");
    } }
    function dibexGridParentSqlFieldsComponent_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_40_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_th_40_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_th_40_div_4_Template, 5, 2, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r88 = i0.ɵɵnextContext(2).index;
        const ctx_r91 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r91.findColumnDisplayValue(rowIndex_r88, "mobile", "none", "text"), "");
    } }
    function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r99 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r99); const ctx_r98 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r98.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r101 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 90)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r101); const ctx_r100 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r100.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r101); const ctx_r102 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r102.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r87 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r92 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.hasError("mobile", "maxlength", rowForm_r87));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.view.recordStatus == "update" && ctx_r92.notSaved("mobile", rowForm_r87));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r92.view.recordStatus == "update" && ctx_r92.isSaved("mobile", rowForm_r87));
    } }
    function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_td_42_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 89);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_4_Template, 6, 4, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_42_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r87 = i0.ɵɵnextContext().$implicit;
        const ctx_r89 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r89.excelEditing == false && rowForm_r87.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r89.excelEditing == true || rowForm_r87.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r89.excelEditing == false && rowForm_r87.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_td_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_td_42_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r87 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r87);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r87.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_th_43_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Mobile (Parent Field) ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_43_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Mobile (Parent Field)");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_43_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r111 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_th_43_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r111); const ctx_r110 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r110.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_43_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_43_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r113 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile (Parent Field)");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_th_43_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r113); const ctx_r112 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r112.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_th_43_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r113); const ctx_r114 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r114.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_th_43_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_th_43_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r107 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r107.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r107.view.recordStatus == "update" && ctx_r107.notSaved("mobile", ctx_r107.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r107.view.recordStatus == "update" && ctx_r107.isSaved("mobile", ctx_r107.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_43_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_th_43_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_th_43_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r116 = i0.ɵɵnextContext(2).index;
        const ctx_r119 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r119.findColumnDisplayValue(rowIndex_r116, "phone_w", "none", "text"), "");
    } }
    function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r127 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r127); const ctx_r126 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r126.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r129 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 90)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r129); const ctx_r128 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r128.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r129); const ctx_r130 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r130.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r115 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r120 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone W (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.hasError("phone_w", "maxlength", rowForm_r115));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.notSaved("phone_w", rowForm_r115));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.isSaved("phone_w", rowForm_r115));
    } }
    function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_td_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 89);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_4_Template, 6, 4, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_45_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r115 = i0.ɵɵnextContext().$implicit;
        const ctx_r117 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r117.excelEditing == false && rowForm_r115.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r117.excelEditing == true || rowForm_r115.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r117.excelEditing == false && rowForm_r115.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_td_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_td_45_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r115 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r115);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r115.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_th_46_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Phone W (Parent Field) ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_46_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Phone W (Parent Field)");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_46_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r139 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_th_46_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r139); const ctx_r138 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r138.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_46_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_46_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r141 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Phone W (Parent Field)");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_th_46_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r141); const ctx_r140 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r140.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_th_46_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r141); const ctx_r142 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r142.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_th_46_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_th_46_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r135 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r135.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone W (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r135.view.recordStatus == "update" && ctx_r135.notSaved("phone_w", ctx_r135.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r135.view.recordStatus == "update" && ctx_r135.isSaved("phone_w", ctx_r135.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_46_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_th_46_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_th_46_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r144 = i0.ɵɵnextContext(2).index;
        const ctx_r147 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r147.findColumnDisplayValue(rowIndex_r144, "name", "none", "text"), "");
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r156 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r156); const ctx_r155 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r155.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r158 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 90)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r158); const ctx_r157 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r157.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r158); const ctx_r159 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r159.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r143 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r148 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r148.hasError("name", "required", rowForm_r143));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r148.hasError("name", "maxlength", rowForm_r143));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r148.view.recordStatus == "update" && ctx_r148.notSaved("name", rowForm_r143));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r148.view.recordStatus == "update" && ctx_r148.isSaved("name", rowForm_r143));
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_td_48_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 89);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_4_Template, 7, 5, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r143 = i0.ɵɵnextContext().$implicit;
        const ctx_r145 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r145.excelEditing == false && rowForm_r143.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r145.excelEditing == true || rowForm_r143.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r145.excelEditing == false && rowForm_r143.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_td_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_td_48_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r143 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r143);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r143.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_th_49_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_49_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_49_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r162 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r162.editorOpen);
    } }
    function dibexGridParentSqlFieldsComponent_th_49_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_49_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r169 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_th_49_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r169); const ctx_r168 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r168.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_49_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_th_49_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r171 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_th_49_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r171); const ctx_r170 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r170.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_th_49_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r171); const ctx_r172 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r172.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_th_49_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_th_49_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r164 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r164.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r164.view.recordStatus == "update" && ctx_r164.notSaved("name", ctx_r164.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r164.view.recordStatus == "update" && ctx_r164.isSaved("name", ctx_r164.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_th_49_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_th_49_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_th_49_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_th_51_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 102);
    } }
    function dibexGridParentSqlFieldsComponent_th_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 100);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_th_51_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r18 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r18.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r18.busy);
    } }
    function dibexGridParentSqlFieldsComponent_th_53_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r174 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r174.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridParentSqlFieldsComponent_th_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_th_53_span_1_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r19.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r19.busy && ctx_r19.tableDataSource.data.length == 0);
    } }
    function dibexGridParentSqlFieldsComponent_ng_container_54_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 105);
    } }
    function dibexGridParentSqlFieldsComponent_ng_container_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_container_54_tr_1_Template, 1, 0, "tr", 104);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r175 = ctx.$implicit;
        const ctx_r20 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r20.columnHeaders.getArray(column_r175).items$));
    } }
    function dibexGridParentSqlFieldsComponent_tr_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 106);
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r21.busy ? "visible" : "hidden"));
    } }
    function dibexGridParentSqlFieldsComponent_tr_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 106);
    } if (rf & 2) {
        const ctx_r22 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r22.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexGridParentSqlFieldsComponent_tr_57_Template(rf, ctx) { if (rf & 1) {
        const _r180 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 107);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_tr_57_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r180); const row_r177 = restoredCtx.$implicit; const ctx_r179 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r179.rowClick(row_r177, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r177 = ctx.$implicit;
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r23.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r23.isHighlighted(row_r177)));
    } }
    function dibexGridParentSqlFieldsComponent_59_ng_template_0_Template(rf, ctx) { }
    function dibexGridParentSqlFieldsComponent_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexGridParentSqlFieldsComponent_59_ng_template_0_Template, 0, 0, "ng-template", 108);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r27 = i0.ɵɵreference(64);
        i0.ɵɵproperty("ngTemplateOutlet", _r27);
    } }
    function dibexGridParentSqlFieldsComponent_mat_toolbar_62_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r186 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 114);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_mat_toolbar_62_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r186); const ctx_r185 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r185.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r182 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r182.numberOfSelectedItems + " ", "item", ctx_r182.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexGridParentSqlFieldsComponent_mat_toolbar_62_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_mat_toolbar_62_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_mat_toolbar_62_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r190 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 115);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_mat_toolbar_62_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r190); const ctx_r189 = i0.ɵɵnextContext(2); ctx_r189.gridShowClipboardDefault = !ctx_r189.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r189.gridShowClipboardDefault && ctx_r189.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_mat_toolbar_62_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 46);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_mat_toolbar_62_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 46);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r183 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r183.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r183.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r183.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexGridParentSqlFieldsComponent_mat_toolbar_62_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r193 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 116, 117);
        i0.ɵɵlistener("page", function dibexGridParentSqlFieldsComponent_mat_toolbar_62_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r193); const ctx_r192 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r192.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r184 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r184.page.totalRecords)("pageSize", ctx_r184.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexGridParentSqlFieldsComponent_mat_toolbar_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 109);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_mat_toolbar_62_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 110);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_mat_toolbar_62_button_3_Template, 4, 3, "button", 111);
        i0.ɵɵelement(4, "span", 112);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_mat_toolbar_62_mat_paginator_5_Template, 2, 4, "mat-paginator", 113);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r26 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r26.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r26.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", false);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 59);
        i0.ɵɵelementContainer(2, 5);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "4499");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_td_2_ng_container_1_Template, 3, 1, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r211 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r211);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r211.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 60);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r216 = i0.ɵɵnextContext(2).index;
        const ctx_r219 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r219.findColumnDisplayValue(rowIndex_r216, "id", "none", "number"), "");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r227 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r227); const ctx_r226 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r226.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r229 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 66)(2, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r229); const ctx_r228 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r228.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r229); const ctx_r230 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r230.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r215 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r220 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r220.hasError("id", "required", rowForm_r215));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r220.view.recordStatus == "update" && ctx_r220.notSaved("id", rowForm_r215));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r220.view.recordStatus == "update" && ctx_r220.isSaved("id", rowForm_r215));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_4_Template, 6, 4, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r215 = i0.ɵɵnextContext().$implicit;
        const ctx_r217 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r217.excelEditing == false && rowForm_r215.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r217.excelEditing == true || rowForm_r215.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r217.excelEditing == false && rowForm_r215.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r215 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r215);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r215.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r233 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r233.editorOpen);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r240 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r240); const ctx_r239 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r239.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r242 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 84)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r242); const ctx_r241 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r241.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r242); const ctx_r243 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r243.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r235 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r235.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r235.view.recordStatus == "update" && ctx_r235.notSaved("id", ctx_r235.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r235.view.recordStatus == "update" && ctx_r235.isSaved("id", ctx_r235.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_th_6_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r197 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r197.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r197.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r197.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_8_ng_container_1_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r247 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r247.main_contact_display_value, "");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r247 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r247.main_contact, "");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 86);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_td_8_ng_container_1_span_2_Template, 2, 1, "span", 46);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_8_ng_container_1_span_3_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r247 = ctx.ngIf;
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !!row_r247 && !!row_r247.main_contact_display_value);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !!row_r247 && !row_r247.main_contact_display_value);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_td_8_ng_container_1_Template, 4, 2, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r244 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r244);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r244.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Main Contact (SQL Insert Field) \u00A0");
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r252 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r252.editorOpen);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Main Contact (SQL Insert Field)");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r257 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 87)(2, "mat-label");
        i0.ɵɵtext(3, "Main Contact (SQL Insert Field)");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 88);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r257); const ctx_r256 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r256.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r257); const ctx_r258 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r258.clearSearch()); });
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r254 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r254.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Main Contact (SQL Insert Field)");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_th_9_div_4_Template, 5, 2, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r199 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r199.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r199.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r199.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r260 = i0.ɵɵnextContext(2).index;
        const ctx_r263 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r263.findColumnDisplayValue(rowIndex_r260, "mobile", "none", "text"), "");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r271 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r271); const ctx_r270 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r270.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r273 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 90)(2, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r273); const ctx_r272 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r272.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r273); const ctx_r274 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r274.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r259 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r264 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.hasError("mobile", "maxlength", rowForm_r259));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.view.recordStatus == "update" && ctx_r264.notSaved("mobile", rowForm_r259));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.view.recordStatus == "update" && ctx_r264.isSaved("mobile", rowForm_r259));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 89);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_4_Template, 6, 4, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r259 = i0.ɵɵnextContext().$implicit;
        const ctx_r261 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r261.excelEditing == false && rowForm_r259.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.excelEditing == true || rowForm_r259.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.excelEditing == false && rowForm_r259.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r259 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r259);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r259.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Mobile (Parent Field) ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Mobile (Parent Field)");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r283 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r283); const ctx_r282 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r282.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r285 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 92)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile (Parent Field)");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r285); const ctx_r284 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r284.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r285); const ctx_r286 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r286.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r279 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r279.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r279.view.recordStatus == "update" && ctx_r279.notSaved("mobile", ctx_r279.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r279.view.recordStatus == "update" && ctx_r279.isSaved("mobile", ctx_r279.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_th_12_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r201 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r201.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r201.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r201.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r288 = i0.ɵɵnextContext(2).index;
        const ctx_r291 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r291.findColumnDisplayValue(rowIndex_r288, "phone_w", "none", "text"), "");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r299 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r299); const ctx_r298 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r298.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r301 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 90)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r301); const ctx_r300 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r300.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r301); const ctx_r302 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r302.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r287 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r292 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone W (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.hasError("phone_w", "maxlength", rowForm_r287));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.view.recordStatus == "update" && ctx_r292.notSaved("phone_w", rowForm_r287));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.view.recordStatus == "update" && ctx_r292.isSaved("phone_w", rowForm_r287));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 89);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_4_Template, 6, 4, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r287 = i0.ɵɵnextContext().$implicit;
        const ctx_r289 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == false && rowForm_r287.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == true || rowForm_r287.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == false && rowForm_r287.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r287 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r287);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r287.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Phone W (Parent Field) ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Phone W (Parent Field)");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r311 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r311); const ctx_r310 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r310.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r313 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Phone W (Parent Field)");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r313); const ctx_r312 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r312.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r313); const ctx_r314 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r314.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r307 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r307.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone W (Parent Field)");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r307.view.recordStatus == "update" && ctx_r307.notSaved("phone_w", ctx_r307.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r307.view.recordStatus == "update" && ctx_r307.isSaved("phone_w", ctx_r307.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_th_15_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r203 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r203.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r203.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r203.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r316 = i0.ɵɵnextContext(2).index;
        const ctx_r319 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r319.findColumnDisplayValue(rowIndex_r316, "name", "none", "text"), "");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r328 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r328); const ctx_r327 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r327.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r330 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 90)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r330); const ctx_r329 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r329.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r330); const ctx_r331 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r331.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 46);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r315 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r320 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r320.hasError("name", "required", rowForm_r315));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r320.hasError("name", "maxlength", rowForm_r315));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r320.view.recordStatus == "update" && ctx_r320.notSaved("name", rowForm_r315));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r320.view.recordStatus == "update" && ctx_r320.isSaved("name", rowForm_r315));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 89);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_4_Template, 7, 5, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_span_5_Template, 1, 0, "span", 46);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r315 = i0.ɵɵnextContext().$implicit;
        const ctx_r317 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r317.excelEditing == false && rowForm_r315.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r317.excelEditing == true || rowForm_r315.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r317.excelEditing == false && rowForm_r315.get("__edit").value === false);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 58);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_ng_container_1_Template, 6, 3, "ng-container", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r315 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r315);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r315.getRawValue());
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 81);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_2_span_2_Template, 2, 0, "span", 80);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r334 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r334.editorOpen);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 82);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r341 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r341); const ctx_r340 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r340.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r343 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 83)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r343); const ctx_r342 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r342.searchGrid(false)); })("keydown.esc", function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r343); const ctx_r344 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r344.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r336 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r336.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r336.view.recordStatus == "update" && ctx_r336.notSaved("name", ctx_r336.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r336.view.recordStatus == "update" && ctx_r336.isSaved("name", ctx_r336.model.$formGroup));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 60)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_2_Template, 3, 1, "div", 76);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexGridParentSqlFieldsComponent_ng_template_63_th_18_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r205 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r205.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.showSearch);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_20_Template(rf, ctx) { if (rf & 1) {
        const _r346 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54)(1, "mat-checkbox", 123);
        i0.ɵɵlistener("change", function dibexGridParentSqlFieldsComponent_ng_template_63_th_20_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r346); const ctx_r345 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r345.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r206 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r206.masterIsChecked)("indeterminate", ctx_r206.masterIsIndeterminate);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_td_21_Template(rf, ctx) { if (rf & 1) {
        const _r350 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 124)(1, "mat-checkbox", 57);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_td_21_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridParentSqlFieldsComponent_ng_template_63_td_21_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r350); const row_r347 = restoredCtx.$implicit; const ctx_r349 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r349.selection.toggle(row_r347) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r347 = ctx.$implicit;
        const ctx_r207 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r207.isHighlighted(row_r347));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_23_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 102);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 125);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_th_23_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r208 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r208.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r208.busy);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_25_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r352 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r352.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_th_25_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 103);
        i0.ɵɵtemplate(1, dibexGridParentSqlFieldsComponent_ng_template_63_th_25_span_1_Template, 2, 1, "span", 46);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r209 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r209.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r209.busy && ctx_r209.tableDataSource.data.length == 0);
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_tr_26_Template(rf, ctx) { if (rf & 1) {
        const _r355 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 126);
        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_ng_template_63_tr_26_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r355); const row_r353 = restoredCtx.$implicit; const ctx_r354 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r354.rowClick(row_r353, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r353 = ctx.$implicit;
        const ctx_r210 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r210.isHighlighted(row_r353)));
    } }
    function dibexGridParentSqlFieldsComponent_ng_template_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 118);
        i0.ɵɵelementContainerStart(1, 29);
        i0.ɵɵtemplate(2, dibexGridParentSqlFieldsComponent_ng_template_63_td_2_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(3, dibexGridParentSqlFieldsComponent_ng_template_63_th_3_Template, 1, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 32);
        i0.ɵɵtemplate(5, dibexGridParentSqlFieldsComponent_ng_template_63_td_5_Template, 2, 2, "td", 33);
        i0.ɵɵtemplate(6, dibexGridParentSqlFieldsComponent_ng_template_63_th_6_Template, 5, 3, "th", 34);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 35);
        i0.ɵɵtemplate(8, dibexGridParentSqlFieldsComponent_ng_template_63_td_8_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(9, dibexGridParentSqlFieldsComponent_ng_template_63_th_9_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 36);
        i0.ɵɵtemplate(11, dibexGridParentSqlFieldsComponent_ng_template_63_td_11_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(12, dibexGridParentSqlFieldsComponent_ng_template_63_th_12_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 37);
        i0.ɵɵtemplate(14, dibexGridParentSqlFieldsComponent_ng_template_63_td_14_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(15, dibexGridParentSqlFieldsComponent_ng_template_63_th_15_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 38);
        i0.ɵɵtemplate(17, dibexGridParentSqlFieldsComponent_ng_template_63_td_17_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(18, dibexGridParentSqlFieldsComponent_ng_template_63_th_18_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 26);
        i0.ɵɵtemplate(20, dibexGridParentSqlFieldsComponent_ng_template_63_th_20_Template, 2, 2, "th", 27);
        i0.ɵɵtemplate(21, dibexGridParentSqlFieldsComponent_ng_template_63_td_21_Template, 2, 1, "td", 119);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 39);
        i0.ɵɵtemplate(23, dibexGridParentSqlFieldsComponent_ng_template_63_th_23_Template, 2, 2, "th", 120);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(24, 41);
        i0.ɵɵtemplate(25, dibexGridParentSqlFieldsComponent_ng_template_63_th_25_Template, 2, 2, "th", 42);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(26, dibexGridParentSqlFieldsComponent_ng_template_63_tr_26_Template, 1, 3, "tr", 121);
        i0.ɵɵpipe(27, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r28 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r28.selectionDataSource);
        i0.ɵɵadvance(26);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(27, 2, ctx_r28.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i15 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i16 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i17 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i6 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i9 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i14 = card_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i7_1) {
                i7 = i7_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexGridParentSqlFieldsComponent = class dibexGridParentSqlFieldsComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 180, name: 'dibexGridParentSqlFields', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*5117'] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 10, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'main_contact', 'mobile', 'phone_w',]);
                allColumnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'main_contact', 'mobile', 'phone_w',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexGridParentSqlFields');
                    this.containerName = 'dibexGridParentSqlFields'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 4500, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, main_contact: { itemId: 4502, type: 'text', fieldAlias: 'main_contact', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, mobile: { itemId: 4503, type: 'text', fieldAlias: 'mobile', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, phone_w: { itemId: 4504, type: 'text', fieldAlias: 'phone_w', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, name: { itemId: 8104, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('main_contact', this.model.modelItems.main_contact.formControl);
                    this.model.$formGroup.addControl('mobile', this.model.modelItems.mobile.formControl);
                    this.model.$formGroup.addControl('phone_w', this.model.modelItems.phone_w.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'id', 'name', 'main_contact', 'mobile', 'phone_w']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexGridParentSqlFields`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexGridParentSqlFields`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexGridParentSqlFields`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4500 };
                    formDefaultsConfigs['main_contact'] = { contentType: "text", type: "none", defaultValue: "", listId: 4502 };
                    formDefaultsConfigs['mobile'] = { contentType: "text", type: "none", defaultValue: "", listId: 4503 };
                    formDefaultsConfigs['phone_w'] = { contentType: "text", type: "none", defaultValue: "", listId: 4504 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 8104 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4500, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), main_contact: new forms_2.FormControl(this.calculateInitialColumnValue(row, "main_contact", "none", false, formDefaults['main_contact'], 4502, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(35)], updateOn: 'blur' }), mobile: new forms_2.FormControl(this.calculateInitialColumnValue(row, "mobile", "none", false, formDefaults['mobile'], 4503, "text"), { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), phone_w: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone_w", "none", false, formDefaults['phone_w'], 4504, "text"), { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 8104, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexGridParentSqlFields', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexGridParentSqlFields' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 10, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexGridParentSqlFieldsComponent_Factory(t) { return new (t || dibexGridParentSqlFieldsComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexGridParentSqlFieldsComponent, selectors: [["dibex-grid-parent-sql-fields"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 65, vars: 40, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5117", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexGridParentSqlFields", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci4487", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 0px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci4488", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci4489", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-raised-button", "", "color", "accent", "id", "ci4496", "dibComponent", "button", "type", "button", 3, "click"], [1, "dibButtonCaption"], ["id", "ci4495", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci4493", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4491", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci4492", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci4490", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci4494", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci4497", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; width:60px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:60px; ", 4, "matHeaderCellDef"], ["matColumnDef", "main_contact"], ["matColumnDef", "mobile"], ["matColumnDef", "phone_w"], ["matColumnDef", "name"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexGridParentSqlFields", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci4491", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4492", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci4494", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], ["mat-cell", "", 2, "padding", "2px", "width", "60px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell", 2, "width", "60px"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id", 2, "width", "60px !important"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "60px"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4500", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "sqlText"], ["id", "ci4502", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "main_contact", "name", "main_contact", 3, "keydown.enter", "keydown.esc"], [1, "dib-cell"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "mobile", "maxlength", "35", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["id", "ci4503", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "mobile", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone_w", "maxlength", "35", "name", "phone_w", 3, "keydown.enter", "keydown.esc"], ["id", "ci4504", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "phone_w", "name", "phone_w", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "80", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci8104", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexGridParentSqlFieldsComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexGridParentSqlFieldsComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "div", 4);
                        i0.ɵɵelementContainerStart(5, 5);
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_Template_button_click_6_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(8, "button", 8);
                        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_Template_button_click_8_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(9, "dib-icon", 9);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(10, "button", 10);
                        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_Template_button_click_10_listener($event) { return ctx.navigationService.goTo("dibexFormParentSqlFields", "main", "?record=first", { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx }); });
                        i0.ɵɵelementStart(11, "span", 11);
                        i0.ɵɵtext(12, "Form with Parent and Sql Insert Fields");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(13, "span", 12);
                        i0.ɵɵpipe(14, "safeHtml");
                        i0.ɵɵelementStart(15, "button", 13);
                        i0.ɵɵlistener("click", function dibexGridParentSqlFieldsComponent_Template_button_click_15_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(16, "dib-icon", 14);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(17, dibexGridParentSqlFieldsComponent_button_17_Template, 2, 4, "button", 15);
                        i0.ɵɵtemplate(18, dibexGridParentSqlFieldsComponent_button_18_Template, 2, 4, "button", 16);
                        i0.ɵɵelement(19, "span", 17);
                        i0.ɵɵtemplate(20, dibexGridParentSqlFieldsComponent_div_20_Template, 5, 3, "div", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(21, "mat-card", 19)(22, "mat-card-content", 20);
                        i0.ɵɵelementContainerStart(23, 5);
                        i0.ɵɵelementStart(24, "div", 21, 22)(26, "form", 23);
                        i0.ɵɵelementContainerStart(27, 24);
                        i0.ɵɵelementStart(28, "table", 25);
                        i0.ɵɵelementContainerStart(29, 26);
                        i0.ɵɵtemplate(30, dibexGridParentSqlFieldsComponent_th_30_Template, 2, 2, "th", 27);
                        i0.ɵɵtemplate(31, dibexGridParentSqlFieldsComponent_td_31_Template, 2, 1, "td", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(32, 29);
                        i0.ɵɵtemplate(33, dibexGridParentSqlFieldsComponent_td_33_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(34, dibexGridParentSqlFieldsComponent_th_34_Template, 1, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(35, 32);
                        i0.ɵɵtemplate(36, dibexGridParentSqlFieldsComponent_td_36_Template, 2, 2, "td", 33);
                        i0.ɵɵtemplate(37, dibexGridParentSqlFieldsComponent_th_37_Template, 5, 3, "th", 34);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(38, 35);
                        i0.ɵɵtemplate(39, dibexGridParentSqlFieldsComponent_td_39_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(40, dibexGridParentSqlFieldsComponent_th_40_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(41, 36);
                        i0.ɵɵtemplate(42, dibexGridParentSqlFieldsComponent_td_42_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(43, dibexGridParentSqlFieldsComponent_th_43_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(44, 37);
                        i0.ɵɵtemplate(45, dibexGridParentSqlFieldsComponent_td_45_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(46, dibexGridParentSqlFieldsComponent_th_46_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(47, 38);
                        i0.ɵɵtemplate(48, dibexGridParentSqlFieldsComponent_td_48_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(49, dibexGridParentSqlFieldsComponent_th_49_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(50, 39);
                        i0.ɵɵtemplate(51, dibexGridParentSqlFieldsComponent_th_51_Template, 2, 2, "th", 40);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(52, 41);
                        i0.ɵɵtemplate(53, dibexGridParentSqlFieldsComponent_th_53_Template, 2, 2, "th", 42);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(54, dibexGridParentSqlFieldsComponent_ng_container_54_Template, 3, 3, "ng-container", 43);
                        i0.ɵɵtemplate(55, dibexGridParentSqlFieldsComponent_tr_55_Template, 1, 3, "tr", 44);
                        i0.ɵɵtemplate(56, dibexGridParentSqlFieldsComponent_tr_56_Template, 1, 3, "tr", 44);
                        i0.ɵɵtemplate(57, dibexGridParentSqlFieldsComponent_tr_57_Template, 1, 4, "tr", 45);
                        i0.ɵɵpipe(58, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(59, dibexGridParentSqlFieldsComponent_59_Template, 1, 1, null, 46);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(60, "div", null, 47);
                        i0.ɵɵtemplate(62, dibexGridParentSqlFieldsComponent_mat_toolbar_62_Template, 6, 3, "mat-toolbar", 46);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(63, dibexGridParentSqlFieldsComponent_ng_template_63_Template, 28, 4, "ng-template", null, 48, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r25 = i0.ɵɵreference(61);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(36, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5117");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "4487");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵattribute("aria-label", "Form with Parent and Sql Insert Fields");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(14, 32, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4497");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r25);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(26);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(38, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(39, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(58, 34, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || false);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.MatButton, i6.MatMiniFabButton, i7.MatCheckbox, i8.MatFormField, i8.MatLabel, i8.MatError, i8.MatSuffix, i9.MatIcon, i10.MatInput, i11.MatProgressBar, i12.MatToolbar, i12.MatToolbarRow, i13.MatTooltip, i14.MatCard, i14.MatCardContent, i15.MatTable, i15.MatHeaderCellDef, i15.MatHeaderRowDef, i15.MatColumnDef, i15.MatCellDef, i15.MatRowDef, i15.MatHeaderCell, i15.MatCell, i15.MatHeaderRow, i15.MatRow, i16.MatSort, i16.MatSortHeader, i17.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexGridParentSqlFields'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexGridParentSqlFieldsComponent.prototype, "reloadContainer", null);
            exports_1("dibexGridParentSqlFieldsComponent", dibexGridParentSqlFieldsComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridParentSqlFieldsComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-grid-parent-sql-fields', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5117 dibComponent=subcontainer   ><ng-container [dibPort]="'5117'" parentContainerName=dibexGridParentSqlFields  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><div   style="  padding:5px 10px 0px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci4487 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4487'" ><button mat-mini-fab color=accent  id=ci4488 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"  [matTooltip]="'Delete selected record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button   mat-mini-fab color=accent  id=ci4489 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button  mat-raised-button color=accent  id=ci4496 dibComponent=button   (click)="navigationService.goTo(  'dibexFormParentSqlFields',  'main',  '?record=first',   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  "  [attr.aria-label]="'Form with Parent and Sql Insert Fields'"  type=button  ><span class=dibButtonCaption >Form with Parent and Sql Insert Fields</span></button><span  id=ci4495 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci4493 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4491 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4492 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci4490 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci4494 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Parent and Other Fields on Grids: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci4497 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4497'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexGridParentSqlFields" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4499'" ></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:60px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:60px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:60px !important;   "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:60px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4500 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=main_contact  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div  dibComponent=sqlText   style="  " ><span *ngIf="!!row && !!row.main_contact_display_value"> {{row.main_contact_display_value}}</span><span *ngIf="!!row && !row.main_contact_display_value"> {{row.main_contact}}</span></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Main Contact (SQL Insert Field)  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Main Contact (SQL Insert Field)</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4502 dibComponent=inputText   style="  " ><mat-label >Main Contact (SQL Insert Field)</mat-label><input   matInput  type=text   formControlName=main_contact   name=main_contact   [attr.aria-label]="'Main Contact (SQL Insert Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='35'  name=mobile   [attr.aria-label]="'Mobile (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile (Parent Field)  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile (Parent Field)</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4503 dibComponent=inputText   style="  " ><mat-label >Mobile (Parent Field)</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone_w  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone_w','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone_w   maxlength='35'  name=phone_w   [attr.aria-label]="'Phone W (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone_w','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone W (Parent Field)  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone W (Parent Field)</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4504 dibComponent=inputText   style="  " ><mat-label >Phone W (Parent Field)</mat-label><input   matInput  type=text   formControlName=phone_w   name=phone_w   [attr.aria-label]="'Phone W (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8104 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexGridParentSqlFields><mat-toolbar *ngIf="gridMultiselect || false"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=false  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'4499'" ></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:60px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:60px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:60px !important;   "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:60px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4500 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=main_contact  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div  dibComponent=sqlText   style="  " ><span *ngIf="!!row && !!row.main_contact_display_value"> {{row.main_contact_display_value}}</span><span *ngIf="!!row && !row.main_contact_display_value"> {{row.main_contact}}</span></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Main Contact (SQL Insert Field)  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Main Contact (SQL Insert Field)</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4502 dibComponent=inputText   style="  " ><mat-label >Main Contact (SQL Insert Field)</mat-label><input   matInput  type=text   formControlName=main_contact   name=main_contact   [attr.aria-label]="'Main Contact (SQL Insert Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='35'  name=mobile   [attr.aria-label]="'Mobile (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile (Parent Field)  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile (Parent Field)</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4503 dibComponent=inputText   style="  " ><mat-label >Mobile (Parent Field)</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone_w  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone_w','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone_w   maxlength='35'  name=phone_w   [attr.aria-label]="'Phone W (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone_w','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone W (Parent Field)  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone W (Parent Field)</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4504 dibComponent=inputText   style="  " ><mat-label >Phone W (Parent Field)</mat-label><input   matInput  type=text   formControlName=phone_w   name=phone_w   [attr.aria-label]="'Phone W (Parent Field)'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8104 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule];
            dibexGridParentSqlFieldsModule = class dibexGridParentSqlFieldsModule {
                static entry = dibexGridParentSqlFieldsComponent;
                static ɵfac = function dibexGridParentSqlFieldsModule_Factory(t) { return new (t || dibexGridParentSqlFieldsModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexGridParentSqlFieldsModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexGridParentSqlFieldsModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridParentSqlFieldsModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexGridParentSqlFieldsComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexGridParentSqlFieldsModule, { declarations: [dibexGridParentSqlFieldsComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
