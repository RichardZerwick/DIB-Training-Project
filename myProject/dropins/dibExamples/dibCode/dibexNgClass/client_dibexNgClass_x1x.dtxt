System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/card", "@angular/material/datepicker", "@angular/material/button", "@angular/material/icon", "@angular/material/checkbox", "@angular/material/select", "@ngbracket/ngx-layout/extended", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, card_1, datepicker_1, core_5, button_1, icon_1, checkbox_1, select_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, _c0, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, importsRequired, dibexNgClassComponent, containerModules, dibexNgClassModule;
    var __moduleName = context_1 && context_1.id;
    function dibexNgClassComponent_mat_option_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 70);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r30 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r30.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r30.id_display_value, "");
    } }
    function dibexNgClassComponent_th_99_Template(rf, ctx) { if (rf & 1) {
        const _r32 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 71)(1, "mat-checkbox", 72);
        i0.ɵɵlistener("click", function dibexNgClassComponent_th_99_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r32); const ctx_r31 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r31.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r3.masterIsChecked)("indeterminate", ctx_r3.masterIsIndeterminate);
    } }
    function dibexNgClassComponent_td_100_Template(rf, ctx) { if (rf & 1) {
        const _r36 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 73)(1, "mat-checkbox", 74);
        i0.ɵɵlistener("click", function dibexNgClassComponent_td_100_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexNgClassComponent_td_100_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r36); const row_r33 = restoredCtx.$implicit; const ctx_r35 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r35.selection.toggle(row_r33) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r33 = ctx.$implicit;
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.isHighlighted(row_r33));
    } }
    function dibexNgClassComponent_td_102_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 76)(2, "div");
        i0.ɵɵelementContainerStart(3, 6);
        i0.ɵɵelementStart(4, "button", 77)(5, "span", 23);
        i0.ɵɵtext(6, "Get Color From inputColor");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r40 = ctx.ngIf;
        const ctx_r39 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "6825");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(5, _c0, ctx_r39.getValue("inputColor")))("actionData", row_r40)("containerPortId", ctx_r39.containerActionReference());
        i0.ɵɵattribute("aria-label", "Get Color From inputColor");
    } }
    function dibexNgClassComponent_td_102_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 75);
        i0.ɵɵtemplate(1, dibexNgClassComponent_td_102_ng_container_1_Template, 7, 7, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r37 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r37);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r37.getRawValue());
    } }
    function dibexNgClassComponent_th_103_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79)(2, "div");
        i0.ɵɵtext(3, " Actions ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgClassComponent_td_105_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 81)(2, "span", 23);
        i0.ɵɵtext(3, "Get Color From inputColor");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r44 = ctx.ngIf;
        const ctx_r43 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(4, _c0, ctx_r43.getValue("inputColor")))("actionData", row_r44)("containerPortId", ctx_r43.containerActionReference());
        i0.ɵɵattribute("aria-label", "Get Color From inputColor");
    } }
    function dibexNgClassComponent_td_105_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 80);
        i0.ɵɵtemplate(1, dibexNgClassComponent_td_105_ng_container_1_Template, 4, 6, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r41 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r41);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r41.getRawValue());
    } }
    function dibexNgClassComponent_th_106_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 82)(1, "div", 79)(2, "div");
        i0.ɵɵtext(3, " Get Color From inputColor ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgClassComponent_td_108_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r46 = i0.ɵɵnextContext(2).index;
        const ctx_r49 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r49.findColumnDisplayValue(rowIndex_r46, "id", "none", "number"), "");
    } }
    function dibexNgClassComponent_td_108_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_108_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r58 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_td_108_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r58); const ctx_r57 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r57.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_108_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_108_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 95);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_108_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 88);
        i0.ɵɵelement(2, "input", 89);
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_108_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_108_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_108_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵtemplate(6, dibexNgClassComponent_td_108_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 92);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r45 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r50 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.hasError("id", "required", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.view.recordStatus == "update" && ctx_r50.notSaved("id", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.view.recordStatus == "update" && ctx_r50.isSaved("id", rowForm_r45));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r50.isInvalid("id", rowForm_r45));
    } }
    function dibexNgClassComponent_td_108_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_td_108_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 85);
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_108_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_108_ng_container_1_span_4_Template, 7, 5, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_108_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r45 = i0.ɵɵnextContext().$implicit;
        const ctx_r47 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == false && rowForm_r45.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == true || rowForm_r45.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r47.excelEditing == false && rowForm_r45.get("__edit").value === false);
    } }
    function dibexNgClassComponent_td_108_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 83);
        i0.ɵɵtemplate(1, dibexNgClassComponent_td_108_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r45 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r45);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r45.getRawValue());
    } }
    function dibexNgClassComponent_th_109_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_109_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_109_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r61 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r61.editorOpen);
    } }
    function dibexNgClassComponent_th_109_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_109_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r68 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_th_109_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r68); const ctx_r67 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r67.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_109_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_109_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r70 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_th_109_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r69 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r69.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_th_109_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r71 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r71.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_th_109_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_th_109_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r63 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r63.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r63.view.recordStatus == "update" && ctx_r63.notSaved("id", ctx_r63.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r63.view.recordStatus == "update" && ctx_r63.isSaved("id", ctx_r63.model.$formGroup));
    } }
    function dibexNgClassComponent_th_109_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 96)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_109_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_th_109_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_th_109_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r10 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r10.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r10.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r10.showSearch);
    } }
    function dibexNgClassComponent_td_111_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r73 = i0.ɵɵnextContext(2).index;
        const ctx_r76 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r76.findColumnDisplayValue(rowIndex_r73, "first_name", "none", "text"), "");
    } }
    function dibexNgClassComponent_td_111_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_111_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_111_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r85 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_td_111_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r85); const ctx_r84 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r84.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_111_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_111_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r87 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 109)(2, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_td_111_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r87); const ctx_r86 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r86.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_td_111_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r87); const ctx_r88 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r88.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_111_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_111_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_111_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_td_111_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r75 = i0.ɵɵnextContext().ngIf;
        const rowForm_r72 = i0.ɵɵnextContext().$implicit;
        const ctx_r77 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(6, _c0, row_r75.color));
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.hasError("first_name", "required", rowForm_r72));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.hasError("first_name", "maxlength", rowForm_r72));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.view.recordStatus == "update" && ctx_r77.notSaved("first_name", rowForm_r72));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.view.recordStatus == "update" && ctx_r77.isSaved("first_name", rowForm_r72));
    } }
    function dibexNgClassComponent_td_111_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_td_111_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 108);
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_111_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_111_ng_container_1_span_4_Template, 7, 8, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_111_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r72 = i0.ɵɵnextContext().$implicit;
        const ctx_r74 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == false && rowForm_r72.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == true || rowForm_r72.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == false && rowForm_r72.get("__edit").value === false);
    } }
    function dibexNgClassComponent_td_111_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 107);
        i0.ɵɵtemplate(1, dibexNgClassComponent_td_111_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r72 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r72);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r72.getRawValue());
    } }
    function dibexNgClassComponent_th_112_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_112_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_112_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r92 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r92.editorOpen);
    } }
    function dibexNgClassComponent_th_112_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_112_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r99 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_th_112_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r99); const ctx_r98 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r98.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_112_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_112_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r101 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_th_112_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r101); const ctx_r100 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r100.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_th_112_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r101); const ctx_r102 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r102.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_th_112_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_th_112_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r94 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r94.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r94.view.recordStatus == "update" && ctx_r94.notSaved("first_name", ctx_r94.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r94.view.recordStatus == "update" && ctx_r94.isSaved("first_name", ctx_r94.model.$formGroup));
    } }
    function dibexNgClassComponent_th_112_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_112_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_th_112_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_th_112_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r12 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r12.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r12.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r12.showSearch);
    } }
    function dibexNgClassComponent_td_114_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r104 = i0.ɵɵnextContext(2).index;
        const ctx_r107 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r107.findColumnDisplayValue(rowIndex_r104, "last_name", "none", "text"), "");
    } }
    function dibexNgClassComponent_td_114_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_114_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_114_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r116 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_td_114_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r116); const ctx_r115 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r115.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_114_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_114_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r118 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 114)(2, "input", 115);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_td_114_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r118); const ctx_r117 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r117.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_td_114_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r118); const ctx_r119 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r119.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_114_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_114_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_114_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_td_114_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r103 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r108 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r108.hasError("last_name", "required", rowForm_r103));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r108.hasError("last_name", "maxlength", rowForm_r103));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r108.view.recordStatus == "update" && ctx_r108.notSaved("last_name", rowForm_r103));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r108.view.recordStatus == "update" && ctx_r108.isSaved("last_name", rowForm_r103));
    } }
    function dibexNgClassComponent_td_114_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_td_114_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 108);
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_114_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_114_ng_container_1_span_4_Template, 7, 5, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_114_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r103 = i0.ɵɵnextContext().$implicit;
        const ctx_r105 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r105.excelEditing == false && rowForm_r103.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r105.excelEditing == true || rowForm_r103.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r105.excelEditing == false && rowForm_r103.get("__edit").value === false);
    } }
    function dibexNgClassComponent_td_114_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 107);
        i0.ɵɵtemplate(1, dibexNgClassComponent_td_114_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r103 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r103);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r103.getRawValue());
    } }
    function dibexNgClassComponent_th_115_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_115_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_115_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r122 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r122.editorOpen);
    } }
    function dibexNgClassComponent_th_115_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_115_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r129 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_th_115_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r129); const ctx_r128 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r128.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_115_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_115_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r131 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 116)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_th_115_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r131); const ctx_r130 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r130.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_th_115_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r131); const ctx_r132 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r132.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_th_115_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_th_115_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r124 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r124.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r124.view.recordStatus == "update" && ctx_r124.notSaved("last_name", ctx_r124.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r124.view.recordStatus == "update" && ctx_r124.isSaved("last_name", ctx_r124.model.$formGroup));
    } }
    function dibexNgClassComponent_th_115_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_115_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_th_115_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_th_115_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r14 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r14.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r14.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r14.showSearch);
    } }
    function dibexNgClassComponent_td_117_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r134 = i0.ɵɵnextContext(2).index;
        const ctx_r137 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r137.findColumnDisplayValue(rowIndex_r134, "position", "none", "text"), "");
    } }
    function dibexNgClassComponent_td_117_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 70);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r142 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r142.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r142.id_display_value, "");
    } }
    function dibexNgClassComponent_td_117_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 118)(2, "mat-select", 119);
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_117_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 12);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const row_r136 = i0.ɵɵnextContext().ngIf;
        const ctx_r138 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(4, _c0, row_r136.position == "Employee" ? "yellow" : row_r136.position == "Manager" ? "red" : "transparent"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 2, ctx_r138.lists.list6830.items));
    } }
    function dibexNgClassComponent_td_117_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_td_117_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 108);
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_117_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_117_ng_container_1_span_4_Template, 5, 6, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_117_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r133 = i0.ɵɵnextContext().$implicit;
        const ctx_r135 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r135.excelEditing == false && rowForm_r133.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r135.excelEditing == true || rowForm_r133.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r135.excelEditing == false && rowForm_r133.get("__edit").value === false);
    } }
    function dibexNgClassComponent_td_117_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 107);
        i0.ɵɵtemplate(1, dibexNgClassComponent_td_117_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r133 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r133);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r133.getRawValue());
    } }
    function dibexNgClassComponent_th_118_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_118_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_118_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r145 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r145.editorOpen);
    } }
    function dibexNgClassComponent_th_118_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_118_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 70);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r150 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r150.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r150.id_display_value, "");
    } }
    function dibexNgClassComponent_th_118_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 120)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 121);
        i0.ɵɵtemplate(5, dibexNgClassComponent_th_118_div_4_mat_option_5_Template, 2, 2, "mat-option", 12);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r147 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r147.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r147.lists.list6830.items));
    } }
    function dibexNgClassComponent_th_118_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_118_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_th_118_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_th_118_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r16 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r16.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r16.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r16.showSearch);
    } }
    function dibexNgClassComponent_td_120_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r152 = i0.ɵɵnextContext(2).index;
        const ctx_r155 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r155.findColumnDisplayValue(rowIndex_r152, "color", "none", "text"), "");
    } }
    function dibexNgClassComponent_td_120_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_120_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r163 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_td_120_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r163); const ctx_r162 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r162.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_120_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_td_120_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r165 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 124)(2, "input", 125);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_td_120_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r165); const ctx_r164 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r164.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_td_120_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r165); const ctx_r166 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r166.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_120_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_120_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_120_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r151 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r156 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r156.hasError("color", "maxlength", rowForm_r151));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r156.view.recordStatus == "update" && ctx_r156.notSaved("color", rowForm_r151));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r156.view.recordStatus == "update" && ctx_r156.isSaved("color", rowForm_r151));
    } }
    function dibexNgClassComponent_td_120_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_td_120_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 123);
        i0.ɵɵtemplate(3, dibexNgClassComponent_td_120_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_td_120_ng_container_1_span_4_Template, 6, 4, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_td_120_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r151 = i0.ɵɵnextContext().$implicit;
        const ctx_r153 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r153.excelEditing == false && rowForm_r151.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r153.excelEditing == true || rowForm_r151.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r153.excelEditing == false && rowForm_r151.get("__edit").value === false);
    } }
    function dibexNgClassComponent_td_120_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 122);
        i0.ɵɵtemplate(1, dibexNgClassComponent_td_120_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r151 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r151);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r151.getRawValue());
    } }
    function dibexNgClassComponent_th_121_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Color ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_121_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Color");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_121_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r175 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_th_121_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r175); const ctx_r174 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r174.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_121_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_th_121_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r177 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 127)(2, "mat-label");
        i0.ɵɵtext(3, "Color");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 128);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_th_121_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r177); const ctx_r176 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r176.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_th_121_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r177); const ctx_r178 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r178.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_th_121_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_th_121_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r171 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r171.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r171.view.recordStatus == "update" && ctx_r171.notSaved("color", ctx_r171.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r171.view.recordStatus == "update" && ctx_r171.isSaved("color", ctx_r171.model.$formGroup));
    } }
    function dibexNgClassComponent_th_121_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 126)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_th_121_div_2_Template, 2, 0, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_th_121_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_th_121_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r18 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r18.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r18.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r18.showSearch);
    } }
    function dibexNgClassComponent_th_123_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 131);
    } }
    function dibexNgClassComponent_th_123_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129);
        i0.ɵɵtemplate(1, dibexNgClassComponent_th_123_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 130);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r19.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.busy);
    } }
    function dibexNgClassComponent_th_125_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r180 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r180.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexNgClassComponent_th_125_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132);
        i0.ɵɵtemplate(1, dibexNgClassComponent_th_125_span_1_Template, 2, 1, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r20 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r20.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r20.busy && ctx_r20.tableDataSource.data.length == 0);
    } }
    function dibexNgClassComponent_ng_container_126_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 134);
    } }
    function dibexNgClassComponent_ng_container_126_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_container_126_tr_1_Template, 1, 0, "tr", 133);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r181 = ctx.$implicit;
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r21.columnHeaders.getArray(column_r181).items$));
    } }
    function dibexNgClassComponent_tr_127_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 135);
    } if (rf & 2) {
        const ctx_r22 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r22.busy ? "visible" : "hidden"));
    } }
    function dibexNgClassComponent_tr_128_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 135);
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r23.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexNgClassComponent_tr_129_Template(rf, ctx) { if (rf & 1) {
        const _r186 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 136);
        i0.ɵɵlistener("click", function dibexNgClassComponent_tr_129_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r186); const row_r183 = restoredCtx.$implicit; const ctx_r185 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r185.rowClick(row_r183, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r183 = ctx.$implicit;
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r24.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r24.isHighlighted(row_r183)));
    } }
    function dibexNgClassComponent_131_ng_template_0_Template(rf, ctx) { }
    function dibexNgClassComponent_131_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexNgClassComponent_131_ng_template_0_Template, 0, 0, "ng-template", 137);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r28 = i0.ɵɵreference(136);
        i0.ɵɵproperty("ngTemplateOutlet", _r28);
    } }
    function dibexNgClassComponent_mat_toolbar_134_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r192 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 143);
        i0.ɵɵlistener("click", function dibexNgClassComponent_mat_toolbar_134_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r192); const ctx_r191 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r191.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r188 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r188.numberOfSelectedItems + " ", "item", ctx_r188.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexNgClassComponent_mat_toolbar_134_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_mat_toolbar_134_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_mat_toolbar_134_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r196 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 144);
        i0.ɵɵlistener("click", function dibexNgClassComponent_mat_toolbar_134_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r196); const ctx_r195 = i0.ɵɵnextContext(2); ctx_r195.gridShowClipboardDefault = !ctx_r195.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r195.gridShowClipboardDefault && ctx_r195.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexNgClassComponent_mat_toolbar_134_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtemplate(2, dibexNgClassComponent_mat_toolbar_134_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 67);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r189 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r189.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r189.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r189.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexNgClassComponent_mat_toolbar_134_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r199 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 145, 146);
        i0.ɵɵlistener("page", function dibexNgClassComponent_mat_toolbar_134_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r199); const ctx_r198 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r198.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r190 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r190.page.totalRecords)("pageSize", ctx_r190.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexNgClassComponent_mat_toolbar_134_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 138);
        i0.ɵɵtemplate(2, dibexNgClassComponent_mat_toolbar_134_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 139);
        i0.ɵɵtemplate(3, dibexNgClassComponent_mat_toolbar_134_button_3_Template, 4, 3, "button", 140);
        i0.ɵɵelement(4, "span", 141);
        i0.ɵɵtemplate(5, dibexNgClassComponent_mat_toolbar_134_mat_paginator_5_Template, 2, 4, "mat-paginator", 142);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r27.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", false);
    } }
    function dibexNgClassComponent_ng_template_135_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 76)(2, "div");
        i0.ɵɵelementContainerStart(3, 6);
        i0.ɵɵelementStart(4, "button", 77)(5, "span", 23);
        i0.ɵɵtext(6, "Get Color From inputColor");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r222 = ctx.ngIf;
        const ctx_r221 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "6825");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(5, _c0, ctx_r221.getValue("inputColor")))("actionData", row_r222)("containerPortId", ctx_r221.containerActionReference());
        i0.ɵɵattribute("aria-label", "Get Color From inputColor");
    } }
    function dibexNgClassComponent_ng_template_135_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 75);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_td_2_ng_container_1_Template, 7, 7, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r219 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r219);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r219.getRawValue());
    } }
    function dibexNgClassComponent_ng_template_135_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 78)(1, "div", 79)(2, "div");
        i0.ɵɵtext(3, " Actions ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgClassComponent_ng_template_135_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 81)(2, "span", 23);
        i0.ɵɵtext(3, "Get Color From inputColor");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r226 = ctx.ngIf;
        const ctx_r225 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(4, _c0, ctx_r225.getValue("inputColor")))("actionData", row_r226)("containerPortId", ctx_r225.containerActionReference());
        i0.ɵɵattribute("aria-label", "Get Color From inputColor");
    } }
    function dibexNgClassComponent_ng_template_135_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 80);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_td_5_ng_container_1_Template, 4, 6, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r223 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r223);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r223.getRawValue());
    } }
    function dibexNgClassComponent_ng_template_135_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 82)(1, "div", 79)(2, "div");
        i0.ɵɵtext(3, " Get Color From inputColor ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r228 = i0.ɵɵnextContext(2).index;
        const ctx_r231 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r231.findColumnDisplayValue(rowIndex_r228, "id", "none", "number"), "");
    } }
    function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r239 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r239); const ctx_r238 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r238.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r241 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 88)(2, "input", 151);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r241); const ctx_r240 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r240.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r241); const ctx_r242 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r242.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r227 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r232 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r232.hasError("id", "required", rowForm_r227));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r232.view.recordStatus == "update" && ctx_r232.notSaved("id", rowForm_r227));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r232.view.recordStatus == "update" && ctx_r232.isSaved("id", rowForm_r227));
    } }
    function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_ng_template_135_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 85);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_4_Template, 6, 4, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_8_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r227 = i0.ɵɵnextContext().$implicit;
        const ctx_r229 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r229.excelEditing == false && rowForm_r227.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.excelEditing == true || rowForm_r227.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.excelEditing == false && rowForm_r227.get("__edit").value === false);
    } }
    function dibexNgClassComponent_ng_template_135_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 83);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_td_8_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r227 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r227);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r227.getRawValue());
    } }
    function dibexNgClassComponent_ng_template_135_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_9_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r245 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r245.editorOpen);
    } }
    function dibexNgClassComponent_ng_template_135_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r252 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r252); const ctx_r251 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r251.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r254 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r254); const ctx_r253 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r253.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r254); const ctx_r255 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r255.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_ng_template_135_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r247 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r247.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r247.view.recordStatus == "update" && ctx_r247.notSaved("id", ctx_r247.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r247.view.recordStatus == "update" && ctx_r247.isSaved("id", ctx_r247.model.$formGroup));
    } }
    function dibexNgClassComponent_ng_template_135_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 96)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_9_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_th_9_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_th_9_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r205 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r205.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.showSearch);
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r257 = i0.ɵɵnextContext(2).index;
        const ctx_r260 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r260.findColumnDisplayValue(rowIndex_r257, "first_name", "none", "text"), "");
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r269 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r269); const ctx_r268 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r268.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r271 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 109)(2, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r271); const ctx_r270 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r270.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r271); const ctx_r272 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r272.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r259 = i0.ɵɵnextContext().ngIf;
        const rowForm_r256 = i0.ɵɵnextContext().$implicit;
        const ctx_r261 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(6, _c0, row_r259.color));
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.hasError("first_name", "required", rowForm_r256));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.hasError("first_name", "maxlength", rowForm_r256));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.view.recordStatus == "update" && ctx_r261.notSaved("first_name", rowForm_r256));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.view.recordStatus == "update" && ctx_r261.isSaved("first_name", rowForm_r256));
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_ng_template_135_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 108);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_4_Template, 7, 8, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r256 = i0.ɵɵnextContext().$implicit;
        const ctx_r258 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r258.excelEditing == false && rowForm_r256.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r258.excelEditing == true || rowForm_r256.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r258.excelEditing == false && rowForm_r256.get("__edit").value === false);
    } }
    function dibexNgClassComponent_ng_template_135_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 107);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_td_11_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r256 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r256);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r256.getRawValue());
    } }
    function dibexNgClassComponent_ng_template_135_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_12_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r276 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r276.editorOpen);
    } }
    function dibexNgClassComponent_ng_template_135_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r283 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r283); const ctx_r282 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r282.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r285 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r285); const ctx_r284 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r284.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r285); const ctx_r286 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r286.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_ng_template_135_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r278 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r278.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.view.recordStatus == "update" && ctx_r278.notSaved("first_name", ctx_r278.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.view.recordStatus == "update" && ctx_r278.isSaved("first_name", ctx_r278.model.$formGroup));
    } }
    function dibexNgClassComponent_ng_template_135_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_12_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_th_12_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_th_12_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r207 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r207.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r207.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r207.showSearch);
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r288 = i0.ɵɵnextContext(2).index;
        const ctx_r291 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r291.findColumnDisplayValue(rowIndex_r288, "last_name", "none", "text"), "");
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r300 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r300); const ctx_r299 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r299.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r302 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 114)(2, "input", 115);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r302); const ctx_r301 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r301.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r302); const ctx_r303 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r303.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r287 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r292 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.hasError("last_name", "required", rowForm_r287));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.hasError("last_name", "maxlength", rowForm_r287));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.view.recordStatus == "update" && ctx_r292.notSaved("last_name", rowForm_r287));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.view.recordStatus == "update" && ctx_r292.isSaved("last_name", rowForm_r287));
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_ng_template_135_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 108);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_4_Template, 7, 5, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r287 = i0.ɵɵnextContext().$implicit;
        const ctx_r289 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == false && rowForm_r287.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == true || rowForm_r287.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == false && rowForm_r287.get("__edit").value === false);
    } }
    function dibexNgClassComponent_ng_template_135_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 107);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_td_14_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r287 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r287);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r287.getRawValue());
    } }
    function dibexNgClassComponent_ng_template_135_th_15_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_15_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r306 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r306.editorOpen);
    } }
    function dibexNgClassComponent_ng_template_135_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r313 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r313); const ctx_r312 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r312.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r315 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 116)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r315); const ctx_r314 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r314.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r315); const ctx_r316 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r316.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_ng_template_135_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r308 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r308.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r308.view.recordStatus == "update" && ctx_r308.notSaved("last_name", ctx_r308.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r308.view.recordStatus == "update" && ctx_r308.isSaved("last_name", ctx_r308.model.$formGroup));
    } }
    function dibexNgClassComponent_ng_template_135_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_15_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_th_15_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_th_15_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r209 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r209.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r209.showSearch);
    } }
    function dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r318 = i0.ɵɵnextContext(2).index;
        const ctx_r321 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r321.findColumnDisplayValue(rowIndex_r318, "position", "none", "text"), "");
    } }
    function dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 70);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r326 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r326.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r326.id_display_value, "");
    } }
    function dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 118)(2, "mat-select", 119);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 12);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const row_r320 = i0.ɵɵnextContext().ngIf;
        const ctx_r322 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(4, _c0, row_r320.position == "Employee" ? "yellow" : row_r320.position == "Manager" ? "red" : "transparent"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 2, ctx_r322.lists.list6830.items));
    } }
    function dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_ng_template_135_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 108);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_4_Template, 5, 6, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_17_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r317 = i0.ɵɵnextContext().$implicit;
        const ctx_r319 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r319.excelEditing == false && rowForm_r317.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r319.excelEditing == true || rowForm_r317.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r319.excelEditing == false && rowForm_r317.get("__edit").value === false);
    } }
    function dibexNgClassComponent_ng_template_135_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 107);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_td_17_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r317 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r317);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r317.getRawValue());
    } }
    function dibexNgClassComponent_ng_template_135_th_18_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 102);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Position \u00A0");
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_18_div_2_span_2_Template, 2, 0, "span", 101);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r329 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r329.editorOpen);
    } }
    function dibexNgClassComponent_ng_template_135_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_18_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 70);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r334 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r334.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r334.id_display_value, "");
    } }
    function dibexNgClassComponent_ng_template_135_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 120)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 121);
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_th_18_div_4_mat_option_5_Template, 2, 2, "mat-option", 12);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r331 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r331.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r331.lists.list6830.items));
    } }
    function dibexNgClassComponent_ng_template_135_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_18_div_2_Template, 3, 1, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_th_18_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_th_18_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r211 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r211.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.showSearch);
    } }
    function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 87);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r336 = i0.ɵɵnextContext(2).index;
        const ctx_r339 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r339.findColumnDisplayValue(rowIndex_r336, "color", "none", "text"), "");
    } }
    function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r347 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r347); const ctx_r346 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r346.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r349 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 87)(1, "mat-form-field", 124)(2, "input", 125);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r349); const ctx_r348 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r348.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r349); const ctx_r350 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r350.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 67);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r335 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r340 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.hasError("color", "maxlength", rowForm_r335));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.notSaved("color", rowForm_r335));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.isSaved("color", rowForm_r335));
    } }
    function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexNgClassComponent_ng_template_135_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 84)(2, "span", 123);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_3_Template, 2, 1, "span", 86);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_4_Template, 6, 4, "span", 86);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_20_ng_container_1_span_5_Template, 1, 0, "span", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r335 = i0.ɵɵnextContext().$implicit;
        const ctx_r337 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r337.excelEditing == false && rowForm_r335.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r337.excelEditing == true || rowForm_r335.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r337.excelEditing == false && rowForm_r335.get("__edit").value === false);
    } }
    function dibexNgClassComponent_ng_template_135_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 122);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_td_20_ng_container_1_Template, 6, 3, "ng-container", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r335 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r335);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r335.getRawValue());
    } }
    function dibexNgClassComponent_ng_template_135_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 100);
        i0.ɵɵtext(1, " Color ");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 103);
        i0.ɵɵtext(1, "Color");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r359 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 93);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r359); const ctx_r358 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r358.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 94);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexNgClassComponent_ng_template_135_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r361 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 104)(1, "mat-form-field", 127)(2, "mat-label");
        i0.ɵɵtext(3, "Color");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 128);
        i0.ɵɵlistener("keydown.enter", function dibexNgClassComponent_ng_template_135_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r361); const ctx_r360 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r360.searchGrid(false)); })("keydown.esc", function dibexNgClassComponent_ng_template_135_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r361); const ctx_r362 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r362.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 90);
        i0.ɵɵtemplate(6, dibexNgClassComponent_ng_template_135_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 91);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r355 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r355.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Color");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r355.view.recordStatus == "update" && ctx_r355.notSaved("color", ctx_r355.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r355.view.recordStatus == "update" && ctx_r355.isSaved("color", ctx_r355.model.$formGroup));
    } }
    function dibexNgClassComponent_ng_template_135_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 126)(1, "div", 79);
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_th_21_div_2_Template, 2, 0, "div", 97);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_th_21_div_3_Template, 2, 0, "div", 98);
        i0.ɵɵtemplate(4, dibexNgClassComponent_ng_template_135_th_21_div_4_Template, 7, 4, "div", 99);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r213 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r213.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r213.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r213.showSearch);
    } }
    function dibexNgClassComponent_ng_template_135_th_23_Template(rf, ctx) { if (rf & 1) {
        const _r364 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 71)(1, "mat-checkbox", 152);
        i0.ɵɵlistener("change", function dibexNgClassComponent_ng_template_135_th_23_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r364); const ctx_r363 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r363.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r214 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r214.masterIsChecked)("indeterminate", ctx_r214.masterIsIndeterminate);
    } }
    function dibexNgClassComponent_ng_template_135_td_24_Template(rf, ctx) { if (rf & 1) {
        const _r368 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 153)(1, "mat-checkbox", 74);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_td_24_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexNgClassComponent_ng_template_135_td_24_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r368); const row_r365 = restoredCtx.$implicit; const ctx_r367 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r367.selection.toggle(row_r365) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r365 = ctx.$implicit;
        const ctx_r215 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r215.isHighlighted(row_r365));
    } }
    function dibexNgClassComponent_ng_template_135_th_26_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 131);
    } }
    function dibexNgClassComponent_ng_template_135_th_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 154);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_th_26_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 130);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r216 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r216.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r216.busy);
    } }
    function dibexNgClassComponent_ng_template_135_th_28_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r370 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r370.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexNgClassComponent_ng_template_135_th_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132);
        i0.ɵɵtemplate(1, dibexNgClassComponent_ng_template_135_th_28_span_1_Template, 2, 1, "span", 67);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r217 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r217.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r217.busy && ctx_r217.tableDataSource.data.length == 0);
    } }
    function dibexNgClassComponent_ng_template_135_tr_29_Template(rf, ctx) { if (rf & 1) {
        const _r373 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 155);
        i0.ɵɵlistener("click", function dibexNgClassComponent_ng_template_135_tr_29_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r373); const row_r371 = restoredCtx.$implicit; const ctx_r372 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r372.rowClick(row_r371, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r371 = ctx.$implicit;
        const ctx_r218 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r218.isHighlighted(row_r371)));
    } }
    function dibexNgClassComponent_ng_template_135_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 147);
        i0.ɵɵelementContainerStart(1, 43);
        i0.ɵɵtemplate(2, dibexNgClassComponent_ng_template_135_td_2_Template, 2, 2, "td", 44);
        i0.ɵɵtemplate(3, dibexNgClassComponent_ng_template_135_th_3_Template, 4, 0, "th", 45);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 46);
        i0.ɵɵtemplate(5, dibexNgClassComponent_ng_template_135_td_5_Template, 2, 2, "td", 47);
        i0.ɵɵtemplate(6, dibexNgClassComponent_ng_template_135_th_6_Template, 4, 0, "th", 48);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 49);
        i0.ɵɵtemplate(8, dibexNgClassComponent_ng_template_135_td_8_Template, 2, 2, "td", 50);
        i0.ɵɵtemplate(9, dibexNgClassComponent_ng_template_135_th_9_Template, 5, 3, "th", 51);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 52);
        i0.ɵɵtemplate(11, dibexNgClassComponent_ng_template_135_td_11_Template, 2, 2, "td", 53);
        i0.ɵɵtemplate(12, dibexNgClassComponent_ng_template_135_th_12_Template, 5, 3, "th", 54);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 55);
        i0.ɵɵtemplate(14, dibexNgClassComponent_ng_template_135_td_14_Template, 2, 2, "td", 53);
        i0.ɵɵtemplate(15, dibexNgClassComponent_ng_template_135_th_15_Template, 5, 3, "th", 54);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 56);
        i0.ɵɵtemplate(17, dibexNgClassComponent_ng_template_135_td_17_Template, 2, 2, "td", 53);
        i0.ɵɵtemplate(18, dibexNgClassComponent_ng_template_135_th_18_Template, 5, 3, "th", 54);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 57);
        i0.ɵɵtemplate(20, dibexNgClassComponent_ng_template_135_td_20_Template, 2, 2, "td", 58);
        i0.ɵɵtemplate(21, dibexNgClassComponent_ng_template_135_th_21_Template, 5, 3, "th", 59);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 40);
        i0.ɵɵtemplate(23, dibexNgClassComponent_ng_template_135_th_23_Template, 2, 2, "th", 41);
        i0.ɵɵtemplate(24, dibexNgClassComponent_ng_template_135_td_24_Template, 2, 1, "td", 148);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 60);
        i0.ɵɵtemplate(26, dibexNgClassComponent_ng_template_135_th_26_Template, 2, 2, "th", 149);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(27, 62);
        i0.ɵɵtemplate(28, dibexNgClassComponent_ng_template_135_th_28_Template, 2, 2, "th", 63);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(29, dibexNgClassComponent_ng_template_135_tr_29_Template, 1, 3, "tr", 150);
        i0.ɵɵpipe(30, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r29.selectionDataSource);
        i0.ɵɵadvance(29);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(30, 2, ctx_r29.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i18 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
                i6 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i19 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i20 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (checkbox_1_1) {
                checkbox_1 = checkbox_1_1;
                i8 = checkbox_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i14 = select_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "background-color": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function (a1) { return { "font-family": "fantasy", "background-color": a1 }; };
            _c6 = function (a1) { return { "color": "black", "background-color": a1 }; };
            _c7 = function () { return ["_dibBusy"]; };
            _c8 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexNgClassComponent = class dibexNgClassComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 298, name: 'dibexNgClass', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*6806'] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = true; //default:false
                gridExcelEditingAutoSave = true; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'color', 'first_name', 'last_name', 'position',]);
                allColumnsToDisplay = new shared_3.DibArray(['columnHeader', 'id', 'color', 'first_name', 'last_name', 'position',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list6822 = new shared_3.DibEnumList(this.translationService, this.eventService, 'selectEnum', ['A', 'B', 'C', 'D'], false);
                    this.lists.list6830 = new shared_3.DibEnumList(this.translationService, this.eventService, 'position', ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'], true);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexNgClass');
                    this.containerName = 'dibexNgClass'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { datepicker: { itemId: 6811, type: 'date', fieldAlias: 'datepicker', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: 'datepicker', default: '@{dibDate}', dataType: 'date', contentType: 'date', changeUrl: false }, inputNumber: { itemId: 6818, type: 'number', fieldAlias: 'inputNumber', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: 'inputNumber', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, inputText: { itemId: 6819, type: 'text', fieldAlias: 'inputText', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: 'inputText', default: 'Hello World!', dataType: 'text', contentType: 'text', changeUrl: false }, checkbox: { itemId: 6820, type: 'boolean', fieldAlias: 'checkbox', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'change' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'boolean', contentType: 'tick', changeUrl: false }, selectEnum: { itemId: 6822, type: 'text', fieldAlias: 'selectEnum', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['A', 'B', 'C', 'D'] }, id: { itemId: 6827, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: null, default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, first_name: { itemId: 6828, type: 'text', fieldAlias: 'first_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 6829, type: 'text', fieldAlias: 'last_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, position: { itemId: 6830, type: 'text', fieldAlias: 'position', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false,
                            enum: ['Employee', 'Developer', 'Manager', 'Project Manager', 'HR Manager', 'Sales Manager', 'Recruitment Director', 'CEO'] }, color: { itemId: 6831, type: 'text', fieldAlias: 'color', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, };
                    this.model.$formGroup.addControl('datepicker', this.model.modelItems.datepicker.formControl);
                    this.model.$formGroup.addControl('inputNumber', this.model.modelItems.inputNumber.formControl);
                    this.model.$formGroup.addControl('inputText', this.model.modelItems.inputText.formControl);
                    this.model.$formGroup.addControl('checkbox', this.model.modelItems.checkbox.formControl);
                    this.model.$formGroup.addControl('selectEnum', this.model.modelItems.selectEnum.formControl);
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('position', this.model.modelItems.position.formControl);
                    this.model.$formGroup.addControl('color', this.model.modelItems.color.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnVip", actionType: "click", responseType: 'actions', submitUrl: "shared.action.message?messageText=@{actionData.first_name}", itemAlias: "btnVip", waitForCompletion: false, containerName: "dibexNgClass", handlers: [] }, this.clientData, { itemEventId: 'ie388-dib', itemId: '6826', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['columnHeader', 'id', 'color', 'first_name', 'last_name', 'position']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexNgClass`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexNgClass`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexNgClass`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 6827 };
                    formDefaultsConfigs['first_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 6828 };
                    formDefaultsConfigs['last_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 6829 };
                    formDefaultsConfigs['position'] = { contentType: "text", type: "none", defaultValue: "", listId: 6830 };
                    formDefaultsConfigs['color'] = { contentType: "text", type: "none", defaultValue: "", listId: 6831 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 6827, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), first_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "first_name", "none", false, formDefaults['first_name'], 6828, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), last_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "last_name", "none", false, formDefaults['last_name'], 6829, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(50)], updateOn: 'blur' }), position: new forms_2.FormControl(this.calculateInitialColumnValue(row, "position", "none", false, formDefaults['position'], 6830, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(255)], updateOn: 'blur' }), color: new forms_2.FormControl(this.calculateInitialColumnValue(row, "color", "none", false, formDefaults['color'], 6831, "text"), { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list6822.dispose();
                    this.lists.list6830.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexNgClass', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexNgClass' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexNgClassComponent_Factory(t) { return new (t || dibexNgClassComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexNgClassComponent, selectors: [["dibex-ng-class"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 137, vars: 54, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci6806", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexNgClass", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci6807", "dibComponent", "card", 2, "flex", "1 1 0%", "max-width", "1300px"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "nowrap"], [3, "dibPort"], ["id", "ci6808", "dibComponent", "comment"], [1, "dib-comment"], ["id", "ci6821", "dibComponent", "div", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "0 1 auto"], ["id", "ci6822", "dibComponent", "selectEnum", "appearance", "standard", 2, "width", "200px !important", "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["formControlName", "selectEnum"], [3, "value", 4, "ngFor", "ngForOf"], ["id", "ci6809", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%", "max-width", "1200px"], ["id", "ci6810", "dibComponent", "section", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex-wrap", "nowrap"], ["id", "ci6812", "dibComponent", "comment"], ["id", "ci6811", "dibComponent", "datePicker", "item-alias", "datepicker", "appearance", "standard", 3, "ngStyle"], ["matInput", "", "formControlName", "datepicker", "name", "datepicker", 3, "matDatepicker", "placeholder", "focus"], ["matPrefix", "", 3, "for"], ["datePicker6811", ""], ["id", "ci6813", "dibComponent", "comment"], ["mat-raised-button", "", "id", "ci6814", "dibComponent", "button", "type", "button", 3, "ngStyle"], [1, "dibButtonCaption"], ["id", "ci6815", "dibComponent", "section", 2, "flex", "1 1 0%"], ["id", "ci6816", "dibComponent", "comment"], ["id", "ci6817", "dibComponent", "section", 2, "width", "400px !important", "flex", "1 1 0%", 3, "ngStyle"], [2, "display", "flex", "flex-direction", "column", "justify-content", "flex-start", "align-items", "stretch", "gap", "10px"], ["id", "ci6818", "dibComponent", "inputNumber", "item-alias", "inputNumber", "appearance", "standard"], ["matInput", "", "type", "number", "formControlName", "inputNumber", "name", "inputNumber"], ["id", "ci6819", "dibComponent", "inputText", "item-alias", "inputText", "appearance", "standard"], ["matInput", "", "type", "text", "formControlName", "inputText", "name", "inputText"], ["id", "ci6820", "dibComponent", "checkbox", "formControlName", "checkbox"], ["id", "ci6823", "dibComponent", "card", 2, "flex", "1 1 0%", "max-width", "1300px"], ["id", "ci6832", "dibComponent", "comment"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "columnHeader"], ["mat-cell", "", "style", "padding: 2px; width:170px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:170px; ", 4, "matHeaderCellDef"], ["matColumnDef", "btnVip"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; width:80px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:80px; ", 4, "matHeaderCellDef"], ["matColumnDef", "first_name"], ["mat-cell", "", "style", "padding: 2px; width:150px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:150px; ", 4, "matHeaderCellDef"], ["matColumnDef", "last_name"], ["matColumnDef", "position"], ["matColumnDef", "color"], ["mat-cell", "", "style", "padding: 2px; width:100px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:100px; ", 4, "matHeaderCellDef"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexNgClass", ""], ["_selectedTable", ""], [3, "value"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", "width", "170px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "width", "170px !important"], ["mat-raised-button", "", "id", "ci6826", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnVip", "type", "button", 3, "ngStyle", "actionData", "containerPortId"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "170px"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["mat-raised-button", "", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnVip", "type", "button", 3, "ngStyle", "actionData", "containerPortId"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], ["mat-cell", "", 2, "padding", "2px", "width", "80px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell", 2, "width", "80px"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", 2, "width", "80px !important"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "80px"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci6827", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "width", "150px", 3, "formGroup"], [1, "dib-cell", 2, "width", "150px"], ["dibComponent", "inputText", 2, "width", "150px !important", 3, "ngStyle"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "50", "required", "true", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "150px"], ["id", "ci6828", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText", 2, "width", "150px !important"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "50", "required", "true", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci6829", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "last_name", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "selectEnum", 2, "width", "150px !important", "display", "flex", "flex-direction", "column", 3, "ngStyle"], ["formControlName", "position", "required", "true"], ["id", "ci6830", "dibComponent", "selectEnum", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "position"], ["mat-cell", "", 2, "padding", "2px", "width", "100px", 3, "formGroup"], [1, "dib-cell", 2, "width", "100px"], ["dibComponent", "inputText", 2, "width", "100px !important"], ["matInput", "", "type", "text", "formControlName", "color", "maxlength", "50", "name", "color", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "100px"], ["id", "ci6831", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "color", "name", "color", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexNgClassComponent_Template(rf, ctx) { if (rf & 1) {
                        const _r374 = i0.ɵɵgetCurrentView();
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexNgClassComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "mat-card", 4)(5, "mat-card-content", 5);
                        i0.ɵɵelementContainerStart(6, 6);
                        i0.ɵɵelementStart(7, "span", 7)(8, "div", 8);
                        i0.ɵɵtext(9, " Select values and colors below ");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(10, "div", 9);
                        i0.ɵɵelementContainerStart(11, 6);
                        i0.ɵɵelementStart(12, "mat-form-field", 10)(13, "mat-label")(14, "b");
                        i0.ɵɵtext(15, "selectEnum");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(16, "mat-select", 11);
                        i0.ɵɵtemplate(17, dibexNgClassComponent_mat_option_17_Template, 2, 2, "mat-option", 12);
                        i0.ɵɵpipe(18, "async");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(19, "div", 13);
                        i0.ɵɵelementContainerStart(20, 6);
                        i0.ɵɵelementStart(21, "mat-card", 14)(22, "mat-card-header")(23, "mat-card-title");
                        i0.ɵɵtext(24, "Style items");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(25, "mat-card-content", 15)(26, "span", 16)(27, "div", 8)(28, "b");
                        i0.ɵɵtext(29);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(30, "br");
                        i0.ɵɵelementStart(31, "i");
                        i0.ɵɵtext(32, "Apply the chosen color in 'inputColor' as background");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(33, "mat-form-field", 17)(34, "mat-label");
                        i0.ɵɵtext(35, "datepicker");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(36, "input", 18);
                        i0.ɵɵlistener("focus", function dibexNgClassComponent_Template_input_focus_36_listener() { i0.ɵɵrestoreView(_r374); const _r1 = i0.ɵɵreference(39); return i0.ɵɵresetView(_r1.open()); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(37, "mat-datepicker-toggle", 19)(38, "mat-datepicker", null, 20);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(40, "span", 21)(41, "div", 8)(42, "b");
                        i0.ɵɵtext(43);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(44, "br");
                        i0.ɵɵelementStart(45, "i");
                        i0.ɵɵtext(46, "If selectEnum is 'A' then green, else if selectEnum = 'B' then yellow, else red.");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(47, "button", 22)(48, "span", 23);
                        i0.ɵɵtext(49, "Any css style can be applied ...");
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵelementStart(50, "mat-card", 24)(51, "mat-card-header")(52, "mat-card-title");
                        i0.ɵɵtext(53, "Style whole section");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(54, "mat-card-content", 15)(55, "span", 25)(56, "div", 8)(57, "b");
                        i0.ɵɵtext(58);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(59, "br");
                        i0.ɵɵelementStart(60, "i");
                        i0.ɵɵtext(61, "If selectEnum is 'A' then green, else if selectEnum = 'B' then yellow, else red.");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(62, "mat-card", 26)(63, "mat-card-content", 27)(64, "mat-form-field", 28)(65, "mat-label");
                        i0.ɵɵtext(66, "inputNumber");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(67, "input", 29);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(68, "mat-form-field", 30)(69, "mat-label");
                        i0.ɵɵtext(70, "inputText");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(71, "input", 31);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(72, "mat-checkbox", 32);
                        i0.ɵɵtext(73, " checkbox ");
                        i0.ɵɵelementEnd()()()()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(74, "mat-card", 33)(75, "mat-card-header")(76, "mat-card-title");
                        i0.ɵɵtext(77, "*ngIf in Grid");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(78, "mat-card-content", 27);
                        i0.ɵɵelementContainerStart(79, 6);
                        i0.ɵɵelementStart(80, "span", 34)(81, "div", 8)(82, "b");
                        i0.ɵɵtext(83);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(84, "br");
                        i0.ɵɵelementStart(85, "b");
                        i0.ɵɵtext(86);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(87, "br");
                        i0.ɵɵelementStart(88, "b");
                        i0.ɵɵtext(89);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(90, "br");
                        i0.ɵɵelementStart(91, "i");
                        i0.ɵɵtext(92, "Note, grid rows are editable...");
                        i0.ɵɵelementEnd()()();
                        i0.ɵɵelementStart(93, "div", 35, 36)(95, "form", 37);
                        i0.ɵɵelementContainerStart(96, 38);
                        i0.ɵɵelementStart(97, "table", 39);
                        i0.ɵɵelementContainerStart(98, 40);
                        i0.ɵɵtemplate(99, dibexNgClassComponent_th_99_Template, 2, 2, "th", 41);
                        i0.ɵɵtemplate(100, dibexNgClassComponent_td_100_Template, 2, 1, "td", 42);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(101, 43);
                        i0.ɵɵtemplate(102, dibexNgClassComponent_td_102_Template, 2, 2, "td", 44);
                        i0.ɵɵtemplate(103, dibexNgClassComponent_th_103_Template, 4, 0, "th", 45);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(104, 46);
                        i0.ɵɵtemplate(105, dibexNgClassComponent_td_105_Template, 2, 2, "td", 47);
                        i0.ɵɵtemplate(106, dibexNgClassComponent_th_106_Template, 4, 0, "th", 48);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(107, 49);
                        i0.ɵɵtemplate(108, dibexNgClassComponent_td_108_Template, 2, 2, "td", 50);
                        i0.ɵɵtemplate(109, dibexNgClassComponent_th_109_Template, 5, 3, "th", 51);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(110, 52);
                        i0.ɵɵtemplate(111, dibexNgClassComponent_td_111_Template, 2, 2, "td", 53);
                        i0.ɵɵtemplate(112, dibexNgClassComponent_th_112_Template, 5, 3, "th", 54);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(113, 55);
                        i0.ɵɵtemplate(114, dibexNgClassComponent_td_114_Template, 2, 2, "td", 53);
                        i0.ɵɵtemplate(115, dibexNgClassComponent_th_115_Template, 5, 3, "th", 54);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(116, 56);
                        i0.ɵɵtemplate(117, dibexNgClassComponent_td_117_Template, 2, 2, "td", 53);
                        i0.ɵɵtemplate(118, dibexNgClassComponent_th_118_Template, 5, 3, "th", 54);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(119, 57);
                        i0.ɵɵtemplate(120, dibexNgClassComponent_td_120_Template, 2, 2, "td", 58);
                        i0.ɵɵtemplate(121, dibexNgClassComponent_th_121_Template, 5, 3, "th", 59);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(122, 60);
                        i0.ɵɵtemplate(123, dibexNgClassComponent_th_123_Template, 2, 2, "th", 61);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(124, 62);
                        i0.ɵɵtemplate(125, dibexNgClassComponent_th_125_Template, 2, 2, "th", 63);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(126, dibexNgClassComponent_ng_container_126_Template, 3, 3, "ng-container", 64);
                        i0.ɵɵtemplate(127, dibexNgClassComponent_tr_127_Template, 1, 3, "tr", 65);
                        i0.ɵɵtemplate(128, dibexNgClassComponent_tr_128_Template, 1, 3, "tr", 65);
                        i0.ɵɵtemplate(129, dibexNgClassComponent_tr_129_Template, 1, 4, "tr", 66);
                        i0.ɵɵpipe(130, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(131, dibexNgClassComponent_131_Template, 1, 1, null, 67);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(132, "div", null, 68);
                        i0.ɵɵtemplate(134, dibexNgClassComponent_mat_toolbar_134_Template, 6, 3, "mat-toolbar", 67);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(135, dibexNgClassComponent_ng_template_135_Template, 31, 4, "ng-template", null, 69, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r1 = i0.ɵɵreference(39);
                        const _r26 = i0.ɵɵreference(133);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(44, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6806");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6807");
                        i0.ɵɵadvance(5);
                        i0.ɵɵproperty("dibPort", "6821");
                        i0.ɵɵadvance(6);
                        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(18, 40, ctx.lists.list6822.items));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6809");
                        i0.ɵɵadvance(9);
                        i0.ɵɵtextInterpolate2("[ngStyle]=\"", "{", "'font-family':'fantasy', 'background-color': getValue('inputColor')", "}", "\"");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(46, _c5, ctx.getValue("inputColor")));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("matDatepicker", _r1)("placeholder", "datepicker");
                        i0.ɵɵattribute("aria-label", "datepicker");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("for", _r1);
                        i0.ɵɵadvance(6);
                        i0.ɵɵtextInterpolate2("[ngStyle]=\"", "{", "'background-color': getValue('selectEnum') == 'A' ? 'green' : (getValue('selectEnum') == 'B' ? 'yellow' : 'red')", "}", "\"");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(48, _c6, ctx.getValue("selectEnum") == "A" ? "green" : ctx.getValue("selectEnum") == "B" ? "yellow" : "red"));
                        i0.ɵɵattribute("aria-label", "Any css style can be applied ...");
                        i0.ɵɵadvance(11);
                        i0.ɵɵtextInterpolate2("[ngStyle]=\"", "{", "'background-color': getValue('selectEnum') == 'A' ? 'green' : (getValue('selectEnum') == 'B' ? 'yellow' : 'red')", "}", "\"");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(50, _c6, ctx.getValue("selectEnum") == "A" ? "green" : ctx.getValue("selectEnum") == "B" ? "yellow" : "red"));
                        i0.ɵɵadvance(5);
                        i0.ɵɵattribute("aria-label", "inputNumber");
                        i0.ɵɵadvance(4);
                        i0.ɵɵattribute("aria-label", "inputText");
                        i0.ɵɵadvance(8);
                        i0.ɵɵproperty("dibPort", "6823");
                        i0.ɵɵadvance(4);
                        i0.ɵɵtextInterpolate2("Button:\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 [ngStyle]=\"", "{", "'background-color': getValue('inputColor')", "}", "\"");
                        i0.ɵɵadvance(3);
                        i0.ɵɵtextInterpolate2("First Name: [ngStyle]=\"", "{", "'background-color': row.color", "}", "\"");
                        i0.ɵɵadvance(3);
                        i0.ɵɵtextInterpolate2("Position:\u00A0\u00A0\u00A0\u00A0\u00A0 [ngStyle]=\"", "{", "'background-color': row.position == 'Employee' ? 'yellow' : (row.position == 'Manager' ? 'red' : 'transparent')", "}", "\"");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r26);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(29);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(52, _c7));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(53, _c8));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(130, 42, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || false);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibPortDirective, i2.DibListenersDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.MatOption, i7.MatButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatSelect, i15.MatToolbar, i15.MatToolbarRow, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i17.MatCardHeader, i17.MatCardTitle, i18.MatTable, i18.MatHeaderCellDef, i18.MatHeaderRowDef, i18.MatColumnDef, i18.MatCellDef, i18.MatRowDef, i18.MatHeaderCell, i18.MatCell, i18.MatHeaderRow, i18.MatRow, i19.MatSort, i19.MatSortHeader, i20.MatPaginator, i4.AsyncPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexNgClass'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexNgClassComponent.prototype, "reloadContainer", null);
            exports_1("dibexNgClassComponent", dibexNgClassComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexNgClassComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-ng-class', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci6806 dibComponent=subcontainer   ><ng-container [dibPort]="'6806'" parentContainerName=dibexNgClass  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><mat-card   style="  flex: 1 1 0%;  max-width:1300px" id=ci6807 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'6807'" ><span  id=ci6808 dibComponent=comment   style="  " ><div class=dib-comment > Select values and colors below  </div></span><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 0 1 auto;  " id=ci6821 dibComponent=div  ><ng-container [dibPort]="'6821'" ><mat-form-field  id=ci6822 dibComponent=selectEnum   style="  width:200px !important;   display:flex; flex-direction: column;  flex-wrap: nowrap;  "  appearance=standard   ><mat-label><b>selectEnum</b></mat-label><mat-select formControlName=selectEnum    ><mat-option *ngFor="let item of lists.list6822.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></ng-container></div><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: stretch;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  max-width:1200px" id=ci6809 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6809'" ><mat-card   style="  flex: 1 1 0%;  " id=ci6810 dibComponent=section  ><mat-card-header ><mat-card-title >Style items</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;"  ><span  id=ci6812 dibComponent=comment   style="  " ><div class=dib-comment ><b>[ngStyle]="{{ '{' }}'font-family':'fantasy', 'background-color': getValue('inputColor'){{ '}' }}"</b><br><i>Apply the chosen color in 'inputColor' as background</i></div></span><mat-form-field [ngStyle]="{'font-family':'fantasy', 'background-color': getValue('inputColor')}" id=ci6811 dibComponent=datePicker   style="  "  item-alias=datepicker   appearance=standard  ><mat-label>datepicker</mat-label><input   matInput [matDatepicker]="datePicker6811"   [placeholder]="'datepicker'"   formControlName=datepicker   name=datepicker   [attr.aria-label]="'datepicker'"  (focus)="datePicker6811.open()"  ><mat-datepicker-toggle matPrefix [for]="datePicker6811" ></mat-datepicker-toggle><mat-datepicker #datePicker6811 ></mat-datepicker></mat-form-field><span  id=ci6813 dibComponent=comment   style="  " ><div class=dib-comment ><b>[ngStyle]="{{ '{' }}'background-color': getValue('selectEnum') == 'A' ? 'green' : (getValue('selectEnum') == 'B' ? 'yellow' : 'red'){{ '}' }}"</b><br><i>If selectEnum is 'A' then green, else if selectEnum = 'B' then yellow, else red.</i></div></span><button  mat-raised-button
[ngStyle]="{'color':'black', 'background-color': getValue('selectEnum') == 'A' ? 'green' : (getValue('selectEnum') == 'B' ? 'yellow' : 'red')}" id=ci6814 dibComponent=button   style="  "  [attr.aria-label]="'Any css style can be applied ...'"  type=button  ><span class=dibButtonCaption >Any css style can be applied ...</span></button></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  " id=ci6815 dibComponent=section  ><mat-card-header ><mat-card-title >Style whole section</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex-wrap: nowrap;"  ><span  id=ci6816 dibComponent=comment   style="  " ><div class=dib-comment ><b>[ngStyle]="{{ '{' }}'background-color': getValue('selectEnum') == 'A' ? 'green' : (getValue('selectEnum') == 'B' ? 'yellow' : 'red'){{ '}' }}"</b><br><i>If selectEnum is 'A' then green, else if selectEnum = 'B' then yellow, else red.</i></div></span><mat-card   [ngStyle]="{'color':'black', 'background-color': getValue('selectEnum') == 'A' ? 'green' : (getValue('selectEnum') == 'B' ? 'yellow' : 'red')}"  style="  width:400px !important;   flex: 1 1 0%;  " id=ci6817 dibComponent=section  ><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><mat-form-field  id=ci6818 dibComponent=inputNumber   style="  "  item-alias=inputNumber   appearance=standard  ><mat-label >inputNumber</mat-label><input   matInput  type=number   formControlName=inputNumber   name=inputNumber   [attr.aria-label]="'inputNumber'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-form-field id=ci6819 dibComponent=inputText   style="  "  item-alias=inputText   appearance=standard  ><mat-label >inputText</mat-label><input   matInput  type=text   formControlName=inputText   name=inputText   [attr.aria-label]="'inputText'" ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field><mat-checkbox  id=ci6820 dibComponent=checkbox   style="  "  formControlName=checkbox   >   checkbox  </mat-checkbox></mat-card-content></mat-card></mat-card-content></mat-card></ng-container></div></ng-container></mat-card-content></mat-card><mat-card   style="  flex: 1 1 0%;  max-width:1300px" id=ci6823 dibComponent=card  ><mat-card-header ><mat-card-title >*ngIf in Grid</mat-card-title></mat-card-header><mat-card-content   style="  display:flex; flex-direction: column;  justify-content: flex-start;  align-items: stretch;  gap: 10px;"  ><ng-container [dibPort]="'6823'" ><span  id=ci6832 dibComponent=comment   style="  " ><div class=dib-comment ><b>Button:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ngStyle]="{{ '{' }}'background-color': getValue('inputColor'){{ '}' }}"</b><br><b>First Name: [ngStyle]="{{ '{' }}'background-color': row.color{{ '}' }}"</b><br><b>Position:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ngStyle]="{{ '{' }}'background-color': row.position == 'Employee' ? 'yellow' : (row.position == 'Manager' ? 'red' : 'transparent'){{ '}' }}"</b><br><i>Note, grid rows are editable...</i></div></span><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexNgClass" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:170px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  width:170px !important;   " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'6825'" ><button  mat-raised-button [ngStyle]="{'background-color': getValue('inputColor')}" [actionData]="row" id=ci6826 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Get Color From inputColor'"  type=button  ><span class=dibButtonCaption >Get Color From inputColor</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:170px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Actions  </div></div></th></ng-container><ng-container matColumnDef=btnVip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button [ngStyle]="{'background-color': getValue('inputColor')}" [actionData]="row" dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Get Color From inputColor'"  type=button  ><span class=dibButtonCaption >Get Color From inputColor</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Get Color From inputColor  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:80px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:80px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:80px !important;   " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:80px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6827 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  [ngStyle]="{'background-color': row.color}" dibComponent=inputText   style="  width:150px !important;   " ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6828 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:150px !important;   " ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6829 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field [ngStyle]="{'background-color': row.position == 'Employee' ? 'yellow' : (row.position == 'Manager' ? 'red' : 'transparent')}" dibComponent=selectEnum   style="  width:150px !important;   display:flex; flex-direction: column;  "  ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list6830.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci6830 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list6830.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=color  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:100px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:100px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'color','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:100px !important;   " ><input   matInput  type=text   formControlName=color   maxlength='50'  name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('color','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:100px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Color  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Color</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6831 dibComponent=inputText   style="  " ><mat-label >Color</mat-label><input   matInput  type=text   formControlName=color   name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexNgClass><mat-toolbar *ngIf="gridMultiselect || false"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=false  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=columnHeader  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:170px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  width:170px !important;   " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'6825'" ><button  mat-raised-button [ngStyle]="{'background-color': getValue('inputColor')}" [actionData]="row" id=ci6826 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Get Color From inputColor'"  type=button  ><span class=dibButtonCaption >Get Color From inputColor</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:170px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Actions  </div></div></th></ng-container><ng-container matColumnDef=btnVip  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button [ngStyle]="{'background-color': getValue('inputColor')}" [actionData]="row" dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnVip   style="  "  [attr.aria-label]="'Get Color From inputColor'"  type=button  ><span class=dibButtonCaption >Get Color From inputColor</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Get Color From inputColor  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:80px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:80px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:80px !important;   " ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:80px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6827 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  [ngStyle]="{'background-color': row.color}" dibComponent=inputText   style="  width:150px !important;   " ><input   matInput  type=text   formControlName=first_name   maxlength='50'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6828 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:150px !important;   " ><input   matInput  type=text   formControlName=last_name   maxlength='50'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6829 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:150px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:150px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field [ngStyle]="{'background-color': row.position == 'Employee' ? 'yellow' : (row.position == 'Manager' ? 'red' : 'transparent')}" dibComponent=selectEnum   style="  width:150px !important;   display:flex; flex-direction: column;  "  ><mat-select formControlName=position    required=true  ><mat-option *ngFor="let item of lists.list6830.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:150px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci6830 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-label>Position</mat-label><mat-select formControlName=position    ><mat-option *ngFor="let item of lists.list6830.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=color  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:100px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:100px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'color','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  width:100px !important;   " ><input   matInput  type=text   formControlName=color   maxlength='50'  name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('color','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:100px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Color  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Color</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6831 dibComponent=inputText   style="  " ><mat-label >Color</mat-label><input   matInput  type=text   formControlName=color   name=color   [attr.aria-label]="'Color'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('color', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('color', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, button_1.MatButtonModule, icon_1.MatIconModule, checkbox_1.MatCheckboxModule, select_1.MatSelectModule];
            dibexNgClassModule = class dibexNgClassModule {
                static entry = dibexNgClassComponent;
                static ɵfac = function dibexNgClassModule_Factory(t) { return new (t || dibexNgClassModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexNgClassModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexNgClassModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexNgClassModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexNgClassComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexNgClassModule, { declarations: [dibexNgClassComponent], imports: [common_1.CommonModule, shared_5.SharedModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, button_1.MatButtonModule, icon_1.MatIconModule, checkbox_1.MatCheckboxModule, select_1.MatSelectModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
