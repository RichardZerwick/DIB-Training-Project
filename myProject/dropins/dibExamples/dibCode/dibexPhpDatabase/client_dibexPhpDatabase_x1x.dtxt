System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/cdk/text-field", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexPhpDatabaseComponent, containerModules, dibexPhpDatabaseModule;
    var __moduleName = context_1 && context_1.id;
    function dibexPhpDatabaseComponent_button_21_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 56);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_button_21_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r45.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 57);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPhpDatabaseComponent_button_22_Template(rf, ctx) { if (rf & 1) {
        const _r48 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 58);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_button_22_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r47.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 59);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPhpDatabaseComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 60)(1, "mat-checkbox", 61);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_35_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r49.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexPhpDatabaseComponent_td_36_Template(rf, ctx) { if (rf & 1) {
        const _r54 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 62)(1, "mat-checkbox", 63);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_36_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexPhpDatabaseComponent_td_36_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r54); const row_r51 = restoredCtx.$implicit; const ctx_r53 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r53.selection.toggle(row_r51) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r51 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r51));
    } }
    function dibexPhpDatabaseComponent_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r60 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 65);
        i0.ɵɵelementContainerStart(2, 5);
        i0.ɵɵelementStart(3, "button", 66);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_38_ng_container_1_Template_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r60); const row_r58 = restoredCtx.ngIf; const ctx_r59 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r59.navigationService.goTo("dibexTestClientForm", "window", "?primary_id=" + row_r58.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r59 })); });
        i0.ɵɵelement(4, "dib-icon", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5618");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPhpDatabaseComponent_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_38_ng_container_1_Template, 5, 5, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r55 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r55);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r55.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 68);
    } }
    function dibexPhpDatabaseComponent_td_41_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r66 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 69);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_41_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r66); const row_r64 = restoredCtx.ngIf; const ctx_r65 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r65.navigationService.goTo("dibexTestClientForm", "window", "?primary_id=" + row_r64.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r65 })); });
        i0.ɵɵelement(2, "dib-icon", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPhpDatabaseComponent_td_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_41_ng_container_1_Template, 3, 4, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r61 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r61);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r61.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 68);
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r68 = i0.ɵɵnextContext(2).index;
        const ctx_r71 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r71.findColumnDisplayValue(rowIndex_r68, "id", "none", "number"), "");
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r80 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r80); const ctx_r79 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r79.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 74);
        i0.ɵɵelement(2, "input", 75);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r67 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r72 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.hasError("id", "required", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.view.recordStatus == "update" && ctx_r72.notSaved("id", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.view.recordStatus == "update" && ctx_r72.isSaved("id", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.isInvalid("id", rowForm_r67));
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_44_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_44_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_44_ng_container_1_span_4_Template, 7, 5, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_44_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r67 = i0.ɵɵnextContext().$implicit;
        const ctx_r69 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == false && rowForm_r67.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == true || rowForm_r67.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == false && rowForm_r67.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_44_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r67 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r67);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r67.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_45_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 88);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_45_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_45_div_2_span_2_Template, 2, 0, "span", 87);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r83 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r83.editorOpen);
    } }
    function dibexPhpDatabaseComponent_th_45_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_45_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r90 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_45_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r90); const ctx_r89 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r89.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_45_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_45_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r92 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 91)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_45_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r92); const ctx_r91 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r91.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_45_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r92); const ctx_r93 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r93.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_45_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_45_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r85 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r85.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.notSaved("id", ctx_r85.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.isSaved("id", ctx_r85.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_45_div_2_Template, 3, 1, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_45_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_45_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r95 = i0.ɵɵnextContext(2).index;
        const ctx_r98 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r98.findColumnDisplayValue(rowIndex_r95, "name", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r107 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r107); const ctx_r106 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r106.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r109 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r109); const ctx_r108 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r108.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r109); const ctx_r110 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r110.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r94 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r99 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.hasError("name", "required", rowForm_r94));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.hasError("name", "maxlength", rowForm_r94));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.view.recordStatus == "update" && ctx_r99.notSaved("name", rowForm_r94));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.view.recordStatus == "update" && ctx_r99.isSaved("name", rowForm_r94));
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_47_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_47_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_47_ng_container_1_span_4_Template, 7, 5, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_47_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r94 = i0.ɵɵnextContext().$implicit;
        const ctx_r96 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r96.excelEditing == false && rowForm_r94.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r96.excelEditing == true || rowForm_r94.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r96.excelEditing == false && rowForm_r94.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_47_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r94 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r94);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r94.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_48_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 88);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_48_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_48_div_2_span_2_Template, 2, 0, "span", 87);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r113 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r113.editorOpen);
    } }
    function dibexPhpDatabaseComponent_th_48_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_48_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r120 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_48_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r120); const ctx_r119 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r119.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_48_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_48_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r122 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_48_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r122); const ctx_r121 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r121.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_48_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r122); const ctx_r123 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r123.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_48_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_48_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r115 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r115.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r115.view.recordStatus == "update" && ctx_r115.notSaved("name", ctx_r115.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r115.view.recordStatus == "update" && ctx_r115.isSaved("name", ctx_r115.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_48_div_2_Template, 3, 1, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_48_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_48_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_50_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r125 = i0.ɵɵnextContext(2).index;
        const ctx_r128 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r128.findColumnDisplayValue(rowIndex_r125, "start_date", "none", "date"), "");
    } }
    function dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r136 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r136); const ctx_r135 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r135.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r138 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 97)(2, "input", 98);
        i0.ɵɵlistener("focus", function dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r138); const _r132 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r132.open()); })("keydown.enter", function dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r138); const ctx_r139 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r139.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r138); const ctx_r140 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r140.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 99)(4, "mat-datepicker", null, 100);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(7, dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r132 = i0.ɵɵreference(5);
        const rowForm_r124 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r129 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r132);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r132);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r129.view.recordStatus == "update" && ctx_r129.notSaved("start_date", rowForm_r124));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r129.view.recordStatus == "update" && ctx_r129.isSaved("start_date", rowForm_r124));
    } }
    function dibexPhpDatabaseComponent_td_50_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_50_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_50_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_50_ng_container_1_span_4_Template, 8, 5, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_50_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r124 = i0.ɵɵnextContext().$implicit;
        const ctx_r126 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r126.excelEditing == false && rowForm_r124.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r126.excelEditing == true || rowForm_r124.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r126.excelEditing == false && rowForm_r124.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_50_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r124 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r124);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r124.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_51_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_51_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_51_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r149 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_51_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r149); const ctx_r148 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r148.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_51_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_51_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r151 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_51_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r151); const ctx_r150 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r150.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_51_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r151); const ctx_r152 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r152.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_51_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_51_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r145 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r145.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r145.view.recordStatus == "update" && ctx_r145.notSaved("start_date", ctx_r145.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r145.view.recordStatus == "update" && ctx_r145.isSaved("start_date", ctx_r145.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_51_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_51_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_51_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_53_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r154 = i0.ɵɵnextContext(2).index;
        const ctx_r157 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r157.findColumnDisplayValue(rowIndex_r154, "phone", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r165 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r165); const ctx_r164 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r164.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r167 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 103);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r167); const ctx_r166 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r166.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r167); const ctx_r168 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r168.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r153 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r158 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r158.hasError("phone", "maxlength", rowForm_r153));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r158.view.recordStatus == "update" && ctx_r158.notSaved("phone", rowForm_r153));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r158.view.recordStatus == "update" && ctx_r158.isSaved("phone", rowForm_r153));
    } }
    function dibexPhpDatabaseComponent_td_53_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_53_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_53_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_53_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_53_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r153 = i0.ɵɵnextContext().$implicit;
        const ctx_r155 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r155.excelEditing == false && rowForm_r153.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r155.excelEditing == true || rowForm_r153.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r155.excelEditing == false && rowForm_r153.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_53_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r153 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r153);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r153.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_54_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_54_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_54_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r177 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_54_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r177); const ctx_r176 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r176.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_54_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_54_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r179 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 104)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_54_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r179); const ctx_r178 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r178.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_54_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r179); const ctx_r180 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r180.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_54_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_54_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r173 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r173.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r173.view.recordStatus == "update" && ctx_r173.notSaved("phone", ctx_r173.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r173.view.recordStatus == "update" && ctx_r173.isSaved("phone", ctx_r173.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_54_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_54_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_54_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_56_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r182 = i0.ɵɵnextContext(2).index;
        const ctx_r185 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r185.findColumnDisplayValue(rowIndex_r182, "email", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r193 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r193); const ctx_r192 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r192.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r195 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r195); const ctx_r194 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r194.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r195); const ctx_r196 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r196.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r181 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r186 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r186.hasError("email", "maxlength", rowForm_r181));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r186.view.recordStatus == "update" && ctx_r186.notSaved("email", rowForm_r181));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r186.view.recordStatus == "update" && ctx_r186.isSaved("email", rowForm_r181));
    } }
    function dibexPhpDatabaseComponent_td_56_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_56_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_56_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_56_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_56_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r181 = i0.ɵɵnextContext().$implicit;
        const ctx_r183 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r183.excelEditing == false && rowForm_r181.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r183.excelEditing == true || rowForm_r181.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r183.excelEditing == false && rowForm_r181.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_56_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r181 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r181);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r181.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_57_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_57_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_57_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r205 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_57_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r205); const ctx_r204 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r204.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_57_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_57_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r207 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_57_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r207); const ctx_r206 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r206.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_57_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r207); const ctx_r208 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r208.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_57_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_57_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r201 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r201.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r201.view.recordStatus == "update" && ctx_r201.notSaved("email", ctx_r201.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r201.view.recordStatus == "update" && ctx_r201.isSaved("email", ctx_r201.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_57_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_57_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_57_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_59_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r210 = i0.ɵɵnextContext(2).index;
        const ctx_r213 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r213.findColumnDisplayValue(rowIndex_r210, "address", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 255 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r221 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r221); const ctx_r220 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r220.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r223 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r223); const ctx_r222 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r222.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r223); const ctx_r224 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r224.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r209 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r214 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r214.hasError("address", "maxlength", rowForm_r209));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r214.view.recordStatus == "update" && ctx_r214.notSaved("address", rowForm_r209));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r214.view.recordStatus == "update" && ctx_r214.isSaved("address", rowForm_r209));
    } }
    function dibexPhpDatabaseComponent_td_59_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_59_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_59_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_59_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_59_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r209 = i0.ɵɵnextContext().$implicit;
        const ctx_r211 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r211.excelEditing == false && rowForm_r209.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.excelEditing == true || rowForm_r209.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.excelEditing == false && rowForm_r209.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_59_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r209 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r209);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r209.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_60_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_60_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_60_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r233 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_60_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r233); const ctx_r232 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r232.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_60_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_60_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r235 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_60_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r235); const ctx_r234 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r234.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_60_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r235); const ctx_r236 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r236.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_60_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_60_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r229 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r229.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.view.recordStatus == "update" && ctx_r229.notSaved("address", ctx_r229.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r229.view.recordStatus == "update" && ctx_r229.isSaved("address", ctx_r229.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_60_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_60_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_60_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_62_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r238 = i0.ɵɵnextContext(2).index;
        const ctx_r241 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r241.findColumnDisplayValue(rowIndex_r238, "city_town", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r249 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r249); const ctx_r248 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r248.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r251 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r251); const ctx_r250 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r250.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r251); const ctx_r252 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r252.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r237 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r242 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r242.hasError("city_town", "maxlength", rowForm_r237));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r242.view.recordStatus == "update" && ctx_r242.notSaved("city_town", rowForm_r237));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r242.view.recordStatus == "update" && ctx_r242.isSaved("city_town", rowForm_r237));
    } }
    function dibexPhpDatabaseComponent_td_62_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_62_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_62_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_62_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_62_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r237 = i0.ɵɵnextContext().$implicit;
        const ctx_r239 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r239.excelEditing == false && rowForm_r237.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r239.excelEditing == true || rowForm_r237.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r239.excelEditing == false && rowForm_r237.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_62_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r237 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r237);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r237.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_63_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_63_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_63_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r261 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_63_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r261); const ctx_r260 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r260.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_63_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_63_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r263 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 113)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_63_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r263); const ctx_r262 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r262.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_63_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r263); const ctx_r264 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r264.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_63_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_63_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r257 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r257.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r257.view.recordStatus == "update" && ctx_r257.notSaved("city_town", ctx_r257.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r257.view.recordStatus == "update" && ctx_r257.isSaved("city_town", ctx_r257.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_63_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_63_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_63_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_65_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r266 = i0.ɵɵnextContext(2).index;
        const ctx_r269 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r269.findColumnDisplayValue(rowIndex_r266, "country", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r277 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r277); const ctx_r276 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r276.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r279 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 115);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r279); const ctx_r278 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r278.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r279); const ctx_r280 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r280.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r265 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r270 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.hasError("country", "maxlength", rowForm_r265));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.view.recordStatus == "update" && ctx_r270.notSaved("country", rowForm_r265));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r270.view.recordStatus == "update" && ctx_r270.isSaved("country", rowForm_r265));
    } }
    function dibexPhpDatabaseComponent_td_65_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_65_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_65_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_65_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_65_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r265 = i0.ɵɵnextContext().$implicit;
        const ctx_r267 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r267.excelEditing == false && rowForm_r265.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.excelEditing == true || rowForm_r265.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r267.excelEditing == false && rowForm_r265.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_65_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r265 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r265);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r265.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_66_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_66_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_66_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r289 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_66_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r289); const ctx_r288 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r288.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_66_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_66_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r291 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 116)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_66_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r291); const ctx_r290 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r290.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_66_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r291); const ctx_r292 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r292.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_66_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_66_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r285 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r285.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r285.view.recordStatus == "update" && ctx_r285.notSaved("country", ctx_r285.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r285.view.recordStatus == "update" && ctx_r285.isSaved("country", ctx_r285.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_66_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_66_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_66_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_68_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r294 = i0.ɵɵnextContext(2).index;
        const ctx_r297 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r297.findColumnDisplayValue(rowIndex_r294, "zip_code", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r305 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r305); const ctx_r304 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r304.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r307 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r307); const ctx_r306 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r306.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r307); const ctx_r308 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r308.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r293 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r298 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r298.hasError("zip_code", "maxlength", rowForm_r293));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r298.view.recordStatus == "update" && ctx_r298.notSaved("zip_code", rowForm_r293));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r298.view.recordStatus == "update" && ctx_r298.isSaved("zip_code", rowForm_r293));
    } }
    function dibexPhpDatabaseComponent_td_68_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_68_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_68_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_68_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_68_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r293 = i0.ɵɵnextContext().$implicit;
        const ctx_r295 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r295.excelEditing == false && rowForm_r293.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r295.excelEditing == true || rowForm_r293.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r295.excelEditing == false && rowForm_r293.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_68_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r293 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r293);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r293.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_69_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Zip Code ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_69_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Zip Code");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_69_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r317 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_69_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r317); const ctx_r316 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r316.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_69_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_69_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r319 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 119)(2, "mat-label");
        i0.ɵɵtext(3, "Zip Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_69_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r319); const ctx_r318 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r318.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_69_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r319); const ctx_r320 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r320.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_69_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_69_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r313 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r313.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.notSaved("zip_code", ctx_r313.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.view.recordStatus == "update" && ctx_r313.isSaved("zip_code", ctx_r313.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_69_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_69_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_69_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_71_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r322 = i0.ɵɵnextContext(2).index;
        const ctx_r325 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r325.findColumnDisplayValue(rowIndex_r322, "notes", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r332 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r332); const ctx_r331 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r331.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r334 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 121)(2, "textarea", 122);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r334); const ctx_r333 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r333.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r334); const ctx_r335 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r335.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r321 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r326 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r326.view.recordStatus == "update" && ctx_r326.notSaved("notes", rowForm_r321));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r326.view.recordStatus == "update" && ctx_r326.isSaved("notes", rowForm_r321));
    } }
    function dibexPhpDatabaseComponent_td_71_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_71_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_71_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_71_ng_container_1_span_4_Template, 5, 3, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_71_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r321 = i0.ɵɵnextContext().$implicit;
        const ctx_r323 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r323.excelEditing == false && rowForm_r321.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r323.excelEditing == true || rowForm_r321.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r323.excelEditing == false && rowForm_r321.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_71_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r321 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r321);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r321.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_72_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_72_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_72_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r344 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_72_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r344); const ctx_r343 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r343.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_72_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_72_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r346 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 123)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 124);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_72_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r346); const ctx_r345 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r345.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_72_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r346); const ctx_r347 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r347.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_72_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_72_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r340 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r340.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.notSaved("notes", ctx_r340.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.isSaved("notes", ctx_r340.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_72_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_72_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_72_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_72_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r29.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_74_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r349 = i0.ɵɵnextContext(2).index;
        const ctx_r352 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r352.findColumnDisplayValue(rowIndex_r349, "updated", "none", "datetime"), "");
    } }
    function dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r360 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r360); const ctx_r359 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r359.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r362 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 125);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 99);
        i0.ɵɵelementStart(3, "input", 126);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r362); const ctx_r361 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r361.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r362); const ctx_r363 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r363.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 127);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r358 = i0.ɵɵreference(7);
        const rowForm_r348 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r353 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r358);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r358);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r353.view.recordStatus == "update" && ctx_r353.notSaved("updated", rowForm_r348));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r353.view.recordStatus == "update" && ctx_r353.isSaved("updated", rowForm_r348));
    } }
    function dibexPhpDatabaseComponent_td_74_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_74_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_74_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_74_ng_container_1_span_4_Template, 8, 5, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_74_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r348 = i0.ɵɵnextContext().$implicit;
        const ctx_r350 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r350.excelEditing == false && rowForm_r348.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r350.excelEditing == true || rowForm_r348.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r350.excelEditing == false && rowForm_r348.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_74_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_74_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r348 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r348);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r348.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_75_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_75_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_75_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r372 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_75_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r372); const ctx_r371 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r371.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_75_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_75_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r374 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 128)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 129);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_75_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r374); const ctx_r373 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r373.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_75_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r374); const ctx_r375 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r375.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_75_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_75_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r368 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r368.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.view.recordStatus == "update" && ctx_r368.notSaved("updated", ctx_r368.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.view.recordStatus == "update" && ctx_r368.isSaved("updated", ctx_r368.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_75_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_75_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_75_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
    } }
    function dibexPhpDatabaseComponent_td_77_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r377 = i0.ɵɵnextContext(2).index;
        const ctx_r380 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r380.findColumnDisplayValue(rowIndex_r377, "chinese_name", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r388 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r388); const ctx_r387 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r387.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r390 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r390); const ctx_r389 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r389.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r390); const ctx_r391 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r391.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r376 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r381 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Chinese Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r381.hasError("chinese_name", "maxlength", rowForm_r376));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r381.view.recordStatus == "update" && ctx_r381.notSaved("chinese_name", rowForm_r376));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r381.view.recordStatus == "update" && ctx_r381.isSaved("chinese_name", rowForm_r376));
    } }
    function dibexPhpDatabaseComponent_td_77_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_td_77_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_td_77_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_td_77_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_td_77_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r376 = i0.ɵɵnextContext().$implicit;
        const ctx_r378 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r378.excelEditing == false && rowForm_r376.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.excelEditing == true || rowForm_r376.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r378.excelEditing == false && rowForm_r376.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_td_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_td_77_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r376 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r376);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r376.getRawValue());
    } }
    function dibexPhpDatabaseComponent_th_78_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Chinese Name ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_78_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Chinese Name");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_78_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r400 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_th_78_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r400); const ctx_r399 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r399.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_78_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_th_78_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r402 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 131)(2, "mat-label");
        i0.ɵɵtext(3, "Chinese Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 132);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_th_78_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r402); const ctx_r401 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r401.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_th_78_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r402); const ctx_r403 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r403.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_th_78_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_th_78_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r396 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r396.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Chinese Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.view.recordStatus == "update" && ctx_r396.notSaved("chinese_name", ctx_r396.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.view.recordStatus == "update" && ctx_r396.isSaved("chinese_name", ctx_r396.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_th_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_th_78_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_th_78_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_th_78_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r33.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r33.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r33.showSearch);
    } }
    function dibexPhpDatabaseComponent_th_80_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 135);
    } }
    function dibexPhpDatabaseComponent_th_80_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 133);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_th_80_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 134);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r34.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r34.busy);
    } }
    function dibexPhpDatabaseComponent_th_82_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r405 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r405.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexPhpDatabaseComponent_th_82_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 136);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_th_82_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r35.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r35.busy && ctx_r35.tableDataSource.data.length == 0);
    } }
    function dibexPhpDatabaseComponent_ng_container_83_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 138);
    } }
    function dibexPhpDatabaseComponent_ng_container_83_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_container_83_tr_1_Template, 1, 0, "tr", 137);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r406 = ctx.$implicit;
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r36.columnHeaders.getArray(column_r406).items$));
    } }
    function dibexPhpDatabaseComponent_tr_84_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 139);
    } if (rf & 2) {
        const ctx_r37 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r37.busy ? "visible" : "hidden"));
    } }
    function dibexPhpDatabaseComponent_tr_85_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 139);
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r38.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexPhpDatabaseComponent_tr_86_Template(rf, ctx) { if (rf & 1) {
        const _r411 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 140);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_tr_86_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r411); const row_r408 = restoredCtx.$implicit; const ctx_r410 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r410.rowClick(row_r408, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r408 = ctx.$implicit;
        const ctx_r39 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r39.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r39.isHighlighted(row_r408)));
    } }
    function dibexPhpDatabaseComponent_88_ng_template_0_Template(rf, ctx) { }
    function dibexPhpDatabaseComponent_88_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexPhpDatabaseComponent_88_ng_template_0_Template, 0, 0, "ng-template", 141);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r43 = i0.ɵɵreference(93);
        i0.ɵɵproperty("ngTemplateOutlet", _r43);
    } }
    function dibexPhpDatabaseComponent_mat_toolbar_91_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r417 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 147);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_mat_toolbar_91_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r417); const ctx_r416 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r416.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r413 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r413.numberOfSelectedItems + " ", "item", ctx_r413.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexPhpDatabaseComponent_mat_toolbar_91_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_mat_toolbar_91_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_mat_toolbar_91_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r421 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 148);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_mat_toolbar_91_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r421); const ctx_r420 = i0.ɵɵnextContext(2); ctx_r420.gridShowClipboardDefault = !ctx_r420.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r420.gridShowClipboardDefault && ctx_r420.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_mat_toolbar_91_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_mat_toolbar_91_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r414 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r414.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r414.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexPhpDatabaseComponent_mat_toolbar_91_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r424 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 149, 19);
        i0.ɵɵlistener("page", function dibexPhpDatabaseComponent_mat_toolbar_91_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r424); const ctx_r423 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r423.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r415 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r415.page.totalRecords)("pageSize", ctx_r415.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexPhpDatabaseComponent_mat_toolbar_91_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 142);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_mat_toolbar_91_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 143);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_mat_toolbar_91_button_3_Template, 4, 3, "button", 144);
        i0.ɵɵelement(4, "span", 145);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_mat_toolbar_91_mat_paginator_5_Template, 2, 4, "mat-paginator", 146);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r42 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r42.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r42.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r463 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 65);
        i0.ɵɵelementContainerStart(2, 5);
        i0.ɵɵelementStart(3, "button", 66);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_2_ng_container_1_Template_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r463); const row_r461 = restoredCtx.ngIf; const ctx_r462 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r462.navigationService.goTo("dibexTestClientForm", "window", "?primary_id=" + row_r461.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r462 })); });
        i0.ɵɵelement(4, "dib-icon", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "5618");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_2_ng_container_1_Template, 5, 5, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r458 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r458);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r458.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 68);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r469 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 69);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_5_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r469); const row_r467 = restoredCtx.ngIf; const ctx_r468 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r468.navigationService.goTo("dibexTestClientForm", "window", "?primary_id=" + row_r467.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r468 })); });
        i0.ɵɵelement(2, "dib-icon", 67);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_5_ng_container_1_Template, 3, 4, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r464 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r464);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r464.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 68);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r471 = i0.ɵɵnextContext(2).index;
        const ctx_r474 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r474.findColumnDisplayValue(rowIndex_r471, "id", "none", "number"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r482 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r482); const ctx_r481 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r481.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r484 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 74)(2, "input", 154);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r484); const ctx_r483 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r483.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r484); const ctx_r485 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r485.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r470 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r475 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r475.hasError("id", "required", rowForm_r470));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r475.view.recordStatus == "update" && ctx_r475.notSaved("id", rowForm_r470));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r475.view.recordStatus == "update" && ctx_r475.isSaved("id", rowForm_r470));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r470 = i0.ɵɵnextContext().$implicit;
        const ctx_r472 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r472.excelEditing == false && rowForm_r470.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r472.excelEditing == true || rowForm_r470.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r472.excelEditing == false && rowForm_r470.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_8_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r470 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r470);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r470.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 88);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_9_div_2_span_2_Template, 2, 0, "span", 87);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r488 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r488.editorOpen);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r495 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r495); const ctx_r494 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r494.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r497 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 91)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r497); const ctx_r496 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r496.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r497); const ctx_r498 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r498.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r490 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r490.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r490.view.recordStatus == "update" && ctx_r490.notSaved("id", ctx_r490.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r490.view.recordStatus == "update" && ctx_r490.isSaved("id", ctx_r490.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_9_div_2_Template, 3, 1, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_9_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_9_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r430 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r430.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r500 = i0.ɵɵnextContext(2).index;
        const ctx_r503 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r503.findColumnDisplayValue(rowIndex_r500, "name", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r512 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r512); const ctx_r511 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r511.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r514 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r514); const ctx_r513 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r513.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r514); const ctx_r515 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r515.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r499 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r504 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.hasError("name", "required", rowForm_r499));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.hasError("name", "maxlength", rowForm_r499));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.view.recordStatus == "update" && ctx_r504.notSaved("name", rowForm_r499));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.view.recordStatus == "update" && ctx_r504.isSaved("name", rowForm_r499));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_4_Template, 7, 5, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r499 = i0.ɵɵnextContext().$implicit;
        const ctx_r501 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r501.excelEditing == false && rowForm_r499.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.excelEditing == true || rowForm_r499.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.excelEditing == false && rowForm_r499.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_11_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r499 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r499);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r499.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 88);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Name \u00A0");
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_12_div_2_span_2_Template, 2, 0, "span", 87);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r518 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r518.editorOpen);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r525 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r525); const ctx_r524 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r524.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r527 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r527); const ctx_r526 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r526.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r527); const ctx_r528 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r528.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r520 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r520.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r520.view.recordStatus == "update" && ctx_r520.notSaved("name", ctx_r520.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r520.view.recordStatus == "update" && ctx_r520.isSaved("name", ctx_r520.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_12_div_2_Template, 3, 1, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_12_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_12_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r432 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r432.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r432.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r530 = i0.ɵɵnextContext(2).index;
        const ctx_r533 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r533.findColumnDisplayValue(rowIndex_r530, "start_date", "none", "date"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r541 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r541); const ctx_r540 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r540.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r543 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 97)(2, "input", 98);
        i0.ɵɵlistener("focus", function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r543); const _r537 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r537.open()); })("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r543); const ctx_r544 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r544.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r543); const ctx_r545 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r545.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 99)(4, "mat-datepicker", null, 100);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(7, dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r537 = i0.ɵɵreference(5);
        const rowForm_r529 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r534 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r537);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r537);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r534.view.recordStatus == "update" && ctx_r534.notSaved("start_date", rowForm_r529));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r534.view.recordStatus == "update" && ctx_r534.isSaved("start_date", rowForm_r529));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_4_Template, 8, 5, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r529 = i0.ɵɵnextContext().$implicit;
        const ctx_r531 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r531.excelEditing == false && rowForm_r529.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r531.excelEditing == true || rowForm_r529.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r531.excelEditing == false && rowForm_r529.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_14_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r529 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r529);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r529.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r554 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r554); const ctx_r553 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r553.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r556 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 101)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r556); const ctx_r555 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r555.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r556); const ctx_r557 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r557.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r550 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r550.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r550.view.recordStatus == "update" && ctx_r550.notSaved("start_date", ctx_r550.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r550.view.recordStatus == "update" && ctx_r550.isSaved("start_date", ctx_r550.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_15_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_15_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_15_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r434 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r434.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r434.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r434.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r559 = i0.ɵɵnextContext(2).index;
        const ctx_r562 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r562.findColumnDisplayValue(rowIndex_r559, "phone", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r570 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r570); const ctx_r569 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r569.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r572 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 103);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r572); const ctx_r571 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r571.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r572); const ctx_r573 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r573.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r558 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r563 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r563.hasError("phone", "maxlength", rowForm_r558));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r563.view.recordStatus == "update" && ctx_r563.notSaved("phone", rowForm_r558));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r563.view.recordStatus == "update" && ctx_r563.isSaved("phone", rowForm_r558));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r558 = i0.ɵɵnextContext().$implicit;
        const ctx_r560 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r560.excelEditing == false && rowForm_r558.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r560.excelEditing == true || rowForm_r558.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r560.excelEditing == false && rowForm_r558.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_17_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r558 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r558);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r558.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r582 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r582); const ctx_r581 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r581.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r584 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 104)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r584); const ctx_r583 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r583.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r584); const ctx_r585 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r585.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r578 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r578.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r578.view.recordStatus == "update" && ctx_r578.notSaved("phone", ctx_r578.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r578.view.recordStatus == "update" && ctx_r578.isSaved("phone", ctx_r578.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_18_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_18_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_18_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r436 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r436.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r436.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r436.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r587 = i0.ɵɵnextContext(2).index;
        const ctx_r590 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r590.findColumnDisplayValue(rowIndex_r587, "email", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 100 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r598 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r598); const ctx_r597 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r597.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r600 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r600); const ctx_r599 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r599.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r600); const ctx_r601 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r601.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r586 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r591 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r591.hasError("email", "maxlength", rowForm_r586));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r591.view.recordStatus == "update" && ctx_r591.notSaved("email", rowForm_r586));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r591.view.recordStatus == "update" && ctx_r591.isSaved("email", rowForm_r586));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r586 = i0.ɵɵnextContext().$implicit;
        const ctx_r588 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r588.excelEditing == false && rowForm_r586.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r588.excelEditing == true || rowForm_r586.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r588.excelEditing == false && rowForm_r586.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_20_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r586 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r586);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r586.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r610 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r610); const ctx_r609 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r609.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r612 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r612); const ctx_r611 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r611.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r612); const ctx_r613 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r613.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r606 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r606.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r606.view.recordStatus == "update" && ctx_r606.notSaved("email", ctx_r606.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r606.view.recordStatus == "update" && ctx_r606.isSaved("email", ctx_r606.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_21_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_21_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_21_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r438 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r438.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r438.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r438.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r615 = i0.ɵɵnextContext(2).index;
        const ctx_r618 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r618.findColumnDisplayValue(rowIndex_r615, "address", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 255 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r626 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r626); const ctx_r625 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r625.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r628 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 109);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r628); const ctx_r627 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r627.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r628); const ctx_r629 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r629.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r614 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r619 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r619.hasError("address", "maxlength", rowForm_r614));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r619.view.recordStatus == "update" && ctx_r619.notSaved("address", rowForm_r614));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r619.view.recordStatus == "update" && ctx_r619.isSaved("address", rowForm_r614));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r614 = i0.ɵɵnextContext().$implicit;
        const ctx_r616 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r616.excelEditing == false && rowForm_r614.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r616.excelEditing == true || rowForm_r614.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r616.excelEditing == false && rowForm_r614.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_23_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r614 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r614);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r614.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r638 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r638); const ctx_r637 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r637.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r640 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 110)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r640); const ctx_r639 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r639.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r640); const ctx_r641 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r641.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r634 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r634.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r634.view.recordStatus == "update" && ctx_r634.notSaved("address", ctx_r634.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r634.view.recordStatus == "update" && ctx_r634.isSaved("address", ctx_r634.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_24_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_24_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_24_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r440 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r440.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r440.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r440.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r643 = i0.ɵɵnextContext(2).index;
        const ctx_r646 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r646.findColumnDisplayValue(rowIndex_r643, "city_town", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r654 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r654); const ctx_r653 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r653.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r656 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 112);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r656); const ctx_r655 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r655.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r656); const ctx_r657 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r657.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r642 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r647 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r647.hasError("city_town", "maxlength", rowForm_r642));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r647.view.recordStatus == "update" && ctx_r647.notSaved("city_town", rowForm_r642));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r647.view.recordStatus == "update" && ctx_r647.isSaved("city_town", rowForm_r642));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r642 = i0.ɵɵnextContext().$implicit;
        const ctx_r644 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r644.excelEditing == false && rowForm_r642.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r644.excelEditing == true || rowForm_r642.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r644.excelEditing == false && rowForm_r642.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_26_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r642 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r642);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r642.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r666 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r666); const ctx_r665 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r665.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r668 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 113)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 114);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r668); const ctx_r667 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r667.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r668); const ctx_r669 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r669.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r662 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r662.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r662.view.recordStatus == "update" && ctx_r662.notSaved("city_town", ctx_r662.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r662.view.recordStatus == "update" && ctx_r662.isSaved("city_town", ctx_r662.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_27_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_27_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_27_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r442 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r442.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r442.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r442.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r671 = i0.ɵɵnextContext(2).index;
        const ctx_r674 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r674.findColumnDisplayValue(rowIndex_r671, "country", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r682 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r682); const ctx_r681 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r681.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r684 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 115);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r684); const ctx_r683 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r683.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r684); const ctx_r685 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r685.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r670 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r675 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r675.hasError("country", "maxlength", rowForm_r670));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r675.view.recordStatus == "update" && ctx_r675.notSaved("country", rowForm_r670));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r675.view.recordStatus == "update" && ctx_r675.isSaved("country", rowForm_r670));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r670 = i0.ɵɵnextContext().$implicit;
        const ctx_r672 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r672.excelEditing == false && rowForm_r670.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r672.excelEditing == true || rowForm_r670.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r672.excelEditing == false && rowForm_r670.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_29_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r670 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r670);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r670.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r694 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r694); const ctx_r693 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r693.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r696 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 116)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 117);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r696); const ctx_r695 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r695.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r696); const ctx_r697 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r697.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r690 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r690.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r690.view.recordStatus == "update" && ctx_r690.notSaved("country", ctx_r690.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r690.view.recordStatus == "update" && ctx_r690.isSaved("country", ctx_r690.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_30_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_30_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_30_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r444 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r444.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r444.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r444.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r699 = i0.ɵɵnextContext(2).index;
        const ctx_r702 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r702.findColumnDisplayValue(rowIndex_r699, "zip_code", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 30 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r710 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r710); const ctx_r709 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r709.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r712 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 118);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r712); const ctx_r711 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r711.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r712); const ctx_r713 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r713.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r698 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r703 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r703.hasError("zip_code", "maxlength", rowForm_r698));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r703.view.recordStatus == "update" && ctx_r703.notSaved("zip_code", rowForm_r698));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r703.view.recordStatus == "update" && ctx_r703.isSaved("zip_code", rowForm_r698));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r698 = i0.ɵɵnextContext().$implicit;
        const ctx_r700 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r700.excelEditing == false && rowForm_r698.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r700.excelEditing == true || rowForm_r698.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r700.excelEditing == false && rowForm_r698.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_32_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r698 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r698);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r698.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Zip Code ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Zip Code");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r722 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r722); const ctx_r721 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r721.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r724 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 119)(2, "mat-label");
        i0.ɵɵtext(3, "Zip Code");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r724); const ctx_r723 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r723.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r724); const ctx_r725 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r725.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r718 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r718.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Zip Code");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r718.view.recordStatus == "update" && ctx_r718.notSaved("zip_code", ctx_r718.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r718.view.recordStatus == "update" && ctx_r718.isSaved("zip_code", ctx_r718.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_33_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_33_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_33_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r446 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r446.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r446.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r446.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r727 = i0.ɵɵnextContext(2).index;
        const ctx_r730 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r730.findColumnDisplayValue(rowIndex_r727, "notes", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r737 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r737); const ctx_r736 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r736.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r739 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 121)(2, "textarea", 122);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_Template_textarea_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r739); const ctx_r738 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r738.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_Template_textarea_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r739); const ctx_r740 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r740.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r726 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r731 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r731.view.recordStatus == "update" && ctx_r731.notSaved("notes", rowForm_r726));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r731.view.recordStatus == "update" && ctx_r731.isSaved("notes", rowForm_r726));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_4_Template, 5, 3, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r726 = i0.ɵɵnextContext().$implicit;
        const ctx_r728 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r728.excelEditing == false && rowForm_r726.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r728.excelEditing == true || rowForm_r726.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r728.excelEditing == false && rowForm_r726.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_35_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r726 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r726);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r726.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_36_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_36_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r749 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r749); const ctx_r748 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r748.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r751 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 123)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 124);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r751); const ctx_r750 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r750.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r751); const ctx_r752 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r752.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r745 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r745.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r745.view.recordStatus == "update" && ctx_r745.notSaved("notes", ctx_r745.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r745.view.recordStatus == "update" && ctx_r745.isSaved("notes", ctx_r745.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_36_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_36_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_36_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r448 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r448.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r448.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r448.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r754 = i0.ɵɵnextContext(2).index;
        const ctx_r757 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r757.findColumnDisplayValue(rowIndex_r754, "updated", "none", "datetime"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r765 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r765); const ctx_r764 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r764.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r767 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 125);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 99);
        i0.ɵɵelementStart(3, "input", 126);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r767); const ctx_r766 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r766.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r767); const ctx_r768 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r768.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 127);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r763 = i0.ɵɵreference(7);
        const rowForm_r753 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r758 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r763);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r763);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r758.view.recordStatus == "update" && ctx_r758.notSaved("updated", rowForm_r753));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r758.view.recordStatus == "update" && ctx_r758.isSaved("updated", rowForm_r753));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_4_Template, 8, 5, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r753 = i0.ɵɵnextContext().$implicit;
        const ctx_r755 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r755.excelEditing == false && rowForm_r753.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r755.excelEditing == true || rowForm_r753.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r755.excelEditing == false && rowForm_r753.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_38_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r753 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r753);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r753.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_39_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_39_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r777 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r777); const ctx_r776 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r776.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r779 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 128)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 129);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r779); const ctx_r778 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r778.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r779); const ctx_r780 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r780.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r773 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r773.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r773.view.recordStatus == "update" && ctx_r773.notSaved("updated", ctx_r773.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r773.view.recordStatus == "update" && ctx_r773.isSaved("updated", ctx_r773.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_39_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_39_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_39_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r450 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r450.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r450.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r450.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 73);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r782 = i0.ɵɵnextContext(2).index;
        const ctx_r785 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r785.findColumnDisplayValue(rowIndex_r782, "chinese_name", "none", "text"), "");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 80 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r793 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r793); const ctx_r792 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r792.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r795 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 73)(1, "mat-form-field", 93)(2, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r795); const ctx_r794 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r794.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r795); const ctx_r796 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r796.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r781 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r786 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Chinese Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r786.hasError("chinese_name", "maxlength", rowForm_r781));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r786.view.recordStatus == "update" && ctx_r786.notSaved("chinese_name", rowForm_r781));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r786.view.recordStatus == "update" && ctx_r786.isSaved("chinese_name", rowForm_r781));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 70)(2, "span", 71);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_3_Template, 2, 1, "span", 72);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_4_Template, 6, 4, "span", 72);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r781 = i0.ɵɵnextContext().$implicit;
        const ctx_r783 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r783.excelEditing == false && rowForm_r781.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r783.excelEditing == true || rowForm_r781.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r783.excelEditing == false && rowForm_r781.get("__edit").value === false);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 64);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_td_41_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r781 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r781);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r781.getRawValue());
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_42_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 86);
        i0.ɵɵtext(1, " Chinese Name ");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_42_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, "Chinese Name");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r805 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 79);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r805); const ctx_r804 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r804.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r807 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 90)(1, "mat-form-field", 131)(2, "mat-label");
        i0.ɵɵtext(3, "Chinese Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 132);
        i0.ɵɵlistener("keydown.enter", function dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r807); const ctx_r806 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r806.searchGrid(false)); })("keydown.esc", function dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r807); const ctx_r808 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r808.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 76);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r801 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r801.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Chinese Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r801.view.recordStatus == "update" && ctx_r801.notSaved("chinese_name", ctx_r801.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r801.view.recordStatus == "update" && ctx_r801.isSaved("chinese_name", ctx_r801.model.$formGroup));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 82);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_th_42_div_2_Template, 2, 0, "div", 83);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_42_div_3_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(4, dibexPhpDatabaseComponent_ng_template_92_th_42_div_4_Template, 7, 4, "div", 85);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r452 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r452.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r452.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r452.showSearch);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_44_Template(rf, ctx) { if (rf & 1) {
        const _r810 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 60)(1, "mat-checkbox", 155);
        i0.ɵɵlistener("change", function dibexPhpDatabaseComponent_ng_template_92_th_44_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r810); const ctx_r809 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r809.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r453 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r453.masterIsChecked)("indeterminate", ctx_r453.masterIsIndeterminate);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_td_45_Template(rf, ctx) { if (rf & 1) {
        const _r814 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 156)(1, "mat-checkbox", 63);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_td_45_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexPhpDatabaseComponent_ng_template_92_td_45_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r814); const row_r811 = restoredCtx.$implicit; const ctx_r813 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r813.selection.toggle(row_r811) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r811 = ctx.$implicit;
        const ctx_r454 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r454.isHighlighted(row_r811));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_47_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 135);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 157);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_th_47_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 134);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r455 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r455.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r455.busy);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_49_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r816 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r816.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 136);
        i0.ɵɵtemplate(1, dibexPhpDatabaseComponent_ng_template_92_th_49_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r456 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r456.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r456.busy && ctx_r456.tableDataSource.data.length == 0);
    } }
    function dibexPhpDatabaseComponent_ng_template_92_tr_50_Template(rf, ctx) { if (rf & 1) {
        const _r819 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 158);
        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_ng_template_92_tr_50_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r819); const row_r817 = restoredCtx.$implicit; const ctx_r818 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r818.rowClick(row_r817, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r817 = ctx.$implicit;
        const ctx_r457 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r457.isHighlighted(row_r817)));
    } }
    function dibexPhpDatabaseComponent_ng_template_92_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 150);
        i0.ɵɵelementContainerStart(1, 30);
        i0.ɵɵtemplate(2, dibexPhpDatabaseComponent_ng_template_92_td_2_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(3, dibexPhpDatabaseComponent_ng_template_92_th_3_Template, 1, 0, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 33);
        i0.ɵɵtemplate(5, dibexPhpDatabaseComponent_ng_template_92_td_5_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(6, dibexPhpDatabaseComponent_ng_template_92_th_6_Template, 1, 0, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 34);
        i0.ɵɵtemplate(8, dibexPhpDatabaseComponent_ng_template_92_td_8_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(9, dibexPhpDatabaseComponent_ng_template_92_th_9_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 35);
        i0.ɵɵtemplate(11, dibexPhpDatabaseComponent_ng_template_92_td_11_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(12, dibexPhpDatabaseComponent_ng_template_92_th_12_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 36);
        i0.ɵɵtemplate(14, dibexPhpDatabaseComponent_ng_template_92_td_14_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(15, dibexPhpDatabaseComponent_ng_template_92_th_15_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 37);
        i0.ɵɵtemplate(17, dibexPhpDatabaseComponent_ng_template_92_td_17_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(18, dibexPhpDatabaseComponent_ng_template_92_th_18_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 38);
        i0.ɵɵtemplate(20, dibexPhpDatabaseComponent_ng_template_92_td_20_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(21, dibexPhpDatabaseComponent_ng_template_92_th_21_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 39);
        i0.ɵɵtemplate(23, dibexPhpDatabaseComponent_ng_template_92_td_23_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(24, dibexPhpDatabaseComponent_ng_template_92_th_24_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 40);
        i0.ɵɵtemplate(26, dibexPhpDatabaseComponent_ng_template_92_td_26_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(27, dibexPhpDatabaseComponent_ng_template_92_th_27_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 41);
        i0.ɵɵtemplate(29, dibexPhpDatabaseComponent_ng_template_92_td_29_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(30, dibexPhpDatabaseComponent_ng_template_92_th_30_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 42);
        i0.ɵɵtemplate(32, dibexPhpDatabaseComponent_ng_template_92_td_32_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(33, dibexPhpDatabaseComponent_ng_template_92_th_33_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 43);
        i0.ɵɵtemplate(35, dibexPhpDatabaseComponent_ng_template_92_td_35_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(36, dibexPhpDatabaseComponent_ng_template_92_th_36_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 44);
        i0.ɵɵtemplate(38, dibexPhpDatabaseComponent_ng_template_92_td_38_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(39, dibexPhpDatabaseComponent_ng_template_92_th_39_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 45);
        i0.ɵɵtemplate(41, dibexPhpDatabaseComponent_ng_template_92_td_41_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(42, dibexPhpDatabaseComponent_ng_template_92_th_42_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(43, 27);
        i0.ɵɵtemplate(44, dibexPhpDatabaseComponent_ng_template_92_th_44_Template, 2, 2, "th", 28);
        i0.ɵɵtemplate(45, dibexPhpDatabaseComponent_ng_template_92_td_45_Template, 2, 1, "td", 151);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(46, 46);
        i0.ɵɵtemplate(47, dibexPhpDatabaseComponent_ng_template_92_th_47_Template, 2, 2, "th", 152);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(48, 48);
        i0.ɵɵtemplate(49, dibexPhpDatabaseComponent_ng_template_92_th_49_Template, 2, 2, "th", 49);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(50, dibexPhpDatabaseComponent_ng_template_92_tr_50_Template, 1, 3, "tr", 153);
        i0.ɵɵpipe(51, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r44 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r44.selectionDataSource);
        i0.ɵɵadvance(50);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(51, 2, ctx_r44.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i18 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i19 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i20 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i17 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexPhpDatabaseComponent = class dibexPhpDatabaseComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 223, name: 'dibexPhpDatabase', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*5631'] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = true; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'chinese_name', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['hdrActions', 'id', 'name', 'chinese_name', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = true;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexPhpDatabase');
                    this.containerName = 'dibexPhpDatabase'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 5620, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 5621, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, start_date: { itemId: 5622, type: 'date', fieldAlias: 'start_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, phone: { itemId: 5623, type: 'text', fieldAlias: 'phone', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 5624, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, address: { itemId: 5625, type: 'text', fieldAlias: 'address', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(255)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, city_town: { itemId: 5626, type: 'text', fieldAlias: 'city_town', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, country: { itemId: 5627, type: 'text', fieldAlias: 'country', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: 'USA', dataType: 'text', contentType: 'text', changeUrl: false }, zip_code: { itemId: 5628, type: 'text', fieldAlias: 'zip_code', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, notes: { itemId: 5629, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'multilinetext', changeUrl: false }, updated: { itemId: 5630, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, chinese_name: { itemId: 5633, type: 'text', fieldAlias: 'chinese_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(80)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('phone', this.model.modelItems.phone.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('address', this.model.modelItems.address.formControl);
                    this.model.$formGroup.addControl('city_town', this.model.modelItems.city_town.formControl);
                    this.model.$formGroup.addControl('country', this.model.modelItems.country.formControl);
                    this.model.$formGroup.addControl('zip_code', this.model.modelItems.zip_code.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.addControl('chinese_name', this.model.modelItems.chinese_name.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnGetFilterCriteria", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Database/gridCriteriaAndParams", itemAlias: "btnGetFilterCriteria", waitForCompletion: false, containerName: "dibexPhpDatabase", handlers: [] }, this.clientData, { itemEventId: 'ie282-dib', itemId: '5634', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnCrudFunctions", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Database/crudFunctions", itemAlias: "btnCrudFunctions", waitForCompletion: false, containerName: "dibexPhpDatabase", handlers: [] }, this.clientData, { itemEventId: 'ie283-dib', itemId: '5635', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnCrudFunctions1", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Database/databaseFunctions", itemAlias: "btnCrudFunctions1", waitForCompletion: false, containerName: "dibexPhpDatabase", handlers: [] }, this.clientData, { itemEventId: 'ie284-dib', itemId: '5636', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'id', 'name', 'chinese_name', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'zip_code', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexPhpDatabase`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexPhpDatabase`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexPhpDatabase`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 5620 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5621 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 5622 };
                    formDefaultsConfigs['phone'] = { contentType: "text", type: "none", defaultValue: "", listId: 5623 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 5624 };
                    formDefaultsConfigs['address'] = { contentType: "text", type: "none", defaultValue: "", listId: 5625 };
                    formDefaultsConfigs['city_town'] = { contentType: "text", type: "none", defaultValue: "", listId: 5626 };
                    formDefaultsConfigs['country'] = { contentType: "text", type: "none", defaultValue: "USA", listId: 5627 };
                    formDefaultsConfigs['zip_code'] = { contentType: "text", type: "none", defaultValue: "", listId: 5628 };
                    formDefaultsConfigs['notes'] = { contentType: "multilinetext", type: "none", defaultValue: "", listId: 5629 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 5630 };
                    formDefaultsConfigs['chinese_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 5633 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 5620, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 5621, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(80)], updateOn: 'blur' }), start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 5622, "date"), { validators: [], updateOn: 'blur' }), phone: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone", "none", false, formDefaults['phone'], 5623, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 5624, "text"), { validators: [forms_2.Validators.maxLength(100)], updateOn: 'blur' }), address: new forms_2.FormControl(this.calculateInitialColumnValue(row, "address", "none", false, formDefaults['address'], 5625, "text"), { validators: [forms_2.Validators.maxLength(255)], updateOn: 'blur' }), city_town: new forms_2.FormControl(this.calculateInitialColumnValue(row, "city_town", "none", false, formDefaults['city_town'], 5626, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), country: new forms_2.FormControl(this.calculateInitialColumnValue(row, "country", "none", false, formDefaults['country'], 5627, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), zip_code: new forms_2.FormControl(this.calculateInitialColumnValue(row, "zip_code", "none", false, formDefaults['zip_code'], 5628, "text"), { validators: [forms_2.Validators.maxLength(30)], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 5629, "text"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 5630, "datetime"), { validators: [], updateOn: 'blur' }), chinese_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "chinese_name", "none", false, formDefaults['chinese_name'], 5633, "text"), { validators: [forms_2.Validators.maxLength(80)], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexPhpDatabase', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexPhpDatabase' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexPhpDatabaseComponent_Factory(t) { return new (t || dibexPhpDatabaseComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexPhpDatabaseComponent, selectors: [["dibex-php-database"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 94, vars: 56, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5631", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexPhpDatabase", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci5609", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 0px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci5610", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-raised-button", "", "color", "primary", "id", "ci5636", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnCrudFunctions1", "aria-label", "Demonstrates the use of functions in the Database class", "matTooltipClass", "dib-tooltip", "type", "button", 3, "containerPortId", "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition"], [1, "dibButtonCaption"], ["mat-raised-button", "", "color", "primary", "id", "ci5635", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnCrudFunctions", "aria-label", "Demonstrates the use of functions in the Crud class", "matTooltipClass", "dib-tooltip", "type", "button", 3, "containerPortId", "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition"], ["mat-raised-button", "", "color", "primary", "id", "ci5634", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnGetFilterCriteria", "aria-label", "This uses DibFunctions::getGridCritAndParams() to convert user filters and selections to SQL criteria and params", "matTooltipClass", "dib-tooltip", "type", "button", 3, "containerPortId", "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition"], ["id", "ci5615", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci5614", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5612", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci5613", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci5611", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["id", "ci5632", "dibComponent", "gridPaging", 2, "display", "flex", "flex-direction", "row", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["id", "ci5616", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "btnGridEdit"], ["matColumnDef", "id"], ["matColumnDef", "name"], ["matColumnDef", "start_date"], ["matColumnDef", "phone"], ["matColumnDef", "email"], ["matColumnDef", "address"], ["matColumnDef", "city_town"], ["matColumnDef", "country"], ["matColumnDef", "zip_code"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "chinese_name"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexPhpDatabase", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci5612", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci5613", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-mini-fab", "", "color", "primary", "id", "ci5619", "dibComponent", "button", "aria-label", "View/edit this record", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "edit"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "button", "aria-label", "View/edit this record", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci5620", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "maxlength", "80", "required", "true", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5621", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["datepicker", "", "dibComponent", "datePicker"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker5622", ""], ["id", "ci5622", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "start_date", "name", "start_date", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone", "maxlength", "100", "name", "phone", 3, "keydown.enter", "keydown.esc"], ["id", "ci5623", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "phone", "name", "phone", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "100", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci5624", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "address", "maxlength", "255", "name", "address", 3, "keydown.enter", "keydown.esc"], ["id", "ci5625", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "address", "name", "address", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "city_town", "maxlength", "30", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["id", "ci5626", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "city_town", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "country", "maxlength", "30", "name", "country", 3, "keydown.enter", "keydown.esc"], ["id", "ci5627", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "country", "name", "country", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "zip_code", "maxlength", "30", "name", "zip_code", 3, "keydown.enter", "keydown.esc"], ["id", "ci5628", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "zip_code", "name", "zip_code", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputTextArea"], ["cdkTextareaAutosize", "", "cdkAutosizeMinRows", "5", "cdkAutosizeMaxRows", "6", "matInput", "", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci5629", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker5630", ""], ["id", "ci5630", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "chinese_name", "maxlength", "80", "name", "chinese_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci5633", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "chinese_name", "name", "chinese_name", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexPhpDatabaseComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexPhpDatabaseComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "div", 4);
                        i0.ɵɵelementContainerStart(5, 5);
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_Template_button_click_6_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(8, "button", 8)(9, "span", 9);
                        i0.ɵɵtext(10, "Demo Database.php functions");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(11, "button", 10)(12, "span", 9);
                        i0.ɵɵtext(13, "Demo Crud.php functions");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(14, "button", 11)(15, "span", 9);
                        i0.ɵɵtext(16, "Get Filter Criteria as SQL");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(17, "span", 12);
                        i0.ɵɵpipe(18, "safeHtml");
                        i0.ɵɵelementStart(19, "button", 13);
                        i0.ɵɵlistener("click", function dibexPhpDatabaseComponent_Template_button_click_19_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(20, "dib-icon", 14);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(21, dibexPhpDatabaseComponent_button_21_Template, 2, 4, "button", 15);
                        i0.ɵɵtemplate(22, dibexPhpDatabaseComponent_button_22_Template, 2, 4, "button", 16);
                        i0.ɵɵelement(23, "span", 17);
                        i0.ɵɵelementStart(24, "mat-paginator", 18, 19);
                        i0.ɵɵlistener("page", function dibexPhpDatabaseComponent_Template_mat_paginator_page_24_listener($event) { return ctx.changePage($event); });
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(26, "mat-card", 20)(27, "mat-card-content", 21);
                        i0.ɵɵelementContainerStart(28, 5);
                        i0.ɵɵelementStart(29, "div", 22, 23)(31, "form", 24);
                        i0.ɵɵelementContainerStart(32, 25);
                        i0.ɵɵelementStart(33, "table", 26);
                        i0.ɵɵelementContainerStart(34, 27);
                        i0.ɵɵtemplate(35, dibexPhpDatabaseComponent_th_35_Template, 2, 2, "th", 28);
                        i0.ɵɵtemplate(36, dibexPhpDatabaseComponent_td_36_Template, 2, 1, "td", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(37, 30);
                        i0.ɵɵtemplate(38, dibexPhpDatabaseComponent_td_38_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(39, dibexPhpDatabaseComponent_th_39_Template, 1, 0, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(40, 33);
                        i0.ɵɵtemplate(41, dibexPhpDatabaseComponent_td_41_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(42, dibexPhpDatabaseComponent_th_42_Template, 1, 0, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(43, 34);
                        i0.ɵɵtemplate(44, dibexPhpDatabaseComponent_td_44_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(45, dibexPhpDatabaseComponent_th_45_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(46, 35);
                        i0.ɵɵtemplate(47, dibexPhpDatabaseComponent_td_47_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(48, dibexPhpDatabaseComponent_th_48_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(49, 36);
                        i0.ɵɵtemplate(50, dibexPhpDatabaseComponent_td_50_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(51, dibexPhpDatabaseComponent_th_51_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(52, 37);
                        i0.ɵɵtemplate(53, dibexPhpDatabaseComponent_td_53_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(54, dibexPhpDatabaseComponent_th_54_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(55, 38);
                        i0.ɵɵtemplate(56, dibexPhpDatabaseComponent_td_56_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(57, dibexPhpDatabaseComponent_th_57_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(58, 39);
                        i0.ɵɵtemplate(59, dibexPhpDatabaseComponent_td_59_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(60, dibexPhpDatabaseComponent_th_60_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(61, 40);
                        i0.ɵɵtemplate(62, dibexPhpDatabaseComponent_td_62_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(63, dibexPhpDatabaseComponent_th_63_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(64, 41);
                        i0.ɵɵtemplate(65, dibexPhpDatabaseComponent_td_65_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(66, dibexPhpDatabaseComponent_th_66_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(67, 42);
                        i0.ɵɵtemplate(68, dibexPhpDatabaseComponent_td_68_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(69, dibexPhpDatabaseComponent_th_69_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(70, 43);
                        i0.ɵɵtemplate(71, dibexPhpDatabaseComponent_td_71_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(72, dibexPhpDatabaseComponent_th_72_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(73, 44);
                        i0.ɵɵtemplate(74, dibexPhpDatabaseComponent_td_74_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(75, dibexPhpDatabaseComponent_th_75_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(76, 45);
                        i0.ɵɵtemplate(77, dibexPhpDatabaseComponent_td_77_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(78, dibexPhpDatabaseComponent_th_78_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(79, 46);
                        i0.ɵɵtemplate(80, dibexPhpDatabaseComponent_th_80_Template, 2, 2, "th", 47);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(81, 48);
                        i0.ɵɵtemplate(82, dibexPhpDatabaseComponent_th_82_Template, 2, 2, "th", 49);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(83, dibexPhpDatabaseComponent_ng_container_83_Template, 3, 3, "ng-container", 50);
                        i0.ɵɵtemplate(84, dibexPhpDatabaseComponent_tr_84_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(85, dibexPhpDatabaseComponent_tr_85_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(86, dibexPhpDatabaseComponent_tr_86_Template, 1, 4, "tr", 52);
                        i0.ɵɵpipe(87, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(88, dibexPhpDatabaseComponent_88_Template, 1, 1, null, 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(89, "div", null, 54);
                        i0.ɵɵtemplate(91, dibexPhpDatabaseComponent_mat_toolbar_91_Template, 6, 3, "mat-toolbar", 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(92, dibexPhpDatabaseComponent_ng_template_92_Template, 52, 4, "ng-template", null, 55, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r41 = i0.ɵɵreference(90);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(51, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5631");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "5609");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference())("matTooltip", "Demonstrates the use of functions in the Database class")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵattribute("aria-label", "Demo Database.php functions");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference())("matTooltip", "Demonstrates the use of functions in the Crud class")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵattribute("aria-label", "Demo Crud.php functions");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference())("matTooltip", "This uses DibFunctions::getGridCritAndParams() to convert user filters and selections to SQL criteria and params")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵattribute("aria-label", "Get Filter Criteria as SQL");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(18, 47, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("length", ctx.page.totalRecords)("pageSize", ctx.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(53, _c2));
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("dibPort", "5616");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r41);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(50);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(54, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(55, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(87, 49, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || false);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibListenersDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatError, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.CdkTextareaAutosize, i14.MatProgressBar, i15.MatToolbar, i15.MatToolbarRow, i16.MatTooltip, i17.MatCard, i17.MatCardContent, i18.MatTable, i18.MatHeaderCellDef, i18.MatHeaderRowDef, i18.MatColumnDef, i18.MatCellDef, i18.MatRowDef, i18.MatHeaderCell, i18.MatCell, i18.MatHeaderRow, i18.MatRow, i19.MatSort, i19.MatSortHeader, i20.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexPhpDatabase'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexPhpDatabaseComponent.prototype, "reloadContainer", null);
            exports_1("dibexPhpDatabaseComponent", dibexPhpDatabaseComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPhpDatabaseComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-php-database', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5631 dibComponent=subcontainer   ><ng-container [dibPort]="'5631'" parentContainerName=dibexPhpDatabase  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><div   style="  padding:5px 10px 0px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci5609 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'5609'" ><button   mat-mini-fab color=accent  id=ci5610 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button  mat-raised-button color=primary  id=ci5636 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnCrudFunctions1   style="  " aria-label="Demonstrates the use of functions in the Database class"  [matTooltip]="'Demonstrates the use of functions in the Database class'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   [attr.aria-label]="'Demo Database.php functions'"  type=button  ><span class=dibButtonCaption >Demo Database.php functions</span></button><button  mat-raised-button color=primary  id=ci5635 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnCrudFunctions   style="  " aria-label="Demonstrates the use of functions in the Crud class"  [matTooltip]="'Demonstrates the use of functions in the Crud class'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   [attr.aria-label]="'Demo Crud.php functions'"  type=button  ><span class=dibButtonCaption >Demo Crud.php functions</span></button><button  mat-raised-button color=primary  id=ci5634 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnGetFilterCriteria   style="  " aria-label="This uses DibFunctions::getGridCritAndParams() to convert user filters and selections to SQL criteria and params"  [matTooltip]="'This uses DibFunctions::getGridCritAndParams() to convert user filters and selections to SQL criteria and params'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   [attr.aria-label]="'Get Filter Criteria as SQL'"  type=button  ><span class=dibButtonCaption >Get Filter Criteria as SQL</span></button><span  id=ci5615 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci5614 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5612 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci5613 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci5611 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><mat-paginator  id=ci5632 dibComponent=gridPaging   style="  display:flex; flex-direction: row;  "  #paginator  [length]="page.totalRecords"   (page)="changePage($event)"   [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]"  ></mat-paginator></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci5616 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'5616'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexPhpDatabase" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'5618'" ><button  mat-mini-fab color=primary  id=ci5619 dibComponent=button   (click)="navigationService.goTo(  'dibexTestClientForm',  'window',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   (click)="navigationService.goTo(  'dibexTestClientForm',  'window',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5620 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5621 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5622"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker5622.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5622" ></mat-datepicker-toggle><mat-datepicker #datePicker5622 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5622 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5623 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5624 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   maxlength='255'  name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('address','maxlength',rowForm)">Please enter 255 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5625 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5626 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5627 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=zip_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'zip_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=zip_code   maxlength='30'  name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('zip_code','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Zip Code  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Zip Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5628 dibComponent=inputText   style="  " ><mat-label >Zip Code</mat-label><input   matInput  type=text   formControlName=zip_code   name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=5  cdkAutosizeMaxRows=6    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5629 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5630"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5630"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5630></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5630 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=chinese_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'chinese_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=chinese_name   maxlength='80'  name=chinese_name   [attr.aria-label]="'Chinese Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('chinese_name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('chinese_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('chinese_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Chinese Name  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Chinese Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5633 dibComponent=inputText   style="  " ><mat-label >Chinese Name</mat-label><input   matInput  type=text   formControlName=chinese_name   name=chinese_name   [attr.aria-label]="'Chinese Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('chinese_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('chinese_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexPhpDatabase><mat-toolbar *ngIf="gridMultiselect || false"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=false  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'5618'" ><button  mat-mini-fab color=primary  id=ci5619 dibComponent=button   (click)="navigationService.goTo(  'dibexTestClientForm',  'window',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-mini-fab color=primary  dibComponent=button   (click)="navigationService.goTo(  'dibexTestClientForm',  'window',  '?primary_id='+row.id,   {   changeUrl: true,  target: '',   mouseEvent: $event,  originContainer : this  });"  style="  " aria-label="View/edit this record"  [matTooltip]="'View/edit this record'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   type=button  ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5620 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   maxlength='80'  required=true  name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5621 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker5622"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker5622.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker5622" ></mat-datepicker-toggle><mat-datepicker #datePicker5622 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5622 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   maxlength='100'  name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5623 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='100'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 100 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5624 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   maxlength='255'  name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('address','maxlength',rowForm)">Please enter 255 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5625 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   maxlength='30'  name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('city_town','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5626 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   maxlength='30'  name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('country','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5627 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=zip_code  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'zip_code','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=zip_code   maxlength='30'  name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('zip_code','maxlength',rowForm)">Please enter 30 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Zip Code  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Zip Code</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5628 dibComponent=inputText   style="  " ><mat-label >Zip Code</mat-label><input   matInput  type=text   formControlName=zip_code   name=zip_code   [attr.aria-label]="'Zip Code'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('zip_code', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('zip_code', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputTextArea   style="  " ><textarea cdkTextareaAutosize cdkAutosizeMinRows=5  cdkAutosizeMaxRows=6    matInput  formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ></textarea><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5629 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker5630"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker5630"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker5630></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5630 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=chinese_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'chinese_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=chinese_name   maxlength='80'  name=chinese_name   [attr.aria-label]="'Chinese Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('chinese_name','maxlength',rowForm)">Please enter 80 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('chinese_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('chinese_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Chinese Name  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Chinese Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci5633 dibComponent=inputText   style="  " ><mat-label >Chinese Name</mat-label><input   matInput  type=text   formControlName=chinese_name   name=chinese_name   [attr.aria-label]="'Chinese Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('chinese_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('chinese_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexPhpDatabaseModule = class dibexPhpDatabaseModule {
                static entry = dibexPhpDatabaseComponent;
                static ɵfac = function dibexPhpDatabaseModule_Factory(t) { return new (t || dibexPhpDatabaseModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexPhpDatabaseModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexPhpDatabaseModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexPhpDatabaseModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexPhpDatabaseComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexPhpDatabaseModule, { declarations: [dibexPhpDatabaseComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
