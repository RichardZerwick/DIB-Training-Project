System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/card", "@angular/material/datepicker", "@angular/material/button", "@angular/material/icon", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, card_1, datepicker_1, core_5, button_1, icon_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexGridBasicsComponent, containerModules, dibexGridBasicsModule;
    var __moduleName = context_1 && context_1.id;
    function dibexGridBasicsComponent_button_20_Template(rf, ctx) { if (rf & 1) {
        const _r42 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 56);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_button_20_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r41.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 57);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBasicsComponent_button_21_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 58);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_button_21_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 59);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexGridBasicsComponent_div_23_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r45 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r45.page.toRecord, "\u00A0of\u00A0", ctx_r45.page.records, "");
    } }
    function dibexGridBasicsComponent_div_23_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r46 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r46.page.totalRecords, ")");
    } }
    function dibexGridBasicsComponent_div_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 60);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_div_23_span_2_Template, 2, 2, "span", 53);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_div_23_span_4_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Grid Basics: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexGridBasicsComponent_th_33_Template(rf, ctx) { if (rf & 1) {
        const _r48 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 61)(1, "mat-checkbox", 62);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_33_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r47.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexGridBasicsComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        const _r52 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 63)(1, "mat-checkbox", 64);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_34_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridBasicsComponent_td_34_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r52); const row_r49 = restoredCtx.$implicit; const ctx_r51 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r51.selection.toggle(row_r49) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r49 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r49));
    } }
    function dibexGridBasicsComponent_td_36_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 66)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "button", 67)(5, "span", 11);
        i0.ɵɵtext(6, "button1");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4477");
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "button1");
    } }
    function dibexGridBasicsComponent_td_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_36_ng_container_1_Template, 7, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r53 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r53);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r53.getRawValue());
    } }
    function dibexGridBasicsComponent_th_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69)(2, "div");
        i0.ɵɵtext(3, " Actions ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBasicsComponent_td_39_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r58 = i0.ɵɵnextContext(2).index;
        const ctx_r61 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r61.findColumnDisplayValue(rowIndex_r58, "id", "none", "number"), "");
    } }
    function dibexGridBasicsComponent_td_39_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r69 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_39_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r69); const ctx_r68 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r68.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_39_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_39_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_39_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 75);
        i0.ɵɵelement(2, "input", 76);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_39_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_39_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_39_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r57 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r62 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.view.recordStatus == "update" && ctx_r62.notSaved("id", rowForm_r57));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.view.recordStatus == "update" && ctx_r62.isSaved("id", rowForm_r57));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r62.isInvalid("id", rowForm_r57));
    } }
    function dibexGridBasicsComponent_td_39_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_39_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 72);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_39_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_39_ng_container_1_span_4_Template, 6, 4, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_39_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r57 = i0.ɵɵnextContext().$implicit;
        const ctx_r59 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r59.excelEditing == false && rowForm_r57.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r59.excelEditing == true || rowForm_r57.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r59.excelEditing == false && rowForm_r57.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 70);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_39_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r57 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r57);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r57.getRawValue());
    } }
    function dibexGridBasicsComponent_th_40_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Id ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_40_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_40_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r78 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_40_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r78); const ctx_r77 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r77.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_40_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_40_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r80 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 90)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_40_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r80); const ctx_r79 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r79.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_40_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r80); const ctx_r81 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r81.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_40_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_40_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r74 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r74.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.view.recordStatus == "update" && ctx_r74.notSaved("id", ctx_r74.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.view.recordStatus == "update" && ctx_r74.isSaved("id", ctx_r74.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 83)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_40_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_40_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_40_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexGridBasicsComponent_td_42_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r83 = i0.ɵɵnextContext(2).index;
        const ctx_r86 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r86.findColumnDisplayValue(rowIndex_r83, "name", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_td_42_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r93 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_42_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r93); const ctx_r92 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r92.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_42_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_42_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r95 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_td_42_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r95); const ctx_r94 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r94.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_42_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r95); const ctx_r96 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r96.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_42_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_42_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r82 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r87 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r87.view.recordStatus == "update" && ctx_r87.notSaved("name", rowForm_r82));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r87.view.recordStatus == "update" && ctx_r87.isSaved("name", rowForm_r82));
    } }
    function dibexGridBasicsComponent_td_42_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_42_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_42_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_42_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_42_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r82 = i0.ɵɵnextContext().$implicit;
        const ctx_r84 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r84.excelEditing == false && rowForm_r82.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r84.excelEditing == true || rowForm_r82.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r84.excelEditing == false && rowForm_r82.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_42_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r82 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r82);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r82.getRawValue());
    } }
    function dibexGridBasicsComponent_th_43_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Name ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_43_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_43_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r105 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_43_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r105); const ctx_r104 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r104.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_43_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_43_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r107 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_43_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r107); const ctx_r106 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r106.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_43_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r107); const ctx_r108 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r108.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_43_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_43_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r101 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r101.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r101.view.recordStatus == "update" && ctx_r101.notSaved("name", ctx_r101.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r101.view.recordStatus == "update" && ctx_r101.isSaved("name", ctx_r101.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_43_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_43_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_43_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexGridBasicsComponent_td_45_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r110 = i0.ɵɵnextContext(2).index;
        const ctx_r113 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r113.findColumnDisplayValue(rowIndex_r110, "start_date", "none", "date"), "");
    } }
    function dibexGridBasicsComponent_td_45_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r121 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_45_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r121); const ctx_r120 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r120.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_45_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_45_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r123 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 96)(2, "input", 97);
        i0.ɵɵlistener("focus", function dibexGridBasicsComponent_td_45_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r123); const _r117 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r117.open()); })("keydown.enter", function dibexGridBasicsComponent_td_45_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r123); const ctx_r124 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r124.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_45_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r123); const ctx_r125 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r125.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 98)(4, "mat-datepicker", null, 99);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_td_45_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(7, dibexGridBasicsComponent_td_45_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r117 = i0.ɵɵreference(5);
        const rowForm_r109 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r114 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r117);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r117);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r114.view.recordStatus == "update" && ctx_r114.notSaved("start_date", rowForm_r109));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r114.view.recordStatus == "update" && ctx_r114.isSaved("start_date", rowForm_r109));
    } }
    function dibexGridBasicsComponent_td_45_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_45_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_45_ng_container_1_span_4_Template, 8, 5, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_45_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r109 = i0.ɵɵnextContext().$implicit;
        const ctx_r111 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r111.excelEditing == false && rowForm_r109.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r111.excelEditing == true || rowForm_r109.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r111.excelEditing == false && rowForm_r109.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_45_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r109 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r109);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r109.getRawValue());
    } }
    function dibexGridBasicsComponent_th_46_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_46_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_46_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r134 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_46_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r134); const ctx_r133 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r133.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_46_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_46_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r136 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_46_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r136); const ctx_r135 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r135.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_46_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r136); const ctx_r137 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r137.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_46_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_46_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r130 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r130.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r130.view.recordStatus == "update" && ctx_r130.notSaved("start_date", ctx_r130.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r130.view.recordStatus == "update" && ctx_r130.isSaved("start_date", ctx_r130.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_46_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_46_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_46_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexGridBasicsComponent_td_48_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r139 = i0.ɵɵnextContext(2).index;
        const ctx_r142 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r142.findColumnDisplayValue(rowIndex_r139, "phone", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_td_48_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r149 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_48_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r149); const ctx_r148 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r148.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_48_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_48_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r151 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_td_48_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r151); const ctx_r150 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r150.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_48_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r151); const ctx_r152 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r152.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_48_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_48_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r138 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r143 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r143.view.recordStatus == "update" && ctx_r143.notSaved("phone", rowForm_r138));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r143.view.recordStatus == "update" && ctx_r143.isSaved("phone", rowForm_r138));
    } }
    function dibexGridBasicsComponent_td_48_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_48_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_48_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_48_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_48_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r138 = i0.ɵɵnextContext().$implicit;
        const ctx_r140 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r140.excelEditing == false && rowForm_r138.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r140.excelEditing == true || rowForm_r138.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r140.excelEditing == false && rowForm_r138.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_48_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r138 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r138);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r138.getRawValue());
    } }
    function dibexGridBasicsComponent_th_49_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_49_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_49_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r161 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_49_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r161); const ctx_r160 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r160.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_49_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_49_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r163 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_49_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r163); const ctx_r162 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r162.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_49_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r163); const ctx_r164 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r164.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_49_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_49_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r157 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r157.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.view.recordStatus == "update" && ctx_r157.notSaved("phone", ctx_r157.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.view.recordStatus == "update" && ctx_r157.isSaved("phone", ctx_r157.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_49_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_49_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_49_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexGridBasicsComponent_td_51_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r166 = i0.ɵɵnextContext(2).index;
        const ctx_r169 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r169.findColumnDisplayValue(rowIndex_r166, "email", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_td_51_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r176 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_51_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r176); const ctx_r175 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r175.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_51_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_51_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r178 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_td_51_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r178); const ctx_r177 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r177.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_51_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r178); const ctx_r179 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r179.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_51_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_51_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r165 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r170 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r170.view.recordStatus == "update" && ctx_r170.notSaved("email", rowForm_r165));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r170.view.recordStatus == "update" && ctx_r170.isSaved("email", rowForm_r165));
    } }
    function dibexGridBasicsComponent_td_51_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_51_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_51_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_51_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_51_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r165 = i0.ɵɵnextContext().$implicit;
        const ctx_r167 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r167.excelEditing == false && rowForm_r165.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.excelEditing == true || rowForm_r165.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r167.excelEditing == false && rowForm_r165.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_51_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r165 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r165);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r165.getRawValue());
    } }
    function dibexGridBasicsComponent_th_52_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_52_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_52_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r188 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_52_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r188); const ctx_r187 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r187.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_52_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_52_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r190 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_52_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r190); const ctx_r189 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r189.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_52_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r190); const ctx_r191 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r191.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_52_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_52_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r184 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r184.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r184.view.recordStatus == "update" && ctx_r184.notSaved("email", ctx_r184.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r184.view.recordStatus == "update" && ctx_r184.isSaved("email", ctx_r184.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_52_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_52_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_52_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexGridBasicsComponent_td_54_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r193 = i0.ɵɵnextContext(2).index;
        const ctx_r196 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r196.findColumnDisplayValue(rowIndex_r193, "address", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_td_54_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r203 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_54_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r203); const ctx_r202 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r202.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_54_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_54_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r205 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_td_54_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r205); const ctx_r204 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r204.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_54_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r205); const ctx_r206 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r206.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_54_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_54_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r192 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r197 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r197.view.recordStatus == "update" && ctx_r197.notSaved("address", rowForm_r192));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r197.view.recordStatus == "update" && ctx_r197.isSaved("address", rowForm_r192));
    } }
    function dibexGridBasicsComponent_td_54_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_54_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_54_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_54_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_54_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r192 = i0.ɵɵnextContext().$implicit;
        const ctx_r194 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r194.excelEditing == false && rowForm_r192.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r194.excelEditing == true || rowForm_r192.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r194.excelEditing == false && rowForm_r192.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_54_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r192 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r192);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r192.getRawValue());
    } }
    function dibexGridBasicsComponent_th_55_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_55_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_55_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r215 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_55_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r215); const ctx_r214 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r214.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_55_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_55_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r217 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_55_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r217); const ctx_r216 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r216.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_55_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r217); const ctx_r218 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r218.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_55_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_55_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r211 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r211.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.view.recordStatus == "update" && ctx_r211.notSaved("address", ctx_r211.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.view.recordStatus == "update" && ctx_r211.isSaved("address", ctx_r211.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_55_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_55_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_55_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexGridBasicsComponent_td_57_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r220 = i0.ɵɵnextContext(2).index;
        const ctx_r223 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r223.findColumnDisplayValue(rowIndex_r220, "city_town", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_td_57_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r230 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_57_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r230); const ctx_r229 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r229.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_57_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_57_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_td_57_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r232); const ctx_r231 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r231.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_57_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r232); const ctx_r233 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r233.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_57_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_57_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r219 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r224 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r224.view.recordStatus == "update" && ctx_r224.notSaved("city_town", rowForm_r219));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r224.view.recordStatus == "update" && ctx_r224.isSaved("city_town", rowForm_r219));
    } }
    function dibexGridBasicsComponent_td_57_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_57_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_57_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_57_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_57_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r219 = i0.ɵɵnextContext().$implicit;
        const ctx_r221 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r221.excelEditing == false && rowForm_r219.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r221.excelEditing == true || rowForm_r219.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r221.excelEditing == false && rowForm_r219.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_57_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r219 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r219);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r219.getRawValue());
    } }
    function dibexGridBasicsComponent_th_58_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_58_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_58_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r242 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_58_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r242); const ctx_r241 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r241.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_58_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_58_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r244 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_58_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r244); const ctx_r243 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r243.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_58_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r244); const ctx_r245 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r245.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_58_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_58_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r238 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r238.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r238.view.recordStatus == "update" && ctx_r238.notSaved("city_town", ctx_r238.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r238.view.recordStatus == "update" && ctx_r238.isSaved("city_town", ctx_r238.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_58_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_58_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_58_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexGridBasicsComponent_td_60_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r247 = i0.ɵɵnextContext(2).index;
        const ctx_r250 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r250.findColumnDisplayValue(rowIndex_r247, "country", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_td_60_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r257 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_60_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r257); const ctx_r256 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r256.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_60_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_60_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r259 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_td_60_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r259); const ctx_r258 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r258.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_60_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r259); const ctx_r260 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r260.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_60_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_60_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r246 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r251 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r251.view.recordStatus == "update" && ctx_r251.notSaved("country", rowForm_r246));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r251.view.recordStatus == "update" && ctx_r251.isSaved("country", rowForm_r246));
    } }
    function dibexGridBasicsComponent_td_60_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_60_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_60_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_60_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_60_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r246 = i0.ɵɵnextContext().$implicit;
        const ctx_r248 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r248.excelEditing == false && rowForm_r246.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r248.excelEditing == true || rowForm_r246.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r248.excelEditing == false && rowForm_r246.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_60_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r246 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r246);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r246.getRawValue());
    } }
    function dibexGridBasicsComponent_th_61_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_61_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_61_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r269 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_61_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r269); const ctx_r268 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r268.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_61_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_61_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r271 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_61_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r271); const ctx_r270 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r270.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_61_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r271); const ctx_r272 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r272.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_61_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_61_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r265 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r265.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.view.recordStatus == "update" && ctx_r265.notSaved("country", ctx_r265.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.view.recordStatus == "update" && ctx_r265.isSaved("country", ctx_r265.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_61_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_61_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_61_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexGridBasicsComponent_td_63_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r274 = i0.ɵɵnextContext(2).index;
        const ctx_r277 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r277.findColumnDisplayValue(rowIndex_r274, "updated", "none", "datetime"), "");
    } }
    function dibexGridBasicsComponent_td_63_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r285 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_td_63_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r285); const ctx_r284 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r284.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_63_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_td_63_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r287 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 112);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 98);
        i0.ɵɵelementStart(3, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_td_63_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r287); const ctx_r286 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r286.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_td_63_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r287); const ctx_r288 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r288.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_63_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_63_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 114);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r283 = i0.ɵɵreference(7);
        const rowForm_r273 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r278 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r283);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r283);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.view.recordStatus == "update" && ctx_r278.notSaved("updated", rowForm_r273));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r278.view.recordStatus == "update" && ctx_r278.isSaved("updated", rowForm_r273));
    } }
    function dibexGridBasicsComponent_td_63_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_td_63_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_td_63_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_td_63_ng_container_1_span_4_Template, 8, 5, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_td_63_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r273 = i0.ɵɵnextContext().$implicit;
        const ctx_r275 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r275.excelEditing == false && rowForm_r273.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.excelEditing == true || rowForm_r273.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r275.excelEditing == false && rowForm_r273.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_td_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_63_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r273 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r273);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r273.getRawValue());
    } }
    function dibexGridBasicsComponent_th_64_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_64_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_64_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r297 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_th_64_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r297); const ctx_r296 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r296.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_64_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_th_64_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r299 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_th_64_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r299); const ctx_r298 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r298.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_th_64_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r299); const ctx_r300 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r300.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_th_64_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_th_64_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r293 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r293.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r293.view.recordStatus == "update" && ctx_r293.notSaved("updated", ctx_r293.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r293.view.recordStatus == "update" && ctx_r293.isSaved("updated", ctx_r293.model.$formGroup));
    } }
    function dibexGridBasicsComponent_th_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_th_64_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_th_64_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_th_64_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexGridBasicsComponent_td_66_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 117)(2, "span", 11);
        i0.ɵɵtext(3, "button1");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "button1");
    } }
    function dibexGridBasicsComponent_td_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_66_ng_container_1_Template, 4, 1, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r301 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r301);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r301.getRawValue());
    } }
    function dibexGridBasicsComponent_th_67_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69)(2, "div");
        i0.ɵɵtext(3, " button1 ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBasicsComponent_td_69_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 118);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r308 = ctx.ngIf;
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(row_r308.name);
    } }
    function dibexGridBasicsComponent_td_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_td_69_ng_container_1_Template, 3, 1, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r305 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r305);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r305.getRawValue());
    } }
    function dibexGridBasicsComponent_th_70_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69)(2, "div", 87);
        i0.ɵɵtext(3, " xxx ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBasicsComponent_th_72_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 121);
    } }
    function dibexGridBasicsComponent_th_72_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 119);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_th_72_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 120);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r30.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r30.busy);
    } }
    function dibexGridBasicsComponent_th_74_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r310 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r310.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridBasicsComponent_th_74_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 122);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_th_74_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r31.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r31.busy && ctx_r31.tableDataSource.data.length == 0);
    } }
    function dibexGridBasicsComponent_ng_container_75_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 124);
    } }
    function dibexGridBasicsComponent_ng_container_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_container_75_tr_1_Template, 1, 0, "tr", 123);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r311 = ctx.$implicit;
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r32.columnHeaders.getArray(column_r311).items$));
    } }
    function dibexGridBasicsComponent_tr_76_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 125);
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r33.busy ? "visible" : "hidden"));
    } }
    function dibexGridBasicsComponent_tr_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 125);
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r34.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexGridBasicsComponent_tr_78_Template(rf, ctx) { if (rf & 1) {
        const _r316 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 126);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_tr_78_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r316); const row_r313 = restoredCtx.$implicit; const ctx_r315 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r315.rowClick(row_r313, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r313 = ctx.$implicit;
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r35.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r35.isHighlighted(row_r313)));
    } }
    function dibexGridBasicsComponent_80_ng_template_0_Template(rf, ctx) { }
    function dibexGridBasicsComponent_80_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexGridBasicsComponent_80_ng_template_0_Template, 0, 0, "ng-template", 127);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r39 = i0.ɵɵreference(85);
        i0.ɵɵproperty("ngTemplateOutlet", _r39);
    } }
    function dibexGridBasicsComponent_mat_toolbar_83_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r322 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 133);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_mat_toolbar_83_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r322); const ctx_r321 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r321.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r318 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r318.numberOfSelectedItems + " ", "item", ctx_r318.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexGridBasicsComponent_mat_toolbar_83_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_mat_toolbar_83_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_mat_toolbar_83_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r326 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 134);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_mat_toolbar_83_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r326); const ctx_r325 = i0.ɵɵnextContext(2); ctx_r325.gridShowClipboardDefault = !ctx_r325.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r325.gridShowClipboardDefault && ctx_r325.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_mat_toolbar_83_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_mat_toolbar_83_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r319 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r319.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r319.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r319.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexGridBasicsComponent_mat_toolbar_83_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r329 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 135, 136);
        i0.ɵɵlistener("page", function dibexGridBasicsComponent_mat_toolbar_83_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r329); const ctx_r328 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r328.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r320 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r320.page.totalRecords)("pageSize", ctx_r320.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexGridBasicsComponent_mat_toolbar_83_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 128);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_mat_toolbar_83_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 129);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_mat_toolbar_83_button_3_Template, 4, 3, "button", 130);
        i0.ɵɵelement(4, "span", 131);
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_mat_toolbar_83_mat_paginator_5_Template, 2, 4, "mat-paginator", 132);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r38.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r38.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 66)(2, "div");
        i0.ɵɵelementContainerStart(3, 5);
        i0.ɵɵelementStart(4, "button", 67)(5, "span", 11);
        i0.ɵɵtext(6, "button1");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("dibPort", "4477");
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "button1");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_2_ng_container_1_Template, 7, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r359 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r359);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r359.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69)(2, "div");
        i0.ɵɵtext(3, " Actions ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r364 = i0.ɵɵnextContext(2).index;
        const ctx_r367 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r367.findColumnDisplayValue(rowIndex_r364, "id", "none", "number"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r374 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r374); const ctx_r373 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r373.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r376 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 75)(2, "input", 141);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r376); const ctx_r375 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r375.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r376); const ctx_r377 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r377.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r363 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r368 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.view.recordStatus == "update" && ctx_r368.notSaved("id", rowForm_r363));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r368.view.recordStatus == "update" && ctx_r368.isSaved("id", rowForm_r363));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 72);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r363 = i0.ɵɵnextContext().$implicit;
        const ctx_r365 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r365.excelEditing == false && rowForm_r363.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r365.excelEditing == true || rowForm_r363.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r365.excelEditing == false && rowForm_r363.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 70);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_5_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r363 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r363);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r363.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Id ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r386 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r386); const ctx_r385 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r385.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r388 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 90)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 91);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r388); const ctx_r387 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r387.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r388); const ctx_r389 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r389.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r382 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r382.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r382.view.recordStatus == "update" && ctx_r382.notSaved("id", ctx_r382.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r382.view.recordStatus == "update" && ctx_r382.isSaved("id", ctx_r382.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 83)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_6_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_6_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_6_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r333 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r333.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r333.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r333.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r391 = i0.ɵɵnextContext(2).index;
        const ctx_r394 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r394.findColumnDisplayValue(rowIndex_r391, "name", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r401 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r401); const ctx_r400 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r400.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r403 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r403); const ctx_r402 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r402.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r403); const ctx_r404 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r404.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r390 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r395 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r395.view.recordStatus == "update" && ctx_r395.notSaved("name", rowForm_r390));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r395.view.recordStatus == "update" && ctx_r395.isSaved("name", rowForm_r390));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r390 = i0.ɵɵnextContext().$implicit;
        const ctx_r392 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r392.excelEditing == false && rowForm_r390.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r392.excelEditing == true || rowForm_r390.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r392.excelEditing == false && rowForm_r390.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_8_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r390 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r390);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r390.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Name ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r413 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r413); const ctx_r412 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r412.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r415 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 95)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 94);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r415); const ctx_r414 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r414.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r415); const ctx_r416 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r416.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r409 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r409.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r409.view.recordStatus == "update" && ctx_r409.notSaved("name", ctx_r409.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r409.view.recordStatus == "update" && ctx_r409.isSaved("name", ctx_r409.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_9_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_9_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_9_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r335 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r335.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r335.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r335.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r418 = i0.ɵɵnextContext(2).index;
        const ctx_r421 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r421.findColumnDisplayValue(rowIndex_r418, "start_date", "none", "date"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r429 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r429); const ctx_r428 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r428.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r431 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 96)(2, "input", 97);
        i0.ɵɵlistener("focus", function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r431); const _r425 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r425.open()); })("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r431); const ctx_r432 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r432.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r431); const ctx_r433 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r433.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 98)(4, "mat-datepicker", null, 99);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(7, dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r425 = i0.ɵɵreference(5);
        const rowForm_r417 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r422 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r425);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r425);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r422.view.recordStatus == "update" && ctx_r422.notSaved("start_date", rowForm_r417));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r422.view.recordStatus == "update" && ctx_r422.isSaved("start_date", rowForm_r417));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_4_Template, 8, 5, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r417 = i0.ɵɵnextContext().$implicit;
        const ctx_r419 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r419.excelEditing == false && rowForm_r417.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r419.excelEditing == true || rowForm_r417.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r419.excelEditing == false && rowForm_r417.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_11_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r417 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r417);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r417.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r442 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r442); const ctx_r441 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r441.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r444 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r444); const ctx_r443 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r443.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r444); const ctx_r445 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r445.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r438 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r438.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r438.view.recordStatus == "update" && ctx_r438.notSaved("start_date", ctx_r438.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r438.view.recordStatus == "update" && ctx_r438.isSaved("start_date", ctx_r438.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_12_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_12_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_12_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r337 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r337.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r337.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r337.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r447 = i0.ɵɵnextContext(2).index;
        const ctx_r450 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r450.findColumnDisplayValue(rowIndex_r447, "phone", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r457 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r457); const ctx_r456 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r456.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r459 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r459); const ctx_r458 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r458.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r459); const ctx_r460 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r460.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r446 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r451 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.view.recordStatus == "update" && ctx_r451.notSaved("phone", rowForm_r446));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.view.recordStatus == "update" && ctx_r451.isSaved("phone", rowForm_r446));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r446 = i0.ɵɵnextContext().$implicit;
        const ctx_r448 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r448.excelEditing == false && rowForm_r446.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r448.excelEditing == true || rowForm_r446.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r448.excelEditing == false && rowForm_r446.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_14_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r446 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r446);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r446.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r469 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r469); const ctx_r468 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r468.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r471 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r471); const ctx_r470 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r470.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r471); const ctx_r472 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r472.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r465 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r465.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r465.view.recordStatus == "update" && ctx_r465.notSaved("phone", ctx_r465.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r465.view.recordStatus == "update" && ctx_r465.isSaved("phone", ctx_r465.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_15_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_15_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_15_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r339 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r339.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r339.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r339.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r474 = i0.ɵɵnextContext(2).index;
        const ctx_r477 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r477.findColumnDisplayValue(rowIndex_r474, "email", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r484 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r484); const ctx_r483 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r483.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r486 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r486); const ctx_r485 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r485.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r486); const ctx_r487 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r487.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r473 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r478 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r478.view.recordStatus == "update" && ctx_r478.notSaved("email", rowForm_r473));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r478.view.recordStatus == "update" && ctx_r478.isSaved("email", rowForm_r473));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r473 = i0.ɵɵnextContext().$implicit;
        const ctx_r475 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r475.excelEditing == false && rowForm_r473.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r475.excelEditing == true || rowForm_r473.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r475.excelEditing == false && rowForm_r473.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_17_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r473 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r473);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r473.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r496 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r496); const ctx_r495 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r495.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r498 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 105)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r498); const ctx_r497 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r497.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r498); const ctx_r499 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r499.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r492 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r492.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r492.view.recordStatus == "update" && ctx_r492.notSaved("email", ctx_r492.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r492.view.recordStatus == "update" && ctx_r492.isSaved("email", ctx_r492.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_18_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_18_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_18_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r341 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r341.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r341.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r341.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r501 = i0.ɵɵnextContext(2).index;
        const ctx_r504 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r504.findColumnDisplayValue(rowIndex_r501, "address", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r511 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r511); const ctx_r510 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r510.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r513 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r513); const ctx_r512 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r512.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r513); const ctx_r514 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r514.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r500 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r505 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r505.view.recordStatus == "update" && ctx_r505.notSaved("address", rowForm_r500));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r505.view.recordStatus == "update" && ctx_r505.isSaved("address", rowForm_r500));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r500 = i0.ɵɵnextContext().$implicit;
        const ctx_r502 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r502.excelEditing == false && rowForm_r500.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r502.excelEditing == true || rowForm_r500.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r502.excelEditing == false && rowForm_r500.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_20_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r500 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r500);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r500.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r523 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r523); const ctx_r522 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r522.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r525 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 107)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 106);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r525); const ctx_r524 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r524.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r525); const ctx_r526 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r526.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r519 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r519.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r519.view.recordStatus == "update" && ctx_r519.notSaved("address", ctx_r519.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r519.view.recordStatus == "update" && ctx_r519.isSaved("address", ctx_r519.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_21_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_21_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_21_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r343 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r343.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r343.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r343.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r528 = i0.ɵɵnextContext(2).index;
        const ctx_r531 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r531.findColumnDisplayValue(rowIndex_r528, "city_town", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r538 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r538); const ctx_r537 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r537.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r540 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r540); const ctx_r539 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r539.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r540); const ctx_r541 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r541.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r527 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r532 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r532.view.recordStatus == "update" && ctx_r532.notSaved("city_town", rowForm_r527));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r532.view.recordStatus == "update" && ctx_r532.isSaved("city_town", rowForm_r527));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r527 = i0.ɵɵnextContext().$implicit;
        const ctx_r529 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r529.excelEditing == false && rowForm_r527.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r529.excelEditing == true || rowForm_r527.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r529.excelEditing == false && rowForm_r527.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_23_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r527 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r527);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r527.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r550 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r550); const ctx_r549 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r549.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r552 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r552); const ctx_r551 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r551.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r552); const ctx_r553 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r553.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r546 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r546.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.view.recordStatus == "update" && ctx_r546.notSaved("city_town", ctx_r546.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r546.view.recordStatus == "update" && ctx_r546.isSaved("city_town", ctx_r546.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_24_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_24_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_24_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r345 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r345.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r345.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r345.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r555 = i0.ɵɵnextContext(2).index;
        const ctx_r558 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r558.findColumnDisplayValue(rowIndex_r555, "country", "none", "text"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r565 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r565); const ctx_r564 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r564.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r567 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 93)(2, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r567); const ctx_r566 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r566.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r567); const ctx_r568 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r568.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r554 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r559 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r559.view.recordStatus == "update" && ctx_r559.notSaved("country", rowForm_r554));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r559.view.recordStatus == "update" && ctx_r559.isSaved("country", rowForm_r554));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_4_Template, 5, 3, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r554 = i0.ɵɵnextContext().$implicit;
        const ctx_r556 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r556.excelEditing == false && rowForm_r554.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r556.excelEditing == true || rowForm_r554.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r556.excelEditing == false && rowForm_r554.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_26_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r554 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r554);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r554.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r577 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r577); const ctx_r576 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r576.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r579 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 111)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r579); const ctx_r578 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r578.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r579); const ctx_r580 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r580.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r573 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r573.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.view.recordStatus == "update" && ctx_r573.notSaved("country", ctx_r573.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.view.recordStatus == "update" && ctx_r573.isSaved("country", ctx_r573.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_27_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_27_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_27_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r347 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r347.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r347.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r347.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 74);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r582 = i0.ɵɵnextContext(2).index;
        const ctx_r585 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r585.findColumnDisplayValue(rowIndex_r582, "updated", "none", "datetime"), "");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r593 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r593); const ctx_r592 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r592.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r595 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 74)(1, "mat-form-field", 112);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 98);
        i0.ɵɵelementStart(3, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r595); const ctx_r594 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r594.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r595); const ctx_r596 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r596.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 114);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r591 = i0.ɵɵreference(7);
        const rowForm_r581 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r586 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r591);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r591);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r586.view.recordStatus == "update" && ctx_r586.notSaved("updated", rowForm_r581));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r586.view.recordStatus == "update" && ctx_r586.isSaved("updated", rowForm_r581));
    } }
    function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 71)(2, "span", 92);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_3_Template, 2, 1, "span", 73);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_4_Template, 8, 5, "span", 73);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r581 = i0.ɵɵnextContext().$implicit;
        const ctx_r583 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r583.excelEditing == false && rowForm_r581.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r583.excelEditing == true || rowForm_r581.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r583.excelEditing == false && rowForm_r581.get("__edit").value === false);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_29_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r581 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r581);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r581.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 87);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 88);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r605 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 80);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r605); const ctx_r604 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r604.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 81);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r607 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 89)(1, "mat-form-field", 115)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 116);
        i0.ɵɵlistener("keydown.enter", function dibexGridBasicsComponent_ng_template_84_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r607); const ctx_r606 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r606.searchGrid(false)); })("keydown.esc", function dibexGridBasicsComponent_ng_template_84_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r607); const ctx_r608 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r608.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 77);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r601 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r601.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r601.view.recordStatus == "update" && ctx_r601.notSaved("updated", ctx_r601.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r601.view.recordStatus == "update" && ctx_r601.isSaved("updated", ctx_r601.model.$formGroup));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_th_30_div_2_Template, 2, 0, "div", 84);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_30_div_3_Template, 2, 0, "div", 85);
        i0.ɵɵtemplate(4, dibexGridBasicsComponent_ng_template_84_th_30_div_4_Template, 7, 4, "div", 86);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r349 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r349.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r349.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r349.showSearch);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 117)(2, "span", 11);
        i0.ɵɵtext(3, "button1");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "button1");
    } }
    function dibexGridBasicsComponent_ng_template_84_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_32_ng_container_1_Template, 4, 1, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r609 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r609);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r609.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69)(2, "div");
        i0.ɵɵtext(3, " button1 ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBasicsComponent_ng_template_84_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 118);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r616 = ctx.ngIf;
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(row_r616.name);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_td_35_ng_container_1_Template, 3, 1, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r613 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r613);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r613.getRawValue());
    } }
    function dibexGridBasicsComponent_ng_template_84_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 68)(1, "div", 69)(2, "div", 87);
        i0.ɵɵtext(3, " xxx ");
        i0.ɵɵelementEnd()()();
    } }
    function dibexGridBasicsComponent_ng_template_84_th_38_Template(rf, ctx) { if (rf & 1) {
        const _r618 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 61)(1, "mat-checkbox", 142);
        i0.ɵɵlistener("change", function dibexGridBasicsComponent_ng_template_84_th_38_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r618); const ctx_r617 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r617.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r354 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r354.masterIsChecked)("indeterminate", ctx_r354.masterIsIndeterminate);
    } }
    function dibexGridBasicsComponent_ng_template_84_td_39_Template(rf, ctx) { if (rf & 1) {
        const _r622 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 143)(1, "mat-checkbox", 64);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_td_39_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexGridBasicsComponent_ng_template_84_td_39_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r622); const row_r619 = restoredCtx.$implicit; const ctx_r621 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r621.selection.toggle(row_r619) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r619 = ctx.$implicit;
        const ctx_r355 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r355.isHighlighted(row_r619));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_41_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 121);
    } }
    function dibexGridBasicsComponent_ng_template_84_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 144);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_th_41_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 120);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r356 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r356.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r356.busy);
    } }
    function dibexGridBasicsComponent_ng_template_84_th_43_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r624 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r624.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexGridBasicsComponent_ng_template_84_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 122);
        i0.ɵɵtemplate(1, dibexGridBasicsComponent_ng_template_84_th_43_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r357 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r357.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r357.busy && ctx_r357.tableDataSource.data.length == 0);
    } }
    function dibexGridBasicsComponent_ng_template_84_tr_44_Template(rf, ctx) { if (rf & 1) {
        const _r627 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 145);
        i0.ɵɵlistener("click", function dibexGridBasicsComponent_ng_template_84_tr_44_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r627); const row_r625 = restoredCtx.$implicit; const ctx_r626 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r626.rowClick(row_r625, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r625 = ctx.$implicit;
        const ctx_r358 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r358.isHighlighted(row_r625)));
    } }
    function dibexGridBasicsComponent_ng_template_84_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 137);
        i0.ɵɵelementContainerStart(1, 30);
        i0.ɵɵtemplate(2, dibexGridBasicsComponent_ng_template_84_td_2_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(3, dibexGridBasicsComponent_ng_template_84_th_3_Template, 4, 0, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 33);
        i0.ɵɵtemplate(5, dibexGridBasicsComponent_ng_template_84_td_5_Template, 2, 2, "td", 34);
        i0.ɵɵtemplate(6, dibexGridBasicsComponent_ng_template_84_th_6_Template, 5, 3, "th", 35);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 36);
        i0.ɵɵtemplate(8, dibexGridBasicsComponent_ng_template_84_td_8_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(9, dibexGridBasicsComponent_ng_template_84_th_9_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 37);
        i0.ɵɵtemplate(11, dibexGridBasicsComponent_ng_template_84_td_11_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(12, dibexGridBasicsComponent_ng_template_84_th_12_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 38);
        i0.ɵɵtemplate(14, dibexGridBasicsComponent_ng_template_84_td_14_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(15, dibexGridBasicsComponent_ng_template_84_th_15_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 39);
        i0.ɵɵtemplate(17, dibexGridBasicsComponent_ng_template_84_td_17_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(18, dibexGridBasicsComponent_ng_template_84_th_18_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 40);
        i0.ɵɵtemplate(20, dibexGridBasicsComponent_ng_template_84_td_20_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(21, dibexGridBasicsComponent_ng_template_84_th_21_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 41);
        i0.ɵɵtemplate(23, dibexGridBasicsComponent_ng_template_84_td_23_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(24, dibexGridBasicsComponent_ng_template_84_th_24_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 42);
        i0.ɵɵtemplate(26, dibexGridBasicsComponent_ng_template_84_td_26_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(27, dibexGridBasicsComponent_ng_template_84_th_27_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 43);
        i0.ɵɵtemplate(29, dibexGridBasicsComponent_ng_template_84_td_29_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(30, dibexGridBasicsComponent_ng_template_84_th_30_Template, 5, 3, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 44);
        i0.ɵɵtemplate(32, dibexGridBasicsComponent_ng_template_84_td_32_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(33, dibexGridBasicsComponent_ng_template_84_th_33_Template, 4, 0, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 45);
        i0.ɵɵtemplate(35, dibexGridBasicsComponent_ng_template_84_td_35_Template, 2, 2, "td", 31);
        i0.ɵɵtemplate(36, dibexGridBasicsComponent_ng_template_84_th_36_Template, 4, 0, "th", 32);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 27);
        i0.ɵɵtemplate(38, dibexGridBasicsComponent_ng_template_84_th_38_Template, 2, 2, "th", 28);
        i0.ɵɵtemplate(39, dibexGridBasicsComponent_ng_template_84_td_39_Template, 2, 1, "td", 138);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 46);
        i0.ɵɵtemplate(41, dibexGridBasicsComponent_ng_template_84_th_41_Template, 2, 2, "th", 139);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(42, 48);
        i0.ɵɵtemplate(43, dibexGridBasicsComponent_ng_template_84_th_43_Template, 2, 2, "th", 49);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(44, dibexGridBasicsComponent_ng_template_84_tr_44_Template, 1, 3, "tr", 140);
        i0.ɵɵpipe(45, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r40.selectionDataSource);
        i0.ɵɵadvance(44);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(45, 2, ctx_r40.columnsToDisplay.items$));
    } }
    // @todo francois we need to import these files before the view loads
    async function importFiles() {
        for (const fileLocation of importsRequired) {
            await SystemJS.import(fileLocation);
        }
    }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i17 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i18 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i19 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i16 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            // Promise.resolve()
            // .then(async () => {
            //   await importFiles();
            // })
            dibexGridBasicsComponent = class dibexGridBasicsComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = {
                    container: {
                        id: 179,
                        name: 'dibexGridBasics',
                        subContainerItemAliases: [],
                        allChildContainers: ["dibDocsExampleHtml"],
                        refreshChildContainers: {
                            "_": ['dibDocsExampleHtml*5595']
                        },
                        dropin: 'grid',
                        activeFilter: null,
                        configs: {},
                        keepInMemory: false
                    },
                    items: {},
                    primaryKeys: ["id"],
                    recordStatus: 'create',
                    debug: false,
                    debugItem: false
                };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = {
                    pageSize: 10,
                    pageIndex: 1,
                };
                //columnsToDisplay
                columnsToDisplay = new shared_3.DibArray([
                    'hdrActions',
                    'id',
                    'name',
                    'start_date',
                    'phone',
                    'spanInterpolation',
                    'email',
                    'address',
                    'city_town',
                    'country',
                    'updated',
                ]);
                allColumnsToDisplay = new shared_3.DibArray([
                    'hdrActions',
                    'id',
                    'name',
                    'start_date',
                    'phone',
                    'spanInterpolation',
                    'email',
                    'address',
                    'city_town',
                    'country',
                    'updated',
                ]);
                // Columns will always have a first row
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = true;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    //Define the lists
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexGridBasics');
                    this.containerName = 'dibexGridBasics'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = {
                        id: {
                            itemId: 4478,
                            type: 'number',
                            fieldAlias: 'id',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: false,
                            update: false,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'number',
                            contentType: 'integer',
                            changeUrl: false
                        },
                        name: {
                            itemId: 4479,
                            type: 'text',
                            fieldAlias: 'name',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        start_date: {
                            itemId: 4480,
                            type: 'date',
                            fieldAlias: 'start_date',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'date',
                            contentType: 'date',
                            changeUrl: false
                        },
                        phone: {
                            itemId: 4481,
                            type: 'text',
                            fieldAlias: 'phone',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        email: {
                            itemId: 4482,
                            type: 'text',
                            fieldAlias: 'email',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        address: {
                            itemId: 4483,
                            type: 'text',
                            fieldAlias: 'address',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        city_town: {
                            itemId: 4484,
                            type: 'text',
                            fieldAlias: 'city_town',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        country: {
                            itemId: 4485,
                            type: 'text',
                            fieldAlias: 'country',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        updated: {
                            itemId: 4486,
                            type: 'datetime',
                            fieldAlias: 'updated',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'datetime',
                            contentType: 'datetime',
                            changeUrl: false
                        },
                    };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('phone', this.model.modelItems.phone.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('address', this.model.modelItems.address.formControl);
                    this.model.$formGroup.addControl('city_town', this.model.modelItems.city_town.formControl);
                    this.model.$formGroup.addControl('country', this.model.modelItems.country.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy))
                        .subscribe(change => {
                        //--dib-controller-action--modelChange--
                        this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'modelChange');
                    });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({
                        thisArg: this,
                        containerPortId: this.containerActionReference(),
                        actionId: "dibexGridBasics",
                        actionType: "reloadContainer",
                        responseType: 'actions',
                        submitUrl: null,
                        itemAlias: "",
                        waitForCompletion: false,
                        containerName: "dibexGridBasics",
                        handlers: [
                        // Need to get a port if available then navigate to the port -- @Cobus tested
                        ]
                    }, this.clientData, {
                        containerEventId: 'EAD3C8EB13BE4006AA97061B450F5277-dib'
                    });
                    let lists = {};
                    let self = this;
                    //Defining the list item services
                    lists = this.lists;
                    //--dib-controller-action--onInit--
                    this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'onInit');
                    this.tableDataSource.data = [];
                    // Register all the clientData for this container
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({
                        gridRows: this.formBuilder.array([])
                    });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'id', 'name', 'start_date', 'phone', 'spanInterpolation', 'email', 'address', 'city_town', 'country', 'updated']));
                }
                ngAfterViewInit() {
                    super.ngAfterViewInit();
                    window.dispatchEvent(new Event('resize'));
                    //--dib-controller-action--afterViewInit--
                    this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'afterViewInit');
                    this.setupService();
                    this.setupDelete();
                    this.reloadContainer();
                    this.clientData.selected_self = null;
                    this.updateSearchFromUrl();
                }
                toggleExcelEditing() {
                    this.excelEditing = !this.excelEditing;
                    this.editorOpen = true;
                    if (this.excelEditing) {
                        this.editorOpen = false;
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                                control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => {
                                    // Check all dropdowns before submitting the change event
                                    if (control.pristine == false) {
                                        this.submit$.next(control);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            control.get('__edit').setValue(false);
                        });
                    }
                }
                editRow(row) {
                    if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                        this.submit$.next(row);
                        this.editorOpen = false;
                    }
                    else {
                        //Only edit one row at a stage
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (control.get('__edit').value == true) {
                                this.submit$.next(control);
                            }
                        });
                        this.editorOpen = true;
                        row.get('__edit').setValue(!row.get('__edit').value);
                    }
                }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    // If this is not a new record then close the new record
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    // If this is a new record and there is nothing selected we will create a blank record by default
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    // If this is a new record and there is nothing selected we will create a blank record by default
                    this.messagingService.confirm({
                        title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'),
                        message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`),
                        okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'),
                        cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank')
                    }).then((result) => {
                        this.addDataToGrid(true, result);
                    });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => {
                        self.editFormGroup = formGroup;
                        //--dib-controller-action--beforeSubmit--
                        this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'beforeSubmit');
                        this.busy = true;
                        return formGroup;
                    }), operators_1.switchMap(() => {
                        let primaryKeys = {};
                        this.view.primaryKeys.forEach((key) => {
                            primaryKeys[key] = self.editFormGroup.get(key).value;
                        });
                        return this.crudService.update(this.model.crudUrl, this.view.container.name, {
                            primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys,
                            clientData: this.clientData,
                            activeFilter: this.view.container.activeFilter,
                            model: this.model,
                            formGroup: self.editFormGroup,
                        });
                    }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => {
                                    if (!!self.editFormGroup.controls[key] == true) {
                                        self.editFormGroup.controls[key].setValue(response.records[key]);
                                    }
                                });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                // After the record is saved we need to subscribe to the valueChanges
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') {
                                //--dib-controller-action--create--
                                this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'create');
                            }
                            else {
                                //--dib-controller-action--update--
                                this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'update');
                            }
                            this.model.$formGroup.markAsPristine();
                            //--dib-controller-action--onSubmit--
                            this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'onSubmit');
                        }
                        else {
                            //--dib-controller-action--onSubmitFailed--
                            this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'onSubmitFailed');
                            if (this.view.recordStatus == 'create') {
                                //--dib-controller-action--createFailed--
                                this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'createFailed');
                            }
                            else {
                                //--dib-controller-action--updateFailed--
                                this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'updateFailed');
                            }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    // Preventing items clicked 
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    // this.allClientData.alias.clickedLast = this.clickedLast;
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    // Build up only items vir itemAlias
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => {
                            if (!!this.model.modelItems[key].itemAlias == true) {
                                lastClickValue[key] = lastClickedRawValue[key];
                            }
                        });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexGridBasics`, value: this.clientData.clickedLast_self });
                    //--dib-controller-action--rowClick--
                    this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'rowClick');
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    //--dib-controller-action--rowsDeselected--
                    this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'rowsDeselected');
                    //--dib-controller-action--rowsSelected--
                    this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'rowsSelected');
                    // if none is selected
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        //--dib-clientData-options--selected--
                        this.eventService.emit({ name: `selected_dibexGridBasics`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => {
                            if (!!s.getRawValue()[key]) {
                                res[key] = s.getRawValue()[key];
                            }
                        });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    // Ensure that we have selected row info when the primary info is not present in the grid
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexGridBasics`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({
                            title: 'No records selected',
                            message: 'Please select a record and try again.',
                            okText: 'Okay'
                        });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({
                            title: 'No records selected',
                            message: 'Please select a record and try again.',
                            okText: 'Okay'
                        });
                        return;
                    }
                    this.messagingService.confirm({
                        title: 'Delete Selected Record',
                        message: 'Are you sure you want to delete?',
                        okText: 'Yes',
                        cancelText: 'Cancel'
                    }).then(result => {
                        if (result !== false) {
                            this.delete$.next(null);
                        }
                    });
                }
                setupDelete() {
                    this.delete$ = new rxjs_1.Subject();
                    this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => {
                        //--dib-controller-action--beforeDelete--
                        this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'beforeDelete');
                        this.busy = true;
                    }), operators_1.switchMap(() => {
                        let primaryKeys = {};
                        this.view.primaryKeys.forEach(key => {
                            if (this.clientData.selected_self[key] !== undefined) {
                                primaryKeys[key] = this.clientData.selected_self[key];
                            }
                        });
                        return this.crudService.delete(this.model.crudUrl, this.view.container.name, {
                            primaryKeys: primaryKeys,
                            clientData: this.clientData,
                            activeFilter: this.view.container.activeFilter,
                        })
                            .pipe(operators_1.finalize(() => this.busy = false));
                    }), operators_1.tap(response => {
                        if (response.success) {
                            this.clearSelection();
                            this.clearClientDataSelection();
                            this.reloadContainer();
                            //--dib-controller-action--delete--
                            this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'delete');
                        }
                    })).subscribe();
                }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => {
                        this.page$.next(this.page);
                    })).subscribe();
                    this.page$.pipe(operators_1.tap(page => {
                        this.page = page;
                        this.busy = true;
                    }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => {
                        //--dib-controller-action--beforeLoad--
                        this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'beforeLoad');
                        // Clear selected items
                        this.clearClientDataSelection();
                        if (this.showSearch) {
                            this.clientData.gridFilter_self = this.allClientData.gridFilter;
                            this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                        }
                        else {
                            delete this.clientData.gridFilter_self;
                            this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                        }
                    }), operators_1.switchMap((page) => {
                        const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }];
                        return this.crudService.list(this.model.crudUrl, this.view.container.name, {
                            page: { number: page.pageIndex + 1, limit: page.pageSize },
                            searchText: null,
                            sort: sort,
                            filter: this.filter,
                            clientData: this.clientData,
                            activeFilter: this.view.container.activeFilter
                        }).pipe(operators_1.catchError((err) => {
                            this.busy = false;
                            return rxjs_1.of({ success: false, message: `${err}` });
                        }));
                    }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            //--dib-controller-action--load--
                            this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'load');
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    // Getting defaults for all columns 
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4478 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4479 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 4480 };
                    formDefaultsConfigs['phone'] = { contentType: "text", type: "none", defaultValue: "", listId: 4481 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 4482 };
                    formDefaultsConfigs['address'] = { contentType: "text", type: "none", defaultValue: "", listId: 4483 };
                    formDefaultsConfigs['city_town'] = { contentType: "text", type: "none", defaultValue: "", listId: 4484 };
                    formDefaultsConfigs['country'] = { contentType: "text", type: "none", defaultValue: "", listId: 4485 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 4486 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        // Crud call to get server defaults 
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, {
                                    primaryKeys: null,
                                    clientData: this.clientData,
                                    activeFilter: this.view.container.activeFilter,
                                    canCreate: this.canCreate
                                }).pipe(operators_1.catchError((err) => {
                                    this.busy = false;
                                    return rxjs_1.of({ success: false, message: `${err}` });
                                }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => {
                                    if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                        formDefaultsConfigs[key].defaultValue = result.records[key];
                                    }
                                });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => {
                                    const value = await this.findDefaultValue(formDefaultsConfigs[key]);
                                    formDefaults[key] = value;
                                }));
                            }
                            catch (error) {
                                // Handle error
                            }
                        }
                        // Merge server default with client defaults
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    //@todo multisect items
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                            //   this.selection.selected[0].value
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({
                        gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({
                                __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false),
                                __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false),
                                id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4478, "number"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 4479, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 4480, "date"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                phone: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone", "none", false, formDefaults['phone'], 4481, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 4482, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                address: new forms_2.FormControl(this.calculateInitialColumnValue(row, "address", "none", false, formDefaults['address'], 4483, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                city_town: new forms_2.FormControl(this.calculateInitialColumnValue(row, "city_town", "none", false, formDefaults['city_town'], 4484, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                country: new forms_2.FormControl(this.calculateInitialColumnValue(row, "country", "none", false, formDefaults['country'], 4485, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 4486, "datetime"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                            });
                            return rowFormGroup;
                        }))
                    });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => {
                    });
                    // Defaults :) 
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => {
                        const selected = this.selection.selected;
                        this.selection._emitChanges = false;
                        this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d))));
                        this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d))));
                        this.selection._emitChanges = true;
                        // Enabling excel editing if the setting was turned on the grid
                        if (this.gridExcelEditingEnabled == true) {
                            this.toggleExcelEditing();
                        }
                    }))
                        .subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    //--dib-controller-action--onDestroy--
                    this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'onDestroy');
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() {
                }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    //--dib-controller-action--reloadContainer--
                    this.actionService.handle(this.containerActionReference(), 'dibexGridBasics', 'reloadContainer');
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        // To accomodate for columnHeaders in grids @todo probably need to execute updateFromDefault from all container instead of a general one
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({
                        name: 'onReloaddibexGridBasics',
                        value: this
                    });
                    this.eventService.emit({
                        name: 'OnReloadContainer',
                        value: 'dibexGridBasics'
                    });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = {
                        number: 1,
                        length: 0,
                        pageSize: 10,
                        pageIndex: 0,
                        lastLoad: 1,
                        totalRecords: 0,
                        allRecords: false
                    };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        // reload translations
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexGridBasicsComponent_Factory(t) { return new (t || dibexGridBasicsComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexGridBasicsComponent, selectors: [["dibex-grid-basics"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 86, vars: 41, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci5595", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexGridBasics", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci4471", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start"], [3, "dibPort"], ["mat-mini-fab", "", "color", "primary", "id", "ci5600", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci5599", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-raised-button", "", "color", "primary", "id", "ci5048", "dibComponent", "button", "type", "button"], [1, "dibButtonCaption"], ["mat-raised-button", "", "color", "primary", "id", "ci5049", "dibComponent", "button", "type", "button"], ["id", "ci4474", "dibComponent", "span", 2, "flex", "0 1 200px", 3, "innerHtml"], ["mat-mini-fab", "", "color", "accent", "id", "ci5596", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci5597", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "accent", "id", "ci5598", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci4472", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["id", "ci4473", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci4475", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; width:90px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:90px; ", 4, "matHeaderCellDef"], ["matColumnDef", "name"], ["matColumnDef", "start_date"], ["matColumnDef", "phone"], ["matColumnDef", "email"], ["matColumnDef", "address"], ["matColumnDef", "city_town"], ["matColumnDef", "country"], ["matColumnDef", "updated"], ["matColumnDef", "button"], ["matColumnDef", "spanInterpolation"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexGridBasics", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "accent", "id", "ci5597", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci5598", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci4473", "dibComponent", "gridTotals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "flex", "1 1 0%"], ["mat-raised-button", "", "color", "primary", "id", "ci6676", "dibComponent", "button", "type", "button"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-cell", "", 2, "padding", "2px", "width", "90px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell", 2, "width", "90px"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", 2, "width", "90px !important"], ["matInput", "", "type", "number", "formControlName", "id", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "90px"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4478", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], [1, "dib-cell"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4479", "dibComponent", "inputText"], ["dibComponent", "datePicker"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker4480", ""], ["id", "ci4480", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "start_date", "name", "start_date", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone", "name", "phone", 3, "keydown.enter", "keydown.esc"], ["id", "ci4481", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci4482", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "address", "name", "address", 3, "keydown.enter", "keydown.esc"], ["id", "ci4483", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "city_town", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["id", "ci4484", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "country", "name", "country", 3, "keydown.enter", "keydown.esc"], ["id", "ci4485", "dibComponent", "inputText"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker4486", ""], ["id", "ci4486", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-raised-button", "", "color", "primary", "dibComponent", "button", "type", "button"], ["dibComponent", "spanInterpolation"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexGridBasicsComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexGridBasicsComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "div", 4);
                        i0.ɵɵelementContainerStart(5, 5);
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexGridBasicsComponent_Template_button_click_6_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(8, "button", 8);
                        i0.ɵɵlistener("click", function dibexGridBasicsComponent_Template_button_click_8_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(9, "dib-icon", 9);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(10, "button", 10)(11, "span", 11);
                        i0.ɵɵtext(12, "Do Nothing");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(13, "button", 12)(14, "span", 11);
                        i0.ɵɵtext(15, "Do Nothing");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelement(16, "span", 13);
                        i0.ɵɵpipe(17, "safeHtml");
                        i0.ɵɵelementStart(18, "button", 14);
                        i0.ɵɵlistener("click", function dibexGridBasicsComponent_Template_button_click_18_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(19, "dib-icon", 15);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(20, dibexGridBasicsComponent_button_20_Template, 2, 4, "button", 16);
                        i0.ɵɵtemplate(21, dibexGridBasicsComponent_button_21_Template, 2, 4, "button", 17);
                        i0.ɵɵelement(22, "span", 18);
                        i0.ɵɵtemplate(23, dibexGridBasicsComponent_div_23_Template, 5, 3, "div", 19);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(24, "mat-card", 20)(25, "mat-card-content", 21);
                        i0.ɵɵelementContainerStart(26, 5);
                        i0.ɵɵelementStart(27, "div", 22, 23)(29, "form", 24);
                        i0.ɵɵelementContainerStart(30, 25);
                        i0.ɵɵelementStart(31, "table", 26);
                        i0.ɵɵelementContainerStart(32, 27);
                        i0.ɵɵtemplate(33, dibexGridBasicsComponent_th_33_Template, 2, 2, "th", 28);
                        i0.ɵɵtemplate(34, dibexGridBasicsComponent_td_34_Template, 2, 1, "td", 29);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(35, 30);
                        i0.ɵɵtemplate(36, dibexGridBasicsComponent_td_36_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(37, dibexGridBasicsComponent_th_37_Template, 4, 0, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(38, 33);
                        i0.ɵɵtemplate(39, dibexGridBasicsComponent_td_39_Template, 2, 2, "td", 34);
                        i0.ɵɵtemplate(40, dibexGridBasicsComponent_th_40_Template, 5, 3, "th", 35);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(41, 36);
                        i0.ɵɵtemplate(42, dibexGridBasicsComponent_td_42_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(43, dibexGridBasicsComponent_th_43_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(44, 37);
                        i0.ɵɵtemplate(45, dibexGridBasicsComponent_td_45_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(46, dibexGridBasicsComponent_th_46_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(47, 38);
                        i0.ɵɵtemplate(48, dibexGridBasicsComponent_td_48_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(49, dibexGridBasicsComponent_th_49_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(50, 39);
                        i0.ɵɵtemplate(51, dibexGridBasicsComponent_td_51_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(52, dibexGridBasicsComponent_th_52_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(53, 40);
                        i0.ɵɵtemplate(54, dibexGridBasicsComponent_td_54_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(55, dibexGridBasicsComponent_th_55_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(56, 41);
                        i0.ɵɵtemplate(57, dibexGridBasicsComponent_td_57_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(58, dibexGridBasicsComponent_th_58_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(59, 42);
                        i0.ɵɵtemplate(60, dibexGridBasicsComponent_td_60_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(61, dibexGridBasicsComponent_th_61_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(62, 43);
                        i0.ɵɵtemplate(63, dibexGridBasicsComponent_td_63_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(64, dibexGridBasicsComponent_th_64_Template, 5, 3, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(65, 44);
                        i0.ɵɵtemplate(66, dibexGridBasicsComponent_td_66_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(67, dibexGridBasicsComponent_th_67_Template, 4, 0, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(68, 45);
                        i0.ɵɵtemplate(69, dibexGridBasicsComponent_td_69_Template, 2, 2, "td", 31);
                        i0.ɵɵtemplate(70, dibexGridBasicsComponent_th_70_Template, 4, 0, "th", 32);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(71, 46);
                        i0.ɵɵtemplate(72, dibexGridBasicsComponent_th_72_Template, 2, 2, "th", 47);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(73, 48);
                        i0.ɵɵtemplate(74, dibexGridBasicsComponent_th_74_Template, 2, 2, "th", 49);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(75, dibexGridBasicsComponent_ng_container_75_Template, 3, 3, "ng-container", 50);
                        i0.ɵɵtemplate(76, dibexGridBasicsComponent_tr_76_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(77, dibexGridBasicsComponent_tr_77_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(78, dibexGridBasicsComponent_tr_78_Template, 1, 4, "tr", 52);
                        i0.ɵɵpipe(79, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(80, dibexGridBasicsComponent_80_Template, 1, 1, null, 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(81, "div", null, 54);
                        i0.ɵɵtemplate(83, dibexGridBasicsComponent_mat_toolbar_83_Template, 6, 3, "mat-toolbar", 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(84, dibexGridBasicsComponent_ng_template_84_Template, 46, 4, "ng-template", null, 55, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r37 = i0.ɵɵreference(82);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(37, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "5595");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "4471");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵattribute("aria-label", "Do Nothing");
                        i0.ɵɵadvance(3);
                        i0.ɵɵattribute("aria-label", "Do Nothing");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(17, 33, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4475");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r37);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(44);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(39, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(40, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(79, 35, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || false);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatToolbar, i14.MatToolbarRow, i15.MatTooltip, i16.MatCard, i16.MatCardContent, i17.MatTable, i17.MatHeaderCellDef, i17.MatHeaderRowDef, i17.MatColumnDef, i17.MatCellDef, i17.MatRowDef, i17.MatHeaderCell, i17.MatCell, i17.MatHeaderRow, i17.MatRow, i18.MatSort, i18.MatSortHeader, i19.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexGridBasics'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexGridBasicsComponent.prototype, "reloadContainer", null);
            exports_1("dibexGridBasicsComponent", dibexGridBasicsComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridBasicsComponent, [{
                    type: core_2.Component,
                    args: [{
                            selector: 'dibex-grid-basics',
                            template: `
        <form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci5595 dibComponent=subcontainer   ><ng-container [dibPort]="'5595'" parentContainerName=dibexGridBasics  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  " id=ci4471 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4471'" ><button   mat-mini-fab color=primary  id=ci5600 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button mat-mini-fab color=accent  id=ci5599 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"  [matTooltip]="'Delete selected record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button  mat-raised-button color=primary  id=ci5048 dibComponent=button   style="  "  [attr.aria-label]="'Do Nothing'"  type=button  ><span class=dibButtonCaption >Do Nothing</span></button><button  mat-raised-button color=primary  id=ci5049 dibComponent=button   style="  "  [attr.aria-label]="'Do Nothing'"  type=button  ><span class=dibButtonCaption >Do Nothing</span></button><span  id=ci4474 dibComponent=span   style="  flex: 0 1 200px;  "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=accent  id=ci5596 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=accent  id=ci5597 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=accent  id=ci5598 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci4472 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div  id=ci4473 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Grid Basics: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci4475 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4475'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexGridBasics" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4477'" ><button  mat-raised-button color=primary  id=ci6676 dibComponent=button   style="  "  [attr.aria-label]="'button1'"  type=button  ><span class=dibButtonCaption >button1</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Actions  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:90px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:90px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:90px !important;   " ><input   matInput  type=number   formControlName=id   name=id   [attr.aria-label]="'Id'" ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:90px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4478 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4479 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4480"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4480.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4480" ></mat-datepicker-toggle><mat-datepicker #datePicker4480 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4480 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4481 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4482 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4483 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4484 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4485 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4486"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4486"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4486></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4486 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=button  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button color=primary  dibComponent=button   style="  "  [attr.aria-label]="'button1'"  type=button  ><span class=dibButtonCaption >button1</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > button1  </div></div></th></ng-container><ng-container matColumnDef=spanInterpolation  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span  dibComponent=spanInterpolation   style="  " >{{row.name}}</span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div mat-sort-header> xxx  </div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexGridBasics><mat-toolbar *ngIf="gridMultiselect || false"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=false  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><div   style="  flex: 1 1 0%;  " dibComponent=columnHeader  ><div   style="  " ><ng-container [dibPort]="'4477'" ><button  mat-raised-button color=primary  id=ci6676 dibComponent=button   style="  "  [attr.aria-label]="'button1'"  type=button  ><span class=dibButtonCaption >button1</span></button></ng-container></div></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > Actions  </div></div></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; width:90px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="width:90px;   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  width:90px !important;   " ><input   matInput  type=number   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:90px; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4478 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4479 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4480"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker4480.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4480" ></mat-datepicker-toggle><mat-datepicker #datePicker4480 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4480 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4481 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4482 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4483 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4484 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4485 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4486"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4486"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4486></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4486 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=button  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><button  mat-raised-button color=primary  dibComponent=button   style="  "  [attr.aria-label]="'button1'"  type=button  ><span class=dibButtonCaption >button1</span></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > button1  </div></div></th></ng-container><ng-container matColumnDef=spanInterpolation  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span  dibComponent=spanInterpolation   style="  " >{{row.name}}</span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div mat-sort-header> xxx  </div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
  `
                        }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, button_1.MatButtonModule, icon_1.MatIconModule];
            dibexGridBasicsModule = class dibexGridBasicsModule {
                static entry = dibexGridBasicsComponent;
                static ɵfac = function dibexGridBasicsModule_Factory(t) { return new (t || dibexGridBasicsModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexGridBasicsModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
                        { provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] },
                        { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }
                        // { provide: NGX_MAT_DATE_FORMATS, useValue: DATETIMEPICKER_FORMATS },
                    ], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexGridBasicsModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexGridBasicsModule, [{
                    type: core_4.NgModule,
                    args: [{
                            imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule],
                            providers: [
                                { provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] },
                                { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }
                                // { provide: NGX_MAT_DATE_FORMATS, useValue: DATETIMEPICKER_FORMATS },
                            ],
                            declarations: [dibexGridBasicsComponent],
                            exports: []
                        }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexGridBasicsModule, { declarations: [dibexGridBasicsComponent], imports: [common_1.CommonModule, shared_5.SharedModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, button_1.MatButtonModule, icon_1.MatIconModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
