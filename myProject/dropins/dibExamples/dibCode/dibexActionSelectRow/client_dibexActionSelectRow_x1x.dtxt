System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, dibexActionSelectRowComponent, containerModules, dibexActionSelectRowModule;
    var __moduleName = context_1 && context_1.id;
    function dibexActionSelectRowComponent_button_23_Template(rf, ctx) { if (rf & 1) {
        const _r36 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 52);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_button_23_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r36); const ctx_r35 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r35.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexActionSelectRowComponent_button_24_Template(rf, ctx) { if (rf & 1) {
        const _r38 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 54);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_button_24_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r38); const ctx_r37 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r37.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 55);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexActionSelectRowComponent_div_26_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r39 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r39.page.toRecord, "\u00A0of\u00A0", ctx_r39.page.records, "");
    } }
    function dibexActionSelectRowComponent_div_26_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r40.page.totalRecords, ")");
    } }
    function dibexActionSelectRowComponent_div_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 56);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_div_26_span_2_Template, 2, 2, "span", 49);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_div_26_span_4_Template, 2, 1, "span", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Action: select-row: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexActionSelectRowComponent_th_36_Template(rf, ctx) { if (rf & 1) {
        const _r42 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 57)(1, "mat-checkbox", 58);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_36_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r41.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexActionSelectRowComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 59)(1, "mat-checkbox", 60);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_37_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexActionSelectRowComponent_td_37_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r46); const row_r43 = restoredCtx.$implicit; const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r45.selection.toggle(row_r43) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r43 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r43));
    } }
    function dibexActionSelectRowComponent_td_39_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r48 = i0.ɵɵnextContext(2).index;
        const ctx_r51 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r51.findColumnDisplayValue(rowIndex_r48, "id", "none", "number"), "");
    } }
    function dibexActionSelectRowComponent_td_39_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r59 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_39_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r59); const ctx_r58 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r58.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_39_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_39_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 73);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_39_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 66);
        i0.ɵɵelement(2, "input", 67);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_39_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_39_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_39_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 70);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r47 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r52 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r52.view.recordStatus == "update" && ctx_r52.notSaved("id", rowForm_r47));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r52.view.recordStatus == "update" && ctx_r52.isSaved("id", rowForm_r47));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r52.isInvalid("id", rowForm_r47));
    } }
    function dibexActionSelectRowComponent_td_39_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_39_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_39_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_39_ng_container_1_span_4_Template, 6, 4, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_39_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r47 = i0.ɵɵnextContext().$implicit;
        const ctx_r49 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r49.excelEditing == false && rowForm_r47.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r49.excelEditing == true || rowForm_r47.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r49.excelEditing == false && rowForm_r47.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_39_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r47 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r47);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r47.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_40_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Id ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_40_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_40_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r68 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_40_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r68); const ctx_r67 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r67.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_40_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_40_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r70 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 82)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_40_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r69 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r69.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_40_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r70); const ctx_r71 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r71.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_40_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_40_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r64 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r64.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r64.view.recordStatus == "update" && ctx_r64.notSaved("id", ctx_r64.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r64.view.recordStatus == "update" && ctx_r64.isSaved("id", ctx_r64.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_40_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_40_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_40_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
    } }
    function dibexActionSelectRowComponent_td_42_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r73 = i0.ɵɵnextContext(2).index;
        const ctx_r76 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r76.findColumnDisplayValue(rowIndex_r73, "name", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_td_42_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r83 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_42_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r83); const ctx_r82 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r82.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_42_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_42_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r85 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_td_42_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r85); const ctx_r84 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r84.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_42_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r85); const ctx_r86 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r86.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_42_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_42_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r72 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r77 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.view.recordStatus == "update" && ctx_r77.notSaved("name", rowForm_r72));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r77.view.recordStatus == "update" && ctx_r77.isSaved("name", rowForm_r72));
    } }
    function dibexActionSelectRowComponent_td_42_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_42_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_42_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_42_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_42_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r72 = i0.ɵɵnextContext().$implicit;
        const ctx_r74 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == false && rowForm_r72.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == true || rowForm_r72.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r74.excelEditing == false && rowForm_r72.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_42_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r72 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r72);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r72.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_43_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Name ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_43_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_43_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r95 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_43_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r95); const ctx_r94 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r94.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_43_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_43_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r97 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 86)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_43_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r97); const ctx_r96 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r96.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_43_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r97); const ctx_r98 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r98.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_43_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_43_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r91 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r91.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r91.view.recordStatus == "update" && ctx_r91.notSaved("name", ctx_r91.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r91.view.recordStatus == "update" && ctx_r91.isSaved("name", ctx_r91.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_43_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_43_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_43_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexActionSelectRowComponent_td_45_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r100 = i0.ɵɵnextContext(2).index;
        const ctx_r103 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r103.findColumnDisplayValue(rowIndex_r100, "start_date", "none", "date"), "");
    } }
    function dibexActionSelectRowComponent_td_45_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r111 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_45_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r111); const ctx_r110 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r110.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_45_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_45_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r113 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 87)(2, "input", 88);
        i0.ɵɵlistener("focus", function dibexActionSelectRowComponent_td_45_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r113); const _r107 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r107.open()); })("keydown.enter", function dibexActionSelectRowComponent_td_45_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r113); const ctx_r114 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r114.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_45_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r113); const ctx_r115 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r115.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 89)(4, "mat-datepicker", null, 90);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_td_45_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(7, dibexActionSelectRowComponent_td_45_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r107 = i0.ɵɵreference(5);
        const rowForm_r99 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r104 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r107);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r107);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r104.view.recordStatus == "update" && ctx_r104.notSaved("start_date", rowForm_r99));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r104.view.recordStatus == "update" && ctx_r104.isSaved("start_date", rowForm_r99));
    } }
    function dibexActionSelectRowComponent_td_45_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_45_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_45_ng_container_1_span_4_Template, 8, 5, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_45_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r99 = i0.ɵɵnextContext().$implicit;
        const ctx_r101 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r101.excelEditing == false && rowForm_r99.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r101.excelEditing == true || rowForm_r99.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r101.excelEditing == false && rowForm_r99.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_45_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r99 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r99);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r99.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_46_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_46_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_46_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r124 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_46_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r124); const ctx_r123 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r123.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_46_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_46_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r126 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 91)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_46_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r126); const ctx_r125 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r125.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_46_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r126); const ctx_r127 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r127.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_46_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_46_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r120 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r120.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.notSaved("start_date", ctx_r120.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.isSaved("start_date", ctx_r120.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_46_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_46_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_46_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexActionSelectRowComponent_td_48_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r129 = i0.ɵɵnextContext(2).index;
        const ctx_r132 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r132.findColumnDisplayValue(rowIndex_r129, "phone", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_td_48_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r139 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_48_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r139); const ctx_r138 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r138.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_48_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_48_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r141 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_td_48_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r141); const ctx_r140 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r140.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_48_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r141); const ctx_r142 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r142.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_48_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_48_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r128 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r133 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r133.view.recordStatus == "update" && ctx_r133.notSaved("phone", rowForm_r128));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r133.view.recordStatus == "update" && ctx_r133.isSaved("phone", rowForm_r128));
    } }
    function dibexActionSelectRowComponent_td_48_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_48_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_48_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_48_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_48_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r128 = i0.ɵɵnextContext().$implicit;
        const ctx_r130 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r130.excelEditing == false && rowForm_r128.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r130.excelEditing == true || rowForm_r128.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r130.excelEditing == false && rowForm_r128.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_48_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r128 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r128);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r128.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_49_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_49_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_49_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r151 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_49_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r151); const ctx_r150 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r150.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_49_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_49_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r153 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 94)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_49_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r153); const ctx_r152 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r152.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_49_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r153); const ctx_r154 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r154.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_49_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_49_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r147 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r147.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r147.view.recordStatus == "update" && ctx_r147.notSaved("phone", ctx_r147.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r147.view.recordStatus == "update" && ctx_r147.isSaved("phone", ctx_r147.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_49_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_49_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_49_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexActionSelectRowComponent_td_51_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r156 = i0.ɵɵnextContext(2).index;
        const ctx_r159 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r159.findColumnDisplayValue(rowIndex_r156, "email", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_td_51_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r166 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_51_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r166); const ctx_r165 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r165.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_51_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_51_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r168 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 95);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_td_51_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r168); const ctx_r167 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r167.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_51_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r168); const ctx_r169 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r169.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_51_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_51_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r155 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r160 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r160.view.recordStatus == "update" && ctx_r160.notSaved("email", rowForm_r155));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r160.view.recordStatus == "update" && ctx_r160.isSaved("email", rowForm_r155));
    } }
    function dibexActionSelectRowComponent_td_51_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_51_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_51_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_51_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_51_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r155 = i0.ɵɵnextContext().$implicit;
        const ctx_r157 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r157.excelEditing == false && rowForm_r155.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.excelEditing == true || rowForm_r155.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r157.excelEditing == false && rowForm_r155.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_51_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r155 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r155);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r155.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_52_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_52_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_52_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r178 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_52_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r178); const ctx_r177 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r177.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_52_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_52_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r180 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 96)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 95);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_52_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r180); const ctx_r179 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r179.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_52_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r180); const ctx_r181 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r181.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_52_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_52_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r174 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r174.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.view.recordStatus == "update" && ctx_r174.notSaved("email", ctx_r174.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r174.view.recordStatus == "update" && ctx_r174.isSaved("email", ctx_r174.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_52_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_52_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_52_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexActionSelectRowComponent_td_54_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r183 = i0.ɵɵnextContext(2).index;
        const ctx_r186 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r186.findColumnDisplayValue(rowIndex_r183, "address", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_td_54_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r193 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_54_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r193); const ctx_r192 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r192.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_54_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_54_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r195 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_td_54_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r195); const ctx_r194 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r194.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_54_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r195); const ctx_r196 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r196.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_54_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_54_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r182 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r187 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r187.view.recordStatus == "update" && ctx_r187.notSaved("address", rowForm_r182));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r187.view.recordStatus == "update" && ctx_r187.isSaved("address", rowForm_r182));
    } }
    function dibexActionSelectRowComponent_td_54_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_54_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_54_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_54_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_54_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r182 = i0.ɵɵnextContext().$implicit;
        const ctx_r184 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r184.excelEditing == false && rowForm_r182.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r184.excelEditing == true || rowForm_r182.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r184.excelEditing == false && rowForm_r182.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_54_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r182 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r182);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r182.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_55_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_55_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_55_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r205 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_55_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r205); const ctx_r204 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r204.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_55_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_55_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r207 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_55_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r207); const ctx_r206 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r206.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_55_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r207); const ctx_r208 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r208.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_55_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_55_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r201 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r201.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r201.view.recordStatus == "update" && ctx_r201.notSaved("address", ctx_r201.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r201.view.recordStatus == "update" && ctx_r201.isSaved("address", ctx_r201.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_55_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_55_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_55_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexActionSelectRowComponent_td_57_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r210 = i0.ɵɵnextContext(2).index;
        const ctx_r213 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r213.findColumnDisplayValue(rowIndex_r210, "city_town", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_td_57_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r220 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_57_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r220); const ctx_r219 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r219.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_57_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_57_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r222 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_td_57_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r222); const ctx_r221 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r221.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_57_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r222); const ctx_r223 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r223.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_57_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_57_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r209 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r214 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r214.view.recordStatus == "update" && ctx_r214.notSaved("city_town", rowForm_r209));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r214.view.recordStatus == "update" && ctx_r214.isSaved("city_town", rowForm_r209));
    } }
    function dibexActionSelectRowComponent_td_57_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_57_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_57_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_57_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_57_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r209 = i0.ɵɵnextContext().$implicit;
        const ctx_r211 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r211.excelEditing == false && rowForm_r209.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.excelEditing == true || rowForm_r209.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r211.excelEditing == false && rowForm_r209.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_57_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r209 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r209);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r209.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_58_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_58_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_58_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r232 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_58_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r232); const ctx_r231 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r231.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_58_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_58_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r234 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_58_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r234); const ctx_r233 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r233.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_58_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r234); const ctx_r235 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r235.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_58_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_58_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r228 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r228.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r228.view.recordStatus == "update" && ctx_r228.notSaved("city_town", ctx_r228.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r228.view.recordStatus == "update" && ctx_r228.isSaved("city_town", ctx_r228.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_58_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_58_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_58_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexActionSelectRowComponent_td_60_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r237 = i0.ɵɵnextContext(2).index;
        const ctx_r240 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r240.findColumnDisplayValue(rowIndex_r237, "country", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_td_60_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r247 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_60_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r247); const ctx_r246 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r246.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_60_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_60_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r249 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_td_60_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r249); const ctx_r248 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r248.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_60_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r249); const ctx_r250 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r250.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_60_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_60_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r236 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r241 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r241.view.recordStatus == "update" && ctx_r241.notSaved("country", rowForm_r236));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r241.view.recordStatus == "update" && ctx_r241.isSaved("country", rowForm_r236));
    } }
    function dibexActionSelectRowComponent_td_60_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_60_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_60_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_60_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_60_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r236 = i0.ɵɵnextContext().$implicit;
        const ctx_r238 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r238.excelEditing == false && rowForm_r236.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r238.excelEditing == true || rowForm_r236.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r238.excelEditing == false && rowForm_r236.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_60_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r236 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r236);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r236.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_61_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_61_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_61_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r259 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_61_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r259); const ctx_r258 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r258.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_61_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_61_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r261 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_61_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r261); const ctx_r260 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r260.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_61_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r261); const ctx_r262 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r262.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_61_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_61_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r255 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r255.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r255.view.recordStatus == "update" && ctx_r255.notSaved("country", ctx_r255.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r255.view.recordStatus == "update" && ctx_r255.isSaved("country", ctx_r255.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_61_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_61_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_61_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexActionSelectRowComponent_td_63_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r264 = i0.ɵɵnextContext(2).index;
        const ctx_r267 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r267.findColumnDisplayValue(rowIndex_r264, "updated", "none", "datetime"), "");
    } }
    function dibexActionSelectRowComponent_td_63_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r275 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_td_63_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r275); const ctx_r274 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r274.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_63_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_td_63_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r277 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 103);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 89);
        i0.ɵɵelementStart(3, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_td_63_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r277); const ctx_r276 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r276.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_td_63_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r277); const ctx_r278 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r278.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_63_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_63_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 105);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r273 = i0.ɵɵreference(7);
        const rowForm_r263 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r268 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r273);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r273);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.notSaved("updated", rowForm_r263));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.isSaved("updated", rowForm_r263));
    } }
    function dibexActionSelectRowComponent_td_63_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_td_63_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_td_63_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_td_63_ng_container_1_span_4_Template, 8, 5, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_td_63_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r263 = i0.ɵɵnextContext().$implicit;
        const ctx_r265 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r265.excelEditing == false && rowForm_r263.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.excelEditing == true || rowForm_r263.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.excelEditing == false && rowForm_r263.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_td_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_td_63_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r263 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r263);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r263.getRawValue());
    } }
    function dibexActionSelectRowComponent_th_64_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_64_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_64_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r287 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_th_64_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r287); const ctx_r286 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r286.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_64_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_th_64_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r289 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_th_64_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r289); const ctx_r288 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r288.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_th_64_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r289); const ctx_r290 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r290.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_th_64_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_th_64_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r283 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r283.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.view.recordStatus == "update" && ctx_r283.notSaved("updated", ctx_r283.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r283.view.recordStatus == "update" && ctx_r283.isSaved("updated", ctx_r283.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_th_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_th_64_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_th_64_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_th_64_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexActionSelectRowComponent_th_66_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 110);
    } }
    function dibexActionSelectRowComponent_th_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 108);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_th_66_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 109);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r24.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r24.busy);
    } }
    function dibexActionSelectRowComponent_th_68_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r292 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r292.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexActionSelectRowComponent_th_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_th_68_span_1_Template, 2, 1, "span", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r25.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r25.busy && ctx_r25.tableDataSource.data.length == 0);
    } }
    function dibexActionSelectRowComponent_ng_container_69_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 113);
    } }
    function dibexActionSelectRowComponent_ng_container_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_container_69_tr_1_Template, 1, 0, "tr", 112);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r293 = ctx.$implicit;
        const ctx_r26 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r26.columnHeaders.getArray(column_r293).items$));
    } }
    function dibexActionSelectRowComponent_tr_70_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 114);
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r27.busy ? "visible" : "hidden"));
    } }
    function dibexActionSelectRowComponent_tr_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 114);
    } if (rf & 2) {
        const ctx_r28 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r28.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexActionSelectRowComponent_tr_72_Template(rf, ctx) { if (rf & 1) {
        const _r298 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 115);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_tr_72_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r298); const row_r295 = restoredCtx.$implicit; const ctx_r297 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r297.rowClick(row_r295, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r295 = ctx.$implicit;
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r29.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r29.isHighlighted(row_r295)));
    } }
    function dibexActionSelectRowComponent_74_ng_template_0_Template(rf, ctx) { }
    function dibexActionSelectRowComponent_74_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexActionSelectRowComponent_74_ng_template_0_Template, 0, 0, "ng-template", 116);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r33 = i0.ɵɵreference(79);
        i0.ɵɵproperty("ngTemplateOutlet", _r33);
    } }
    function dibexActionSelectRowComponent_mat_toolbar_77_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r304 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 122);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_mat_toolbar_77_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r304); const ctx_r303 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r303.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r300 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r300.numberOfSelectedItems + " ", "item", ctx_r300.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexActionSelectRowComponent_mat_toolbar_77_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_mat_toolbar_77_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_mat_toolbar_77_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r308 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 123);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_mat_toolbar_77_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r308); const ctx_r307 = i0.ɵɵnextContext(2); ctx_r307.gridShowClipboardDefault = !ctx_r307.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r307.gridShowClipboardDefault && ctx_r307.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_mat_toolbar_77_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 49);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_mat_toolbar_77_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 49);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r301 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r301.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r301.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r301.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexActionSelectRowComponent_mat_toolbar_77_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r311 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 124, 125);
        i0.ɵɵlistener("page", function dibexActionSelectRowComponent_mat_toolbar_77_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r311); const ctx_r310 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r310.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r302 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r302.page.totalRecords)("pageSize", ctx_r302.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function dibexActionSelectRowComponent_mat_toolbar_77_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 117);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_mat_toolbar_77_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 118);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_mat_toolbar_77_button_3_Template, 4, 3, "button", 119);
        i0.ɵɵelement(4, "span", 120);
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_mat_toolbar_77_mat_paginator_5_Template, 2, 4, "mat-paginator", 121);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r32.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r32.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r336 = i0.ɵɵnextContext(2).index;
        const ctx_r339 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r339.findColumnDisplayValue(rowIndex_r336, "id", "none", "number"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r346 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r346); const ctx_r345 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r345.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r348 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 66)(2, "input", 130);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r348); const ctx_r347 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r347.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r348); const ctx_r349 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r349.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r335 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r340 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.notSaved("id", rowForm_r335));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r340.view.recordStatus == "update" && ctx_r340.isSaved("id", rowForm_r335));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r335 = i0.ɵɵnextContext().$implicit;
        const ctx_r337 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r337.excelEditing == false && rowForm_r335.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r337.excelEditing == true || rowForm_r335.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r337.excelEditing == false && rowForm_r335.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_2_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r335 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r335);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r335.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_3_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Id ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_3_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_3_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r358 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_3_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r358); const ctx_r357 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r357.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_3_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_3_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r360 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 82)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 83);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_3_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r360); const ctx_r359 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r359.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_3_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r360); const ctx_r361 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r361.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_3_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_3_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r354 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r354.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r354.view.recordStatus == "update" && ctx_r354.notSaved("id", ctx_r354.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r354.view.recordStatus == "update" && ctx_r354.isSaved("id", ctx_r354.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_3_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_3_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_3_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r313 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r313.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r313.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r363 = i0.ɵɵnextContext(2).index;
        const ctx_r366 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r366.findColumnDisplayValue(rowIndex_r363, "name", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r373 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r373); const ctx_r372 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r372.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r375 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r375); const ctx_r374 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r374.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r375); const ctx_r376 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r376.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r362 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r367 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r367.view.recordStatus == "update" && ctx_r367.notSaved("name", rowForm_r362));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r367.view.recordStatus == "update" && ctx_r367.isSaved("name", rowForm_r362));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r362 = i0.ɵɵnextContext().$implicit;
        const ctx_r364 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r364.excelEditing == false && rowForm_r362.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.excelEditing == true || rowForm_r362.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.excelEditing == false && rowForm_r362.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_5_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r362 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r362);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r362.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Name ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Name");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_6_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r385 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_6_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r385); const ctx_r384 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r384.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_6_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r387 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 86)(2, "mat-label");
        i0.ɵɵtext(3, "Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 85);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_6_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r387); const ctx_r386 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r386.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_6_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r387); const ctx_r388 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r388.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_6_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_6_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r381 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r381.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r381.view.recordStatus == "update" && ctx_r381.notSaved("name", ctx_r381.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r381.view.recordStatus == "update" && ctx_r381.isSaved("name", ctx_r381.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_6_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_6_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_6_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r315 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r315.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r315.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r315.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r390 = i0.ɵɵnextContext(2).index;
        const ctx_r393 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r393.findColumnDisplayValue(rowIndex_r390, "start_date", "none", "date"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r401 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r401); const ctx_r400 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r400.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r403 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 87)(2, "input", 88);
        i0.ɵɵlistener("focus", function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r403); const _r397 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r397.open()); })("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r403); const ctx_r404 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r404.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r403); const ctx_r405 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r405.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 89)(4, "mat-datepicker", null, 90);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(7, dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r397 = i0.ɵɵreference(5);
        const rowForm_r389 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r394 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r397);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r397);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r394.view.recordStatus == "update" && ctx_r394.notSaved("start_date", rowForm_r389));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r394.view.recordStatus == "update" && ctx_r394.isSaved("start_date", rowForm_r389));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_4_Template, 8, 5, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r389 = i0.ɵɵnextContext().$implicit;
        const ctx_r391 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r391.excelEditing == false && rowForm_r389.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r391.excelEditing == true || rowForm_r389.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r391.excelEditing == false && rowForm_r389.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_8_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r389 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r389);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r389.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Start Date ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Start Date");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r414 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r414); const ctx_r413 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r413.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r416 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 91)(2, "mat-label");
        i0.ɵɵtext(3, "Start Date");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 92);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r416); const ctx_r415 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r415.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r416); const ctx_r417 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r417.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r410 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r410.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Start Date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.view.recordStatus == "update" && ctx_r410.notSaved("start_date", ctx_r410.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.view.recordStatus == "update" && ctx_r410.isSaved("start_date", ctx_r410.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_9_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_9_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_9_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r317 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r317.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r317.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r317.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r419 = i0.ɵɵnextContext(2).index;
        const ctx_r422 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r422.findColumnDisplayValue(rowIndex_r419, "phone", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r429 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r429); const ctx_r428 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r428.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r431 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r431); const ctx_r430 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r430.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r431); const ctx_r432 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r432.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r418 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r423 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r423.view.recordStatus == "update" && ctx_r423.notSaved("phone", rowForm_r418));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r423.view.recordStatus == "update" && ctx_r423.isSaved("phone", rowForm_r418));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r418 = i0.ɵɵnextContext().$implicit;
        const ctx_r420 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r420.excelEditing == false && rowForm_r418.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r420.excelEditing == true || rowForm_r418.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r420.excelEditing == false && rowForm_r418.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_11_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r418 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r418);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r418.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Phone ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Phone");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r441 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r441); const ctx_r440 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r440.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r443 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 94)(2, "mat-label");
        i0.ɵɵtext(3, "Phone");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 93);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r443); const ctx_r442 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r442.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r443); const ctx_r444 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r444.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r437 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r437.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r437.view.recordStatus == "update" && ctx_r437.notSaved("phone", ctx_r437.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r437.view.recordStatus == "update" && ctx_r437.isSaved("phone", ctx_r437.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_12_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_12_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_12_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r319 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r319.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r319.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r319.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r446 = i0.ɵɵnextContext(2).index;
        const ctx_r449 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r449.findColumnDisplayValue(rowIndex_r446, "email", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r456 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r456); const ctx_r455 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r455.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r458 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 95);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r458); const ctx_r457 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r457.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r458); const ctx_r459 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r459.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r445 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r450 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r450.view.recordStatus == "update" && ctx_r450.notSaved("email", rowForm_r445));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r450.view.recordStatus == "update" && ctx_r450.isSaved("email", rowForm_r445));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r445 = i0.ɵɵnextContext().$implicit;
        const ctx_r447 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r447.excelEditing == false && rowForm_r445.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r447.excelEditing == true || rowForm_r445.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r447.excelEditing == false && rowForm_r445.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_14_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r445 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r445);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r445.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r468 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r468); const ctx_r467 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r467.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r470 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 96)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 95);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r470); const ctx_r469 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r469.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r470); const ctx_r471 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r471.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r464 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r464.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r464.view.recordStatus == "update" && ctx_r464.notSaved("email", ctx_r464.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r464.view.recordStatus == "update" && ctx_r464.isSaved("email", ctx_r464.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_15_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_15_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_15_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r321 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r321.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r321.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r321.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r473 = i0.ɵɵnextContext(2).index;
        const ctx_r476 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r476.findColumnDisplayValue(rowIndex_r473, "address", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r483 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r483); const ctx_r482 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r482.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r485 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r485); const ctx_r484 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r484.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r485); const ctx_r486 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r486.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r472 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r477 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r477.view.recordStatus == "update" && ctx_r477.notSaved("address", rowForm_r472));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r477.view.recordStatus == "update" && ctx_r477.isSaved("address", rowForm_r472));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r472 = i0.ɵɵnextContext().$implicit;
        const ctx_r474 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r474.excelEditing == false && rowForm_r472.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r474.excelEditing == true || rowForm_r472.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r474.excelEditing == false && rowForm_r472.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_17_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r472 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r472);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r472.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Address ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Address");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r495 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r495); const ctx_r494 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r494.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r497 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Address");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 97);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r497); const ctx_r496 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r496.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r497); const ctx_r498 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r498.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r491 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r491.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Address");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r491.view.recordStatus == "update" && ctx_r491.notSaved("address", ctx_r491.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r491.view.recordStatus == "update" && ctx_r491.isSaved("address", ctx_r491.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_18_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_18_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_18_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r323 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r323.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r323.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r323.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r500 = i0.ɵɵnextContext(2).index;
        const ctx_r503 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r503.findColumnDisplayValue(rowIndex_r500, "city_town", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r510 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r510); const ctx_r509 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r509.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r512 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r512); const ctx_r511 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r511.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r512); const ctx_r513 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r513.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r499 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r504 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.view.recordStatus == "update" && ctx_r504.notSaved("city_town", rowForm_r499));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r504.view.recordStatus == "update" && ctx_r504.isSaved("city_town", rowForm_r499));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r499 = i0.ɵɵnextContext().$implicit;
        const ctx_r501 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r501.excelEditing == false && rowForm_r499.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.excelEditing == true || rowForm_r499.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r501.excelEditing == false && rowForm_r499.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_20_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r499 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r499);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r499.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " City Town ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "City Town");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r522 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r522); const ctx_r521 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r521.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r524 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "City Town");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r524); const ctx_r523 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r523.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r524); const ctx_r525 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r525.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r518 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r518.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "City Town");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.view.recordStatus == "update" && ctx_r518.notSaved("city_town", ctx_r518.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.view.recordStatus == "update" && ctx_r518.isSaved("city_town", ctx_r518.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_21_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_21_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_21_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r325 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r325.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r325.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r325.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r527 = i0.ɵɵnextContext(2).index;
        const ctx_r530 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r530.findColumnDisplayValue(rowIndex_r527, "country", "none", "text"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r537 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r537); const ctx_r536 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r536.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r539 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 84)(2, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r539); const ctx_r538 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r538.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r539); const ctx_r540 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r540.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r526 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r531 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r531.view.recordStatus == "update" && ctx_r531.notSaved("country", rowForm_r526));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r531.view.recordStatus == "update" && ctx_r531.isSaved("country", rowForm_r526));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_4_Template, 5, 3, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r526 = i0.ɵɵnextContext().$implicit;
        const ctx_r528 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r528.excelEditing == false && rowForm_r526.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r528.excelEditing == true || rowForm_r526.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r528.excelEditing == false && rowForm_r526.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_23_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r526 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r526);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r526.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Country ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Country");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r549 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r549); const ctx_r548 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r548.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r551 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 102)(2, "mat-label");
        i0.ɵɵtext(3, "Country");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r551); const ctx_r550 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r550.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r551); const ctx_r552 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r552.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r545 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r545.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Country");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r545.view.recordStatus == "update" && ctx_r545.notSaved("country", ctx_r545.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r545.view.recordStatus == "update" && ctx_r545.isSaved("country", ctx_r545.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_24_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_24_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_24_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r327 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r327.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r327.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r327.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 65);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r554 = i0.ɵɵnextContext(2).index;
        const ctx_r557 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r557.findColumnDisplayValue(rowIndex_r554, "updated", "none", "datetime"), "");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r565 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r565); const ctx_r564 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r564.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r567 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 65)(1, "mat-form-field", 103);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 89);
        i0.ɵɵelementStart(3, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r567); const ctx_r566 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r566.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r567); const ctx_r568 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r568.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 105);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r563 = i0.ɵɵreference(7);
        const rowForm_r553 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r558 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r563);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r563);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r558.view.recordStatus == "update" && ctx_r558.notSaved("updated", rowForm_r553));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r558.view.recordStatus == "update" && ctx_r558.isSaved("updated", rowForm_r553));
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 62)(2, "span", 63);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_3_Template, 2, 1, "span", 64);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_4_Template, 8, 5, "span", 64);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_span_5_Template, 1, 0, "span", 49);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r553 = i0.ɵɵnextContext().$implicit;
        const ctx_r555 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r555.excelEditing == false && rowForm_r553.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.excelEditing == true || rowForm_r553.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r555.excelEditing == false && rowForm_r553.get("__edit").value === false);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 61);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_td_26_ng_container_1_Template, 6, 3, "ng-container", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r553 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r553);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r553.getRawValue());
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 79);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 80);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r577 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 71);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r577); const ctx_r576 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r576.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 72);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r579 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 81)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexActionSelectRowComponent_ng_template_78_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r579); const ctx_r578 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r578.searchGrid(false)); })("keydown.esc", function dibexActionSelectRowComponent_ng_template_78_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r579); const ctx_r580 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r580.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 68);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 69);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r573 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r573.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.view.recordStatus == "update" && ctx_r573.notSaved("updated", ctx_r573.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r573.view.recordStatus == "update" && ctx_r573.isSaved("updated", ctx_r573.model.$formGroup));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 74)(1, "div", 75);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_th_27_div_2_Template, 2, 0, "div", 76);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_27_div_3_Template, 2, 0, "div", 77);
        i0.ɵɵtemplate(4, dibexActionSelectRowComponent_ng_template_78_th_27_div_4_Template, 7, 4, "div", 78);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r329 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r329.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r329.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r329.showSearch);
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_29_Template(rf, ctx) { if (rf & 1) {
        const _r582 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 57)(1, "mat-checkbox", 131);
        i0.ɵɵlistener("change", function dibexActionSelectRowComponent_ng_template_78_th_29_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r582); const ctx_r581 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r581.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r330 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r330.masterIsChecked)("indeterminate", ctx_r330.masterIsIndeterminate);
    } }
    function dibexActionSelectRowComponent_ng_template_78_td_30_Template(rf, ctx) { if (rf & 1) {
        const _r586 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 132)(1, "mat-checkbox", 60);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_td_30_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexActionSelectRowComponent_ng_template_78_td_30_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r586); const row_r583 = restoredCtx.$implicit; const ctx_r585 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r585.selection.toggle(row_r583) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r583 = ctx.$implicit;
        const ctx_r331 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r331.isHighlighted(row_r583));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_32_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 110);
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 133);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_th_32_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 109);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r332 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r332.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r332.busy);
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_34_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r588 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r588.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexActionSelectRowComponent_ng_template_78_th_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 111);
        i0.ɵɵtemplate(1, dibexActionSelectRowComponent_ng_template_78_th_34_span_1_Template, 2, 1, "span", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r333 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r333.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r333.busy && ctx_r333.tableDataSource.data.length == 0);
    } }
    function dibexActionSelectRowComponent_ng_template_78_tr_35_Template(rf, ctx) { if (rf & 1) {
        const _r591 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 134);
        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_ng_template_78_tr_35_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r591); const row_r589 = restoredCtx.$implicit; const ctx_r590 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r590.rowClick(row_r589, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r589 = ctx.$implicit;
        const ctx_r334 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r334.isHighlighted(row_r589)));
    } }
    function dibexActionSelectRowComponent_ng_template_78_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 126);
        i0.ɵɵelementContainerStart(1, 31);
        i0.ɵɵtemplate(2, dibexActionSelectRowComponent_ng_template_78_td_2_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(3, dibexActionSelectRowComponent_ng_template_78_th_3_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 34);
        i0.ɵɵtemplate(5, dibexActionSelectRowComponent_ng_template_78_td_5_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(6, dibexActionSelectRowComponent_ng_template_78_th_6_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 35);
        i0.ɵɵtemplate(8, dibexActionSelectRowComponent_ng_template_78_td_8_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(9, dibexActionSelectRowComponent_ng_template_78_th_9_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 36);
        i0.ɵɵtemplate(11, dibexActionSelectRowComponent_ng_template_78_td_11_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(12, dibexActionSelectRowComponent_ng_template_78_th_12_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 37);
        i0.ɵɵtemplate(14, dibexActionSelectRowComponent_ng_template_78_td_14_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(15, dibexActionSelectRowComponent_ng_template_78_th_15_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 38);
        i0.ɵɵtemplate(17, dibexActionSelectRowComponent_ng_template_78_td_17_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(18, dibexActionSelectRowComponent_ng_template_78_th_18_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 39);
        i0.ɵɵtemplate(20, dibexActionSelectRowComponent_ng_template_78_td_20_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(21, dibexActionSelectRowComponent_ng_template_78_th_21_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 40);
        i0.ɵɵtemplate(23, dibexActionSelectRowComponent_ng_template_78_td_23_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(24, dibexActionSelectRowComponent_ng_template_78_th_24_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 41);
        i0.ɵɵtemplate(26, dibexActionSelectRowComponent_ng_template_78_td_26_Template, 2, 2, "td", 32);
        i0.ɵɵtemplate(27, dibexActionSelectRowComponent_ng_template_78_th_27_Template, 5, 3, "th", 33);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 28);
        i0.ɵɵtemplate(29, dibexActionSelectRowComponent_ng_template_78_th_29_Template, 2, 2, "th", 29);
        i0.ɵɵtemplate(30, dibexActionSelectRowComponent_ng_template_78_td_30_Template, 2, 1, "td", 127);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 42);
        i0.ɵɵtemplate(32, dibexActionSelectRowComponent_ng_template_78_th_32_Template, 2, 2, "th", 128);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(33, 44);
        i0.ɵɵtemplate(34, dibexActionSelectRowComponent_ng_template_78_th_34_Template, 2, 2, "th", 45);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(35, dibexActionSelectRowComponent_ng_template_78_tr_35_Template, 1, 3, "tr", 129);
        i0.ɵɵpipe(36, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r34.selectionDataSource);
        i0.ɵɵadvance(35);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(36, 2, ctx_r34.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i17 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i18 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i19 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i7 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i11 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i16 = card_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i9 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i8_1) {
                i8 = i8_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexActionSelectRowComponent = class dibexActionSelectRowComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 288, name: 'dibexActionSelectRow', subContainerItemAliases: [], allChildContainers: ["dibDocsExampleHtml"], refreshChildContainers: { "_": ['dibDocsExampleHtml*6627'] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['id', 'name', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['id', 'name', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexActionSelectRow');
                    this.containerName = 'dibexActionSelectRow'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 6618, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: false, update: false, required: false, itemAlias: null, default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, name: { itemId: 6619, type: 'text', fieldAlias: 'name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, start_date: { itemId: 6620, type: 'date', fieldAlias: 'start_date', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, phone: { itemId: 6621, type: 'text', fieldAlias: 'phone', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 6622, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, address: { itemId: 6623, type: 'text', fieldAlias: 'address', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, city_town: { itemId: 6624, type: 'text', fieldAlias: 'city_town', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, country: { itemId: 6625, type: 'text', fieldAlias: 'country', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, updated: { itemId: 6626, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('name', this.model.modelItems.name.formControl);
                    this.model.$formGroup.addControl('start_date', this.model.modelItems.start_date.formControl);
                    this.model.$formGroup.addControl('phone', this.model.modelItems.phone.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('address', this.model.modelItems.address.formControl);
                    this.model.$formGroup.addControl('city_town', this.model.modelItems.city_town.formControl);
                    this.model.$formGroup.addControl('country', this.model.modelItems.country.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnClientside", actionType: "click", responseType: 'actions', submitUrl: "shared.action.select-row?containerName=dibexActionSelectRow&column=country&value=USA", itemAlias: "btnClientside", waitForCompletion: false, containerName: "dibexActionSelectRow", handlers: [] }, this.clientData, { itemEventId: 'ie366-dib', itemId: '6630', });
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "btnServerside", actionType: "click", responseType: 'actions', submitUrl: "/dropins/dibExamples/Action/selectRow", itemAlias: "btnServerside", waitForCompletion: false, containerName: "dibexActionSelectRow", handlers: [] }, this.clientData, { itemEventId: 'ie367-dib', itemId: '6631', });
                    let lists = {};
                    let self = this;
                    lists = this.lists;
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['id', 'name', 'start_date', 'phone', 'email', 'address', 'city_town', 'country', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); window.dispatchEvent(new Event('resize')); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() { this.excelEditing = !this.excelEditing; this.editorOpen = true; if (this.excelEditing) {
                    this.editorOpen = false;
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                        control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => { if (control.pristine == false) {
                            this.submit$.next(control);
                        } });
                    } });
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                } }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') { }
                            else { }
                            this.model.$formGroup.markAsPristine();
                        }
                        else {
                            if (this.view.recordStatus == 'create') { }
                            else { }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexActionSelectRow`, value: this.clientData.clickedLast_self });
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexActionSelectRow`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexActionSelectRow`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 6618 };
                    formDefaultsConfigs['name'] = { contentType: "text", type: "none", defaultValue: "", listId: 6619 };
                    formDefaultsConfigs['start_date'] = { contentType: "date", type: "none", defaultValue: "", listId: 6620 };
                    formDefaultsConfigs['phone'] = { contentType: "text", type: "none", defaultValue: "", listId: 6621 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 6622 };
                    formDefaultsConfigs['address'] = { contentType: "text", type: "none", defaultValue: "", listId: 6623 };
                    formDefaultsConfigs['city_town'] = { contentType: "text", type: "none", defaultValue: "", listId: 6624 };
                    formDefaultsConfigs['country'] = { contentType: "text", type: "none", defaultValue: "", listId: 6625 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 6626 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => { const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 6618, "number"), { validators: [], updateOn: 'blur' }), name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "name", "none", false, formDefaults['name'], 6619, "text"), { validators: [], updateOn: 'blur' }), start_date: new forms_2.FormControl(this.calculateInitialColumnValue(row, "start_date", "none", false, formDefaults['start_date'], 6620, "date"), { validators: [], updateOn: 'blur' }), phone: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone", "none", false, formDefaults['phone'], 6621, "text"), { validators: [], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 6622, "text"), { validators: [], updateOn: 'blur' }), address: new forms_2.FormControl(this.calculateInitialColumnValue(row, "address", "none", false, formDefaults['address'], 6623, "text"), { validators: [], updateOn: 'blur' }), city_town: new forms_2.FormControl(this.calculateInitialColumnValue(row, "city_town", "none", false, formDefaults['city_town'], 6624, "text"), { validators: [], updateOn: 'blur' }), country: new forms_2.FormControl(this.calculateInitialColumnValue(row, "country", "none", false, formDefaults['country'], 6625, "text"), { validators: [], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 6626, "datetime"), { validators: [], updateOn: 'blur' }), }); return rowFormGroup; })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexActionSelectRow', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexActionSelectRow' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexActionSelectRowComponent_Factory(t) { return new (t || dibexActionSelectRowComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexActionSelectRowComponent, selectors: [["dibex-action-select-row"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 80, vars: 41, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci6627", "dibComponent", "subcontainer", 2, "flex", "1 1 0%"], ["parentContainerName", "dibexActionSelectRow", "subContainerName", "dibDocsExampleHtml", "subContainerId", "172", "dropinName", "iframe", 3, "dibPort"], ["id", "ci6628", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "flex-start", "gap", "10px", "flex", "1 1 0%", "overflow", "auto !important"], [3, "dibPort"], ["id", "ci6629", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px"], ["mat-raised-button", "", "color", "primary", "id", "ci6630", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnClientside", "type", "button", 2, "width", "200px !important", 3, "containerPortId"], [1, "dibButtonCaption"], ["mat-raised-button", "", "color", "primary", "id", "ci6631", "dibComponent", "button", "dibListeners", "", "eventList", "  click ", "actionId", "btnServerside", "type", "button", 2, "width", "200px !important", 3, "containerPortId"], ["id", "ci6608", "dibComponent", "row", "dib-inject-content", "replace", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start"], ["mat-mini-fab", "", "color", "primary", "id", "ci6615", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci6611", "dibComponent", "span", 2, "flex", "0 1 200px", 3, "innerHtml"], ["mat-mini-fab", "", "color", "accent", "id", "ci6612", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci6613", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "accent", "id", "ci6614", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci6609", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["id", "ci6610", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci6616", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "name"], ["matColumnDef", "start_date"], ["matColumnDef", "phone"], ["matColumnDef", "email"], ["matColumnDef", "address"], ["matColumnDef", "city_town"], ["matColumnDef", "country"], ["matColumnDef", "updated"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexActionSelectRow", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "accent", "id", "ci6613", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci6614", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci6610", "dibComponent", "gridTotals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber"], ["matInput", "", "type", "number", "formControlName", "id", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci6618", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "name", "name", "name", 3, "keydown.enter", "keydown.esc"], ["id", "ci6619", "dibComponent", "inputText"], ["dibComponent", "datePicker"], ["matInput", "", "formControlName", "start_date", "name", "start_date", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker6620", ""], ["id", "ci6620", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "start_date", "name", "start_date", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone", "name", "phone", 3, "keydown.enter", "keydown.esc"], ["id", "ci6621", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci6622", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "address", "name", "address", 3, "keydown.enter", "keydown.esc"], ["id", "ci6623", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "city_town", "name", "city_town", 3, "keydown.enter", "keydown.esc"], ["id", "ci6624", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "country", "name", "country", 3, "keydown.enter", "keydown.esc"], ["id", "ci6625", "dibComponent", "inputText"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker6626", ""], ["id", "ci6626", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexActionSelectRowComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexActionSelectRowComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainer(3, 3);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(4, "div", 4);
                        i0.ɵɵelementContainerStart(5, 5);
                        i0.ɵɵelementStart(6, "mat-card", 6)(7, "mat-card-content", 7);
                        i0.ɵɵelementContainerStart(8, 5);
                        i0.ɵɵelementStart(9, "button", 8)(10, "span", 9);
                        i0.ɵɵtext(11, "Client-side Button");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementStart(12, "button", 10)(13, "span", 9);
                        i0.ɵɵtext(14, "Server-side Button");
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(15, "div", 11);
                        i0.ɵɵelementContainerStart(16, 5);
                        i0.ɵɵelementStart(17, "button", 12);
                        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_Template_button_click_17_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(18, "dib-icon", 13);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(19, "span", 14);
                        i0.ɵɵpipe(20, "safeHtml");
                        i0.ɵɵelementStart(21, "button", 15);
                        i0.ɵɵlistener("click", function dibexActionSelectRowComponent_Template_button_click_21_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(22, "dib-icon", 16);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(23, dibexActionSelectRowComponent_button_23_Template, 2, 4, "button", 17);
                        i0.ɵɵtemplate(24, dibexActionSelectRowComponent_button_24_Template, 2, 4, "button", 18);
                        i0.ɵɵelement(25, "span", 19);
                        i0.ɵɵtemplate(26, dibexActionSelectRowComponent_div_26_Template, 5, 3, "div", 20);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(27, "mat-card", 21)(28, "mat-card-content", 22);
                        i0.ɵɵelementContainerStart(29, 5);
                        i0.ɵɵelementStart(30, "div", 23, 24)(32, "form", 25);
                        i0.ɵɵelementContainerStart(33, 26);
                        i0.ɵɵelementStart(34, "table", 27);
                        i0.ɵɵelementContainerStart(35, 28);
                        i0.ɵɵtemplate(36, dibexActionSelectRowComponent_th_36_Template, 2, 2, "th", 29);
                        i0.ɵɵtemplate(37, dibexActionSelectRowComponent_td_37_Template, 2, 1, "td", 30);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(38, 31);
                        i0.ɵɵtemplate(39, dibexActionSelectRowComponent_td_39_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(40, dibexActionSelectRowComponent_th_40_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(41, 34);
                        i0.ɵɵtemplate(42, dibexActionSelectRowComponent_td_42_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(43, dibexActionSelectRowComponent_th_43_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(44, 35);
                        i0.ɵɵtemplate(45, dibexActionSelectRowComponent_td_45_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(46, dibexActionSelectRowComponent_th_46_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(47, 36);
                        i0.ɵɵtemplate(48, dibexActionSelectRowComponent_td_48_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(49, dibexActionSelectRowComponent_th_49_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(50, 37);
                        i0.ɵɵtemplate(51, dibexActionSelectRowComponent_td_51_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(52, dibexActionSelectRowComponent_th_52_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(53, 38);
                        i0.ɵɵtemplate(54, dibexActionSelectRowComponent_td_54_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(55, dibexActionSelectRowComponent_th_55_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(56, 39);
                        i0.ɵɵtemplate(57, dibexActionSelectRowComponent_td_57_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(58, dibexActionSelectRowComponent_th_58_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(59, 40);
                        i0.ɵɵtemplate(60, dibexActionSelectRowComponent_td_60_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(61, dibexActionSelectRowComponent_th_61_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(62, 41);
                        i0.ɵɵtemplate(63, dibexActionSelectRowComponent_td_63_Template, 2, 2, "td", 32);
                        i0.ɵɵtemplate(64, dibexActionSelectRowComponent_th_64_Template, 5, 3, "th", 33);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(65, 42);
                        i0.ɵɵtemplate(66, dibexActionSelectRowComponent_th_66_Template, 2, 2, "th", 43);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(67, 44);
                        i0.ɵɵtemplate(68, dibexActionSelectRowComponent_th_68_Template, 2, 2, "th", 45);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(69, dibexActionSelectRowComponent_ng_container_69_Template, 3, 3, "ng-container", 46);
                        i0.ɵɵtemplate(70, dibexActionSelectRowComponent_tr_70_Template, 1, 3, "tr", 47);
                        i0.ɵɵtemplate(71, dibexActionSelectRowComponent_tr_71_Template, 1, 3, "tr", 47);
                        i0.ɵɵtemplate(72, dibexActionSelectRowComponent_tr_72_Template, 1, 4, "tr", 48);
                        i0.ɵɵpipe(73, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(74, dibexActionSelectRowComponent_74_Template, 1, 1, null, 49);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(75, "div", null, 50);
                        i0.ɵɵtemplate(77, dibexActionSelectRowComponent_mat_toolbar_77_Template, 6, 3, "mat-toolbar", 49);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(78, dibexActionSelectRowComponent_ng_template_78_Template, 37, 4, "ng-template", null, 51, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r31 = i0.ɵɵreference(76);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(37, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6627");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dibPort", "6628");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6629");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Client-side Button");
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("containerPortId", ctx.containerActionReference());
                        i0.ɵɵattribute("aria-label", "Server-side Button");
                        i0.ɵɵadvance(4);
                        i0.ɵɵproperty("dibPort", "6608");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(20, 33, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "6616");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r31);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(35);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(39, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(40, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(73, 35, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibListenersDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatButton, i7.MatMiniFabButton, i8.MatCheckbox, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle, i10.MatFormField, i10.MatLabel, i10.MatPrefix, i10.MatSuffix, i11.MatIcon, i12.MatInput, i13.MatProgressBar, i14.MatToolbar, i14.MatToolbarRow, i15.MatTooltip, i16.MatCard, i16.MatCardContent, i17.MatTable, i17.MatHeaderCellDef, i17.MatHeaderRowDef, i17.MatColumnDef, i17.MatCellDef, i17.MatRowDef, i17.MatHeaderCell, i17.MatCell, i17.MatHeaderRow, i17.MatRow, i18.MatSort, i18.MatSortHeader, i19.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexActionSelectRow'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexActionSelectRowComponent.prototype, "reloadContainer", null);
            exports_1("dibexActionSelectRowComponent", dibexActionSelectRowComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexActionSelectRowComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-action-select-row', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  flex: 1 1 0%;  " id=ci6627 dibComponent=subcontainer   ><ng-container [dibPort]="'6627'" parentContainerName=dibexActionSelectRow  subContainerName=dibDocsExampleHtml  subContainerId=172  dropinName=iframe ></ng-container></div><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: flex-start;  gap: 10px;  flex: 1 1 0%;  overflow:auto !important;" id=ci6628 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6628'" ><mat-card   style="  flex: 1 1 0%;  " id=ci6629 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;"  ><ng-container [dibPort]="'6629'" ><button  mat-raised-button color=primary  id=ci6630 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnClientside   style="  width:200px !important;   "  [attr.aria-label]="'Client-side Button'"  type=button  ><span class=dibButtonCaption >Client-side Button</span></button><button  mat-raised-button color=primary  id=ci6631 dibComponent=button  dibListeners eventList="  click " [containerPortId]="containerActionReference()" actionId=btnServerside   style="  width:200px !important;   "  [attr.aria-label]="'Server-side Button'"  type=button  ><span class=dibButtonCaption >Server-side Button</span></button></ng-container></mat-card-content></mat-card></ng-container></div><div   style="  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px 10px;  flex-wrap: wrap; align-content: flex-start;  " id=ci6608 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'6608'" ><button   mat-mini-fab color=primary  id=ci6615 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><span  id=ci6611 dibComponent=span   style="  flex: 0 1 200px;  "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=accent  id=ci6612 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=accent  id=ci6613 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=accent  id=ci6614 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci6609 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div  id=ci6610 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Action: select-row: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci6616 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'6616'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexActionSelectRow" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=id   name=id   [attr.aria-label]="'Id'" ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6618 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6619 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker6620"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker6620.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker6620" ></mat-datepicker-toggle><mat-datepicker #datePicker6620 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6620 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6621 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6622 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6623 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6624 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6625 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker6626"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker6626"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker6626></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6626 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexActionSelectRow><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input   matInput  type=number   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6618 dibComponent=inputText   style="  " ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Name  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6619 dibComponent=inputText   style="  " ><mat-label >Name</mat-label><input   matInput  type=text   formControlName=name   name=name   [attr.aria-label]="'Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=start_date  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'start_date','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker6620"   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (focus)="datePicker6620.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker6620" ></mat-datepicker-toggle><mat-datepicker #datePicker6620 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Start Date  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Start Date</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6620 dibComponent=inputText   style="  " ><mat-label >Start Date</mat-label><input   matInput  type=text   formControlName=start_date   name=start_date   [attr.aria-label]="'Start Date'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('start_date', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('start_date', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6621 dibComponent=inputText   style="  " ><mat-label >Phone</mat-label><input   matInput  type=text   formControlName=phone   name=phone   [attr.aria-label]="'Phone'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6622 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=address  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'address','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Address  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Address</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6623 dibComponent=inputText   style="  " ><mat-label >Address</mat-label><input   matInput  type=text   formControlName=address   name=address   [attr.aria-label]="'Address'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('address', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('address', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=city_town  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'city_town','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> City Town  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >City Town</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6624 dibComponent=inputText   style="  " ><mat-label >City Town</mat-label><input   matInput  type=text   formControlName=city_town   name=city_town   [attr.aria-label]="'City Town'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('city_town', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('city_town', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=country  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'country','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Country  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Country</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6625 dibComponent=inputText   style="  " ><mat-label >Country</mat-label><input   matInput  type=text   formControlName=country   name=country   [attr.aria-label]="'Country'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('country', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('country', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker6626"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker6626"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker6626></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci6626 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexActionSelectRowModule = class dibexActionSelectRowModule {
                static entry = dibexActionSelectRowComponent;
                static ɵfac = function dibexActionSelectRowModule_Factory(t) { return new (t || dibexActionSelectRowModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexActionSelectRowModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexActionSelectRowModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexActionSelectRowModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexActionSelectRowComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexActionSelectRowModule, { declarations: [dibexActionSelectRowComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
