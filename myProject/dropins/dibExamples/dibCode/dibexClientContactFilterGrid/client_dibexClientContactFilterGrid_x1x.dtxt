System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/autocomplete", "@angular/material/datepicker", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, autocomplete_1, datepicker_1, core_5, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, _c0, _c1, _c2, _c3, _c4, _c5, _c6, importsRequired, dibexClientContactFilterGridComponent, containerModules, dibexClientContactFilterGridModule;
    var __moduleName = context_1 && context_1.id;
    function dibexClientContactFilterGridComponent_button_12_Template(rf, ctx) { if (rf & 1) {
        const _r40 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 48);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_button_12_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r40); const ctx_r39 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r39.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 49);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexClientContactFilterGridComponent_button_13_Template(rf, ctx) { if (rf & 1) {
        const _r42 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 50);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r41.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 51);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function dibexClientContactFilterGridComponent_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r43 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r43.page.toRecord, "\u00A0of\u00A0", ctx_r43.page.records, "");
    } }
    function dibexClientContactFilterGridComponent_div_15_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r44 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r44.page.totalRecords, ")");
    } }
    function dibexClientContactFilterGridComponent_div_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 52);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_div_15_span_2_Template, 2, 2, "span", 45);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_div_15_span_4_Template, 2, 1, "span", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Client Contacts: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function dibexClientContactFilterGridComponent_th_25_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 53)(1, "mat-checkbox", 54);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_25_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r45.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function dibexClientContactFilterGridComponent_td_26_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 55)(1, "mat-checkbox", 56);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_26_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexClientContactFilterGridComponent_td_26_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r50); const row_r47 = restoredCtx.$implicit; const ctx_r49 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r49.selection.toggle(row_r47) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r47 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r47));
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r52 = i0.ɵɵnextContext(2).index;
        const ctx_r55 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r55.findColumnDisplayValue(rowIndex_r52, "id", "none", "number"), "");
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r64 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r64); const ctx_r63 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r63.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 69);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 62);
        i0.ɵɵelement(2, "input", 63);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 66);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r51 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r56 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.hasError("id", "required", rowForm_r51));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.view.recordStatus == "update" && ctx_r56.notSaved("id", rowForm_r51));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.view.recordStatus == "update" && ctx_r56.isSaved("id", rowForm_r51));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r56.isInvalid("id", rowForm_r51));
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_28_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_28_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_28_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_28_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r51 = i0.ɵɵnextContext().$implicit;
        const ctx_r53 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r53.excelEditing == false && rowForm_r51.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r53.excelEditing == true || rowForm_r51.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r53.excelEditing == false && rowForm_r51.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_28_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_28_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r51 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r51);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r51.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_29_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_29_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_29_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r67 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r67.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_th_29_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_29_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r74 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_29_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r74); const ctx_r73 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r73.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_29_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_29_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r76 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_29_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r76); const ctx_r75 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r75.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_29_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r76); const ctx_r77 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r77.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_29_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_29_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r69 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r69.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.view.recordStatus == "update" && ctx_r69.notSaved("id", ctx_r69.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.view.recordStatus == "update" && ctx_r69.isSaved("id", ctx_r69.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_29_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_29_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_29_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r79 = i0.ɵɵnextContext(2).index;
        const ctx_r82 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r82.findColumnDisplayValue(rowIndex_r79, "client_id", "dropdown", "select"), "");
    } }
    function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r94 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r94); i0.ɵɵnextContext(); const _r86 = i0.ɵɵreference(3); const _r87 = i0.ɵɵreference(4); const rowForm_r78 = i0.ɵɵnextContext(2).$implicit; const ctx_r92 = i0.ɵɵnextContext(); ctx_r92.clearDropdown(rowForm_r78.get("client_id"), $event, ctx_r92.lists.list4724, _r86); return i0.ɵɵresetView(_r87.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r95 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r95.id == "0"))("value", item_r95)("innerHtml", item_r95.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r97 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 82);
        i0.ɵɵelement(2, "input", 83, 84);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_button_5_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(6, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r97); const ctx_r96 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r96.lists.list4724.refresh()); });
        i0.ɵɵtemplate(8, dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(9, dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r89 = i0.ɵɵreference(7);
        const rowForm_r78 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r83 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r89);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r83.showDropdownClearButton(rowForm_r78.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r83.dropdownValueTranslate.bind(ctx_r83, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r83.lists.list4724.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r83.lists.list4724.lastItems);
    } }
    function dibexClientContactFilterGridComponent_td_31_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_31_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_31_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_31_ng_container_1_span_4_Template, 10, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_31_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r78 = i0.ɵɵnextContext().$implicit;
        const ctx_r80 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r80.excelEditing == false && rowForm_r78.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r80.excelEditing == true || rowForm_r78.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r80.excelEditing == false && rowForm_r78.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_31_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_31_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r78 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r78);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r78.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_32_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_32_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_32_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r100 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r100.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_th_32_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_32_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r111 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_32_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r111); i0.ɵɵnextContext(); const _r104 = i0.ɵɵreference(5); const _r105 = i0.ɵɵreference(6); const ctx_r110 = i0.ɵɵnextContext(2); ctx_r110.clearDropdown(ctx_r110.model.modelItems.client_id.formControl, $event, ctx_r110.lists.list4724, _r104); return i0.ɵɵresetView(_r105.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexClientContactFilterGridComponent_th_32_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexClientContactFilterGridComponent_th_32_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r112 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r112.id == "0"))("value", item_r112)("innerHtml", item_r112.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexClientContactFilterGridComponent_th_32_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r114 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 93)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 94, 84);
        i0.ɵɵtemplate(7, dibexClientContactFilterGridComponent_th_32_div_4_button_7_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(8, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexClientContactFilterGridComponent_th_32_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r114); const ctx_r113 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r113.lists.list4724.refresh()); });
        i0.ɵɵtemplate(10, dibexClientContactFilterGridComponent_th_32_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(11, dibexClientContactFilterGridComponent_th_32_div_4_mat_option_11_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r107 = i0.ɵɵreference(9);
        const ctx_r102 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r102.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r107);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r102.showDropdownClearButton(ctx_r102.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r102.dropdownValueTranslate.bind(ctx_r102, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r102.lists.list4724.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r102.lists.list4724.lastItems);
    } }
    function dibexClientContactFilterGridComponent_th_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_32_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_32_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_32_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r116 = i0.ɵɵnextContext(2).index;
        const ctx_r119 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r119.findColumnDisplayValue(rowIndex_r116, "first_name", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r128 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r128); const ctx_r127 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r127.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r130 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r130); const ctx_r129 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r129.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r130); const ctx_r131 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r131.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r115 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r120 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.hasError("first_name", "required", rowForm_r115));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.hasError("first_name", "maxlength", rowForm_r115));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.notSaved("first_name", rowForm_r115));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r120.view.recordStatus == "update" && ctx_r120.isSaved("first_name", rowForm_r115));
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_34_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_34_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_34_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_34_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r115 = i0.ɵɵnextContext().$implicit;
        const ctx_r117 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r117.excelEditing == false && rowForm_r115.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r117.excelEditing == true || rowForm_r115.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r117.excelEditing == false && rowForm_r115.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_34_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_34_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r115 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r115);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r115.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_35_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_35_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_35_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r134 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r134.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_th_35_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_35_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r141 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_35_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r141); const ctx_r140 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r140.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_35_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_35_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r143 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_35_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r143); const ctx_r142 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r142.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_35_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r143); const ctx_r144 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r144.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_35_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_35_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r136 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r136.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r136.view.recordStatus == "update" && ctx_r136.notSaved("first_name", ctx_r136.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r136.view.recordStatus == "update" && ctx_r136.isSaved("first_name", ctx_r136.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_35_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_35_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_35_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r146 = i0.ɵɵnextContext(2).index;
        const ctx_r149 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r149.findColumnDisplayValue(rowIndex_r146, "last_name", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r158 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r158); const ctx_r157 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r157.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r160 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r160); const ctx_r159 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r159.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r160); const ctx_r161 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r161.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r145 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r150 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r150.hasError("last_name", "required", rowForm_r145));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r150.hasError("last_name", "maxlength", rowForm_r145));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r150.view.recordStatus == "update" && ctx_r150.notSaved("last_name", rowForm_r145));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r150.view.recordStatus == "update" && ctx_r150.isSaved("last_name", rowForm_r145));
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_37_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_37_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_37_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_37_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r145 = i0.ɵɵnextContext().$implicit;
        const ctx_r147 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r147.excelEditing == false && rowForm_r145.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r147.excelEditing == true || rowForm_r145.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r147.excelEditing == false && rowForm_r145.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_37_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_37_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r145 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r145);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r145.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_38_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_38_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_38_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r164 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r164.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_th_38_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_38_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r171 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_38_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r171); const ctx_r170 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r170.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_38_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_38_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r173 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_38_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r173); const ctx_r172 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r172.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_38_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r173); const ctx_r174 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r174.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_38_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_38_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r166 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r166.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r166.view.recordStatus == "update" && ctx_r166.notSaved("last_name", ctx_r166.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r166.view.recordStatus == "update" && ctx_r166.isSaved("last_name", ctx_r166.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_38_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_38_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_38_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r176 = i0.ɵɵnextContext(2).index;
        const ctx_r179 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r179.findColumnDisplayValue(rowIndex_r176, "position", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r187 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r187); const ctx_r186 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r186.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r189 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r189); const ctx_r188 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r188.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r189); const ctx_r190 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r190.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r175 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r180 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r180.hasError("position", "maxlength", rowForm_r175));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r180.view.recordStatus == "update" && ctx_r180.notSaved("position", rowForm_r175));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r180.view.recordStatus == "update" && ctx_r180.isSaved("position", rowForm_r175));
    } }
    function dibexClientContactFilterGridComponent_td_40_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_40_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_40_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_40_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_40_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r175 = i0.ɵɵnextContext().$implicit;
        const ctx_r177 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r177.excelEditing == false && rowForm_r175.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r177.excelEditing == true || rowForm_r175.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r177.excelEditing == false && rowForm_r175.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_40_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r175 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r175);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r175.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_41_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Position ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_41_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_41_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r199 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_41_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r199); const ctx_r198 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r198.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_41_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_41_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r201 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_41_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r201); const ctx_r200 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r200.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_41_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r201); const ctx_r202 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r202.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_41_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_41_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r195 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r195.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r195.view.recordStatus == "update" && ctx_r195.notSaved("position", ctx_r195.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r195.view.recordStatus == "update" && ctx_r195.isSaved("position", ctx_r195.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_41_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_41_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_41_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r204 = i0.ɵɵnextContext(2).index;
        const ctx_r207 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r207.findColumnDisplayValue(rowIndex_r204, "email", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 150 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r215 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r215); const ctx_r214 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r214.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r217 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r217); const ctx_r216 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r216.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r217); const ctx_r218 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r218.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r203 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r208 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r208.hasError("email", "maxlength", rowForm_r203));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r208.view.recordStatus == "update" && ctx_r208.notSaved("email", rowForm_r203));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r208.view.recordStatus == "update" && ctx_r208.isSaved("email", rowForm_r203));
    } }
    function dibexClientContactFilterGridComponent_td_43_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_43_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_43_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_43_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_43_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r203 = i0.ɵɵnextContext().$implicit;
        const ctx_r205 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r205.excelEditing == false && rowForm_r203.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.excelEditing == true || rowForm_r203.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.excelEditing == false && rowForm_r203.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_43_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_43_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r203 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r203);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r203.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_44_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_44_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_44_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r227 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_44_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r227); const ctx_r226 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r226.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_44_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_44_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r229 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_44_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r229); const ctx_r228 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r228.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_44_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r229); const ctx_r230 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r230.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_44_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_44_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r223 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r223.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r223.view.recordStatus == "update" && ctx_r223.notSaved("email", ctx_r223.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r223.view.recordStatus == "update" && ctx_r223.isSaved("email", ctx_r223.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_44_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_44_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_44_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r232 = i0.ɵɵnextContext(2).index;
        const ctx_r235 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r235.findColumnDisplayValue(rowIndex_r232, "phone_w", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r243 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r243); const ctx_r242 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r242.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r245 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r245); const ctx_r244 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r244.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r245); const ctx_r246 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r246.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r231 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r236 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.hasError("phone_w", "maxlength", rowForm_r231));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.view.recordStatus == "update" && ctx_r236.notSaved("phone_w", rowForm_r231));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r236.view.recordStatus == "update" && ctx_r236.isSaved("phone_w", rowForm_r231));
    } }
    function dibexClientContactFilterGridComponent_td_46_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_46_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_46_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_46_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r231 = i0.ɵɵnextContext().$implicit;
        const ctx_r233 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r233.excelEditing == false && rowForm_r231.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r233.excelEditing == true || rowForm_r231.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r233.excelEditing == false && rowForm_r231.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_46_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r231 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r231);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r231.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_47_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Phone W ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_47_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Phone W");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_47_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r255 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_47_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r255); const ctx_r254 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r254.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_47_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_47_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r257 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "Phone W");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_47_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r257); const ctx_r256 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r256.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_47_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r257); const ctx_r258 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r258.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_47_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_47_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r251 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r251.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r251.view.recordStatus == "update" && ctx_r251.notSaved("phone_w", ctx_r251.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r251.view.recordStatus == "update" && ctx_r251.isSaved("phone_w", ctx_r251.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_47_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_47_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_47_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r260 = i0.ɵɵnextContext(2).index;
        const ctx_r263 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r263.findColumnDisplayValue(rowIndex_r260, "mobile", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r271 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r271); const ctx_r270 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r270.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r273 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r273); const ctx_r272 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r272.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r273); const ctx_r274 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r274.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r259 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r264 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.hasError("mobile", "maxlength", rowForm_r259));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.view.recordStatus == "update" && ctx_r264.notSaved("mobile", rowForm_r259));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r264.view.recordStatus == "update" && ctx_r264.isSaved("mobile", rowForm_r259));
    } }
    function dibexClientContactFilterGridComponent_td_49_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_49_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_49_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_49_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r259 = i0.ɵɵnextContext().$implicit;
        const ctx_r261 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r261.excelEditing == false && rowForm_r259.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.excelEditing == true || rowForm_r259.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r261.excelEditing == false && rowForm_r259.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_49_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_49_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r259 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r259);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r259.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_50_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Mobile ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_50_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_50_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r283 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_50_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r283); const ctx_r282 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r282.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_50_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_50_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r285 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_50_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r285); const ctx_r284 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r284.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_50_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r285); const ctx_r286 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r286.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_50_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_50_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r279 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r279.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r279.view.recordStatus == "update" && ctx_r279.notSaved("mobile", ctx_r279.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r279.view.recordStatus == "update" && ctx_r279.isSaved("mobile", ctx_r279.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_50_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_50_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_50_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r288 = i0.ɵɵnextContext(2).index;
        const ctx_r291 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r291.findColumnDisplayValue(rowIndex_r288, "resigned", "none", "date"), "");
    } }
    function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r299 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r299); const ctx_r298 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r298.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r301 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 114)(2, "input", 115);
        i0.ɵɵlistener("focus", function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r301); const _r295 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r295.open()); })("keydown.enter", function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r301); const ctx_r302 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r302.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r301); const ctx_r303 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r303.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 116)(4, "mat-datepicker", null, 117);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(7, dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r295 = i0.ɵɵreference(5);
        const rowForm_r287 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r292 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r295);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r295);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r292.view.recordStatus == "update" && ctx_r292.notSaved("resigned", rowForm_r287));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r292.view.recordStatus == "update" && ctx_r292.isSaved("resigned", rowForm_r287));
    } }
    function dibexClientContactFilterGridComponent_td_52_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_52_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_52_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_52_ng_container_1_span_4_Template, 8, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_52_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r287 = i0.ɵɵnextContext().$implicit;
        const ctx_r289 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == false && rowForm_r287.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == true || rowForm_r287.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r289.excelEditing == false && rowForm_r287.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_52_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_52_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r287 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r287);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r287.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_53_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Resigned ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_53_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Resigned");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_53_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r312 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_53_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r312); const ctx_r311 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r311.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_53_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_53_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r314 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "Resigned");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_53_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r314); const ctx_r313 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r313.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_53_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r314); const ctx_r315 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r315.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_53_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_53_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r308 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r308.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r308.view.recordStatus == "update" && ctx_r308.notSaved("resigned", ctx_r308.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r308.view.recordStatus == "update" && ctx_r308.isSaved("resigned", ctx_r308.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_53_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_53_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_53_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r317 = i0.ɵɵnextContext(2).index;
        const ctx_r320 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r320.findColumnDisplayValue(rowIndex_r317, "notes", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 250 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r328 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r328); const ctx_r327 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r327.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r330 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r330); const ctx_r329 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r329.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r330); const ctx_r331 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r331.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r316 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r321 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r321.hasError("notes", "maxlength", rowForm_r316));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r321.view.recordStatus == "update" && ctx_r321.notSaved("notes", rowForm_r316));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r321.view.recordStatus == "update" && ctx_r321.isSaved("notes", rowForm_r316));
    } }
    function dibexClientContactFilterGridComponent_td_55_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_55_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_55_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_55_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_55_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r316 = i0.ɵɵnextContext().$implicit;
        const ctx_r318 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r318.excelEditing == false && rowForm_r316.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r318.excelEditing == true || rowForm_r316.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r318.excelEditing == false && rowForm_r316.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_55_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_55_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r316 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r316);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r316.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_56_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_56_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_56_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r340 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_56_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r340); const ctx_r339 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r339.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_56_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_56_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r342 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_56_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r342); const ctx_r341 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r341.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_56_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r342); const ctx_r343 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r343.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_56_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_56_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r336 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r336.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r336.view.recordStatus == "update" && ctx_r336.notSaved("notes", ctx_r336.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r336.view.recordStatus == "update" && ctx_r336.isSaved("notes", ctx_r336.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_56_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_56_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_56_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r25.showSearch);
    } }
    function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r345 = i0.ɵɵnextContext(2).index;
        const ctx_r348 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r348.findColumnDisplayValue(rowIndex_r345, "updated", "none", "datetime"), "");
    } }
    function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r356 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r356); const ctx_r355 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r355.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r358 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 123);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 116);
        i0.ɵɵelementStart(3, "input", 124);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r358); const ctx_r357 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r357.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r358); const ctx_r359 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r359.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 125);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r354 = i0.ɵɵreference(7);
        const rowForm_r344 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r349 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r354);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r354);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r349.view.recordStatus == "update" && ctx_r349.notSaved("updated", rowForm_r344));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r349.view.recordStatus == "update" && ctx_r349.isSaved("updated", rowForm_r344));
    } }
    function dibexClientContactFilterGridComponent_td_58_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_td_58_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_td_58_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_td_58_ng_container_1_span_4_Template, 8, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_td_58_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r344 = i0.ɵɵnextContext().$implicit;
        const ctx_r346 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r346.excelEditing == false && rowForm_r344.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r346.excelEditing == true || rowForm_r344.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r346.excelEditing == false && rowForm_r344.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_td_58_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_td_58_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r344 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r344);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r344.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_th_59_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_59_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_59_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r368 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_th_59_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r368); const ctx_r367 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r367.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_59_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_th_59_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r370 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 126)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 127);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_th_59_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r370); const ctx_r369 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r369.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_th_59_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r370); const ctx_r371 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r371.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_th_59_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_th_59_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r364 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r364.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.view.recordStatus == "update" && ctx_r364.notSaved("updated", ctx_r364.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r364.view.recordStatus == "update" && ctx_r364.isSaved("updated", ctx_r364.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_th_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_th_59_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_th_59_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_th_59_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function dibexClientContactFilterGridComponent_th_61_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexClientContactFilterGridComponent_th_61_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 128);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_th_61_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r28 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r28.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r28.busy);
    } }
    function dibexClientContactFilterGridComponent_th_63_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r373 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r373.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexClientContactFilterGridComponent_th_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_th_63_span_1_Template, 2, 1, "span", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r29.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r29.busy && ctx_r29.tableDataSource.data.length == 0);
    } }
    function dibexClientContactFilterGridComponent_ng_container_64_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 131);
    } }
    function dibexClientContactFilterGridComponent_ng_container_64_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_container_64_tr_1_Template, 1, 0, "tr", 130);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r374 = ctx.$implicit;
        const ctx_r30 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r30.columnHeaders.getArray(column_r374).items$));
    } }
    function dibexClientContactFilterGridComponent_tr_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 132);
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r31.busy ? "visible" : "hidden"));
    } }
    function dibexClientContactFilterGridComponent_tr_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 132);
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c1, ctx_r32.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function dibexClientContactFilterGridComponent_tr_67_Template(rf, ctx) { if (rf & 1) {
        const _r379 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 133);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_tr_67_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r379); const row_r376 = restoredCtx.$implicit; const ctx_r378 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r378.rowClick(row_r376, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r376 = ctx.$implicit;
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r33.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r33.isHighlighted(row_r376)));
    } }
    function dibexClientContactFilterGridComponent_69_ng_template_0_Template(rf, ctx) { }
    function dibexClientContactFilterGridComponent_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, dibexClientContactFilterGridComponent_69_ng_template_0_Template, 0, 0, "ng-template", 134);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r37 = i0.ɵɵreference(74);
        i0.ɵɵproperty("ngTemplateOutlet", _r37);
    } }
    function dibexClientContactFilterGridComponent_mat_toolbar_72_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r385 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 140);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_mat_toolbar_72_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r385); const ctx_r384 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r384.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r381 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r381.numberOfSelectedItems + " ", "item", ctx_r381.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function dibexClientContactFilterGridComponent_mat_toolbar_72_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_mat_toolbar_72_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_mat_toolbar_72_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r389 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 141);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_mat_toolbar_72_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r389); const ctx_r388 = i0.ɵɵnextContext(2); ctx_r388.gridShowClipboardDefault = !ctx_r388.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r388.gridShowClipboardDefault && ctx_r388.scrollToBottom()); });
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_mat_toolbar_72_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 45);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_mat_toolbar_72_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 45);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r382 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r382.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r382.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r382.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function dibexClientContactFilterGridComponent_mat_toolbar_72_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r392 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 142, 143);
        i0.ɵɵlistener("page", function dibexClientContactFilterGridComponent_mat_toolbar_72_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r392); const ctx_r391 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r391.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r383 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r383.page.totalRecords)("pageSize", ctx_r383.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c3));
    } }
    function dibexClientContactFilterGridComponent_mat_toolbar_72_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 135);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_mat_toolbar_72_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 136);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_mat_toolbar_72_button_3_Template, 4, 3, "button", 137);
        i0.ɵɵelement(4, "span", 138);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_mat_toolbar_72_mat_paginator_5_Template, 2, 4, "mat-paginator", 139);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r36.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r36.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r421 = i0.ɵɵnextContext(2).index;
        const ctx_r424 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r424.findColumnDisplayValue(rowIndex_r421, "id", "none", "number"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r432 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r432); const ctx_r431 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r431.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r434 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 62)(2, "input", 148);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r434); const ctx_r433 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r433.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r434); const ctx_r435 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r435.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r420 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r425 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.hasError("id", "required", rowForm_r420));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.view.recordStatus == "update" && ctx_r425.notSaved("id", rowForm_r420));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r425.view.recordStatus == "update" && ctx_r425.isSaved("id", rowForm_r420));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r420 = i0.ɵɵnextContext().$implicit;
        const ctx_r422 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r422.excelEditing == false && rowForm_r420.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r422.excelEditing == true || rowForm_r420.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r422.excelEditing == false && rowForm_r420.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_2_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r420 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r420);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r420.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_3_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r438 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r438.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r445 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r445); const ctx_r444 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r444.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r447 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 80)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 81);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r447); const ctx_r446 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r446.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r447); const ctx_r448 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r448.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r440 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r440.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r440.view.recordStatus == "update" && ctx_r440.notSaved("id", ctx_r440.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r440.view.recordStatus == "update" && ctx_r440.isSaved("id", ctx_r440.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_3_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_3_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_3_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r394 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r394.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r394.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r394.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r450 = i0.ɵɵnextContext(2).index;
        const ctx_r453 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r453.findColumnDisplayValue(rowIndex_r450, "client_id", "dropdown", "select"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_button_5_Template(rf, ctx) { if (rf & 1) {
        const _r465 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r465); i0.ɵɵnextContext(); const _r457 = i0.ɵɵreference(3); const _r458 = i0.ɵɵreference(4); const rowForm_r449 = i0.ɵɵnextContext(2).$implicit; const ctx_r463 = i0.ɵɵnextContext(2); ctx_r463.clearDropdown(rowForm_r449.get("client_id"), $event, ctx_r463.lists.list4724, _r457); return i0.ɵɵresetView(_r458.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_mat_progress_bar_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_mat_option_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r466 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r466.id == "0"))("value", item_r466)("innerHtml", item_r466.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r468 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 82);
        i0.ɵɵelement(2, "input", 83, 84);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_button_5_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(6, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_Template_mat_autocomplete_opened_6_listener() { i0.ɵɵrestoreView(_r468); const ctx_r467 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r467.lists.list4724.refresh()); });
        i0.ɵɵtemplate(8, dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_mat_progress_bar_8_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(9, dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_mat_option_9_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r460 = i0.ɵɵreference(7);
        const rowForm_r449 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r454 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matAutocomplete", _r460);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r454.showDropdownClearButton(rowForm_r449.get("client_id")));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r454.dropdownValueTranslate.bind(ctx_r454, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r454.lists.list4724.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r454.lists.list4724.lastItems);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_4_Template, 10, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r449 = i0.ɵɵnextContext().$implicit;
        const ctx_r451 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == true || rowForm_r449.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r451.excelEditing == false && rowForm_r449.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_5_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r449 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r449);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r449.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Client \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_6_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r471 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r471.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Client");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_button_7_Template(rf, ctx) { if (rf & 1) {
        const _r482 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 90);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_button_7_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r482); i0.ɵɵnextContext(); const _r475 = i0.ɵɵreference(5); const _r476 = i0.ɵɵreference(6); const ctx_r481 = i0.ɵɵnextContext(3); ctx_r481.clearDropdown(ctx_r481.model.modelItems.client_id.formControl, $event, ctx_r481.lists.list4724, _r475); return i0.ɵɵresetView(_r476.focus()); });
        i0.ɵɵelementStart(1, "mat-icon");
        i0.ɵɵtext(2, "close");
        i0.ɵɵelementEnd()();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_mat_progress_bar_10_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_mat_option_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-option", 92);
    } if (rf & 2) {
        const item_r483 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c0, item_r483.id == "0"))("value", item_r483)("innerHtml", item_r483.id_display_value, i0.ɵɵsanitizeHtml);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r485 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 93)(2, "mat-label");
        i0.ɵɵtext(3, "Client");
        i0.ɵɵelementEnd();
        i0.ɵɵelement(4, "input", 94, 84);
        i0.ɵɵtemplate(7, dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_button_7_Template, 3, 0, "button", 85);
        i0.ɵɵelementStart(8, "mat-autocomplete", 86, 87);
        i0.ɵɵlistener("opened", function dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_Template_mat_autocomplete_opened_8_listener() { i0.ɵɵrestoreView(_r485); const ctx_r484 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r484.lists.list4724.refresh()); });
        i0.ɵɵtemplate(10, dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_mat_progress_bar_10_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵtemplate(11, dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_mat_option_11_Template, 1, 5, "mat-option", 89);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const _r478 = i0.ɵɵreference(9);
        const ctx_r473 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r473.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("matAutocomplete", _r478);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r473.showDropdownClearButton(ctx_r473.model.modelItems.client_id.formControl));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("displayWith", ctx_r473.dropdownValueTranslate.bind(ctx_r473, "client_id"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r473.lists.list4724.busy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r473.lists.list4724.lastItems);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_6_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_6_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_6_div_4_Template, 12, 6, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r396 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r396.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r396.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r487 = i0.ɵɵnextContext(2).index;
        const ctx_r490 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r490.findColumnDisplayValue(rowIndex_r487, "first_name", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r499 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r499); const ctx_r498 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r498.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r501 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 96);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r501); const ctx_r500 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r500.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r501); const ctx_r502 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r502.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r486 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r491 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r491.hasError("first_name", "required", rowForm_r486));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r491.hasError("first_name", "maxlength", rowForm_r486));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r491.view.recordStatus == "update" && ctx_r491.notSaved("first_name", rowForm_r486));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r491.view.recordStatus == "update" && ctx_r491.isSaved("first_name", rowForm_r486));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r486 = i0.ɵɵnextContext().$implicit;
        const ctx_r488 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r488.excelEditing == false && rowForm_r486.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r488.excelEditing == true || rowForm_r486.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r488.excelEditing == false && rowForm_r486.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_8_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r486 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r486);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r486.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " First Name \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_9_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r505 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r505.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "First Name");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r512 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r512); const ctx_r511 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r511.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r514 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 97)(2, "mat-label");
        i0.ɵɵtext(3, "First Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 98);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r514); const ctx_r513 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r513.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r514); const ctx_r515 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r515.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r507 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r507.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "First Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r507.view.recordStatus == "update" && ctx_r507.notSaved("first_name", ctx_r507.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r507.view.recordStatus == "update" && ctx_r507.isSaved("first_name", ctx_r507.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_9_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_9_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_9_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r398 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r398.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r398.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r398.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r517 = i0.ɵɵnextContext(2).index;
        const ctx_r520 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r520.findColumnDisplayValue(rowIndex_r517, "last_name", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r529 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r529); const ctx_r528 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r528.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r531 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 99);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r531); const ctx_r530 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r530.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r531); const ctx_r532 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r532.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r516 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r521 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r521.hasError("last_name", "required", rowForm_r516));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r521.hasError("last_name", "maxlength", rowForm_r516));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r521.view.recordStatus == "update" && ctx_r521.notSaved("last_name", rowForm_r516));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r521.view.recordStatus == "update" && ctx_r521.isSaved("last_name", rowForm_r516));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_4_Template, 7, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r516 = i0.ɵɵnextContext().$implicit;
        const ctx_r518 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r518.excelEditing == false && rowForm_r516.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.excelEditing == true || rowForm_r516.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r518.excelEditing == false && rowForm_r516.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_11_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r516 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r516);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r516.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 77);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Last Name \u00A0");
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_12_div_2_span_2_Template, 2, 0, "span", 76);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r535 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r535.editorOpen);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Last Name");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r542 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r542); const ctx_r541 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r541.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r544 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 100)(2, "mat-label");
        i0.ɵɵtext(3, "Last Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 101);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r544); const ctx_r543 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r543.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r544); const ctx_r545 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r545.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r537 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r537.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Last Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r537.view.recordStatus == "update" && ctx_r537.notSaved("last_name", ctx_r537.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r537.view.recordStatus == "update" && ctx_r537.isSaved("last_name", ctx_r537.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_12_div_2_Template, 3, 1, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_12_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_12_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r400 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r400.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r547 = i0.ɵɵnextContext(2).index;
        const ctx_r550 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r550.findColumnDisplayValue(rowIndex_r547, "position", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 50 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r558 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r558); const ctx_r557 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r557.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r560 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 102);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r560); const ctx_r559 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r559.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r560); const ctx_r561 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r561.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r546 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r551 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r551.hasError("position", "maxlength", rowForm_r546));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r551.view.recordStatus == "update" && ctx_r551.notSaved("position", rowForm_r546));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r551.view.recordStatus == "update" && ctx_r551.isSaved("position", rowForm_r546));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r546 = i0.ɵɵnextContext().$implicit;
        const ctx_r548 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r548.excelEditing == false && rowForm_r546.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r548.excelEditing == true || rowForm_r546.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r548.excelEditing == false && rowForm_r546.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_14_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r546 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r546);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r546.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Position ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Position");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r570 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r570); const ctx_r569 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r569.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r572 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 103)(2, "mat-label");
        i0.ɵɵtext(3, "Position");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 104);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r572); const ctx_r571 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r571.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r572); const ctx_r573 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r573.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r566 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r566.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Position");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.view.recordStatus == "update" && ctx_r566.notSaved("position", ctx_r566.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r566.view.recordStatus == "update" && ctx_r566.isSaved("position", ctx_r566.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_15_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_15_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_15_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r402 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r402.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r402.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r402.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r575 = i0.ɵɵnextContext(2).index;
        const ctx_r578 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r578.findColumnDisplayValue(rowIndex_r575, "email", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 150 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r586 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r586); const ctx_r585 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r585.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r588 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 105);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r588); const ctx_r587 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r587.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r588); const ctx_r589 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r589.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r574 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r579 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r579.hasError("email", "maxlength", rowForm_r574));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r579.view.recordStatus == "update" && ctx_r579.notSaved("email", rowForm_r574));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r579.view.recordStatus == "update" && ctx_r579.isSaved("email", rowForm_r574));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r574 = i0.ɵɵnextContext().$implicit;
        const ctx_r576 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r576.excelEditing == false && rowForm_r574.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r576.excelEditing == true || rowForm_r574.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r576.excelEditing == false && rowForm_r574.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_17_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r574 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r574);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r574.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Email ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Email");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r598 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r598); const ctx_r597 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r597.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r600 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 106)(2, "mat-label");
        i0.ɵɵtext(3, "Email");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 107);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r600); const ctx_r599 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r599.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r600); const ctx_r601 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r601.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r594 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r594.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Email");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r594.view.recordStatus == "update" && ctx_r594.notSaved("email", ctx_r594.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r594.view.recordStatus == "update" && ctx_r594.isSaved("email", ctx_r594.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_18_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_18_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_18_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r404 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r404.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r404.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r404.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r603 = i0.ɵɵnextContext(2).index;
        const ctx_r606 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r606.findColumnDisplayValue(rowIndex_r603, "phone_w", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r614 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r614); const ctx_r613 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r613.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r616 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 108);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r616); const ctx_r615 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r615.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r616); const ctx_r617 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r617.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r602 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r607 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r607.hasError("phone_w", "maxlength", rowForm_r602));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r607.view.recordStatus == "update" && ctx_r607.notSaved("phone_w", rowForm_r602));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r607.view.recordStatus == "update" && ctx_r607.isSaved("phone_w", rowForm_r602));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r602 = i0.ɵɵnextContext().$implicit;
        const ctx_r604 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r604.excelEditing == false && rowForm_r602.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r604.excelEditing == true || rowForm_r602.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r604.excelEditing == false && rowForm_r602.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_20_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r602 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r602);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r602.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Phone W ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Phone W");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r626 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r626); const ctx_r625 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r625.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r628 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 109)(2, "mat-label");
        i0.ɵɵtext(3, "Phone W");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 110);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r628); const ctx_r627 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r627.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r628); const ctx_r629 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r629.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r622 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r622.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Phone W");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r622.view.recordStatus == "update" && ctx_r622.notSaved("phone_w", ctx_r622.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r622.view.recordStatus == "update" && ctx_r622.isSaved("phone_w", ctx_r622.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_21_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_21_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_21_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r406 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r406.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r406.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r406.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r631 = i0.ɵɵnextContext(2).index;
        const ctx_r634 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r634.findColumnDisplayValue(rowIndex_r631, "mobile", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 35 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r642 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r642); const ctx_r641 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r641.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r644 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 111);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r644); const ctx_r643 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r643.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r644); const ctx_r645 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r645.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r630 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r635 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r635.hasError("mobile", "maxlength", rowForm_r630));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r635.view.recordStatus == "update" && ctx_r635.notSaved("mobile", rowForm_r630));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r635.view.recordStatus == "update" && ctx_r635.isSaved("mobile", rowForm_r630));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r630 = i0.ɵɵnextContext().$implicit;
        const ctx_r632 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r632.excelEditing == false && rowForm_r630.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r632.excelEditing == true || rowForm_r630.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r632.excelEditing == false && rowForm_r630.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_23_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r630 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r630);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r630.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Mobile ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Mobile");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r654 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r654); const ctx_r653 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r653.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r656 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 112)(2, "mat-label");
        i0.ɵɵtext(3, "Mobile");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 113);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r656); const ctx_r655 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r655.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r656); const ctx_r657 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r657.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r650 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r650.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Mobile");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r650.view.recordStatus == "update" && ctx_r650.notSaved("mobile", ctx_r650.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r650.view.recordStatus == "update" && ctx_r650.isSaved("mobile", ctx_r650.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_24_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_24_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_24_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r408 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r408.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r408.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r408.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r659 = i0.ɵɵnextContext(2).index;
        const ctx_r662 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r662.findColumnDisplayValue(rowIndex_r659, "resigned", "none", "date"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        const _r670 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_mat_icon_6_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r670); const ctx_r669 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r669.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_mat_icon_7_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r672 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 114)(2, "input", 115);
        i0.ɵɵlistener("focus", function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r672); const _r666 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r666.open()); })("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r672); const ctx_r673 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r673.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r672); const ctx_r674 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r674.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "mat-datepicker-toggle", 116)(4, "mat-datepicker", null, 117);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(7, dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_mat_icon_7_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r666 = i0.ɵɵreference(5);
        const rowForm_r658 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r663 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("matDatepicker", _r666);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", _r666);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r663.view.recordStatus == "update" && ctx_r663.notSaved("resigned", rowForm_r658));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r663.view.recordStatus == "update" && ctx_r663.isSaved("resigned", rowForm_r658));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_4_Template, 8, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r658 = i0.ɵɵnextContext().$implicit;
        const ctx_r660 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r660.excelEditing == false && rowForm_r658.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r660.excelEditing == true || rowForm_r658.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r660.excelEditing == false && rowForm_r658.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_26_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r658 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r658);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r658.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Resigned ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Resigned");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r683 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r683); const ctx_r682 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r682.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r685 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "Resigned");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r685); const ctx_r684 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r684.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r685); const ctx_r686 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r686.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r679 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r679.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Resigned");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r679.view.recordStatus == "update" && ctx_r679.notSaved("resigned", ctx_r679.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r679.view.recordStatus == "update" && ctx_r679.isSaved("resigned", ctx_r679.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_27_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_27_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_27_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r410 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r410.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r410.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r688 = i0.ɵɵnextContext(2).index;
        const ctx_r691 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r691.findColumnDisplayValue(rowIndex_r688, "notes", "none", "text"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 250 chars or less");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r699 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r699); const ctx_r698 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r698.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r701 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 95)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r701); const ctx_r700 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r700.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r701); const ctx_r702 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r702.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 45);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r687 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r692 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r692.hasError("notes", "maxlength", rowForm_r687));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r692.view.recordStatus == "update" && ctx_r692.notSaved("notes", rowForm_r687));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r692.view.recordStatus == "update" && ctx_r692.isSaved("notes", rowForm_r687));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_4_Template, 6, 4, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r687 = i0.ɵɵnextContext().$implicit;
        const ctx_r689 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r689.excelEditing == false && rowForm_r687.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r689.excelEditing == true || rowForm_r687.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r689.excelEditing == false && rowForm_r687.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_29_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r687 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r687);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r687.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Notes ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Notes");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r711 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r711); const ctx_r710 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r710.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r713 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "Notes");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r713); const ctx_r712 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r712.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r713); const ctx_r714 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r714.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r707 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r707.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Notes");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r707.view.recordStatus == "update" && ctx_r707.notSaved("notes", ctx_r707.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r707.view.recordStatus == "update" && ctx_r707.isSaved("notes", ctx_r707.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_30_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_30_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_30_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r412 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r412.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r412.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r412.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 61);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r716 = i0.ɵɵnextContext(2).index;
        const ctx_r719 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r719.findColumnDisplayValue(rowIndex_r716, "updated", "none", "datetime"), "");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r727 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r727); const ctx_r726 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r726.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r729 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 61)(1, "mat-form-field", 123);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 116);
        i0.ɵɵelementStart(3, "input", 124);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r729); const ctx_r728 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r728.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r729); const ctx_r730 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r730.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 125);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r725 = i0.ɵɵreference(7);
        const rowForm_r715 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r720 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r725);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r725);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r720.view.recordStatus == "update" && ctx_r720.notSaved("updated", rowForm_r715));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r720.view.recordStatus == "update" && ctx_r720.isSaved("updated", rowForm_r715));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 58)(2, "span", 59);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_3_Template, 2, 1, "span", 60);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_4_Template, 8, 5, "span", 60);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_span_5_Template, 1, 0, "span", 45);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r715 = i0.ɵɵnextContext().$implicit;
        const ctx_r717 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r717.excelEditing == false && rowForm_r715.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r717.excelEditing == true || rowForm_r715.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r717.excelEditing == false && rowForm_r715.get("__edit").value === false);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 57);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_td_32_ng_container_1_Template, 6, 3, "ng-container", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r715 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r715);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r715.getRawValue());
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 75);
        i0.ɵɵtext(1, " Updated ");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 78);
        i0.ɵɵtext(1, "Updated");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r739 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 67);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r739); const ctx_r738 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r738.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 68);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r741 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 79)(1, "mat-form-field", 126)(2, "mat-label");
        i0.ɵɵtext(3, "Updated");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 127);
        i0.ɵɵlistener("keydown.enter", function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r741); const ctx_r740 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r740.searchGrid(false)); })("keydown.esc", function dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r741); const ctx_r742 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r742.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 64);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 65);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r735 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r735.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Updated");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r735.view.recordStatus == "update" && ctx_r735.notSaved("updated", ctx_r735.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r735.view.recordStatus == "update" && ctx_r735.isSaved("updated", ctx_r735.model.$formGroup));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 70)(1, "div", 71);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_th_33_div_2_Template, 2, 0, "div", 72);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_33_div_3_Template, 2, 0, "div", 73);
        i0.ɵɵtemplate(4, dibexClientContactFilterGridComponent_ng_template_73_th_33_div_4_Template, 7, 4, "div", 74);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r414 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r414.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.showSearch);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_35_Template(rf, ctx) { if (rf & 1) {
        const _r744 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 53)(1, "mat-checkbox", 149);
        i0.ɵɵlistener("change", function dibexClientContactFilterGridComponent_ng_template_73_th_35_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r744); const ctx_r743 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r743.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r415 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r415.masterIsChecked)("indeterminate", ctx_r415.masterIsIndeterminate);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_td_36_Template(rf, ctx) { if (rf & 1) {
        const _r748 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 150)(1, "mat-checkbox", 56);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_td_36_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function dibexClientContactFilterGridComponent_ng_template_73_td_36_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r748); const row_r745 = restoredCtx.$implicit; const ctx_r747 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r747.selection.toggle(row_r745) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r745 = ctx.$implicit;
        const ctx_r416 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r416.isHighlighted(row_r745));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_38_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 91);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 151);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_th_38_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 88);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r417 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r417.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r417.busy);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_40_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r750 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r750.translate("global.norecordsfound", "No Records Found"));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_th_40_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129);
        i0.ɵɵtemplate(1, dibexClientContactFilterGridComponent_ng_template_73_th_40_span_1_Template, 2, 1, "span", 45);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r418 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r418.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r418.busy && ctx_r418.tableDataSource.data.length == 0);
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_tr_41_Template(rf, ctx) { if (rf & 1) {
        const _r753 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 152);
        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_ng_template_73_tr_41_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r753); const row_r751 = restoredCtx.$implicit; const ctx_r752 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r752.rowClick(row_r751, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r751 = ctx.$implicit;
        const ctx_r419 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx_r419.isHighlighted(row_r751)));
    } }
    function dibexClientContactFilterGridComponent_ng_template_73_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 144);
        i0.ɵɵelementContainerStart(1, 25);
        i0.ɵɵtemplate(2, dibexClientContactFilterGridComponent_ng_template_73_td_2_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(3, dibexClientContactFilterGridComponent_ng_template_73_th_3_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 28);
        i0.ɵɵtemplate(5, dibexClientContactFilterGridComponent_ng_template_73_td_5_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(6, dibexClientContactFilterGridComponent_ng_template_73_th_6_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 29);
        i0.ɵɵtemplate(8, dibexClientContactFilterGridComponent_ng_template_73_td_8_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(9, dibexClientContactFilterGridComponent_ng_template_73_th_9_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 30);
        i0.ɵɵtemplate(11, dibexClientContactFilterGridComponent_ng_template_73_td_11_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(12, dibexClientContactFilterGridComponent_ng_template_73_th_12_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 31);
        i0.ɵɵtemplate(14, dibexClientContactFilterGridComponent_ng_template_73_td_14_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(15, dibexClientContactFilterGridComponent_ng_template_73_th_15_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 32);
        i0.ɵɵtemplate(17, dibexClientContactFilterGridComponent_ng_template_73_td_17_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(18, dibexClientContactFilterGridComponent_ng_template_73_th_18_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 33);
        i0.ɵɵtemplate(20, dibexClientContactFilterGridComponent_ng_template_73_td_20_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(21, dibexClientContactFilterGridComponent_ng_template_73_th_21_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 34);
        i0.ɵɵtemplate(23, dibexClientContactFilterGridComponent_ng_template_73_td_23_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(24, dibexClientContactFilterGridComponent_ng_template_73_th_24_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 35);
        i0.ɵɵtemplate(26, dibexClientContactFilterGridComponent_ng_template_73_td_26_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(27, dibexClientContactFilterGridComponent_ng_template_73_th_27_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 36);
        i0.ɵɵtemplate(29, dibexClientContactFilterGridComponent_ng_template_73_td_29_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(30, dibexClientContactFilterGridComponent_ng_template_73_th_30_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 37);
        i0.ɵɵtemplate(32, dibexClientContactFilterGridComponent_ng_template_73_td_32_Template, 2, 2, "td", 26);
        i0.ɵɵtemplate(33, dibexClientContactFilterGridComponent_ng_template_73_th_33_Template, 5, 3, "th", 27);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 22);
        i0.ɵɵtemplate(35, dibexClientContactFilterGridComponent_ng_template_73_th_35_Template, 2, 2, "th", 23);
        i0.ɵɵtemplate(36, dibexClientContactFilterGridComponent_ng_template_73_td_36_Template, 2, 1, "td", 145);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 38);
        i0.ɵɵtemplate(38, dibexClientContactFilterGridComponent_ng_template_73_th_38_Template, 2, 2, "th", 146);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(39, 40);
        i0.ɵɵtemplate(40, dibexClientContactFilterGridComponent_ng_template_73_th_40_Template, 2, 2, "th", 41);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(41, dibexClientContactFilterGridComponent_ng_template_73_tr_41_Template, 1, 3, "tr", 147);
        i0.ɵɵpipe(42, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r38 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r38.selectionDataSource);
        i0.ɵɵadvance(41);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(42, 2, ctx_r38.columnsToDisplay.items$));
    } }
    async function importFiles() { for (const fileLocation of importsRequired) {
        await SystemJS.import(fileLocation);
    } }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i19 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                core_5 = core_3_1;
                i8 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i20 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i21 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i9 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i13 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i18 = card_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
                i7 = autocomplete_1_1;
            },
            function (datepicker_1_1) {
                datepicker_1 = datepicker_1_1;
                i11 = datepicker_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i12_1) {
                i12 = i12_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i15_1) {
                i15 = i15_1;
            },
            function (i16_1) {
                i16 = i16_1;
            },
            function (i17_1) {
                i17 = i17_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { "extra-node": a0 }; };
            _c1 = function (a0) { return { visibility: a0 }; };
            _c2 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c3 = function () { return [10, 20, 50, 100]; };
            _c4 = function (a0) { return { "dib-editor": a0 }; };
            _c5 = function () { return ["_dibBusy"]; };
            _c6 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            dibexClientContactFilterGridComponent = class dibexClientContactFilterGridComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = { container: { id: 195, name: 'dibexClientContactFilterGrid', subContainerItemAliases: [], allChildContainers: [], refreshChildContainers: { "_": [] }, dropin: 'grid', activeFilter: null, configs: {}, keepInMemory: false }, items: {}, primaryKeys: ["id"], recordStatus: 'create', debug: false, debugItem: false };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = false; //default:false
                gridExcelEditingAutoSave = false; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = { pageSize: 20, pageIndex: 1, };
                columnsToDisplay = new shared_3.DibArray(['id', 'client_id', 'first_name', 'last_name', 'position', 'email', 'phone_w', 'mobile', 'resigned', 'notes', 'updated',]);
                allColumnsToDisplay = new shared_3.DibArray(['id', 'client_id', 'first_name', 'last_name', 'position', 'email', 'phone_w', 'mobile', 'resigned', 'notes', 'updated',]);
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    this.lists.list4724 = new shared_3.DibList("/peff/Crud/componentlist?containerName=dibexClientContactFilterGrid&containerItemId=4724", null, null, 40);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'dibexClientContactFilterGrid');
                    this.containerName = 'dibexClientContactFilterGrid'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = { id: { itemId: 4723, type: 'number', fieldAlias: 'id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'blur' }), create: false, update: false, required: true, itemAlias: 'id', default: '', dataType: 'number', contentType: 'integer', changeUrl: false }, client_id: { itemId: 4724, type: 'select', fieldAlias: 'client_id', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required], updateOn: 'change' }), create: true, update: true, required: true, itemAlias: null, default: '@{parent_value_id}', dataType: 'select', contentType: 'integer', changeUrl: false,
                            listId: 4724 }, first_name: { itemId: 4725, type: 'text', fieldAlias: 'first_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, last_name: { itemId: 4726, type: 'text', fieldAlias: 'last_name', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.required,
                                    forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: true, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, position: { itemId: 4727, type: 'text', fieldAlias: 'position', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, email: { itemId: 4728, type: 'text', fieldAlias: 'email', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(150)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, phone_w: { itemId: 4729, type: 'text', fieldAlias: 'phone_w', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, mobile: { itemId: 4730, type: 'text', fieldAlias: 'mobile', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, resigned: { itemId: 4731, type: 'date', fieldAlias: 'resigned', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'date', contentType: 'date', changeUrl: false }, notes: { itemId: 4732, type: 'text', fieldAlias: 'notes', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [forms_2.Validators.maxLength(250)], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'text', contentType: 'text', changeUrl: false }, updated: { itemId: 4733, type: 'datetime', fieldAlias: 'updated', formControl: new forms_2.FormControl({ value: '', disabled: false }, { validators: [], updateOn: 'blur' }), create: true, update: true, required: false, itemAlias: null, default: '', dataType: 'datetime', contentType: 'datetime', changeUrl: false }, };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('client_id', this.model.modelItems.client_id.formControl);
                    this.model.$formGroup.addControl('first_name', this.model.modelItems.first_name.formControl);
                    this.model.$formGroup.addControl('last_name', this.model.modelItems.last_name.formControl);
                    this.model.$formGroup.addControl('position', this.model.modelItems.position.formControl);
                    this.model.$formGroup.addControl('email', this.model.modelItems.email.formControl);
                    this.model.$formGroup.addControl('phone_w', this.model.modelItems.phone_w.formControl);
                    this.model.$formGroup.addControl('mobile', this.model.modelItems.mobile.formControl);
                    this.model.$formGroup.addControl('resigned', this.model.modelItems.resigned.formControl);
                    this.model.$formGroup.addControl('notes', this.model.modelItems.notes.formControl);
                    this.model.$formGroup.addControl('updated', this.model.modelItems.updated.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy)).subscribe(change => { this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'modelChange'); });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({ thisArg: this, containerPortId: this.containerActionReference(), actionId: "dibexClientContactFilterGrid", actionType: "rowClick", responseType: 'actions', submitUrl: null, itemAlias: "", waitForCompletion: false, containerName: "dibexClientContactFilterGrid", handlers: [() => new Promise((resolve, reject) => { this.containerService.bufferContainerReloading.next({ port: '4711', containerName: 'dibexContainerFilterForm' }); return resolve(); }),] }, this.clientData, { containerEventId: 'ce12-dib' });
                    let lists = {};
                    let self = this;
                    const itemsUpdateSource4724 = this.lists.list4724.itemsUpdate$.pipe(operators_1.map(([url]) => url));
                    let previousTimeChange4724 = new Date().getTime();
                    let previousUrlChange4724;
                    let previousResponse4724;
                    this.lists.list4724.items = rxjs_1.combineLatest([this.lists.list4724.updatedList$, itemsUpdateSource4724]).pipe(operators_1.tap(() => { this.lists.list4724.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.debounceTime(500), operators_1.switchMap(([updatedList, url]) => {
                        const change = (previousTimeChange4724 - new Date().getTime()) / 1000;
                        previousTimeChange4724 = new Date().getTime();
                        previousUrlChange4724 = url;
                        if (updatedList.length > 0) {
                            return rxjs_1.of(updatedList);
                        }
                        return this.httpClient.post(`${url}`, { clientData: this.clientData }).pipe(operators_1.catchError((err) => rxjs_1.of({ success: false, message: `${err}` })), operators_1.map((response) => {
                            previousResponse4724 = response;
                            this.lists.list4724.busy = false;
                            if (response.success === false) {
                                return [{ "id": "-1", "id_display_value": this.translate("global.dropdown.networkIssue", "Could not load data, retry later"), "text": this.translate("global.menu.networkIssue", "Could not find menu items, reload page. Or contact System Administrator") }];
                            }
                            if (Array.isArray(response.records) && response.records.length != 0) {
                                return response.records;
                            }
                            else {
                                return [{ "id": "-1", "id_display_value": this.translate("global.noRecordsFound", "No records found"), "text": this.translate("global.noMenuItemsAdded", "No menu items added") }];
                            }
                        }));
                    }));
                    this.lists.list4724.items.subscribe(records => this.lists.list4724.lastItems = records);
                    this.lists.list4724.multiSelected = [];
                    this.lists.list4724.reset = function (isOpen) { if (isOpen) {
                        self.lists.list4724.updatedList$.next([]);
                        self.lists.list4724.searchForm.setValue('', { emitEvent: false });
                        self.lists.list4724.refresh();
                    }
                    else {
                        self.lists.list4724.searchForm.setValue('');
                        self.lists.list4724.updatedList$.next(self.lists.list4724.multiSelected);
                        self.model.modelItems.client_id.formControl.setValue(self.lists.list4724.multiSelected);
                    } };
                    this.lists.list4724.onSelectionChange = function (change) {
                        if (!change.isUserInput) {
                            return;
                        }
                        let newMultiSelected = lists.list4724.multiSelected;
                        const value = change.source.value;
                        let idx = lists.list4724.multiSelected.map(a => a.id).indexOf(change.source.value.id);
                        if (idx > -1) {
                            if (!change.source.selected) {
                                lists.list4724.multiSelected.splice(idx, 1);
                            }
                        }
                        else {
                            if (change.source.selected) {
                                lists.list4724.multiSelected.push(value);
                            }
                        }
                        lists.list4724.multiSelected = self.removeDuplicateIdsFromArray(lists.list4724.multiSelected);
                    };
                    lists = this.lists;
                    this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'onInit');
                    this.tableDataSource.data = [];
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array([]) });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['id', 'client_id', 'first_name', 'last_name', 'position', 'email', 'phone_w', 'mobile', 'resigned', 'notes', 'updated']));
                }
                ngAfterViewInit() { super.ngAfterViewInit(); this.lists.list4724.setupModel(this.model.modelItems.client_id.formControl); window.dispatchEvent(new Event('resize')); this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'afterViewInit'); this.setupService(); this.setupDelete(); this.reloadContainer(); this.clientData.selected_self = null; this.updateSearchFromUrl(); }
                toggleExcelEditing() {
                    this.excelEditing = !this.excelEditing;
                    this.editorOpen = true;
                    if (this.excelEditing) {
                        this.editorOpen = false;
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                                control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => {
                                    if (!!control.controls.client_id.value.id == false) {
                                        return;
                                    }
                                    if (control.pristine == false) {
                                        this.submit$.next(control);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.gridForm.controls.gridRows.controls.forEach((control) => { control.get('__edit').setValue(false); });
                    }
                }
                editRow(row) { if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                    this.submit$.next(row);
                    this.editorOpen = false;
                }
                else {
                    this.gridForm.controls.gridRows.controls.forEach((control) => { if (control.get('__edit').value == true) {
                        this.submit$.next(control);
                    } });
                    this.editorOpen = true;
                    row.get('__edit').setValue(!row.get('__edit').value);
                } }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    this.messagingService.confirm({ title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'), message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`), okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'), cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank') }).then((result) => { this.addDataToGrid(true, result); });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => { self.editFormGroup = formGroup; this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'beforeSubmit'); this.busy = true; return formGroup; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach((key) => { primaryKeys[key] = self.editFormGroup.get(key).value; }); return this.crudService.update(this.model.crudUrl, this.view.container.name, { primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, model: this.model, formGroup: self.editFormGroup, }); }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => { if (!!self.editFormGroup.controls[key] == true) {
                                    self.editFormGroup.controls[key].setValue(response.records[key]);
                                } });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') {
                                this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'create');
                            }
                            else {
                                this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'update');
                            }
                            this.model.$formGroup.markAsPristine();
                            this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'onSubmit');
                        }
                        else {
                            this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'onSubmitFailed');
                            if (this.view.recordStatus == 'create') {
                                this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'createFailed');
                            }
                            else {
                                this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'updateFailed');
                            }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => { if (!!this.model.modelItems[key].itemAlias == true) {
                            lastClickValue[key] = lastClickedRawValue[key];
                        } });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_dibexClientContactFilterGrid`, value: this.clientData.clickedLast_self });
                    this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'rowClick');
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'rowsDeselected');
                    this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'rowsSelected');
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        this.eventService.emit({ name: `selected_dibexClientContactFilterGrid`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => { if (!!s.getRawValue()[key]) {
                            res[key] = s.getRawValue()[key];
                        } });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_dibexClientContactFilterGrid`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({ title: 'No records selected', message: 'Please select a record and try again.', okText: 'Okay' });
                        return;
                    }
                    this.messagingService.confirm({ title: 'Delete Selected Record', message: 'Are you sure you want to delete?', okText: 'Yes', cancelText: 'Cancel' }).then(result => { if (result !== false) {
                        this.delete$.next(null);
                    } });
                }
                setupDelete() { this.delete$ = new rxjs_1.Subject(); this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => { this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'beforeDelete'); this.busy = true; }), operators_1.switchMap(() => { let primaryKeys = {}; this.view.primaryKeys.forEach(key => { if (this.clientData.selected_self[key] !== undefined) {
                    primaryKeys[key] = this.clientData.selected_self[key];
                } }); return this.crudService.delete(this.model.crudUrl, this.view.container.name, { primaryKeys: primaryKeys, clientData: this.clientData, activeFilter: this.view.container.activeFilter, }).pipe(operators_1.finalize(() => this.busy = false)); }), operators_1.tap(response => { if (response.success) {
                    this.clearSelection();
                    this.clearClientDataSelection();
                    this.reloadContainer();
                    this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'delete');
                } })).subscribe(); }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => { this.page$.next(this.page); })).subscribe();
                    this.page$.pipe(operators_1.tap(page => { this.page = page; this.busy = true; }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => { this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'beforeLoad'); this.clearClientDataSelection(); if (this.showSearch) {
                        this.clientData.gridFilter_self = this.allClientData.gridFilter;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                    }
                    else {
                        delete this.clientData.gridFilter_self;
                        this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                    } }), operators_1.switchMap((page) => { const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }]; return this.crudService.list(this.model.crudUrl, this.view.container.name, { page: { number: page.pageIndex + 1, limit: page.pageSize }, searchText: null, sort: sort, filter: this.filter, clientData: this.clientData, activeFilter: this.view.container.activeFilter }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); })); }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'load');
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 4723 };
                    formDefaultsConfigs['client_id'] = { contentType: "integer", type: "dropdown", defaultValue: "@{parent_value_id}", listId: 4724 };
                    formDefaultsConfigs['first_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4725 };
                    formDefaultsConfigs['last_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 4726 };
                    formDefaultsConfigs['position'] = { contentType: "text", type: "none", defaultValue: "", listId: 4727 };
                    formDefaultsConfigs['email'] = { contentType: "text", type: "none", defaultValue: "", listId: 4728 };
                    formDefaultsConfigs['phone_w'] = { contentType: "text", type: "none", defaultValue: "", listId: 4729 };
                    formDefaultsConfigs['mobile'] = { contentType: "text", type: "none", defaultValue: "", listId: 4730 };
                    formDefaultsConfigs['resigned'] = { contentType: "date", type: "none", defaultValue: "", listId: 4731 };
                    formDefaultsConfigs['notes'] = { contentType: "text", type: "none", defaultValue: "", listId: 4732 };
                    formDefaultsConfigs['updated'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 4733 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, { primaryKeys: null, clientData: this.clientData, activeFilter: this.view.container.activeFilter, canCreate: this.canCreate }).pipe(operators_1.catchError((err) => { this.busy = false; return rxjs_1.of({ success: false, message: `${err}` }); }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => { if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                    formDefaultsConfigs[key].defaultValue = result.records[key];
                                } });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => { const value = await this.findDefaultValue(formDefaultsConfigs[key]); formDefaults[key] = value; }));
                            }
                            catch (error) { }
                        }
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({ gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({ __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false), id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 4723, "number"), { validators: [forms_2.Validators.required], updateOn: 'blur' }), client_id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "client_id", "dropdown", false, formDefaults['client_id'], 4724, "select"), { validators: [forms_2.Validators.required], updateOn: 'change' }), first_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "first_name", "none", false, formDefaults['first_name'], 4725, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(35)], updateOn: 'blur' }), last_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "last_name", "none", false, formDefaults['last_name'], 4726, "text"), { validators: [forms_2.Validators.required,
                                        forms_2.Validators.maxLength(35)], updateOn: 'blur' }), position: new forms_2.FormControl(this.calculateInitialColumnValue(row, "position", "none", false, formDefaults['position'], 4727, "text"), { validators: [forms_2.Validators.maxLength(50)], updateOn: 'blur' }), email: new forms_2.FormControl(this.calculateInitialColumnValue(row, "email", "none", false, formDefaults['email'], 4728, "text"), { validators: [forms_2.Validators.maxLength(150)], updateOn: 'blur' }), phone_w: new forms_2.FormControl(this.calculateInitialColumnValue(row, "phone_w", "none", false, formDefaults['phone_w'], 4729, "text"), { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), mobile: new forms_2.FormControl(this.calculateInitialColumnValue(row, "mobile", "none", false, formDefaults['mobile'], 4730, "text"), { validators: [forms_2.Validators.maxLength(35)], updateOn: 'blur' }), resigned: new forms_2.FormControl(this.calculateInitialColumnValue(row, "resigned", "none", false, formDefaults['resigned'], 4731, "date"), { validators: [], updateOn: 'blur' }), notes: new forms_2.FormControl(this.calculateInitialColumnValue(row, "notes", "none", false, formDefaults['notes'], 4732, "text"), { validators: [forms_2.Validators.maxLength(250)], updateOn: 'blur' }), updated: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updated", "none", false, formDefaults['updated'], 4733, "datetime"), { validators: [], updateOn: 'blur' }), });
                            return rowFormGroup;
                        })) });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => { this.lists.list4724.setupModel(formGroup.controls.client_id); });
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => { const selected = this.selection.selected; this.selection._emitChanges = false; this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d)))); this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d)))); this.selection._emitChanges = true; if (this.gridExcelEditingEnabled == true) {
                        this.toggleExcelEditing();
                    } })).subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'onDestroy');
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list4724.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() { }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    this.actionService.handle(this.containerActionReference(), 'dibexClientContactFilterGrid', 'reloadContainer');
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({ name: 'onReloaddibexClientContactFilterGrid', value: this });
                    this.eventService.emit({ name: 'OnReloadContainer', value: 'dibexClientContactFilterGrid' });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = { number: 1, length: 0, pageSize: 20, pageIndex: 0, lastLoad: 1, totalRecords: 0, allRecords: false };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function dibexClientContactFilterGridComponent_Factory(t) { return new (t || dibexClientContactFilterGridComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: dibexClientContactFilterGridComponent, selectors: [["dibex-client-contact-filter-grid"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 75, vars: 38, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci4712", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 0px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci4713", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci4714", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["id", "ci4720", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci4718", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4716", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci4717", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci4715", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci4719", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci4721", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "id"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "client_id"], ["matColumnDef", "first_name"], ["matColumnDef", "last_name"], ["matColumnDef", "position"], ["matColumnDef", "email"], ["matColumnDef", "phone_w"], ["matColumnDef", "mobile"], ["matColumnDef", "resigned"], ["matColumnDef", "notes"], ["matColumnDef", "updated"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerdibexClientContactFilterGrid", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci4716", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci4717", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci4719", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci4723", "dibComponent", "inputText", "item-alias", "id"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["required", "true", "type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["auto4724trigger", "matAutocompleteTrigger", "input4724", ""], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["dibAutocompleteScrollToOnFocus", "", "autoActiveFirstOption", "", 3, "displayWith", "opened"], ["auto4724", "matAutocomplete"], ["mode", "indeterminate", 4, "ngIf"], [3, "ngClass", "value", "innerHtml", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], ["mode", "indeterminate"], [3, "ngClass", "value", "innerHtml"], ["id", "ci4724", "dibComponent", "autocomplete", 2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["type", "text", "matInput", "", "formControlName", "client_id", 3, "matAutocomplete"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "maxlength", "35", "required", "true", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4725", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "first_name", "name", "first_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "last_name", "maxlength", "35", "required", "true", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci4726", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "last_name", "name", "last_name", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "position", "maxlength", "50", "name", "position", 3, "keydown.enter", "keydown.esc"], ["id", "ci4727", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "position", "name", "position", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "email", "maxlength", "150", "name", "email", 3, "keydown.enter", "keydown.esc"], ["id", "ci4728", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "email", "name", "email", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "phone_w", "maxlength", "35", "name", "phone_w", 3, "keydown.enter", "keydown.esc"], ["id", "ci4729", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "phone_w", "name", "phone_w", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "mobile", "maxlength", "35", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["id", "ci4730", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "mobile", "name", "mobile", 3, "keydown.enter", "keydown.esc"], ["datepicker", "", "dibComponent", "datePicker"], ["matInput", "", "formControlName", "resigned", "name", "resigned", 3, "matDatepicker", "focus", "keydown.enter", "keydown.esc"], ["matPrefix", "", 3, "for"], ["datePicker4731", ""], ["id", "ci4731", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "resigned", "name", "resigned", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "text", "formControlName", "notes", "maxlength", "250", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["id", "ci4732", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "notes", "name", "notes", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matInput", "", "formControlName", "updated", "name", "updated", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker4733", ""], ["id", "ci4733", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updated", "name", "updated", 3, "keydown.enter", "keydown.esc"], ["mat-header-cell", "", 2, "height", "4px"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function dibexClientContactFilterGridComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function dibexClientContactFilterGridComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_Template_button_click_4_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_Template_button_click_6_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(8, "span", 8);
                        i0.ɵɵpipe(9, "safeHtml");
                        i0.ɵɵelementStart(10, "button", 9);
                        i0.ɵɵlistener("click", function dibexClientContactFilterGridComponent_Template_button_click_10_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(11, "dib-icon", 10);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(12, dibexClientContactFilterGridComponent_button_12_Template, 2, 4, "button", 11);
                        i0.ɵɵtemplate(13, dibexClientContactFilterGridComponent_button_13_Template, 2, 4, "button", 12);
                        i0.ɵɵelement(14, "span", 13);
                        i0.ɵɵtemplate(15, dibexClientContactFilterGridComponent_div_15_Template, 5, 3, "div", 14);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(16, "mat-card", 15)(17, "mat-card-content", 16);
                        i0.ɵɵelementContainerStart(18, 3);
                        i0.ɵɵelementStart(19, "div", 17, 18)(21, "form", 19);
                        i0.ɵɵelementContainerStart(22, 20);
                        i0.ɵɵelementStart(23, "table", 21);
                        i0.ɵɵelementContainerStart(24, 22);
                        i0.ɵɵtemplate(25, dibexClientContactFilterGridComponent_th_25_Template, 2, 2, "th", 23);
                        i0.ɵɵtemplate(26, dibexClientContactFilterGridComponent_td_26_Template, 2, 1, "td", 24);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(27, 25);
                        i0.ɵɵtemplate(28, dibexClientContactFilterGridComponent_td_28_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(29, dibexClientContactFilterGridComponent_th_29_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(30, 28);
                        i0.ɵɵtemplate(31, dibexClientContactFilterGridComponent_td_31_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(32, dibexClientContactFilterGridComponent_th_32_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(33, 29);
                        i0.ɵɵtemplate(34, dibexClientContactFilterGridComponent_td_34_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(35, dibexClientContactFilterGridComponent_th_35_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(36, 30);
                        i0.ɵɵtemplate(37, dibexClientContactFilterGridComponent_td_37_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(38, dibexClientContactFilterGridComponent_th_38_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(39, 31);
                        i0.ɵɵtemplate(40, dibexClientContactFilterGridComponent_td_40_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(41, dibexClientContactFilterGridComponent_th_41_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(42, 32);
                        i0.ɵɵtemplate(43, dibexClientContactFilterGridComponent_td_43_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(44, dibexClientContactFilterGridComponent_th_44_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(45, 33);
                        i0.ɵɵtemplate(46, dibexClientContactFilterGridComponent_td_46_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(47, dibexClientContactFilterGridComponent_th_47_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(48, 34);
                        i0.ɵɵtemplate(49, dibexClientContactFilterGridComponent_td_49_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(50, dibexClientContactFilterGridComponent_th_50_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(51, 35);
                        i0.ɵɵtemplate(52, dibexClientContactFilterGridComponent_td_52_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(53, dibexClientContactFilterGridComponent_th_53_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(54, 36);
                        i0.ɵɵtemplate(55, dibexClientContactFilterGridComponent_td_55_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(56, dibexClientContactFilterGridComponent_th_56_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(57, 37);
                        i0.ɵɵtemplate(58, dibexClientContactFilterGridComponent_td_58_Template, 2, 2, "td", 26);
                        i0.ɵɵtemplate(59, dibexClientContactFilterGridComponent_th_59_Template, 5, 3, "th", 27);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(60, 38);
                        i0.ɵɵtemplate(61, dibexClientContactFilterGridComponent_th_61_Template, 2, 2, "th", 39);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(62, 40);
                        i0.ɵɵtemplate(63, dibexClientContactFilterGridComponent_th_63_Template, 2, 2, "th", 41);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(64, dibexClientContactFilterGridComponent_ng_container_64_Template, 3, 3, "ng-container", 42);
                        i0.ɵɵtemplate(65, dibexClientContactFilterGridComponent_tr_65_Template, 1, 3, "tr", 43);
                        i0.ɵɵtemplate(66, dibexClientContactFilterGridComponent_tr_66_Template, 1, 3, "tr", 43);
                        i0.ɵɵtemplate(67, dibexClientContactFilterGridComponent_tr_67_Template, 1, 4, "tr", 44);
                        i0.ɵɵpipe(68, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(69, dibexClientContactFilterGridComponent_69_Template, 1, 1, null, 45);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(70, "div", null, 46);
                        i0.ɵɵtemplate(72, dibexClientContactFilterGridComponent_mat_toolbar_72_Template, 6, 3, "mat-toolbar", 45);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(73, dibexClientContactFilterGridComponent_ng_template_73_Template, 43, 4, "ng-template", null, 47, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r35 = i0.ɵɵreference(71);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(34, _c4, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4712");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(9, 30, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "4721");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r35);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(41);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(36, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(37, _c6));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(68, 32, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibAutocompleteScrollToOnFocusDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatAutocomplete, i8.MatOption, i7.MatAutocompleteTrigger, i9.MatButton, i9.MatIconButton, i9.MatMiniFabButton, i10.MatCheckbox, i11.MatDatepicker, i11.MatDatepickerInput, i11.MatDatepickerToggle, i12.MatFormField, i12.MatLabel, i12.MatError, i12.MatPrefix, i12.MatSuffix, i13.MatIcon, i14.MatInput, i15.MatProgressBar, i16.MatToolbar, i16.MatToolbarRow, i17.MatTooltip, i18.MatCard, i18.MatCardContent, i19.MatTable, i19.MatHeaderCellDef, i19.MatHeaderRowDef, i19.MatColumnDef, i19.MatCellDef, i19.MatRowDef, i19.MatHeaderCell, i19.MatCell, i19.MatHeaderRow, i19.MatRow, i20.MatSort, i20.MatSortHeader, i21.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloaddibexClientContactFilterGrid'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], dibexClientContactFilterGridComponent.prototype, "reloadContainer", null);
            exports_1("dibexClientContactFilterGridComponent", dibexClientContactFilterGridComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexClientContactFilterGridComponent, [{
                    type: core_2.Component,
                    args: [{ selector: 'dibex-client-contact-filter-grid', template: `
<form style="display:flex; flex-direction:column; align-items:stretch"  [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }"  ><div style="display:flex; flex-direction:column; align-items:stretch"><div   style="  padding:5px 10px 0px !important;  display:flex; flex-direction: row;  justify-content: flex-start;  align-items: center;  gap: 10px;  flex-wrap: nowrap;  flex: 1 1 0%;  " id=ci4712 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'4712'" ><button mat-mini-fab color=accent  id=ci4713 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"  [matTooltip]="'Delete selected record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button   mat-mini-fab color=accent  id=ci4714 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"  [matTooltip]="'Reload Record(s)'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><span  id=ci4720 dibComponent=span   style="  width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml" ></span><button mat-mini-fab color=primary  id=ci4718 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"  [matTooltip]="'Display headers for filtering records'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4716 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"  [matTooltip]="'Apply filter criteria specified in column headers'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci4717 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"  [matTooltip]="'Show all records and clear filter criteria'"  [matTooltipShowDelay]="'300'"  [matTooltipHideDelay]="'300'"  [matTooltipPosition]="'below'"  matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button  ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci4715 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci4719 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1" > Client Contacts: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci4721 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'4721'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerdibexClientContactFilterGrid" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (click)="$event.preventDefault();masterToggle()"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4723 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><input #auto4724trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input4724  [matAutocomplete]="auto4724"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list4724, auto4724trigger); input4724.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4724=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4724).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4724).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4724.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4724 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Client</mat-label><input #auto4724trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input4724  [matAutocomplete]="auto4724"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list4724, auto4724trigger); input4724.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4724=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4724).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4724).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4724.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='35'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4725 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='35'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4726 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=position   maxlength='50'  name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('position','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4727 dibComponent=inputText   style="  " ><mat-label >Position</mat-label><input   matInput  type=text   formControlName=position   name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='150'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 150 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4728 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone_w  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone_w','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone_w   maxlength='35'  name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone_w','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone W  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone W</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4729 dibComponent=inputText   style="  " ><mat-label >Phone W</mat-label><input   matInput  type=text   formControlName=phone_w   name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='35'  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4730 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=resigned  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'resigned','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4731"   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (focus)="datePicker4731.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4731" ></mat-datepicker-toggle><mat-datepicker #datePicker4731 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Resigned  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Resigned</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4731 dibComponent=inputText   style="  " ><mat-label >Resigned</mat-label><input   matInput  type=text   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=notes   maxlength='250'  name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('notes','maxlength',rowForm)">Please enter 250 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4732 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4733"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4733"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4733></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4733 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerdibexClientContactFilterGrid><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox  class = "mat-body"  matTooltip = "Clear all"  position = "above"  *ngIf=numberOfSelectedItems    color=primary   (click)="$event.preventDefault();clearAll()"  [checked]="true"  > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected  </mat-checkbox><button  *ngIf="selectedDataNotInPage().length>0"  mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"  ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"  [pageSize]="page.pageSize"  [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  ><input   matInput  type=number   formControlName=id   required=true  name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4723 dibComponent=inputText   style="  "  item-alias=id  ><mat-label >Id</mat-label><input   matInput  type=text   formControlName=id   name=id   [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=client_id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'client_id','dropdown','select')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><input #auto4724trigger=matAutocompleteTrigger   required=true  type=text  matInput formControlName=client_id   #input4724  [matAutocomplete]="auto4724"  ><button mat-icon-button   *ngIf="showDropdownClearButton(rowForm.get('client_id'))"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(rowForm.get('client_id'),$event, lists.list4724, auto4724trigger); input4724.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4724=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4724).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4724).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4724.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Client  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Client</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci4724 dibComponent=autocomplete   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;  "  ><mat-label>Client</mat-label><input #auto4724trigger=matAutocompleteTrigger   type=text  matInput formControlName=client_id   #input4724  [matAutocomplete]="auto4724"  ><button mat-icon-button   *ngIf="showDropdownClearButton(model.modelItems.client_id.formControl)"  matSuffix mat-icon-button aria-label=Clear   (click)="clearDropdown(model.modelItems.client_id.formControl, $event, lists.list4724, auto4724trigger); input4724.focus()"><mat-icon>close</mat-icon></button><mat-autocomplete dibAutocompleteScrollToOnFocus autoActiveFirstOption #auto4724=matAutocomplete   [displayWith]="dropdownValueTranslate.bind(this,'client_id')"  (opened)="$any(lists.list4724).refresh()"  ><mat-progress-bar *ngIf="$any(lists.list4724).busy" mode=indeterminate ></mat-progress-bar><mat-option *ngFor="let item of lists.list4724.lastItems" [ngClass] = "{'extra-node': item.id == '0'}" [value]="item"   [innerHtml]="item.id_display_value"  ></mat-option></mat-autocomplete></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=first_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'first_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=first_name   maxlength='35'  required=true  name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('first_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('first_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> First Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >First Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4725 dibComponent=inputText   style="  " ><mat-label >First Name</mat-label><input   matInput  type=text   formControlName=first_name   name=first_name   [attr.aria-label]="'First Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('first_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('first_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=last_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'last_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=last_name   maxlength='35'  required=true  name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('last_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('last_name','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Last Name  &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Last Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4726 dibComponent=inputText   style="  " ><mat-label >Last Name</mat-label><input   matInput  type=text   formControlName=last_name   name=last_name   [attr.aria-label]="'Last Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('last_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('last_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=position  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'position','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=position   maxlength='50'  name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('position','maxlength',rowForm)">Please enter 50 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Position  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Position</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4727 dibComponent=inputText   style="  " ><mat-label >Position</mat-label><input   matInput  type=text   formControlName=position   name=position   [attr.aria-label]="'Position'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('position', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('position', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=email  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'email','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=email   maxlength='150'  name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('email','maxlength',rowForm)">Please enter 150 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Email  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Email</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4728 dibComponent=inputText   style="  " ><mat-label >Email</mat-label><input   matInput  type=text   formControlName=email   name=email   [attr.aria-label]="'Email'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('email', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('email', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=phone_w  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'phone_w','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=phone_w   maxlength='35'  name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('phone_w','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Phone W  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Phone W</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4729 dibComponent=inputText   style="  " ><mat-label >Phone W</mat-label><input   matInput  type=text   formControlName=phone_w   name=phone_w   [attr.aria-label]="'Phone W'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('phone_w', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('phone_w', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=mobile  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'mobile','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=mobile   maxlength='35'  name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('mobile','maxlength',rowForm)">Please enter 35 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Mobile  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Mobile</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4730 dibComponent=inputText   style="  " ><mat-label >Mobile</mat-label><input   matInput  type=text   formControlName=mobile   name=mobile   [attr.aria-label]="'Mobile'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('mobile', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('mobile', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=resigned  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'resigned','none','date')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field datepicker dibComponent=datePicker   style="  " ><input   matInput [matDatepicker]="datePicker4731"   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (focus)="datePicker4731.open()"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-datepicker-toggle matPrefix [for]="datePicker4731" ></mat-datepicker-toggle><mat-datepicker #datePicker4731 ></mat-datepicker><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', rowForm)" matSuffix >done_all</mat-icon></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Resigned  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Resigned</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4731 dibComponent=inputText   style="  " ><mat-label >Resigned</mat-label><input   matInput  type=text   formControlName=resigned   name=resigned   [attr.aria-label]="'Resigned'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('resigned', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('resigned', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=notes  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'notes','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input   matInput  type=text   formControlName=notes   maxlength='250'  name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('notes','maxlength',rowForm)">Please enter 250 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Notes  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Notes</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4732 dibComponent=inputText   style="  " ><mat-label >Notes</mat-label><input   matInput  type=text   formControlName=notes   name=notes   [attr.aria-label]="'Notes'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('notes', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('notes', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updated  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"  style="padding: 2px; " ><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell    style="   "  ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false">   {{findColumnDisplayValue(rowIndex, 'updated','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker4733"></mat-datepicker-toggle><input   matInput   [ngxMatDatetimePicker]="picker4733"   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker4733></ngx-mat-datetime-picker></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; " ><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Updated  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Updated</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci4733 dibComponent=inputText   style="  " ><mat-label >Updated</mat-label><input   matInput  type=text   formControlName=updated   name=updated   [attr.aria-label]="'Updated'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updated', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updated', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary   (change)="$event ? masterToggle($event) : null"  [checked]="masterIsChecked"  [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox  color=primary   (click)="$event.stopPropagation()"  (change)="$event ? selection.toggle(row) : null"  [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
` }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule];
            dibexClientContactFilterGridModule = class dibexClientContactFilterGridModule {
                static entry = dibexClientContactFilterGridComponent;
                static ɵfac = function dibexClientContactFilterGridModule_Factory(t) { return new (t || dibexClientContactFilterGridModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: dibexClientContactFilterGridModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", dibexClientContactFilterGridModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(dibexClientContactFilterGridModule, [{
                    type: core_4.NgModule,
                    args: [{ imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule], providers: [{ provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] }, { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }], declarations: [dibexClientContactFilterGridComponent], exports: [] }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(dibexClientContactFilterGridModule, { declarations: [dibexClientContactFilterGridComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, autocomplete_1.MatAutocompleteModule, datepicker_1.MatDatepickerModule, core_5.MatNativeDateModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
