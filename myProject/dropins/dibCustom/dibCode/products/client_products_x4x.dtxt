System.register(["tslib", "@angular/core", "@angular/material/table", "shared", "@angular/forms", "@angular/common/http", "@angular/material/core", "rxjs", "rxjs/operators", "@angular/material/sort", "@angular/material/paginator", "@angular/common", "@angular/material/button", "@angular/material/icon", "@angular/material/card", "@angular/material/select", "@ngbracket/ngx-layout/extended", "@angular-material-components/datetime-picker", "@angular/material/checkbox", "@angular/material/datepicker", "@angular/material/form-field", "@angular/material/input", "@angular/material/progress-bar", "@angular/material/toolbar", "@angular/material/tooltip"], function (exports_1, context_1) {
    "use strict";
    var tslib_1, core_1, table_1, shared_1, forms_1, core_2, shared_2, shared_3, http_1, forms_2, core_3, shared_4, rxjs_1, operators_1, table_2, sort_1, paginator_1, core_4, common_1, shared_5, shared_6, button_1, icon_1, card_1, select_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, _c0, _c1, _c2, _c3, _c4, _c5, importsRequired, productsComponent, containerModules, productsModule;
    var __moduleName = context_1 && context_1.id;
    function productsComponent_button_16_Template(rf, ctx) { if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 56);
        i0.ɵɵlistener("click", function productsComponent_button_16_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.searchGrid()); });
        i0.ɵɵelement(1, "dib-icon", 57);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Apply filter criteria specified in column headers")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function productsComponent_button_17_Template(rf, ctx) { if (rf & 1) {
        const _r46 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 58);
        i0.ɵɵlistener("click", function productsComponent_button_17_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r45.clearSearch()); });
        i0.ɵɵelement(1, "dib-icon", 59);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("matTooltip", "Show all records and clear filter criteria")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function productsComponent_div_19_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r47 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2("\u00A0to\u00A0", ctx_r47.page.toRecord, "\u00A0of\u00A0", ctx_r47.page.records, "");
    } }
    function productsComponent_div_19_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r48 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("(Total: ", ctx_r48.page.totalRecords, ")");
    } }
    function productsComponent_div_19_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 60);
        i0.ɵɵtext(1);
        i0.ɵɵtemplate(2, productsComponent_div_19_span_2_Template, 2, 2, "span", 53);
        i0.ɵɵtext(3, "\u00A0");
        i0.ɵɵtemplate(4, productsComponent_div_19_span_4_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" Products: ", ctx_r2.page.fromRecord, "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.page.fromRecord > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.page.totalRecords != ctx_r2.page.records);
    } }
    function productsComponent_th_29_Template(rf, ctx) { if (rf & 1) {
        const _r50 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 61)(1, "mat-checkbox", 62);
        i0.ɵɵlistener("click", function productsComponent_th_29_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(); $event.preventDefault(); return i0.ɵɵresetView(ctx_r49.masterToggle()); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r4.masterIsChecked)("indeterminate", ctx_r4.masterIsIndeterminate);
    } }
    function productsComponent_td_30_Template(rf, ctx) { if (rf & 1) {
        const _r54 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 63)(1, "mat-checkbox", 64);
        i0.ɵɵlistener("click", function productsComponent_td_30_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function productsComponent_td_30_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r54); const row_r51 = restoredCtx.$implicit; const ctx_r53 = i0.ɵɵnextContext(); return i0.ɵɵresetView($event ? ctx_r53.selection.toggle(row_r51) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r51 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r5.isHighlighted(row_r51));
    } }
    function productsComponent_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r60 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 66);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 67);
        i0.ɵɵlistener("click", function productsComponent_td_32_ng_container_1_Template_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r60); const row_r58 = restoredCtx.ngIf; const ctx_r59 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r59.navigationService.goTo("product", "main", "?primary_id=" + row_r58.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r59 })); });
        i0.ɵɵelement(4, "dib-icon", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "button", 69);
        i0.ɵɵelement(6, "dib-icon", 70);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r58 = ctx.ngIf;
        const ctx_r57 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "8429");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("actionData", row_r58)("containerPortId", ctx_r57.containerActionReference());
    } }
    function productsComponent_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_32_ng_container_1_Template, 7, 7, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r55 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r55);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r55.getRawValue());
    } }
    function productsComponent_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 71);
    } }
    function productsComponent_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r66 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 72);
        i0.ɵɵlistener("click", function productsComponent_td_35_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r66); const row_r64 = restoredCtx.ngIf; const ctx_r65 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r65.navigationService.goTo("product", "", "?primary_id=" + row_r64.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r65 })); });
        i0.ɵɵelement(2, "dib-icon", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function productsComponent_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_35_ng_container_1_Template, 3, 4, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r61 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r61);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r61.getRawValue());
    } }
    function productsComponent_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 71);
    } }
    function productsComponent_td_38_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r68 = i0.ɵɵnextContext(2).index;
        const ctx_r71 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r71.findColumnDisplayValue(rowIndex_r68, "id", "none", "number"), "");
    } }
    function productsComponent_td_38_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_38_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r80 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_td_38_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r80); const ctx_r79 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r79.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_38_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_38_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 84);
        i0.ɵɵtext(1, "priority_high");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_38_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 77);
        i0.ɵɵelement(2, "input", 78);
        i0.ɵɵtemplate(3, productsComponent_td_38_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_td_38_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_td_38_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵtemplate(6, productsComponent_td_38_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 81);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r67 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r72 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("hidden", true);
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.hasError("id", "required", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.view.recordStatus == "update" && ctx_r72.notSaved("id", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.view.recordStatus == "update" && ctx_r72.isSaved("id", rowForm_r67));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r72.isInvalid("id", rowForm_r67));
    } }
    function productsComponent_td_38_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_38_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_38_ng_container_1_span_4_Template, 7, 6, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_38_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r67 = i0.ɵɵnextContext().$implicit;
        const ctx_r69 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == false && rowForm_r67.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == true || rowForm_r67.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r69.excelEditing == false && rowForm_r67.get("__edit").value === false);
    } }
    function productsComponent_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_38_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r67 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r67);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r67.getRawValue());
    } }
    function productsComponent_th_39_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_39_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, productsComponent_th_39_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r83 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r83.editorOpen);
    } }
    function productsComponent_th_39_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_39_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r90 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_th_39_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r90); const ctx_r89 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r89.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_39_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_39_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r92 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 94)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 95);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_39_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r92); const ctx_r91 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r91.searchGrid(false)); })("keydown.esc", function productsComponent_th_39_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r92); const ctx_r93 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r93.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_th_39_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_th_39_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r85 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r85.model.$formGroup);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("hidden", true);
        i0.ɵɵadvance(3);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.notSaved("id", ctx_r85.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r85.view.recordStatus == "update" && ctx_r85.isSaved("id", ctx_r85.model.$formGroup));
    } }
    function productsComponent_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_39_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_39_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_39_div_4_Template, 7, 5, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r11.showSearch);
    } }
    function productsComponent_td_41_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r95 = i0.ɵɵnextContext(2).index;
        const ctx_r98 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r98.findColumnDisplayValue(rowIndex_r95, "product_name", "none", "text"), "");
    } }
    function productsComponent_td_41_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_41_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 255 chars or less");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_41_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r107 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_td_41_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r107); const ctx_r106 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r106.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_41_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_41_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r109 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 96)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function productsComponent_td_41_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r109); const ctx_r108 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r108.searchGrid(false)); })("keydown.esc", function productsComponent_td_41_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r109); const ctx_r110 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r110.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_td_41_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_td_41_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(5, productsComponent_td_41_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_td_41_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r94 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r99 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Product Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.hasError("product_name", "required", rowForm_r94));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.hasError("product_name", "maxlength", rowForm_r94));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.view.recordStatus == "update" && ctx_r99.notSaved("product_name", rowForm_r94));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r99.view.recordStatus == "update" && ctx_r99.isSaved("product_name", rowForm_r94));
    } }
    function productsComponent_td_41_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_41_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_41_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_41_ng_container_1_span_4_Template, 7, 5, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_41_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r94 = i0.ɵɵnextContext().$implicit;
        const ctx_r96 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r96.excelEditing == false && rowForm_r94.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r96.excelEditing == true || rowForm_r94.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r96.excelEditing == false && rowForm_r94.get("__edit").value === false);
    } }
    function productsComponent_td_41_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_41_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r94 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r94);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r94.getRawValue());
    } }
    function productsComponent_th_42_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_42_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Product Name \u00A0");
        i0.ɵɵtemplate(2, productsComponent_th_42_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r113 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r113.editorOpen);
    } }
    function productsComponent_th_42_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Product Name");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_42_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r120 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_th_42_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r120); const ctx_r119 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r119.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_42_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_42_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r122 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Product Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_42_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r122); const ctx_r121 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r121.searchGrid(false)); })("keydown.esc", function productsComponent_th_42_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r122); const ctx_r123 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r123.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_th_42_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_th_42_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r115 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r115.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Product Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r115.view.recordStatus == "update" && ctx_r115.notSaved("product_name", ctx_r115.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r115.view.recordStatus == "update" && ctx_r115.isSaved("product_name", ctx_r115.model.$formGroup));
    } }
    function productsComponent_th_42_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_42_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_42_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_42_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r13.showSearch);
    } }
    function productsComponent_td_44_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r125 = i0.ɵɵnextContext(2).index;
        const ctx_r128 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r128.findColumnDisplayValue(rowIndex_r125, "product_category", "none", "text"), "");
    } }
    function productsComponent_td_44_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 103);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r133 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r133.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r133.id_display_value, "");
    } }
    function productsComponent_td_44_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 100)(2, "mat-select", 101);
        i0.ɵɵtemplate(3, productsComponent_td_44_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 102);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r129 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r129.lists.list8460.items));
    } }
    function productsComponent_td_44_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_44_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_44_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_44_ng_container_1_span_4_Template, 5, 3, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_44_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r124 = i0.ɵɵnextContext().$implicit;
        const ctx_r126 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r126.excelEditing == false && rowForm_r124.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r126.excelEditing == true || rowForm_r124.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r126.excelEditing == false && rowForm_r124.get("__edit").value === false);
    } }
    function productsComponent_td_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_44_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r124 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r124);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r124.getRawValue());
    } }
    function productsComponent_th_45_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_45_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Product Category \u00A0");
        i0.ɵɵtemplate(2, productsComponent_th_45_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r135 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r135.editorOpen);
    } }
    function productsComponent_th_45_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Product Category");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_45_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 103);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r140 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r140.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r140.id_display_value, "");
    } }
    function productsComponent_th_45_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 104)(2, "mat-label");
        i0.ɵɵtext(3, "Product Category");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 105);
        i0.ɵɵtemplate(5, productsComponent_th_45_div_4_mat_option_5_Template, 2, 2, "mat-option", 102);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r137 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r137.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r137.lists.list8460.items));
    } }
    function productsComponent_th_45_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_45_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_45_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_45_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r15.showSearch);
    } }
    function productsComponent_td_47_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r142 = i0.ɵɵnextContext(2).index;
        const ctx_r145 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r145.findColumnDisplayValue(rowIndex_r142, "product_quantity", "none", "number"), "");
    } }
    function productsComponent_td_47_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_47_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r153 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_td_47_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r153); const ctx_r152 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r152.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_47_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_47_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r155 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 106)(2, "input", 107);
        i0.ɵɵlistener("keydown.enter", function productsComponent_td_47_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r155); const ctx_r154 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r154.searchGrid(false)); })("keydown.esc", function productsComponent_td_47_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r155); const ctx_r156 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r156.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_td_47_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_td_47_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_td_47_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r141 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r146 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Product Quantity");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.hasError("product_quantity", "required", rowForm_r141));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.view.recordStatus == "update" && ctx_r146.notSaved("product_quantity", rowForm_r141));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r146.view.recordStatus == "update" && ctx_r146.isSaved("product_quantity", rowForm_r141));
    } }
    function productsComponent_td_47_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_47_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_47_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_47_ng_container_1_span_4_Template, 6, 4, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_47_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r141 = i0.ɵɵnextContext().$implicit;
        const ctx_r143 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r143.excelEditing == false && rowForm_r141.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r143.excelEditing == true || rowForm_r141.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r143.excelEditing == false && rowForm_r141.get("__edit").value === false);
    } }
    function productsComponent_td_47_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_47_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r141 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r141);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r141.getRawValue());
    } }
    function productsComponent_th_48_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_48_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Product Quantity \u00A0");
        i0.ɵɵtemplate(2, productsComponent_th_48_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r159 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r159.editorOpen);
    } }
    function productsComponent_th_48_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Product Quantity");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_48_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r166 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_th_48_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r166); const ctx_r165 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r165.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_48_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_48_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r168 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 108)(2, "mat-label");
        i0.ɵɵtext(3, "Product Quantity");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 109);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_48_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r168); const ctx_r167 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r167.searchGrid(false)); })("keydown.esc", function productsComponent_th_48_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r168); const ctx_r169 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r169.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_th_48_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_th_48_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r161 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r161.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Product Quantity");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r161.view.recordStatus == "update" && ctx_r161.notSaved("product_quantity", ctx_r161.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r161.view.recordStatus == "update" && ctx_r161.isSaved("product_quantity", ctx_r161.model.$formGroup));
    } }
    function productsComponent_th_48_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_48_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_48_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_48_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r17.showSearch);
    } }
    function productsComponent_td_50_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r171 = i0.ɵɵnextContext(2).index;
        const ctx_r174 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r174.findColumnDisplayValue(rowIndex_r171, "createdAt", "none", "datetime"), "");
    } }
    function productsComponent_td_50_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r183 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_td_50_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r183); const ctx_r182 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r182.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_50_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_50_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_50_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r185 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 110);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 111);
        i0.ɵɵelementStart(3, "input", 112);
        i0.ɵɵlistener("keydown.enter", function productsComponent_td_50_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r185); const ctx_r184 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r184.searchGrid(false)); })("keydown.esc", function productsComponent_td_50_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r185); const ctx_r186 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r186.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, productsComponent_td_50_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_td_50_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 113);
        i0.ɵɵtemplate(8, productsComponent_td_50_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 53);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r180 = i0.ɵɵreference(7);
        const rowForm_r170 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r175 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r180);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r180);
        i0.ɵɵattribute("aria-label", "CreatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r175.view.recordStatus == "update" && ctx_r175.notSaved("createdAt", rowForm_r170));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r175.view.recordStatus == "update" && ctx_r175.isSaved("createdAt", rowForm_r170));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r175.hasError("createdAt", "required", rowForm_r170));
    } }
    function productsComponent_td_50_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_50_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_50_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_50_ng_container_1_span_4_Template, 9, 6, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_50_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r170 = i0.ɵɵnextContext().$implicit;
        const ctx_r172 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r172.excelEditing == false && rowForm_r170.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r172.excelEditing == true || rowForm_r170.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r172.excelEditing == false && rowForm_r170.get("__edit").value === false);
    } }
    function productsComponent_td_50_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_50_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r170 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r170);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r170.getRawValue());
    } }
    function productsComponent_th_51_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_51_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " CreatedAt \u00A0");
        i0.ɵɵtemplate(2, productsComponent_th_51_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r189 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r189.editorOpen);
    } }
    function productsComponent_th_51_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "CreatedAt");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_51_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r196 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_th_51_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r196); const ctx_r195 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r195.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_51_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_51_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r198 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 114)(2, "mat-label");
        i0.ɵɵtext(3, "CreatedAt");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 115);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_51_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r198); const ctx_r197 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r197.searchGrid(false)); })("keydown.esc", function productsComponent_th_51_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r198); const ctx_r199 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r199.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_th_51_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_th_51_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r191 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r191.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "CreatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r191.view.recordStatus == "update" && ctx_r191.notSaved("createdAt", ctx_r191.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r191.view.recordStatus == "update" && ctx_r191.isSaved("createdAt", ctx_r191.model.$formGroup));
    } }
    function productsComponent_th_51_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_51_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_51_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_51_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r19.showSearch);
    } }
    function productsComponent_td_53_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r201 = i0.ɵɵnextContext(2).index;
        const ctx_r204 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r204.findColumnDisplayValue(rowIndex_r201, "updatedAt", "none", "datetime"), "");
    } }
    function productsComponent_td_53_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r213 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_td_53_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r213); const ctx_r212 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r212.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_53_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_53_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_53_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r215 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 110);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 111);
        i0.ɵɵelementStart(3, "input", 116);
        i0.ɵɵlistener("keydown.enter", function productsComponent_td_53_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r215); const ctx_r214 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r214.searchGrid(false)); })("keydown.esc", function productsComponent_td_53_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r215); const ctx_r216 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r216.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, productsComponent_td_53_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_td_53_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 117);
        i0.ɵɵtemplate(8, productsComponent_td_53_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 53);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r210 = i0.ɵɵreference(7);
        const rowForm_r200 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r205 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r210);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r210);
        i0.ɵɵattribute("aria-label", "UpdatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.view.recordStatus == "update" && ctx_r205.notSaved("updatedAt", rowForm_r200));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r205.view.recordStatus == "update" && ctx_r205.isSaved("updatedAt", rowForm_r200));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r205.hasError("updatedAt", "required", rowForm_r200));
    } }
    function productsComponent_td_53_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_53_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_53_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_53_ng_container_1_span_4_Template, 9, 6, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_53_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r200 = i0.ɵɵnextContext().$implicit;
        const ctx_r202 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r202.excelEditing == false && rowForm_r200.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r202.excelEditing == true || rowForm_r200.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r202.excelEditing == false && rowForm_r200.get("__edit").value === false);
    } }
    function productsComponent_td_53_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_53_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r200 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r200);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r200.getRawValue());
    } }
    function productsComponent_th_54_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_54_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " UpdatedAt \u00A0");
        i0.ɵɵtemplate(2, productsComponent_th_54_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r219 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r219.editorOpen);
    } }
    function productsComponent_th_54_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "UpdatedAt");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_54_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r226 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_th_54_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r226); const ctx_r225 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r225.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_54_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_54_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r228 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "UpdatedAt");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_54_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r228); const ctx_r227 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r227.searchGrid(false)); })("keydown.esc", function productsComponent_th_54_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r228); const ctx_r229 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r229.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_th_54_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_th_54_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r221 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r221.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "UpdatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r221.view.recordStatus == "update" && ctx_r221.notSaved("updatedAt", ctx_r221.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r221.view.recordStatus == "update" && ctx_r221.isSaved("updatedAt", ctx_r221.model.$formGroup));
    } }
    function productsComponent_th_54_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_54_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_54_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_54_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r21 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r21.showSearch);
    } }
    function productsComponent_td_56_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r231 = i0.ɵɵnextContext(2).index;
        const ctx_r234 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r234.findColumnDisplayValue(rowIndex_r231, "createdBy", "none", "number"), "");
    } }
    function productsComponent_td_56_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_56_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r242 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_td_56_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r242); const ctx_r241 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r241.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_56_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_56_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r244 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 106)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function productsComponent_td_56_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r244); const ctx_r243 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r243.searchGrid(false)); })("keydown.esc", function productsComponent_td_56_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r244); const ctx_r245 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r245.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_td_56_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_td_56_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_td_56_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r230 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r235 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "CreatedBy");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r235.hasError("createdBy", "required", rowForm_r230));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r235.view.recordStatus == "update" && ctx_r235.notSaved("createdBy", rowForm_r230));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r235.view.recordStatus == "update" && ctx_r235.isSaved("createdBy", rowForm_r230));
    } }
    function productsComponent_td_56_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_56_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_56_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_56_ng_container_1_span_4_Template, 6, 4, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_56_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r230 = i0.ɵɵnextContext().$implicit;
        const ctx_r232 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r232.excelEditing == false && rowForm_r230.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r232.excelEditing == true || rowForm_r230.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r232.excelEditing == false && rowForm_r230.get("__edit").value === false);
    } }
    function productsComponent_td_56_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_56_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r230 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r230);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r230.getRawValue());
    } }
    function productsComponent_th_57_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_57_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " CreatedBy \u00A0");
        i0.ɵɵtemplate(2, productsComponent_th_57_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r248 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r248.editorOpen);
    } }
    function productsComponent_th_57_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "CreatedBy");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_57_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r255 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_th_57_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r255); const ctx_r254 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r254.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_57_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_57_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r257 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "CreatedBy");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_57_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r257); const ctx_r256 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r256.searchGrid(false)); })("keydown.esc", function productsComponent_th_57_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r257); const ctx_r258 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r258.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_th_57_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_th_57_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r250 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r250.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "CreatedBy");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r250.view.recordStatus == "update" && ctx_r250.notSaved("createdBy", ctx_r250.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r250.view.recordStatus == "update" && ctx_r250.isSaved("createdBy", ctx_r250.model.$formGroup));
    } }
    function productsComponent_th_57_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_57_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_57_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_57_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r23 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r23.showSearch);
    } }
    function productsComponent_td_59_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 123);
        i0.ɵɵelement(2, "dib-icon", 70);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r262 = ctx.ngIf;
        const ctx_r261 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("actionData", row_r262)("containerPortId", ctx_r261.containerActionReference());
    } }
    function productsComponent_td_59_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_59_ng_container_1_Template, 3, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r259 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r259);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r259.getRawValue());
    } }
    function productsComponent_th_60_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 71);
    } }
    function productsComponent_td_62_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r264 = i0.ɵɵnextContext(2).index;
        const ctx_r267 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r267.findColumnDisplayValue(rowIndex_r264, "price", "none", "number"), "");
    } }
    function productsComponent_td_62_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r274 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_td_62_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r274); const ctx_r273 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r273.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_62_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_td_62_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r276 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 106)(2, "input", 124);
        i0.ɵɵlistener("keydown.enter", function productsComponent_td_62_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r276); const ctx_r275 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r275.searchGrid(false)); })("keydown.esc", function productsComponent_td_62_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r276); const ctx_r277 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r277.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_td_62_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(4, productsComponent_td_62_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r263 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r268 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Price");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.notSaved("price", rowForm_r263));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r268.view.recordStatus == "update" && ctx_r268.isSaved("price", rowForm_r263));
    } }
    function productsComponent_td_62_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_62_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_62_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_62_ng_container_1_span_4_Template, 5, 3, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_62_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r263 = i0.ɵɵnextContext().$implicit;
        const ctx_r265 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r265.excelEditing == false && rowForm_r263.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.excelEditing == true || rowForm_r263.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r265.excelEditing == false && rowForm_r263.get("__edit").value === false);
    } }
    function productsComponent_td_62_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_62_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r263 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r263);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r263.getRawValue());
    } }
    function productsComponent_th_63_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Price ");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_63_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Price");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_63_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r286 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_th_63_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r286); const ctx_r285 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r285.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_63_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_63_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r288 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 125)(2, "mat-label");
        i0.ɵɵtext(3, "Price");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 126);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_63_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r288); const ctx_r287 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r287.searchGrid(false)); })("keydown.esc", function productsComponent_th_63_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r288); const ctx_r289 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r289.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_th_63_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_th_63_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r282 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r282.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Price");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r282.view.recordStatus == "update" && ctx_r282.notSaved("price", ctx_r282.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r282.view.recordStatus == "update" && ctx_r282.isSaved("price", ctx_r282.model.$formGroup));
    } }
    function productsComponent_th_63_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_63_div_2_Template, 2, 0, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_63_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_63_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r27.showSearch);
    } }
    function productsComponent_td_65_ng_container_1_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r293 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r293.totalValue_display_value, "");
    } }
    function productsComponent_td_65_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r293 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r293.totalValue, "");
    } }
    function productsComponent_td_65_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 128);
        i0.ɵɵtemplate(2, productsComponent_td_65_ng_container_1_span_2_Template, 2, 1, "span", 53);
        i0.ɵɵtemplate(3, productsComponent_td_65_ng_container_1_span_3_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r293 = ctx.ngIf;
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !!row_r293 && !!row_r293.totalValue_display_value);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !!row_r293 && !row_r293.totalValue_display_value);
    } }
    function productsComponent_td_65_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 127);
        i0.ɵɵtemplate(1, productsComponent_td_65_ng_container_1_Template, 4, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r290 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r290);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r290.getRawValue());
    } }
    function productsComponent_th_66_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129)(1, "div", 85)(2, "div");
        i0.ɵɵtext(3, " total value ");
        i0.ɵɵelementEnd()()();
    } }
    function productsComponent_td_68_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r299 = i0.ɵɵnextContext(2).index;
        const ctx_r302 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r302.findColumnDisplayValue(rowIndex_r299, "totalValue2", "none", "text"), "");
    } }
    function productsComponent_td_68_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r307 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 96)(2, "input", 130);
        i0.ɵɵlistener("keydown.enter", function productsComponent_td_68_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r307); const ctx_r306 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r306.searchGrid(false)); })("keydown.esc", function productsComponent_td_68_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r307); const ctx_r308 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r308.clearSearch()); });
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "total value sql");
    } }
    function productsComponent_td_68_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_td_68_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_td_68_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_td_68_ng_container_1_span_4_Template, 3, 1, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_td_68_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r298 = i0.ɵɵnextContext().$implicit;
        const ctx_r300 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r300.excelEditing == false && rowForm_r298.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.excelEditing == true || rowForm_r298.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r300.excelEditing == false && rowForm_r298.get("__edit").value === false);
    } }
    function productsComponent_td_68_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_td_68_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r298 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r298);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r298.getRawValue());
    } }
    function productsComponent_th_69_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " total value sql ");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_69_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "total value sql");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_th_69_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r314 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 131)(2, "mat-label");
        i0.ɵɵtext(3, "total value sql");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 130);
        i0.ɵɵlistener("keydown.enter", function productsComponent_th_69_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r314); const ctx_r313 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r313.searchGrid(false)); })("keydown.esc", function productsComponent_th_69_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r314); const ctx_r315 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r315.clearSearch()); });
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r312 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("formGroup", ctx_r312.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "total value sql");
    } }
    function productsComponent_th_69_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_th_69_div_2_Template, 2, 0, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_th_69_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_th_69_div_4_Template, 5, 2, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r31.showSearch);
    } }
    function productsComponent_th_71_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 134);
    } }
    function productsComponent_th_71_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 132);
        i0.ɵɵtemplate(1, productsComponent_th_71_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 133);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r32 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r32.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r32.busy);
    } }
    function productsComponent_th_73_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r317 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r317.translate("global.norecordsfound", "No Records Found"));
    } }
    function productsComponent_th_73_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 135);
        i0.ɵɵtemplate(1, productsComponent_th_73_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r33 = i0.ɵɵnextContext();
        i0.ɵɵattribute("colspan", ctx_r33.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r33.busy && ctx_r33.tableDataSource.data.length == 0);
    } }
    function productsComponent_ng_container_74_tr_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 137);
    } }
    function productsComponent_ng_container_74_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, productsComponent_ng_container_74_tr_1_Template, 1, 0, "tr", 136);
        i0.ɵɵpipe(2, "async");
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const column_r318 = ctx.$implicit;
        const ctx_r34 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpipeBind1(2, 1, ctx_r34.columnHeaders.getArray(column_r318).items$));
    } }
    function productsComponent_tr_75_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 138);
    } if (rf & 2) {
        const ctx_r35 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r35.busy ? "visible" : "hidden"));
    } }
    function productsComponent_tr_76_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "tr", 138);
    } if (rf & 2) {
        const ctx_r36 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(1, _c0, ctx_r36.tableDataSource.data.length == 0 ? "visible" : "hidden"));
    } }
    function productsComponent_tr_77_Template(rf, ctx) { if (rf & 1) {
        const _r323 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 139);
        i0.ɵɵlistener("click", function productsComponent_tr_77_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r323); const row_r320 = restoredCtx.$implicit; const ctx_r322 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r322.rowClick(row_r320, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r320 = ctx.$implicit;
        const ctx_r37 = i0.ɵɵnextContext();
        i0.ɵɵproperty("formGroup", ctx_r37.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(2, _c1, ctx_r37.isHighlighted(row_r320)));
    } }
    function productsComponent_79_ng_template_0_Template(rf, ctx) { }
    function productsComponent_79_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, productsComponent_79_ng_template_0_Template, 0, 0, "ng-template", 140);
    } if (rf & 2) {
        i0.ɵɵnextContext();
        const _r41 = i0.ɵɵreference(84);
        i0.ɵɵproperty("ngTemplateOutlet", _r41);
    } }
    function productsComponent_mat_toolbar_82_mat_checkbox_2_Template(rf, ctx) { if (rf & 1) {
        const _r329 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-checkbox", 146);
        i0.ɵɵlistener("click", function productsComponent_mat_toolbar_82_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { i0.ɵɵrestoreView(_r329); const ctx_r328 = i0.ɵɵnextContext(2); $event.preventDefault(); return i0.ɵɵresetView(ctx_r328.clearAll()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r325 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("checked", true);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" ", ctx_r325.numberOfSelectedItems + " ", "item", ctx_r325.numberOfSelectedItems > 1 ? "s " : " ", "selected ");
    } }
    function productsComponent_mat_toolbar_82_button_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_mat_toolbar_82_button_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon");
        i0.ɵɵtext(1, "visibility_off");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_mat_toolbar_82_button_3_Template(rf, ctx) { if (rf & 1) {
        const _r333 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 147);
        i0.ɵɵlistener("click", function productsComponent_mat_toolbar_82_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r333); const ctx_r332 = i0.ɵɵnextContext(2); ctx_r332.gridShowClipboardDefault = !ctx_r332.gridShowClipboardDefault; return i0.ɵɵresetView(ctx_r332.gridShowClipboardDefault && ctx_r332.scrollToBottom()); });
        i0.ɵɵtemplate(1, productsComponent_mat_toolbar_82_button_3_mat_icon_1_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtemplate(2, productsComponent_mat_toolbar_82_button_3_mat_icon_2_Template, 2, 0, "mat-icon", 53);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r326 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r326.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r326.gridShowClipboardDefault);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r326.gridShowClipboardDefault ? "hide" : "show", "");
    } }
    function productsComponent_mat_toolbar_82_mat_paginator_5_Template(rf, ctx) { if (rf & 1) {
        const _r336 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-paginator", 148, 149);
        i0.ɵɵlistener("page", function productsComponent_mat_toolbar_82_mat_paginator_5_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r336); const ctx_r335 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r335.changePage($event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r327 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("length", ctx_r327.page.totalRecords)("pageSize", ctx_r327.page.pageSize)("pageSizeOptions", i0.ɵɵpureFunction0(3, _c2));
    } }
    function productsComponent_mat_toolbar_82_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-toolbar")(1, "mat-toolbar-row", 141);
        i0.ɵɵtemplate(2, productsComponent_mat_toolbar_82_mat_checkbox_2_Template, 2, 3, "mat-checkbox", 142);
        i0.ɵɵtemplate(3, productsComponent_mat_toolbar_82_button_3_Template, 4, 3, "button", 143);
        i0.ɵɵelement(4, "span", 144);
        i0.ɵɵtemplate(5, productsComponent_mat_toolbar_82_mat_paginator_5_Template, 2, 4, "mat-paginator", 145);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r40.numberOfSelectedItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r40.selectedDataNotInPage().length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", true);
    } }
    function productsComponent_ng_template_83_td_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r373 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 66);
        i0.ɵɵelementContainerStart(2, 3);
        i0.ɵɵelementStart(3, "button", 67);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_2_ng_container_1_Template_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r373); const row_r371 = restoredCtx.ngIf; const ctx_r372 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r372.navigationService.goTo("product", "main", "?primary_id=" + row_r371.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r372 })); });
        i0.ɵɵelement(4, "dib-icon", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "button", 69);
        i0.ɵɵelement(6, "dib-icon", 70);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r371 = ctx.ngIf;
        const ctx_r370 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("dibPort", "8429");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("actionData", row_r371)("containerPortId", ctx_r370.containerActionReference());
    } }
    function productsComponent_ng_template_83_td_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_2_ng_container_1_Template, 7, 7, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r368 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r368);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r368.getRawValue());
    } }
    function productsComponent_ng_template_83_th_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 71);
    } }
    function productsComponent_ng_template_83_td_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        const _r379 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 72);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_5_ng_container_1_Template_button_click_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r379); const row_r377 = restoredCtx.ngIf; const ctx_r378 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r378.navigationService.goTo("product", "", "?primary_id=" + row_r377.id, { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx_r378 })); });
        i0.ɵɵelement(2, "dib-icon", 68);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("matTooltip", "View/edit this record")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
    } }
    function productsComponent_ng_template_83_td_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_5_ng_container_1_Template, 3, 4, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r374 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r374);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r374.getRawValue());
    } }
    function productsComponent_ng_template_83_th_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 71);
    } }
    function productsComponent_ng_template_83_td_8_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r381 = i0.ɵɵnextContext(2).index;
        const ctx_r384 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r384.findColumnDisplayValue(rowIndex_r381, "id", "none", "number"), "");
    } }
    function productsComponent_ng_template_83_td_8_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_8_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r392 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_8_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r392); const ctx_r391 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r391.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_8_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_8_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r394 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 77)(2, "input", 154);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_8_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r394); const ctx_r393 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r393.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_8_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r394); const ctx_r395 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r395.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_8_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_8_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_8_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r380 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r385 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("hidden", true);
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r385.hasError("id", "required", rowForm_r380));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r385.view.recordStatus == "update" && ctx_r385.notSaved("id", rowForm_r380));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r385.view.recordStatus == "update" && ctx_r385.isSaved("id", rowForm_r380));
    } }
    function productsComponent_ng_template_83_td_8_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_8_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_8_ng_container_1_span_4_Template, 6, 5, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_8_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r380 = i0.ɵɵnextContext().$implicit;
        const ctx_r382 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r382.excelEditing == false && rowForm_r380.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r382.excelEditing == true || rowForm_r380.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r382.excelEditing == false && rowForm_r380.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_8_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r380 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r380);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r380.getRawValue());
    } }
    function productsComponent_ng_template_83_th_9_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_9_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Id \u00A0");
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_9_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r398 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r398.editorOpen);
    } }
    function productsComponent_ng_template_83_th_9_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Id");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_9_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r405 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_th_9_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r405); const ctx_r404 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r404.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_9_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_9_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r407 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 94)(2, "mat-label");
        i0.ɵɵtext(3, "Id");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 95);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_9_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r407); const ctx_r406 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r406.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_9_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r407); const ctx_r408 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r408.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_9_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_9_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r400 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r400.model.$formGroup);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("hidden", true);
        i0.ɵɵadvance(3);
        i0.ɵɵattribute("aria-label", "Id");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.view.recordStatus == "update" && ctx_r400.notSaved("id", ctx_r400.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r400.view.recordStatus == "update" && ctx_r400.isSaved("id", ctx_r400.model.$formGroup));
    } }
    function productsComponent_ng_template_83_th_9_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_9_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_9_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_9_div_4_Template, 7, 5, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r342 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r342.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r342.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r342.showSearch);
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r410 = i0.ɵɵnextContext(2).index;
        const ctx_r413 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r413.findColumnDisplayValue(rowIndex_r410, "product_name", "none", "text"), "");
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_error_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter 255 chars or less");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r422 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r422); const ctx_r421 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r421.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r424 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 96)(2, "input", 97);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_11_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r424); const ctx_r423 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r423.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_11_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r424); const ctx_r425 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r425.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_error_4_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_td_11_ng_container_1_span_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r409 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r414 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Product Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.hasError("product_name", "required", rowForm_r409));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.hasError("product_name", "maxlength", rowForm_r409));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.view.recordStatus == "update" && ctx_r414.notSaved("product_name", rowForm_r409));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r414.view.recordStatus == "update" && ctx_r414.isSaved("product_name", rowForm_r409));
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_11_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_11_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_11_ng_container_1_span_4_Template, 7, 5, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_11_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r409 = i0.ɵɵnextContext().$implicit;
        const ctx_r411 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r411.excelEditing == false && rowForm_r409.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r411.excelEditing == true || rowForm_r409.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r411.excelEditing == false && rowForm_r409.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_11_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_11_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r409 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r409);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r409.getRawValue());
    } }
    function productsComponent_ng_template_83_th_12_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_12_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Product Name \u00A0");
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_12_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r428 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r428.editorOpen);
    } }
    function productsComponent_ng_template_83_th_12_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Product Name");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_12_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r435 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_th_12_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r435); const ctx_r434 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r434.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_12_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_12_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r437 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 98)(2, "mat-label");
        i0.ɵɵtext(3, "Product Name");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 99);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_12_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r437); const ctx_r436 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r436.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_12_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r437); const ctx_r438 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r438.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_12_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_12_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r430 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r430.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Product Name");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.view.recordStatus == "update" && ctx_r430.notSaved("product_name", ctx_r430.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r430.view.recordStatus == "update" && ctx_r430.isSaved("product_name", ctx_r430.model.$formGroup));
    } }
    function productsComponent_ng_template_83_th_12_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_12_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_12_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_12_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r344 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r344.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r344.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r344.showSearch);
    } }
    function productsComponent_ng_template_83_td_14_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r440 = i0.ɵɵnextContext(2).index;
        const ctx_r443 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r443.findColumnDisplayValue(rowIndex_r440, "product_category", "none", "text"), "");
    } }
    function productsComponent_ng_template_83_td_14_ng_container_1_span_4_mat_option_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 103);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r448 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r448.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r448.id_display_value, "");
    } }
    function productsComponent_ng_template_83_td_14_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 100)(2, "mat-select", 101);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_14_ng_container_1_span_4_mat_option_3_Template, 2, 2, "mat-option", 102);
        i0.ɵɵpipe(4, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r444 = i0.ɵɵnextContext(4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(4, 1, ctx_r444.lists.list8460.items));
    } }
    function productsComponent_ng_template_83_td_14_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_14_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_14_ng_container_1_span_4_Template, 5, 3, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_14_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r439 = i0.ɵɵnextContext().$implicit;
        const ctx_r441 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r441.excelEditing == false && rowForm_r439.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r441.excelEditing == true || rowForm_r439.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r441.excelEditing == false && rowForm_r439.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_14_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_14_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r439 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r439);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r439.getRawValue());
    } }
    function productsComponent_ng_template_83_th_15_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_15_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Product Category \u00A0");
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_15_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r450 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r450.editorOpen);
    } }
    function productsComponent_ng_template_83_th_15_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Product Category");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_15_div_4_mat_option_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-option", 103);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const item_r455 = ctx.$implicit;
        i0.ɵɵproperty("value", item_r455.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r455.id_display_value, "");
    } }
    function productsComponent_ng_template_83_th_15_div_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 104)(2, "mat-label");
        i0.ɵɵtext(3, "Product Category");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "mat-select", 105);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_15_div_4_mat_option_5_Template, 2, 2, "mat-option", 102);
        i0.ɵɵpipe(6, "async");
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r452 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r452.model.$formGroup);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(6, 2, ctx_r452.lists.list8460.items));
    } }
    function productsComponent_ng_template_83_th_15_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_15_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_15_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_15_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r346 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r346.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r346.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r346.showSearch);
    } }
    function productsComponent_ng_template_83_td_17_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r457 = i0.ɵɵnextContext(2).index;
        const ctx_r460 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r460.findColumnDisplayValue(rowIndex_r457, "product_quantity", "none", "number"), "");
    } }
    function productsComponent_ng_template_83_td_17_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_17_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r468 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_17_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r468); const ctx_r467 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r467.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_17_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_17_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r470 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 106)(2, "input", 107);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_17_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r470); const ctx_r469 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r469.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_17_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r470); const ctx_r471 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r471.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_17_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_17_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_17_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r456 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r461 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Product Quantity");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r461.hasError("product_quantity", "required", rowForm_r456));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r461.view.recordStatus == "update" && ctx_r461.notSaved("product_quantity", rowForm_r456));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r461.view.recordStatus == "update" && ctx_r461.isSaved("product_quantity", rowForm_r456));
    } }
    function productsComponent_ng_template_83_td_17_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_17_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_17_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_17_ng_container_1_span_4_Template, 6, 4, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_17_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r456 = i0.ɵɵnextContext().$implicit;
        const ctx_r458 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r458.excelEditing == false && rowForm_r456.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r458.excelEditing == true || rowForm_r456.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r458.excelEditing == false && rowForm_r456.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_17_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_17_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r456 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r456);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r456.getRawValue());
    } }
    function productsComponent_ng_template_83_th_18_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_18_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Product Quantity \u00A0");
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_18_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r474 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r474.editorOpen);
    } }
    function productsComponent_ng_template_83_th_18_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Product Quantity");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_18_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r481 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_th_18_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r481); const ctx_r480 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r480.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_18_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_18_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r483 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 108)(2, "mat-label");
        i0.ɵɵtext(3, "Product Quantity");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 109);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_18_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r483); const ctx_r482 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r482.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_18_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r483); const ctx_r484 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r484.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_18_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_18_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r476 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r476.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Product Quantity");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r476.view.recordStatus == "update" && ctx_r476.notSaved("product_quantity", ctx_r476.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r476.view.recordStatus == "update" && ctx_r476.isSaved("product_quantity", ctx_r476.model.$formGroup));
    } }
    function productsComponent_ng_template_83_th_18_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_18_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_18_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_18_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r348 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r348.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r348.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r348.showSearch);
    } }
    function productsComponent_ng_template_83_td_20_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r486 = i0.ɵɵnextContext(2).index;
        const ctx_r489 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r489.findColumnDisplayValue(rowIndex_r486, "createdAt", "none", "datetime"), "");
    } }
    function productsComponent_ng_template_83_td_20_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r498 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_20_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r498); const ctx_r497 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r497.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_20_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_20_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_20_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r500 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 110);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 111);
        i0.ɵɵelementStart(3, "input", 112);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_20_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r500); const ctx_r499 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r499.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_20_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r500); const ctx_r501 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r501.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_20_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_20_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 113);
        i0.ɵɵtemplate(8, productsComponent_ng_template_83_td_20_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 53);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r495 = i0.ɵɵreference(7);
        const rowForm_r485 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r490 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r495);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r495);
        i0.ɵɵattribute("aria-label", "CreatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r490.view.recordStatus == "update" && ctx_r490.notSaved("createdAt", rowForm_r485));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r490.view.recordStatus == "update" && ctx_r490.isSaved("createdAt", rowForm_r485));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r490.hasError("createdAt", "required", rowForm_r485));
    } }
    function productsComponent_ng_template_83_td_20_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_20_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_20_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_20_ng_container_1_span_4_Template, 9, 6, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_20_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r485 = i0.ɵɵnextContext().$implicit;
        const ctx_r487 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r487.excelEditing == false && rowForm_r485.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r487.excelEditing == true || rowForm_r485.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r487.excelEditing == false && rowForm_r485.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_20_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_20_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r485 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r485);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r485.getRawValue());
    } }
    function productsComponent_ng_template_83_th_21_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_21_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " CreatedAt \u00A0");
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_21_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r504 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r504.editorOpen);
    } }
    function productsComponent_ng_template_83_th_21_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "CreatedAt");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_21_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r511 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_th_21_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r511); const ctx_r510 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r510.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_21_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_21_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r513 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 114)(2, "mat-label");
        i0.ɵɵtext(3, "CreatedAt");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 115);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_21_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r513); const ctx_r512 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r512.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_21_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r513); const ctx_r514 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r514.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_21_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_21_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r506 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r506.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "CreatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r506.view.recordStatus == "update" && ctx_r506.notSaved("createdAt", ctx_r506.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r506.view.recordStatus == "update" && ctx_r506.isSaved("createdAt", ctx_r506.model.$formGroup));
    } }
    function productsComponent_ng_template_83_th_21_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_21_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_21_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_21_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r350 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r350.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r350.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r350.showSearch);
    } }
    function productsComponent_ng_template_83_td_23_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r516 = i0.ɵɵnextContext(2).index;
        const ctx_r519 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r519.findColumnDisplayValue(rowIndex_r516, "updatedAt", "none", "datetime"), "");
    } }
    function productsComponent_ng_template_83_td_23_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r528 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_23_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r528); const ctx_r527 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r527.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_23_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_23_ng_container_1_span_4_mat_error_8_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_23_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r530 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 110);
        i0.ɵɵelement(2, "mat-datepicker-toggle", 111);
        i0.ɵɵelementStart(3, "input", 116);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_23_ng_container_1_span_4_Template_input_keydown_enter_3_listener() { i0.ɵɵrestoreView(_r530); const ctx_r529 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r529.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_23_ng_container_1_span_4_Template_input_keydown_esc_3_listener() { i0.ɵɵrestoreView(_r530); const ctx_r531 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r531.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_23_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_23_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelement(6, "ngx-mat-datetime-picker", null, 117);
        i0.ɵɵtemplate(8, productsComponent_ng_template_83_td_23_ng_container_1_span_4_mat_error_8_Template, 2, 0, "mat-error", 53);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const _r525 = i0.ɵɵreference(7);
        const rowForm_r515 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r520 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", _r525);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngxMatDatetimePicker", _r525);
        i0.ɵɵattribute("aria-label", "UpdatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r520.view.recordStatus == "update" && ctx_r520.notSaved("updatedAt", rowForm_r515));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r520.view.recordStatus == "update" && ctx_r520.isSaved("updatedAt", rowForm_r515));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r520.hasError("updatedAt", "required", rowForm_r515));
    } }
    function productsComponent_ng_template_83_td_23_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_23_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_23_ng_container_1_span_4_Template, 9, 6, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_23_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r515 = i0.ɵɵnextContext().$implicit;
        const ctx_r517 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r517.excelEditing == false && rowForm_r515.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r517.excelEditing == true || rowForm_r515.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r517.excelEditing == false && rowForm_r515.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_23_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_23_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r515 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r515);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r515.getRawValue());
    } }
    function productsComponent_ng_template_83_th_24_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_24_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " UpdatedAt \u00A0");
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_24_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r534 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r534.editorOpen);
    } }
    function productsComponent_ng_template_83_th_24_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "UpdatedAt");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_24_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r541 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_th_24_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r541); const ctx_r540 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r540.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_24_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_24_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r543 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 118)(2, "mat-label");
        i0.ɵɵtext(3, "UpdatedAt");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 119);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_24_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r543); const ctx_r542 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r542.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_24_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r543); const ctx_r544 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r544.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_24_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_24_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r536 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r536.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "UpdatedAt");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r536.view.recordStatus == "update" && ctx_r536.notSaved("updatedAt", ctx_r536.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r536.view.recordStatus == "update" && ctx_r536.isSaved("updatedAt", ctx_r536.model.$formGroup));
    } }
    function productsComponent_ng_template_83_th_24_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_24_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_24_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_24_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r352 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r352.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r352.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r352.showSearch);
    } }
    function productsComponent_ng_template_83_td_26_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r546 = i0.ɵɵnextContext(2).index;
        const ctx_r549 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r549.findColumnDisplayValue(rowIndex_r546, "createdBy", "none", "number"), "");
    } }
    function productsComponent_ng_template_83_td_26_ng_container_1_span_4_mat_error_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-error");
        i0.ɵɵtext(1, "Please enter a value");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_26_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        const _r557 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_26_ng_container_1_span_4_mat_icon_4_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r557); const ctx_r556 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r556.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_26_ng_container_1_span_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_26_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r559 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 106)(2, "input", 120);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_26_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r559); const ctx_r558 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r558.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_26_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r559); const ctx_r560 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r560.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_26_ng_container_1_span_4_mat_error_3_Template, 2, 0, "mat-error", 53);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_26_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_26_ng_container_1_span_4_mat_icon_5_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r545 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r550 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "CreatedBy");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r550.hasError("createdBy", "required", rowForm_r545));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r550.view.recordStatus == "update" && ctx_r550.notSaved("createdBy", rowForm_r545));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r550.view.recordStatus == "update" && ctx_r550.isSaved("createdBy", rowForm_r545));
    } }
    function productsComponent_ng_template_83_td_26_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_26_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_26_ng_container_1_span_4_Template, 6, 4, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_26_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r545 = i0.ɵɵnextContext().$implicit;
        const ctx_r547 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r547.excelEditing == false && rowForm_r545.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r547.excelEditing == true || rowForm_r545.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r547.excelEditing == false && rowForm_r545.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_26_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_26_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r545 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r545);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r545.getRawValue());
    } }
    function productsComponent_ng_template_83_th_27_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 91);
        i0.ɵɵtext(1, "*");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_27_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " CreatedBy \u00A0");
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_27_div_2_span_2_Template, 2, 0, "span", 90);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r563 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r563.editorOpen);
    } }
    function productsComponent_ng_template_83_th_27_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "CreatedBy");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_27_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r570 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_th_27_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r570); const ctx_r569 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r569.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_27_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_27_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r572 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 121)(2, "mat-label");
        i0.ɵɵtext(3, "CreatedBy");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 122);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_27_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r572); const ctx_r571 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r571.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_27_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r572); const ctx_r573 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r573.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_27_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_27_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r565 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r565.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "CreatedBy");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r565.view.recordStatus == "update" && ctx_r565.notSaved("createdBy", ctx_r565.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r565.view.recordStatus == "update" && ctx_r565.isSaved("createdBy", ctx_r565.model.$formGroup));
    } }
    function productsComponent_ng_template_83_th_27_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_27_div_2_Template, 3, 1, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_27_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_27_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r354 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r354.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r354.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r354.showSearch);
    } }
    function productsComponent_ng_template_83_td_29_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "button", 123);
        i0.ɵɵelement(2, "dib-icon", 70);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r577 = ctx.ngIf;
        const ctx_r576 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("actionData", row_r577)("containerPortId", ctx_r576.containerActionReference());
    } }
    function productsComponent_ng_template_83_td_29_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_29_ng_container_1_Template, 3, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r574 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r574);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r574.getRawValue());
    } }
    function productsComponent_ng_template_83_th_30_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "th", 71);
    } }
    function productsComponent_ng_template_83_td_32_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r579 = i0.ɵɵnextContext(2).index;
        const ctx_r582 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r582.findColumnDisplayValue(rowIndex_r579, "price", "none", "number"), "");
    } }
    function productsComponent_ng_template_83_td_32_ng_container_1_span_4_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
        const _r589 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_32_ng_container_1_span_4_mat_icon_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r589); const ctx_r588 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r588.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_32_ng_container_1_span_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_td_32_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r591 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 106)(2, "input", 124);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_32_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r591); const ctx_r590 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r590.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_32_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r591); const ctx_r592 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r592.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_32_ng_container_1_span_4_mat_icon_3_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_32_ng_container_1_span_4_mat_icon_4_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const rowForm_r578 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r583 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "Price");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r583.view.recordStatus == "update" && ctx_r583.notSaved("price", rowForm_r578));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r583.view.recordStatus == "update" && ctx_r583.isSaved("price", rowForm_r578));
    } }
    function productsComponent_ng_template_83_td_32_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_32_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_32_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_32_ng_container_1_span_4_Template, 5, 3, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_32_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r578 = i0.ɵɵnextContext().$implicit;
        const ctx_r580 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r580.excelEditing == false && rowForm_r578.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r580.excelEditing == true || rowForm_r578.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r580.excelEditing == false && rowForm_r578.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_32_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_32_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r578 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r578);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r578.getRawValue());
    } }
    function productsComponent_ng_template_83_th_33_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " Price ");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_33_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "Price");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_33_div_4_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
        const _r601 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "mat-icon", 82);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_th_33_div_4_mat_icon_5_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r601); const ctx_r600 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r600.onSubmit()); });
        i0.ɵɵtext(1, "done");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_33_div_4_mat_icon_6_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "mat-icon", 83);
        i0.ɵɵtext(1, "done_all");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_33_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r603 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 125)(2, "mat-label");
        i0.ɵɵtext(3, "Price");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 126);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_33_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r603); const ctx_r602 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r602.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_33_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r603); const ctx_r604 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r604.clearSearch()); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_th_33_div_4_mat_icon_5_Template, 2, 0, "mat-icon", 79);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_33_div_4_mat_icon_6_Template, 2, 0, "mat-icon", 80);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r597 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r597.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "Price");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r597.view.recordStatus == "update" && ctx_r597.notSaved("price", ctx_r597.model.$formGroup));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r597.view.recordStatus == "update" && ctx_r597.isSaved("price", ctx_r597.model.$formGroup));
    } }
    function productsComponent_ng_template_83_th_33_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_33_div_2_Template, 2, 0, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_33_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_33_div_4_Template, 7, 4, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r358 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r358.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r358.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r358.showSearch);
    } }
    function productsComponent_ng_template_83_td_35_ng_container_1_span_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r608 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r608.totalValue_display_value, "");
    } }
    function productsComponent_ng_template_83_td_35_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r608 = i0.ɵɵnextContext().ngIf;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", row_r608.totalValue, "");
    } }
    function productsComponent_ng_template_83_td_35_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 128);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_td_35_ng_container_1_span_2_Template, 2, 1, "span", 53);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_35_ng_container_1_span_3_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const row_r608 = ctx.ngIf;
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !!row_r608 && !!row_r608.totalValue_display_value);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !!row_r608 && !row_r608.totalValue_display_value);
    } }
    function productsComponent_ng_template_83_td_35_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 127);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_35_ng_container_1_Template, 4, 2, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r605 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r605);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r605.getRawValue());
    } }
    function productsComponent_ng_template_83_th_36_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 129)(1, "div", 85)(2, "div");
        i0.ɵɵtext(3, " total value ");
        i0.ɵɵelementEnd()()();
    } }
    function productsComponent_ng_template_83_td_38_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 76);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowIndex_r614 = i0.ɵɵnextContext(2).index;
        const ctx_r617 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r617.findColumnDisplayValue(rowIndex_r614, "totalValue2", "none", "text"), "");
    } }
    function productsComponent_ng_template_83_td_38_ng_container_1_span_4_Template(rf, ctx) { if (rf & 1) {
        const _r622 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 76)(1, "mat-form-field", 96)(2, "input", 130);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_td_38_ng_container_1_span_4_Template_input_keydown_enter_2_listener() { i0.ɵɵrestoreView(_r622); const ctx_r621 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r621.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_td_38_ng_container_1_span_4_Template_input_keydown_esc_2_listener() { i0.ɵɵrestoreView(_r622); const ctx_r623 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r623.clearSearch()); });
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", "total value sql");
    } }
    function productsComponent_ng_template_83_td_38_ng_container_1_span_5_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "span");
    } }
    function productsComponent_ng_template_83_td_38_ng_container_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "span", 73)(2, "span", 74);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_td_38_ng_container_1_span_3_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_td_38_ng_container_1_span_4_Template, 3, 1, "span", 75);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_38_ng_container_1_span_5_Template, 1, 0, "span", 53);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const rowForm_r613 = i0.ɵɵnextContext().$implicit;
        const ctx_r615 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r615.excelEditing == false && rowForm_r613.get("__edit").value === false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r615.excelEditing == true || rowForm_r613.get("__edit").value === true);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r615.excelEditing == false && rowForm_r613.get("__edit").value === false);
    } }
    function productsComponent_ng_template_83_td_38_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 65);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_td_38_ng_container_1_Template, 6, 3, "ng-container", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const rowForm_r613 = ctx.$implicit;
        i0.ɵɵproperty("formGroup", rowForm_r613);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", rowForm_r613.getRawValue());
    } }
    function productsComponent_ng_template_83_th_39_div_2_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 89);
        i0.ɵɵtext(1, " total value sql ");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_39_div_3_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 92);
        i0.ɵɵtext(1, "total value sql");
        i0.ɵɵelementEnd();
    } }
    function productsComponent_ng_template_83_th_39_div_4_Template(rf, ctx) { if (rf & 1) {
        const _r629 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 93)(1, "mat-form-field", 131)(2, "mat-label");
        i0.ɵɵtext(3, "total value sql");
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "input", 130);
        i0.ɵɵlistener("keydown.enter", function productsComponent_ng_template_83_th_39_div_4_Template_input_keydown_enter_4_listener() { i0.ɵɵrestoreView(_r629); const ctx_r628 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r628.searchGrid(false)); })("keydown.esc", function productsComponent_ng_template_83_th_39_div_4_Template_input_keydown_esc_4_listener() { i0.ɵɵrestoreView(_r629); const ctx_r630 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r630.clearSearch()); });
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        const ctx_r627 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("formGroup", ctx_r627.model.$formGroup);
        i0.ɵɵadvance(4);
        i0.ɵɵattribute("aria-label", "total value sql");
    } }
    function productsComponent_ng_template_83_th_39_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 71)(1, "div", 85);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_th_39_div_2_Template, 2, 0, "div", 86);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_39_div_3_Template, 2, 0, "div", 87);
        i0.ɵɵtemplate(4, productsComponent_ng_template_83_th_39_div_4_Template, 5, 2, "div", 88);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r362 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r362.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r362.showSearch);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r362.showSearch);
    } }
    function productsComponent_ng_template_83_th_41_Template(rf, ctx) { if (rf & 1) {
        const _r632 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 61)(1, "mat-checkbox", 155);
        i0.ɵɵlistener("change", function productsComponent_ng_template_83_th_41_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r632); const ctx_r631 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r631.masterToggle($event) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const ctx_r363 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r363.masterIsChecked)("indeterminate", ctx_r363.masterIsIndeterminate);
    } }
    function productsComponent_ng_template_83_td_42_Template(rf, ctx) { if (rf & 1) {
        const _r636 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 156)(1, "mat-checkbox", 64);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_td_42_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function productsComponent_ng_template_83_td_42_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r636); const row_r633 = restoredCtx.$implicit; const ctx_r635 = i0.ɵɵnextContext(2); return i0.ɵɵresetView($event ? ctx_r635.selection.toggle(row_r633) : null); });
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        const row_r633 = ctx.$implicit;
        const ctx_r364 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("checked", ctx_r364.isHighlighted(row_r633));
    } }
    function productsComponent_ng_template_83_th_44_mat_progress_bar_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "mat-progress-bar", 134);
    } }
    function productsComponent_ng_template_83_th_44_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 157);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_th_44_mat_progress_bar_1_Template, 1, 0, "mat-progress-bar", 133);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r365 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r365.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r365.busy);
    } }
    function productsComponent_ng_template_83_th_46_span_1_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r638 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r638.translate("global.norecordsfound", "No Records Found"));
    } }
    function productsComponent_ng_template_83_th_46_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 135);
        i0.ɵɵtemplate(1, productsComponent_ng_template_83_th_46_span_1_Template, 2, 1, "span", 53);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r366 = i0.ɵɵnextContext(2);
        i0.ɵɵattribute("colspan", ctx_r366.columnsToDisplay.get().length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r366.busy && ctx_r366.tableDataSource.data.length == 0);
    } }
    function productsComponent_ng_template_83_tr_47_Template(rf, ctx) { if (rf & 1) {
        const _r641 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr", 158);
        i0.ɵɵlistener("click", function productsComponent_ng_template_83_tr_47_Template_tr_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r641); const row_r639 = restoredCtx.$implicit; const ctx_r640 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r640.rowClick(row_r639, $event)); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const row_r639 = ctx.$implicit;
        const ctx_r367 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r367.isHighlighted(row_r639)));
    } }
    function productsComponent_ng_template_83_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 150);
        i0.ɵɵelementContainerStart(1, 29);
        i0.ɵɵtemplate(2, productsComponent_ng_template_83_td_2_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(3, productsComponent_ng_template_83_th_3_Template, 1, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(4, 32);
        i0.ɵɵtemplate(5, productsComponent_ng_template_83_td_5_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(6, productsComponent_ng_template_83_th_6_Template, 1, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(7, 33);
        i0.ɵɵtemplate(8, productsComponent_ng_template_83_td_8_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(9, productsComponent_ng_template_83_th_9_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(10, 34);
        i0.ɵɵtemplate(11, productsComponent_ng_template_83_td_11_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(12, productsComponent_ng_template_83_th_12_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(13, 35);
        i0.ɵɵtemplate(14, productsComponent_ng_template_83_td_14_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(15, productsComponent_ng_template_83_th_15_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(16, 36);
        i0.ɵɵtemplate(17, productsComponent_ng_template_83_td_17_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(18, productsComponent_ng_template_83_th_18_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(19, 37);
        i0.ɵɵtemplate(20, productsComponent_ng_template_83_td_20_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(21, productsComponent_ng_template_83_th_21_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(22, 38);
        i0.ɵɵtemplate(23, productsComponent_ng_template_83_td_23_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(24, productsComponent_ng_template_83_th_24_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(25, 39);
        i0.ɵɵtemplate(26, productsComponent_ng_template_83_td_26_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(27, productsComponent_ng_template_83_th_27_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(28, 40);
        i0.ɵɵtemplate(29, productsComponent_ng_template_83_td_29_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(30, productsComponent_ng_template_83_th_30_Template, 1, 0, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(31, 41);
        i0.ɵɵtemplate(32, productsComponent_ng_template_83_td_32_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(33, productsComponent_ng_template_83_th_33_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(34, 42);
        i0.ɵɵtemplate(35, productsComponent_ng_template_83_td_35_Template, 2, 2, "td", 43);
        i0.ɵɵtemplate(36, productsComponent_ng_template_83_th_36_Template, 4, 0, "th", 44);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(37, 45);
        i0.ɵɵtemplate(38, productsComponent_ng_template_83_td_38_Template, 2, 2, "td", 30);
        i0.ɵɵtemplate(39, productsComponent_ng_template_83_th_39_Template, 5, 3, "th", 31);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(40, 26);
        i0.ɵɵtemplate(41, productsComponent_ng_template_83_th_41_Template, 2, 2, "th", 27);
        i0.ɵɵtemplate(42, productsComponent_ng_template_83_td_42_Template, 2, 1, "td", 151);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(43, 46);
        i0.ɵɵtemplate(44, productsComponent_ng_template_83_th_44_Template, 2, 2, "th", 152);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementContainerStart(45, 48);
        i0.ɵɵtemplate(46, productsComponent_ng_template_83_th_46_Template, 2, 2, "th", 49);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵtemplate(47, productsComponent_ng_template_83_tr_47_Template, 1, 3, "tr", 153);
        i0.ɵɵpipe(48, "async");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const ctx_r42 = i0.ɵɵnextContext();
        i0.ɵɵproperty("dataSource", ctx_r42.selectionDataSource);
        i0.ɵɵadvance(47);
        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(48, 2, ctx_r42.columnsToDisplay.items$));
    } }
    // @todo francois we need to import these files before the view loads
    async function importFiles() {
        for (const fileLocation of importsRequired) {
            await SystemJS.import(fileLocation);
        }
    }
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (core_1_1) {
                core_1 = core_1_1;
                core_2 = core_1_1;
                core_4 = core_1_1;
                i0 = core_1_1;
            },
            function (table_1_1) {
                table_1 = table_1_1;
                table_2 = table_1_1;
                i19 = table_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
                shared_2 = shared_1_1;
                shared_3 = shared_1_1;
                shared_4 = shared_1_1;
                shared_5 = shared_1_1;
                shared_6 = shared_1_1;
                i2 = shared_1_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
                forms_2 = forms_1_1;
                i3 = forms_1_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
                i1 = http_1_1;
            },
            function (core_3_1) {
                core_3 = core_3_1;
                i7 = core_3_1;
            },
            function (rxjs_1_1) {
                rxjs_1 = rxjs_1_1;
            },
            function (operators_1_1) {
                operators_1 = operators_1_1;
            },
            function (sort_1_1) {
                sort_1 = sort_1_1;
                i20 = sort_1_1;
            },
            function (paginator_1_1) {
                paginator_1 = paginator_1_1;
                i21 = paginator_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
                i4 = common_1_1;
            },
            function (button_1_1) {
                button_1 = button_1_1;
                i8 = button_1_1;
            },
            function (icon_1_1) {
                icon_1 = icon_1_1;
                i12 = icon_1_1;
            },
            function (card_1_1) {
                card_1 = card_1_1;
                i18 = card_1_1;
            },
            function (select_1_1) {
                select_1 = select_1_1;
                i15 = select_1_1;
            },
            function (i5_1) {
                i5 = i5_1;
            },
            function (i6_1) {
                i6 = i6_1;
            },
            function (i9_1) {
                i9 = i9_1;
            },
            function (i10_1) {
                i10 = i10_1;
            },
            function (i11_1) {
                i11 = i11_1;
            },
            function (i13_1) {
                i13 = i13_1;
            },
            function (i14_1) {
                i14 = i14_1;
            },
            function (i16_1) {
                i16 = i16_1;
            },
            function (i17_1) {
                i17 = i17_1;
            }
        ],
        execute: function () {
            _c0 = function (a0) { return { visibility: a0 }; };
            _c1 = function (a0) { return { "dib-grid-selected": a0 }; };
            _c2 = function () { return [10, 20, 50, 100]; };
            _c3 = function (a0) { return { "dib-editor": a0 }; };
            _c4 = function () { return ["_dibBusy"]; };
            _c5 = function () { return ["_dibNoRecords"]; };
            importsRequired = [];
            // Promise.resolve()
            // .then(async () => {
            //   await importFiles();
            // })
            productsComponent = class productsComponent extends shared_1.GridComponent {
                httpClient;
                ref;
                crudService;
                sd;
                cd;
                formBuilder;
                view = {
                    container: {
                        id: 365,
                        name: 'products',
                        subContainerItemAliases: [],
                        allChildContainers: [],
                        refreshChildContainers: {
                            "_": []
                        },
                        dropin: 'grid',
                        activeFilter: null,
                        configs: {},
                        keepInMemory: false
                    },
                    items: {},
                    primaryKeys: ["id"],
                    recordStatus: 'create',
                    debug: false,
                    debugItem: false
                };
                gridMultiselect = false; //default: false
                gridPersistSelection = false; //default: false
                gridMasterSelectAllFirst = true; //default:true
                gridShowDuplicatesInClipboard = false; //default:false
                gridShowClipboardDefault = false; //default:false
                gridRowClickChangesSelection = true; //default:true
                gridExcelEditingEnabled = true; //default:false
                gridExcelEditingAutoSave = true; //default:false
                gridHighlightLastClickedOnly = false; //default:false
                gridClickedLastNullable = false; //default:false
                editFormGroup;
                selection = new shared_1.SelectionModel(this.gridMultiselect, []);
                selectionDataSource = new table_1.MatTableDataSource(this.selection.selected);
                page = {
                    pageSize: 20,
                    pageIndex: 1,
                };
                //columnsToDisplay
                columnsToDisplay = new shared_3.DibArray([
                    'hdrActions',
                    'product_name',
                    'product_category',
                    'product_quantity',
                    'createdAt',
                    'updatedAt',
                    'createdBy',
                    'price',
                    'totalValue',
                    'totalValue2',
                ]);
                allColumnsToDisplay = new shared_3.DibArray([
                    'hdrActions',
                    'id',
                    'product_name',
                    'product_category',
                    'product_quantity',
                    'createdAt',
                    'updatedAt',
                    'createdBy',
                    'price',
                    'totalValue',
                    'totalValue2',
                ]);
                // Columns will always have a first row
                columnHeaders = new shared_3.DibArrayList({ "1": new shared_3.DibArray([]) });
                showSearchDefault = false;
                showSearch = this.showSearchDefault;
                constructor(injector, httpClient, ref, crudService, viewContainerRef, sd, cd, formBuilder) {
                    super(injector, viewContainerRef);
                    this.httpClient = httpClient;
                    this.ref = ref;
                    this.crudService = crudService;
                    this.sd = sd;
                    this.cd = cd;
                    this.formBuilder = formBuilder;
                    const currentGlobalTheme = this.themeService.getCurrentTheme();
                    if (currentGlobalTheme === null) {
                        this.setActiveTheme('deeppurple-amber', false);
                    }
                    else {
                        this.setActiveTheme(currentGlobalTheme.name, currentGlobalTheme.darkness);
                    }
                    //Define the lists
                    this.lists.list8460 = new shared_3.DibEnumList(this.translationService, this.eventService, 'product_category', ['Food', 'Clothes', 'Medicine', 'Household'], true);
                }
                ngOnInit() {
                    this.model = new shared_3.DibContainerModel(this.injector, 'products');
                    this.containerName = 'products'; // Need to add a shortcut to get the containerName
                    this.model.modelItems = {
                        id: {
                            itemId: 8458,
                            type: 'number',
                            fieldAlias: 'id',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [
                                    forms_2.Validators.required
                                ],
                                updateOn: 'blur'
                            }),
                            create: false,
                            update: false,
                            required: true,
                            // service: null,
                            itemAlias: 'id',
                            default: '',
                            dataType: 'number',
                            contentType: 'integer',
                            changeUrl: false
                        },
                        product_name: {
                            itemId: 8459,
                            type: 'text',
                            fieldAlias: 'product_name',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [
                                    forms_2.Validators.required,
                                    forms_2.Validators.maxLength(255)
                                ],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: true,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        product_category: {
                            itemId: 8460,
                            type: 'text',
                            fieldAlias: 'product_category',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [
                                    forms_2.Validators.required,
                                    forms_2.Validators.maxLength(255)
                                ],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: true,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false,
                            enum: ['Food', 'Clothes', 'Medicine', 'Household']
                        },
                        product_quantity: {
                            itemId: 8461,
                            type: 'number',
                            fieldAlias: 'product_quantity',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [
                                    forms_2.Validators.required
                                ],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: true,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'number',
                            contentType: 'integer',
                            changeUrl: false
                        },
                        createdAt: {
                            itemId: 8462,
                            type: 'datetime',
                            fieldAlias: 'createdAt',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [
                                    forms_2.Validators.required
                                ],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: true,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'datetime',
                            contentType: 'datetime',
                            changeUrl: false
                        },
                        updatedAt: {
                            itemId: 8463,
                            type: 'datetime',
                            fieldAlias: 'updatedAt',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [
                                    forms_2.Validators.required
                                ],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: true,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'datetime',
                            contentType: 'datetime',
                            changeUrl: false
                        },
                        createdBy: {
                            itemId: 8464,
                            type: 'number',
                            fieldAlias: 'createdBy',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [
                                    forms_2.Validators.required
                                ],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: true,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'number',
                            contentType: 'integer',
                            changeUrl: false
                        },
                        price: {
                            itemId: 8607,
                            type: 'number',
                            fieldAlias: 'price',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '0',
                            dataType: 'number',
                            contentType: 'integer',
                            changeUrl: false
                        },
                        totalValue: {
                            itemId: 8610,
                            type: 'text',
                            fieldAlias: 'totalValue',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                        totalValue2: {
                            itemId: 8611,
                            type: 'text',
                            fieldAlias: 'totalValue2',
                            formControl: new forms_2.FormControl({ value: '', disabled: false }, {
                                validators: [],
                                updateOn: 'blur'
                            }),
                            create: true,
                            update: true,
                            required: false,
                            // service: null,
                            itemAlias: null,
                            default: '',
                            dataType: 'text',
                            contentType: 'text',
                            changeUrl: false
                        },
                    };
                    this.model.$formGroup.addControl('id', this.model.modelItems.id.formControl);
                    this.model.$formGroup.addControl('product_name', this.model.modelItems.product_name.formControl);
                    this.model.$formGroup.addControl('product_category', this.model.modelItems.product_category.formControl);
                    this.model.$formGroup.addControl('product_quantity', this.model.modelItems.product_quantity.formControl);
                    this.model.$formGroup.addControl('createdAt', this.model.modelItems.createdAt.formControl);
                    this.model.$formGroup.addControl('updatedAt', this.model.modelItems.updatedAt.formControl);
                    this.model.$formGroup.addControl('createdBy', this.model.modelItems.createdBy.formControl);
                    this.model.$formGroup.addControl('price', this.model.modelItems.price.formControl);
                    this.model.$formGroup.addControl('totalValue', this.model.modelItems.totalValue.formControl);
                    this.model.$formGroup.addControl('totalValue2', this.model.modelItems.totalValue2.formControl);
                    this.model.$formGroup.valueChanges
                        .pipe(operators_1.takeUntil(this.onDestroy))
                        .subscribe(change => {
                        //--dib-controller-action--modelChange--
                        this.actionService.handle(this.containerActionReference(), 'products', 'modelChange');
                    });
                    super.ngOnInit();
                    this.initClientDataChangeListeners();
                    this.updateClientData();
                    this.actionService.enqueueAction({
                        thisArg: this,
                        containerPortId: this.containerActionReference(),
                        actionId: "products",
                        actionType: "after readmany",
                        responseType: 'actions',
                        submitUrl: "/dropins/setNgxMaterial/warehouse/Test/afterReadMany",
                        itemAlias: "",
                        waitForCompletion: false,
                        containerName: "products",
                        handlers: [
                        // Need to get a port if available then navigate to the port -- @Cobus tested
                        ]
                    }, this.clientData, {
                        containerEventId: '23'
                    });
                    this.actionService.enqueueAction({
                        thisArg: this,
                        containerPortId: this.containerActionReference(),
                        actionId: "products",
                        actionType: "onSubmit",
                        responseType: 'actions',
                        submitUrl: null,
                        itemAlias: "",
                        waitForCompletion: false,
                        containerName: "products",
                        handlers: [
                            // Need to get a port if available then navigate to the port -- @Cobus tested
                            () => new Promise((resolve, reject) => {
                                // Need to check if the item refresh alias is linked to a dropdown then create handler
                                // Need to check if the item refresh alias is linked to a non dropdown, then find the subcontainer to be reloaded, and add them to the handlers.        
                                // reload first level container // find all containers
                                // Find the container by the refresh item id
                                this.containerService.bufferContainerReloading.next({
                                    port: '8405',
                                    containerName: 'warehouse'
                                });
                                return resolve();
                            }),
                        ]
                    }, this.clientData, {
                        containerEventId: '9a6bf0377a884f1eb2074ad8ae5f71cf-dib'
                    });
                    this.actionService.enqueueAction({
                        thisArg: this,
                        containerPortId: this.containerActionReference(),
                        actionId: "useBtn",
                        actionType: "click",
                        responseType: 'actions',
                        submitUrl: "/dropins/setNgxMaterial/warehouse/Products/useStock?productId=@{actionData.id}",
                        itemAlias: "useBtn",
                        waitForCompletion: false,
                        containerName: "products",
                        continue() {
                            // Need to check if we need to save the contents of the if the confirmation message was true 
                            // @TODO if(fld(save_before_action)<>0,true,false) 
                            return this.messagingService.confirm({
                                message: this.translate('products.useBtn.click', `Are you sure?`),
                                okText: this.translate('products.useBtn.click.okText', `Yes`),
                                cancelText: this.translate('products.useBtn.click.cancelText', `Cancel`)
                            });
                        },
                        handlers: [
                        // Need to get a port if available then navigate to the port -- @Cobus tested
                        ]
                    }, this.clientData, {
                        itemEventId: '9b8a3750709c4559a962cf7a90cadd72-dib', itemId: '8601',
                    });
                    let lists = {};
                    let self = this;
                    //Defining the list item services
                    lists = this.lists;
                    //--dib-controller-action--onInit--
                    this.actionService.handle(this.containerActionReference(), 'products', 'onInit');
                    this.tableDataSource.data = [];
                    // Register all the clientData for this container
                    this.resetPage();
                    this.gridForm = this.formBuilder.group({
                        gridRows: this.formBuilder.array([])
                    });
                    this.setupSubmit();
                    this.setupGridSearchAll();
                    this.selection.changed.pipe().subscribe(c => {
                        this.updateSelectionClientData(c);
                        if (this.gridShowDuplicatesInClipboard) {
                            this.selectionDataSource.data = c.source.selected;
                        }
                        else {
                            this.selectionDataSource.data = this.selectedDataNotInPage(c.source.selected);
                        }
                    });
                    this.columnHeaders.addArray('1', new shared_3.DibArray(['hdrActions', 'product_name', 'product_category', 'product_quantity', 'createdAt', 'updatedAt', 'createdBy', 'price', 'totalValue', 'totalValue2']));
                }
                ngAfterViewInit() {
                    super.ngAfterViewInit();
                    window.dispatchEvent(new Event('resize'));
                    //--dib-controller-action--afterViewInit--
                    this.actionService.handle(this.containerActionReference(), 'products', 'afterViewInit');
                    this.setupService();
                    this.setupDelete();
                    this.reloadContainer();
                    this.clientData.selected_self = null;
                    this.updateSearchFromUrl();
                }
                toggleExcelEditing() {
                    this.excelEditing = !this.excelEditing;
                    this.editorOpen = true;
                    if (this.excelEditing) {
                        this.editorOpen = false;
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (this.gridExcelEditingAutoSave && control.get('__new').value !== true) {
                                control.valueChanges.pipe(operators_1.takeWhile(() => this.excelEditing)).subscribe((row, x) => {
                                    // Check all dropdowns before submitting the change event
                                    if (control.pristine == false) {
                                        this.submit$.next(control);
                                    }
                                });
                            }
                        });
                    }
                    else {
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            control.get('__edit').setValue(false);
                        });
                    }
                }
                editRow(row) {
                    if (this.gridExcelEditingEnabled || row.get('__edit').value == true) {
                        this.submit$.next(row);
                        this.editorOpen = false;
                    }
                    else {
                        //Only edit one row at a stage
                        this.gridForm.controls.gridRows.controls.forEach((control) => {
                            if (control.get('__edit').value == true) {
                                this.submit$.next(control);
                            }
                        });
                        this.editorOpen = true;
                        row.get('__edit').setValue(!row.get('__edit').value);
                    }
                }
                checkIfNewRecord() {
                    let newRecord = true;
                    if (!(this.gridData.length == 0 || this.gridData[0].__new !== true)) {
                        newRecord = false;
                        this.gridData.shift();
                    }
                    return newRecord;
                }
                inlineAddNewRow() {
                    const newRecord = this.checkIfNewRecord();
                    // If this is not a new record then close the new record
                    if (!newRecord) {
                        this.addDataToGrid(false, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    // If this is a new record and there is nothing selected we will create a blank record by default
                    if (this.selection.selected.length == 0) {
                        this.addDataToGrid(newRecord, false);
                        this.handleSelectionOnPage();
                        return;
                    }
                    // If this is a new record and there is nothing selected we will create a blank record by default
                    this.messagingService.confirm({
                        title: this.translationService.translate('grid.duplicateSelected.title', 'Duplicate selected record'),
                        message: this.translationService.translate('grid.duplicateSelected.message', `Use the selected records content for your new entry?`),
                        okText: this.translationService.translate('grid.duplicateSelected.okText', 'Use selected record'),
                        cancelText: this.translationService.translate('grid.duplicateSelected.cancelText', 'Create blank')
                    }).then((result) => {
                        this.addDataToGrid(true, result);
                    });
                }
                setupSubmit() {
                    this.submit$ = new rxjs_1.Subject();
                    var self = this;
                    this.submit$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((formGroup) => {
                        self.editFormGroup = formGroup;
                        //--dib-controller-action--beforeSubmit--
                        this.actionService.handle(this.containerActionReference(), 'products', 'beforeSubmit');
                        this.busy = true;
                        return formGroup;
                    }), operators_1.switchMap(() => {
                        let primaryKeys = {};
                        this.view.primaryKeys.forEach((key) => {
                            primaryKeys[key] = self.editFormGroup.get(key).value;
                        });
                        return this.crudService.update(this.model.crudUrl, this.view.container.name, {
                            primaryKeys: self.editFormGroup.value.__new == true ? null : primaryKeys,
                            clientData: this.clientData,
                            activeFilter: this.view.container.activeFilter,
                            model: this.model,
                            formGroup: self.editFormGroup,
                        });
                    }), operators_1.tap(response => {
                        if (response.message == "No changes were made to existing database values.") {
                            this.busy = false;
                            self.editFormGroup.get('__edit').setValue(false);
                            self.editFormGroup.markAsPristine();
                            this.model.$formGroup.markAsPristine();
                        }
                        if (response.success == false) {
                            this.busy = false;
                            this.editorOpen = true;
                        }
                        if (response.success) {
                            this.busy = false;
                            self.editFormGroup.markAsPristine();
                            if (self.editFormGroup.value.__new == true) {
                                self.editFormGroup.controls.__new.setValue(false);
                                Object.keys(response.records).forEach((key) => {
                                    if (!!self.editFormGroup.controls[key] == true) {
                                        self.editFormGroup.controls[key].setValue(response.records[key]);
                                    }
                                });
                                Object.keys(self.editFormGroup.controls).forEach((key) => {
                                    if (typeof self.editFormGroup.controls[key].value == 'object') {
                                        if (!!self.editFormGroup.controls[key].value.id == true) {
                                            this.gridData[0][key] = self.editFormGroup.controls[key].value.id;
                                            this.gridData[0][`${key}_display_value`] = self.editFormGroup.controls[key].value.id_display_value;
                                        }
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                    else {
                                        this.gridData[0][key] = self.editFormGroup.controls[key].value;
                                    }
                                });
                                this.gridData[0].__new = false;
                                // After the record is saved we need to subscribe to the valueChanges
                                if (this.gridExcelEditingAutoSave) {
                                    this.excelEditing = false;
                                    this.toggleExcelEditing();
                                }
                            }
                            self.editFormGroup.get('__edit').setValue(!self.editFormGroup.get('__edit').value);
                            if (this.view.recordStatus == 'create') {
                                //--dib-controller-action--create--
                                this.actionService.handle(this.containerActionReference(), 'products', 'create');
                            }
                            else {
                                //--dib-controller-action--update--
                                this.actionService.handle(this.containerActionReference(), 'products', 'update');
                            }
                            this.model.$formGroup.markAsPristine();
                            //--dib-controller-action--onSubmit--
                            this.actionService.handle(this.containerActionReference(), 'products', 'onSubmit');
                        }
                        else {
                            //--dib-controller-action--onSubmitFailed--
                            this.actionService.handle(this.containerActionReference(), 'products', 'onSubmitFailed');
                            if (this.view.recordStatus == 'create') {
                                //--dib-controller-action--createFailed--
                                this.actionService.handle(this.containerActionReference(), 'products', 'createFailed');
                            }
                            else {
                                //--dib-controller-action--updateFailed--
                                this.actionService.handle(this.containerActionReference(), 'products', 'updateFailed');
                            }
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                rowClick(row, e) {
                    // Preventing items clicked 
                    if (!!e.srcElement.firstChild && !!e.srcElement.firstChild.attributes && !!e.srcElement.firstChild.attributes.type && e.srcElement.firstChild.attributes.type.value == 'checkbox') {
                        return;
                    }
                    if (e.srcElement && ["button", "a", "mat-icon", "dib-icon"].includes(e.srcElement.tagName.toLocaleLowerCase())) {
                        return;
                    }
                    if (this.gridRowClickChangesSelection)
                        this.selection.toggle(row);
                    if (this.gridClickedLastNullable && !!this.clickedLast && this.compareRows(row, this.clickedLast)) {
                        this.clickedLast = null;
                    }
                    else {
                        this.clickedLast = row;
                    }
                    // this.allClientData.alias.clickedLast = this.clickedLast;
                    let lastClickedRawValue = this.clickedLast.getRawValue();
                    // Build up only items vir itemAlias
                    if (this.clickedLast !== null) {
                        let lastClickValue = {};
                        Object.keys(this.model.modelItems).forEach(key => {
                            if (!!this.model.modelItems[key].itemAlias == true) {
                                lastClickValue[key] = lastClickedRawValue[key];
                            }
                        });
                        this.clientData.clickedLast_self = lastClickValue;
                    }
                    else {
                        this.clientData.clickedLast_self = null;
                    }
                    this.eventService.emit({ name: `clickedLast_products`, value: this.clientData.clickedLast_self });
                    //--dib-controller-action--rowClick--
                    this.actionService.handle(this.containerActionReference(), 'products', 'rowClick');
                }
                updateSelectionClientData(selectionChange) {
                    const { selected } = selectionChange.source || [];
                    const firstSelection = selected.length != 0 ? selected[0].getRawValue() : {};
                    //--dib-controller-action--rowsDeselected--
                    this.actionService.handle(this.containerActionReference(), 'products', 'rowsDeselected');
                    //--dib-controller-action--rowsSelected--
                    this.actionService.handle(this.containerActionReference(), 'products', 'rowsSelected');
                    // if none is selected
                    if (!selected[0]) {
                        this.clientData.selected_self = null;
                        //--dib-clientData-options--selected--
                        this.eventService.emit({ name: `selected_products`, value: this.clientData.selected_self });
                        return;
                    }
                    let cdSelected = this.gridMultiselect ? selected.map(s => {
                        let res = {};
                        this.view.primaryKeys.forEach((key) => {
                            if (!!s.getRawValue()[key]) {
                                res[key] = s.getRawValue()[key];
                            }
                        });
                        return res;
                    }) : this.view.primaryKeys.reduce((res, key) => ({ ...res, [key]: firstSelection[key] }), {});
                    // Ensure that we have selected row info when the primary info is not present in the grid
                    if (Object.keys(cdSelected).length == 0) {
                        cdSelected = selected;
                    }
                    this.clientData.selected_self = cdSelected;
                    this.eventService.emit({ name: `selected_products`, value: cdSelected });
                }
                deleteSelected() {
                    if (this.clientData.selected_self == null) {
                        this.messagingService.alert({
                            title: 'No records selected',
                            message: 'Please select a record and try again.',
                            okText: 'Okay'
                        });
                        return;
                    }
                    if (Object.keys(this.clientData.selected_self).length == 0) {
                        this.messagingService.alert({
                            title: 'No records selected',
                            message: 'Please select a record and try again.',
                            okText: 'Okay'
                        });
                        return;
                    }
                    this.messagingService.confirm({
                        title: 'Delete Selected Record',
                        message: 'Are you sure you want to delete?',
                        okText: 'Yes',
                        cancelText: 'Cancel'
                    }).then(result => {
                        if (result !== false) {
                            this.delete$.next(null);
                        }
                    });
                }
                setupDelete() {
                    this.delete$ = new rxjs_1.Subject();
                    this.delete$.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap(() => {
                        //--dib-controller-action--beforeDelete--
                        this.actionService.handle(this.containerActionReference(), 'products', 'beforeDelete');
                        this.busy = true;
                    }), operators_1.switchMap(() => {
                        let primaryKeys = {};
                        this.view.primaryKeys.forEach(key => {
                            if (this.clientData.selected_self[key] !== undefined) {
                                primaryKeys[key] = this.clientData.selected_self[key];
                            }
                        });
                        return this.crudService.delete(this.model.crudUrl, this.view.container.name, {
                            primaryKeys: primaryKeys,
                            clientData: this.clientData,
                            activeFilter: this.view.container.activeFilter,
                        })
                            .pipe(operators_1.finalize(() => this.busy = false));
                    }), operators_1.tap(response => {
                        if (response.success) {
                            this.clearSelection();
                            this.clearClientDataSelection();
                            this.reloadContainer();
                            //--dib-controller-action--delete--
                            this.actionService.handle(this.containerActionReference(), 'products', 'delete');
                        }
                    })).subscribe();
                }
                setupService() {
                    this.sort.sortChange.pipe(operators_1.takeUntil(this.onDestroy), operators_1.tap((sort) => {
                        this.page$.next(this.page);
                    })).subscribe();
                    this.page$.pipe(operators_1.tap(page => {
                        this.page = page;
                        this.busy = true;
                    }), operators_1.takeUntil(this.onDestroy), operators_1.tap(page => {
                        //--dib-controller-action--beforeLoad--
                        this.actionService.handle(this.containerActionReference(), 'products', 'beforeLoad');
                        // Clear selected items
                        this.clearClientDataSelection();
                        if (this.showSearch) {
                            this.clientData.gridFilter_self = this.allClientData.gridFilter;
                            this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: this.clientData.gridFilter_self });
                        }
                        else {
                            delete this.clientData.gridFilter_self;
                            this.eventService.emit({ name: `gridFilter_${this.view.container.name}`, value: null });
                        }
                    }), operators_1.switchMap((page) => {
                        const sort = this.sort.direction == '' ? [] : [{ "property": this.sort.active, "direction": this.sort.direction.toUpperCase() }];
                        return this.crudService.list(this.model.crudUrl, this.view.container.name, {
                            page: { number: page.pageIndex + 1, limit: page.pageSize },
                            searchText: null,
                            sort: sort,
                            filter: this.filter,
                            clientData: this.clientData,
                            activeFilter: this.view.container.activeFilter
                        }).pipe(operators_1.catchError((err) => {
                            this.busy = false;
                            return rxjs_1.of({ success: false, message: `${err}` });
                        }));
                    }), operators_1.tap((response) => {
                        this.busy = false;
                        window.dispatchEvent(new Event('resize'));
                        if (response.success) {
                            this.tableDataSource.data = [];
                            this.gridData = response.records;
                            if (!!this.gridData === true) {
                                this.addDataToGrid(false, false);
                                this.page.length = Math.ceil(response.filtertotal / this.page.pageSize);
                                this.page.records = response.filtertotal;
                                this.page.totalRecords = response.total;
                                this.page.fromRecord = this.page.pageIndex == 0 ? 1 : (this.page.pageIndex) * this.page.pageSize;
                                this.page.toRecord = this.page.fromRecord == 1 ? this.page.fromRecord + this.tableDataSource.data.length - 1 : this.page.fromRecord + this.tableDataSource.data.length;
                                if (this.page.toRecord > this.page.totalRecords) {
                                    this.page.toRecord = this.page.totalRecords;
                                    this.page.allRecords = true;
                                }
                            }
                            this.handleSelectionOnPage();
                            //--dib-controller-action--load--
                            this.actionService.handle(this.containerActionReference(), 'products', 'load');
                            this.reloadSubcontainers();
                        }
                    }), operators_1.finalize(() => this.busy = false)).subscribe();
                }
                async addDataToGrid(addRow = false, duplicate = false) {
                    const formDefaults = {};
                    let formDefaultsConfigs = {};
                    // Getting defaults for all columns 
                    formDefaultsConfigs['id'] = { contentType: "integer", type: "none", defaultValue: "", listId: 8458 };
                    formDefaultsConfigs['product_name'] = { contentType: "text", type: "none", defaultValue: "", listId: 8459 };
                    formDefaultsConfigs['product_category'] = { contentType: "text", type: "none", defaultValue: "", listId: 8460 };
                    formDefaultsConfigs['product_quantity'] = { contentType: "integer", type: "none", defaultValue: "", listId: 8461 };
                    formDefaultsConfigs['createdAt'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 8462 };
                    formDefaultsConfigs['updatedAt'] = { contentType: "datetime", type: "none", defaultValue: "", listId: 8463 };
                    formDefaultsConfigs['createdBy'] = { contentType: "integer", type: "none", defaultValue: "", listId: 8464 };
                    formDefaultsConfigs['price'] = { contentType: "integer", type: "none", defaultValue: "0", listId: 8607 };
                    formDefaultsConfigs['totalValue'] = { contentType: "text", type: "none", defaultValue: "", listId: 8610 };
                    formDefaultsConfigs['totalValue2'] = { contentType: "text", type: "none", defaultValue: "", listId: 8611 };
                    if (addRow) {
                        this.gridData.reverse();
                        let newRecord = { "__new": true };
                        // Crud call to get server defaults 
                        if (this.canCreate) {
                            try {
                                let result = await this.crudService.defaults(this.model.crudUrl, this.view.container.name, {
                                    primaryKeys: null,
                                    clientData: this.clientData,
                                    activeFilter: this.view.container.activeFilter,
                                    canCreate: this.canCreate
                                }).pipe(operators_1.catchError((err) => {
                                    this.busy = false;
                                    return rxjs_1.of({ success: false, message: `${err}` });
                                }), operators_1.finalize(() => { })).toPromise();
                                Object.keys(formDefaultsConfigs).forEach((key) => {
                                    if (!!result.records[key] && !!formDefaultsConfigs[key]) {
                                        formDefaultsConfigs[key].defaultValue = result.records[key];
                                    }
                                });
                                await Promise.all(Object.keys(formDefaultsConfigs).map(async (key) => {
                                    const value = await this.findDefaultValue(formDefaultsConfigs[key]);
                                    formDefaults[key] = value;
                                }));
                            }
                            catch (error) {
                                // Handle error
                            }
                        }
                        // Merge server default with client defaults
                        if (duplicate && this.selection.selected.length > 0) {
                            const currentSelected = this.selection.selected[0].value;
                            Object.keys(currentSelected).forEach((key) => {
                                let dataType = 'string';
                                if (key.indexOf("__") !== 0) {
                                    if (!!this.model.modelItems[key]) {
                                        dataType = this.model.modelItems[key].type;
                                    }
                                    //@todo multisect items
                                    if (dataType == 'select') {
                                        newRecord[key] = !!currentSelected[key] == true ? currentSelected[key].id : null;
                                        newRecord[`${key}_display_value`] = !!currentSelected[key] == true ? currentSelected[key].id_display_value : '';
                                    }
                                    else if (dataType == 'boolean') {
                                        newRecord[key] = !!currentSelected[key] == true ? 1 : 0;
                                    }
                                    else {
                                        newRecord[key] = currentSelected[key];
                                    }
                                }
                            });
                            this.handleSelectionOnPage();
                            //   this.selection.selected[0].value
                        }
                        this.gridData.push(newRecord);
                        this.editorOpen = true;
                        this.gridData.reverse();
                    }
                    this.excelEditing = false;
                    this.busy = true;
                    this.gridForm = this.formBuilder.group({
                        gridRows: this.formBuilder.array(this.gridData.map((row) => {
                            const rowFormGroup = this.formBuilder.group({
                                __edit: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false),
                                __new: (row.__new == true) ? new forms_2.FormControl(true) : new forms_2.FormControl(false),
                                id: new forms_2.FormControl(this.calculateInitialColumnValue(row, "id", "none", true, formDefaults['id'], 8458, "number"), {
                                    validators: [
                                        forms_2.Validators.required
                                    ],
                                    updateOn: 'blur'
                                }),
                                product_name: new forms_2.FormControl(this.calculateInitialColumnValue(row, "product_name", "none", false, formDefaults['product_name'], 8459, "text"), {
                                    validators: [
                                        forms_2.Validators.required,
                                        forms_2.Validators.maxLength(255)
                                    ],
                                    updateOn: 'blur'
                                }),
                                product_category: new forms_2.FormControl(this.calculateInitialColumnValue(row, "product_category", "none", false, formDefaults['product_category'], 8460, "text"), {
                                    validators: [
                                        forms_2.Validators.required,
                                        forms_2.Validators.maxLength(255)
                                    ],
                                    updateOn: 'blur'
                                }),
                                product_quantity: new forms_2.FormControl(this.calculateInitialColumnValue(row, "product_quantity", "none", false, formDefaults['product_quantity'], 8461, "number"), {
                                    validators: [
                                        forms_2.Validators.required
                                    ],
                                    updateOn: 'blur'
                                }),
                                createdAt: new forms_2.FormControl(this.calculateInitialColumnValue(row, "createdAt", "none", false, formDefaults['createdAt'], 8462, "datetime"), {
                                    validators: [
                                        forms_2.Validators.required
                                    ],
                                    updateOn: 'blur'
                                }),
                                updatedAt: new forms_2.FormControl(this.calculateInitialColumnValue(row, "updatedAt", "none", false, formDefaults['updatedAt'], 8463, "datetime"), {
                                    validators: [
                                        forms_2.Validators.required
                                    ],
                                    updateOn: 'blur'
                                }),
                                createdBy: new forms_2.FormControl(this.calculateInitialColumnValue(row, "createdBy", "none", false, formDefaults['createdBy'], 8464, "number"), {
                                    validators: [
                                        forms_2.Validators.required
                                    ],
                                    updateOn: 'blur'
                                }),
                                price: new forms_2.FormControl(this.calculateInitialColumnValue(row, "price", "none", false, formDefaults['price'], 8607, "number"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                totalValue: new forms_2.FormControl(this.calculateInitialColumnValue(row, "totalValue", "none", false, formDefaults['totalValue'], 8610, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                                totalValue2: new forms_2.FormControl(this.calculateInitialColumnValue(row, "totalValue2", "none", false, formDefaults['totalValue2'], 8611, "text"), {
                                    validators: [],
                                    updateOn: 'blur'
                                }),
                            });
                            return rowFormGroup;
                        }))
                    });
                    const gridFormControls = this.gridForm.get('gridRows').controls;
                    gridFormControls.forEach((formGroup) => {
                    });
                    // Defaults :) 
                    this.tableDataSource = new table_1.MatTableDataSource(this.gridForm.get('gridRows').controls);
                    this.busy = false;
                    this.tableDataSource
                        .connect().pipe(operators_1.takeWhile(() => !this.busy), operators_1.tap(_ => {
                        const selected = this.selection.selected;
                        this.selection._emitChanges = false;
                        this.selection.deselect(...this.selection.selected.filter(s => !!this.tableDataSource.data.find(d => this.compareRows(s, d))));
                        this.selection.select(...this.tableDataSource.data.filter(d => !!selected.find(s => this.compareRows(s, d))));
                        this.selection._emitChanges = true;
                        // Enabling excel editing if the setting was turned on the grid
                        if (this.gridExcelEditingEnabled == true) {
                            this.toggleExcelEditing();
                        }
                    }))
                        .subscribe();
                    if (this.gridShowDuplicatesInClipboard) {
                        this.selectionDataSource.data = this.selection.selected;
                    }
                    else {
                        this.selectionDataSource.data = this.selectedDataNotInPage(this.selection.selected);
                    }
                }
                ngOnDestroy() {
                    //--dib-controller-action--onDestroy--
                    this.actionService.handle(this.containerActionReference(), 'products', 'onDestroy');
                    super.ngOnDestroy();
                    if (this.model !== undefined) {
                        this.model.destroy();
                    }
                    this.lists.list8460.dispose();
                    this.actionService.dequeueActionsForContainer(this.containerActionReference());
                }
                onSubmit() {
                }
                reloadContainer(reloadOptions) {
                    super.reloadContainer(reloadOptions);
                    if (!this.canReloadContainer(reloadOptions)) {
                        this.reloadSubcontainers();
                        return;
                    }
                    //--dib-controller-action--reloadContainer--
                    this.actionService.handle(this.containerActionReference(), 'products', 'reloadContainer');
                    const self = this;
                    this.model.updateFormDefaults(this, (columnName) => {
                        // To accomodate for columnHeaders in grids @todo probably need to execute updateFromDefault from all container instead of a general one
                        if (self.columnsToDisplay !== undefined && self.columnsToDisplay.get().indexOf(columnName) !== -1) {
                            return true;
                        }
                        return false;
                    });
                    if (!!this.view.container.activeFilter === true) {
                        this.clientData.activeFilter_self = this.view.container.activeFilter;
                    }
                    this.portService.setUrlDefaults(true, this);
                    this.eventService.emit({
                        name: 'onReloadproducts',
                        value: this
                    });
                    this.eventService.emit({
                        name: 'OnReloadContainer',
                        value: 'products'
                    });
                    this.resetPage();
                    this.applySearchFromUrl();
                    this.page$.next(this.page);
                }
                resetPage() {
                    this.page = {
                        number: 1,
                        length: 0,
                        pageSize: 20,
                        pageIndex: 0,
                        lastLoad: 1,
                        totalRecords: 0,
                        allRecords: false
                    };
                    this.page.allRecords = false;
                    if (!this.gridPersistSelection) {
                        this.selection.clear();
                    }
                    if (!!this.paginator) {
                        // reload translations
                        this.paginator._intl.itemsPerPageLabel = '';
                        this.paginator.pageSize = this.page.pageSize;
                        this.paginator.firstPage();
                    }
                }
                static ɵfac = function productsComponent_Factory(t) { return new (t || productsComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FormBuilder)); };
                static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: productsComponent, selectors: [["products"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 85, vars: 46, consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "stretch", 3, "formGroup", "ngClass", "ngSubmit"], [2, "display", "flex", "flex-direction", "column", "align-items", "stretch"], ["id", "ci8418", "dibComponent", "row", "dib-inject-content", "replace", 2, "padding", "5px 10px 6px !important", "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px 10px", "flex-wrap", "wrap", "align-content", "flex-start", "flex", "1 1 0%"], [3, "dibPort"], ["mat-mini-fab", "", "color", "accent", "id", "ci8465", "dibComponent", "btnAdd", "aria-label", "Add new record using Form", "matTooltipClass", "dib-tooltip", "type", "button", 2, "margin", "0px 5px !important", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/dibAdmin/images/btn_add.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci8419", "dibComponent", "btnGridDelete", "aria-label", "Delete selected record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci8420", "dibComponent", "btnReload", "aria-label", "Reload Record(s)", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"], ["mat-mini-fab", "", "color", "accent", "id", "ci8457", "dibComponent", "btnAuditTrail", "aria-label", "View audit trail of changes", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"], ["id", "ci8426", "dibComponent", "span", 2, "width", "150px !important", 3, "innerHtml"], ["mat-mini-fab", "", "color", "primary", "id", "ci8424", "dibComponent", "btnFilterOpen", "aria-label", "Display headers for filtering records", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/search.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci8422", "dibComponent", "btnFilterApply", "style", "  ", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["mat-mini-fab", "", "color", "primary", "id", "ci8423", "dibComponent", "btnFilterClear", "style", "  ", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click", 4, "ngIf"], ["id", "ci8421", "dibComponent", "spacer", 2, "flex", "1 1 0%"], ["class", "dib-grid-totals", "id", "ci8425", "dibComponent", "gridTotals", "style", "  display:flex; flex-direction: row;  flex-wrap: nowrap;  ", 4, "ngIf"], ["id", "ci8427", "dibComponent", "card", 2, "flex", "1 1 0%"], [2, "display", "flex", "flex-direction", "column", "flex-wrap", "nowrap"], ["fill-height", "", "debounceTime", "300", 3, "additionalSpace", "footerElement"], ["gridScroll", ""], ["autocomplete", "off", 3, "formGroup"], ["formArrayName", "gridRows"], ["mat-table", "", "matSort", "", 1, "dib-inline-editing", 3, "dataSource"], ["matColumnDef", "_select"], ["mat-header-cell", "", "style", "width:80px", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "hdrActions"], ["mat-cell", "", "style", "padding: 2px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; ", 4, "matHeaderCellDef"], ["matColumnDef", "btnGridEdit"], ["matColumnDef", "id"], ["matColumnDef", "product_name"], ["matColumnDef", "product_category"], ["matColumnDef", "product_quantity"], ["matColumnDef", "createdAt"], ["matColumnDef", "updatedAt"], ["matColumnDef", "createdBy"], ["matColumnDef", "useBtn"], ["matColumnDef", "price"], ["matColumnDef", "totalValue"], ["mat-cell", "", "style", "padding: 2px; width:120px; ", 3, "formGroup", 4, "matCellDef"], ["mat-header-cell", "", "style", "padding:2px; text-align:left; vertical-align:top; width:120px; ", 4, "matHeaderCellDef"], ["matColumnDef", "totalValue2"], ["matColumnDef", "_dibBusy"], ["mat-header-cell", "", "style", "height:4px", 4, "matHeaderCellDef"], ["matColumnDef", "_dibNoRecords"], ["mat-header-cell", "", "class", "dib-no-records-found", 4, "matHeaderCellDef"], [4, "ngFor", "ngForOf"], ["mat-header-row", "", "class", "dib-grid-loader", 3, "ngStyle", 4, "matHeaderRowDef"], ["mat-row", "", 3, "formGroup", "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["footerproducts", ""], ["_selectedTable", ""], ["mat-mini-fab", "", "color", "primary", "id", "ci8422", "dibComponent", "btnFilterApply", "aria-label", "Apply filter criteria specified in column headers", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"], ["mat-mini-fab", "", "color", "primary", "id", "ci8423", "dibComponent", "btnFilterClear", "aria-label", "Show all records and clear filter criteria", "matTooltipClass", "dib-tooltip", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"], ["id", "ci8425", "dibComponent", "gridTotals", 1, "dib-grid-totals", 2, "display", "flex", "flex-direction", "row", "flex-wrap", "nowrap"], ["mat-header-cell", "", 2, "width", "80px"], ["color", "primary", 3, "checked", "indeterminate", "click"], ["mat-cell", ""], ["color", "primary", 3, "checked", "click", "change"], ["mat-cell", "", 2, "padding", "2px", 3, "formGroup"], ["dibComponent", "columnHeader", 2, "display", "flex", "flex-direction", "row", "justify-content", "flex-start", "align-items", "center", "gap", "10px", "flex-wrap", "nowrap", "align-content", "flex-start", "flex", "1 1 0%"], ["mat-mini-fab", "", "color", "primary", "id", "ci8430", "dibComponent", "btnGridEdit", "aria-label", "View/edit this record", "matTooltipClass", "dib-tooltip", "ng-click", "editRow()", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], ["src", "edit"], ["mat-mini-fab", "", "color", "primary", "id", "ci8601", "dibComponent", "button", "dibListeners", "", "eventList", "\n click ", "actionId", "useBtn", "type", "button", 3, "actionData", "containerPortId"], ["src", "cloud_download"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "btnGridEdit", "aria-label", "View/edit this record", "matTooltipClass", "dib-tooltip", "ng-click", "editRow()", "type", "button", 3, "matTooltip", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipPosition", "click"], [2, "display", "flex", "flex-direction", "row", "justify-content", "space-between", "align-items", "stretch"], [1, "dib-cell"], ["style", "flex: 1 1 0%", 4, "ngIf"], [2, "flex", "1 1 0%"], ["dibComponent", "inputNumber", "item-alias", "id", 3, "hidden"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id"], ["class", "dib_form_input_done", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "dib_form_input_done_all", "matSuffix", "", 4, "ngIf"], ["class", "dib_form_input_priority_high", "matSuffix", "", 4, "ngIf"], ["matSuffix", "", 1, "dib_form_input_done", 3, "click"], ["matSuffix", "", 1, "dib_form_input_done_all"], ["matSuffix", "", 1, "dib_form_input_priority_high"], [1, "dibGridSearch", 2, "display", "flex", "flex-direction", "column"], ["mat-sort-header", "", 4, "ngIf"], ["mat-sort-header", "", "class", "dibGridSearchTitle", 4, "ngIf"], ["class", "dibGridSearchInput", "dib-edit", "", 3, "formGroup", 4, "ngIf"], ["mat-sort-header", ""], ["class", "required-column", 4, "ngIf"], [1, "required-column"], ["mat-sort-header", "", 1, "dibGridSearchTitle"], ["dib-edit", "", 1, "dibGridSearchInput", 3, "formGroup"], ["id", "ci8458", "dibComponent", "inputText", "item-alias", "id", 3, "hidden"], ["matInput", "", "type", "text", "formControlName", "id", "name", "id", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "product_name", "maxlength", "255", "required", "true", "name", "product_name", 3, "keydown.enter", "keydown.esc"], ["id", "ci8459", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "product_name", "name", "product_name", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "selectEnum", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "product_category", "required", "true"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["id", "ci8460", "dibComponent", "selectEnum", 2, "display", "flex", "flex-direction", "column"], ["formControlName", "product_category"], ["dibComponent", "inputNumber"], ["matInput", "", "type", "number", "formControlName", "product_quantity", "required", "true", "name", "product_quantity", 3, "keydown.enter", "keydown.esc"], ["id", "ci8461", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "product_quantity", "name", "product_quantity", 3, "keydown.enter", "keydown.esc"], ["dibComponent", "timeDatePicker"], ["matPrefix", "", 3, "for"], ["matInput", "", "formControlName", "createdAt", "required", "true", "name", "createdAt", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker8462", ""], ["id", "ci8462", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "createdAt", "name", "createdAt", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "formControlName", "updatedAt", "required", "true", "name", "updatedAt", 3, "ngxMatDatetimePicker", "keydown.enter", "keydown.esc"], ["picker8463", ""], ["id", "ci8463", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "updatedAt", "name", "updatedAt", 3, "keydown.enter", "keydown.esc"], ["matInput", "", "type", "number", "formControlName", "createdBy", "required", "true", "name", "createdBy", 3, "keydown.enter", "keydown.esc"], ["id", "ci8464", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "createdBy", "name", "createdBy", 3, "keydown.enter", "keydown.esc"], ["mat-mini-fab", "", "color", "primary", "dibComponent", "button", "dibListeners", "", "eventList", "\n click ", "actionId", "useBtn", "type", "button", 3, "actionData", "containerPortId"], ["matInput", "", "type", "number", "formControlName", "price", "name", "price", 3, "keydown.enter", "keydown.esc"], ["id", "ci8607", "dibComponent", "inputText"], ["matInput", "", "type", "text", "formControlName", "price", "name", "price", 3, "keydown.enter", "keydown.esc"], ["mat-cell", "", 2, "padding", "2px", "width", "120px", 3, "formGroup"], ["dibComponent", "sqlText", 2, "width", "120px !important"], ["mat-header-cell", "", 2, "padding", "2px", "text-align", "left", "vertical-align", "top", "width", "120px"], ["matInput", "", "type", "text", "formControlName", "totalValue2", "name", "totalValue2", 3, "keydown.enter", "keydown.esc"], ["id", "ci8611", "dibComponent", "inputText"], ["mat-header-cell", "", 2, "height", "4px"], ["mode", "indeterminate", 4, "ngIf"], ["mode", "indeterminate"], ["mat-header-cell", "", 1, "dib-no-records-found"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-header-row", ""], ["mat-header-row", "", 1, "dib-grid-loader", 3, "ngStyle"], ["mat-row", "", 3, "formGroup", "ngClass", "click"], [3, "ngTemplateOutlet"], [1, "grid-footer"], ["class", "mat-body", "matTooltip", "Clear all", "position", "above", "color", "primary", 3, "checked", "click", 4, "ngIf"], ["mat-button", "", 3, "click", 4, "ngIf"], [2, "flex", "1 1 auto"], ["style", "background: none", 3, "length", "pageSize", "pageSizeOptions", "page", 4, "ngIf"], ["matTooltip", "Clear all", "position", "above", "color", "primary", 1, "mat-body", 3, "checked", "click"], ["mat-button", "", 3, "click"], [2, "background", "none", 3, "length", "pageSize", "pageSizeOptions", "page"], ["paginator", ""], ["mat-table", "", 1, "", 2, "margin-top", "1rem", 3, "dataSource"], ["mat-cell", "", "style", "width:80px", 4, "matCellDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-row", "", 3, "ngClass", "click", 4, "matRowDef", "matRowDefColumns"], ["matInput", "", "type", "number", "formControlName", "id", "required", "true", "name", "id", 3, "keydown.enter", "keydown.esc"], ["color", "primary", 3, "checked", "indeterminate", "change"], ["mat-cell", "", 2, "width", "80px"], ["mat-header-cell", ""], ["mat-row", "", 3, "ngClass", "click"]], template: function productsComponent_Template(rf, ctx) { if (rf & 1) {
                        i0.ɵɵelementStart(0, "form", 0);
                        i0.ɵɵlistener("ngSubmit", function productsComponent_Template_form_ngSubmit_0_listener() { return ctx.onSubmit(); });
                        i0.ɵɵelementStart(1, "div", 1)(2, "div", 2);
                        i0.ɵɵelementContainerStart(3, 3);
                        i0.ɵɵelementStart(4, "button", 4);
                        i0.ɵɵlistener("click", function productsComponent_Template_button_click_4_listener($event) { return ctx.navigationService.goTo("product", "main", "?record=new", { changeUrl: true, target: "", mouseEvent: $event, originContainer: ctx }); });
                        i0.ɵɵelement(5, "dib-icon", 5);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(6, "button", 6);
                        i0.ɵɵlistener("click", function productsComponent_Template_button_click_6_listener() { return ctx.deleteSelected(); });
                        i0.ɵɵelement(7, "dib-icon", 7);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(8, "button", 8);
                        i0.ɵɵlistener("click", function productsComponent_Template_button_click_8_listener() { return ctx.reloadContainer(); });
                        i0.ɵɵelement(9, "dib-icon", 9);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(10, "button", 10);
                        i0.ɵɵlistener("click", function productsComponent_Template_button_click_10_listener() { return ctx.openAuditTrail("155", "", ""); });
                        i0.ɵɵelement(11, "dib-icon", 11);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelement(12, "span", 12);
                        i0.ɵɵpipe(13, "safeHtml");
                        i0.ɵɵelementStart(14, "button", 13);
                        i0.ɵɵlistener("click", function productsComponent_Template_button_click_14_listener() { return ctx.toggleSearch(); });
                        i0.ɵɵelement(15, "dib-icon", 14);
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(16, productsComponent_button_16_Template, 2, 4, "button", 15);
                        i0.ɵɵtemplate(17, productsComponent_button_17_Template, 2, 4, "button", 16);
                        i0.ɵɵelement(18, "span", 17);
                        i0.ɵɵtemplate(19, productsComponent_div_19_Template, 5, 3, "div", 18);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(20, "mat-card", 19)(21, "mat-card-content", 20);
                        i0.ɵɵelementContainerStart(22, 3);
                        i0.ɵɵelementStart(23, "div", 21, 22)(25, "form", 23);
                        i0.ɵɵelementContainerStart(26, 24);
                        i0.ɵɵelementStart(27, "table", 25);
                        i0.ɵɵelementContainerStart(28, 26);
                        i0.ɵɵtemplate(29, productsComponent_th_29_Template, 2, 2, "th", 27);
                        i0.ɵɵtemplate(30, productsComponent_td_30_Template, 2, 1, "td", 28);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(31, 29);
                        i0.ɵɵtemplate(32, productsComponent_td_32_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(33, productsComponent_th_33_Template, 1, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(34, 32);
                        i0.ɵɵtemplate(35, productsComponent_td_35_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(36, productsComponent_th_36_Template, 1, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(37, 33);
                        i0.ɵɵtemplate(38, productsComponent_td_38_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(39, productsComponent_th_39_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(40, 34);
                        i0.ɵɵtemplate(41, productsComponent_td_41_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(42, productsComponent_th_42_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(43, 35);
                        i0.ɵɵtemplate(44, productsComponent_td_44_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(45, productsComponent_th_45_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(46, 36);
                        i0.ɵɵtemplate(47, productsComponent_td_47_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(48, productsComponent_th_48_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(49, 37);
                        i0.ɵɵtemplate(50, productsComponent_td_50_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(51, productsComponent_th_51_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(52, 38);
                        i0.ɵɵtemplate(53, productsComponent_td_53_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(54, productsComponent_th_54_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(55, 39);
                        i0.ɵɵtemplate(56, productsComponent_td_56_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(57, productsComponent_th_57_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(58, 40);
                        i0.ɵɵtemplate(59, productsComponent_td_59_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(60, productsComponent_th_60_Template, 1, 0, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(61, 41);
                        i0.ɵɵtemplate(62, productsComponent_td_62_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(63, productsComponent_th_63_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(64, 42);
                        i0.ɵɵtemplate(65, productsComponent_td_65_Template, 2, 2, "td", 43);
                        i0.ɵɵtemplate(66, productsComponent_th_66_Template, 4, 0, "th", 44);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(67, 45);
                        i0.ɵɵtemplate(68, productsComponent_td_68_Template, 2, 2, "td", 30);
                        i0.ɵɵtemplate(69, productsComponent_th_69_Template, 5, 3, "th", 31);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(70, 46);
                        i0.ɵɵtemplate(71, productsComponent_th_71_Template, 2, 2, "th", 47);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementContainerStart(72, 48);
                        i0.ɵɵtemplate(73, productsComponent_th_73_Template, 2, 2, "th", 49);
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵtemplate(74, productsComponent_ng_container_74_Template, 3, 3, "ng-container", 50);
                        i0.ɵɵtemplate(75, productsComponent_tr_75_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(76, productsComponent_tr_76_Template, 1, 3, "tr", 51);
                        i0.ɵɵtemplate(77, productsComponent_tr_77_Template, 1, 4, "tr", 52);
                        i0.ɵɵpipe(78, "async");
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd();
                        i0.ɵɵtemplate(79, productsComponent_79_Template, 1, 1, null, 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementStart(80, "div", null, 54);
                        i0.ɵɵtemplate(82, productsComponent_mat_toolbar_82_Template, 6, 3, "mat-toolbar", 53);
                        i0.ɵɵelementEnd();
                        i0.ɵɵelementContainerEnd();
                        i0.ɵɵelementEnd()()()();
                        i0.ɵɵtemplate(83, productsComponent_ng_template_83_Template, 49, 4, "ng-template", null, 55, i0.ɵɵtemplateRefExtractor);
                    } if (rf & 2) {
                        const _r39 = i0.ɵɵreference(81);
                        i0.ɵɵproperty("formGroup", ctx.model.$formGroup)("ngClass", i0.ɵɵpureFunction1(42, _c3, ctx.view.debug));
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "8418");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matTooltip", "Add new record using Form")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Delete selected record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Reload Record(s)")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "View audit trail of changes")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("innerHtml", i0.ɵɵpipeBind1(13, 38, ctx.getHtml("spanGap")), i0.ɵɵsanitizeHtml);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("matTooltip", "Display headers for filtering records")("matTooltipShowDelay", "300")("matTooltipHideDelay", "300")("matTooltipPosition", "below");
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("ngIf", ctx.showSearch);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.page.fromRecord > -1);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("dibPort", "8427");
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("additionalSpace", 5)("footerElement", _r39);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("formGroup", ctx.gridForm);
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("dataSource", ctx.tableDataSource);
                        i0.ɵɵadvance(47);
                        i0.ɵɵproperty("ngForOf", ctx.columnHeaders.getKeys());
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(44, _c4));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matHeaderRowDef", i0.ɵɵpureFunction0(45, _c5));
                        i0.ɵɵadvance(1);
                        i0.ɵɵproperty("matRowDefColumns", i0.ɵɵpipeBind1(78, 40, ctx.columnsToDisplay.items$));
                        i0.ɵɵadvance(2);
                        i0.ɵɵproperty("ngIf", ctx.gridShowClipboardDefault);
                        i0.ɵɵadvance(3);
                        i0.ɵɵproperty("ngIf", ctx.gridMultiselect || true);
                    } }, dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgTemplateOutlet, i4.NgStyle, i5.DefaultClassDirective, i5.DefaultStyleDirective, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i3.FormArrayName, i2.DibIconComponent, i2.DibPortDirective, i2.DibListenersDirective, i2.DibFillHeightDirective, i2.DibRemoveFocusDirective, i6.NgxMatDatetimepicker, i6.NgxMatDatepickerInput, i7.MatOption, i8.MatButton, i8.MatMiniFabButton, i9.MatCheckbox, i10.MatDatepickerToggle, i11.MatFormField, i11.MatLabel, i11.MatError, i11.MatPrefix, i11.MatSuffix, i12.MatIcon, i13.MatInput, i14.MatProgressBar, i15.MatSelect, i16.MatToolbar, i16.MatToolbarRow, i17.MatTooltip, i18.MatCard, i18.MatCardContent, i19.MatTable, i19.MatHeaderCellDef, i19.MatHeaderRowDef, i19.MatColumnDef, i19.MatCellDef, i19.MatRowDef, i19.MatHeaderCell, i19.MatCell, i19.MatHeaderRow, i19.MatRow, i20.MatSort, i20.MatSortHeader, i21.MatPaginator, i4.AsyncPipe, i2.SafeHtmlPipe], encapsulation: 2 });
            };
            tslib_1.__decorate([
                shared_2.EventHandler('reloadproducts'),
                tslib_1.__metadata("design:type", Function),
                tslib_1.__metadata("design:paramtypes", [Object]),
                tslib_1.__metadata("design:returntype", void 0)
            ], productsComponent.prototype, "reloadContainer", null);
            exports_1("productsComponent", productsComponent);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(productsComponent, [{
                    type: core_2.Component,
                    args: [{
                            selector: 'products',
                            template: `
        <form style="display:flex; flex-direction:column; align-items:stretch"
 [formGroup]="model.$formGroup" (ngSubmit)="onSubmit()" [ngClass]="{ 'dib-editor' : view.debug }" 
><div style="display:flex; flex-direction:column; align-items:stretch"><div 
 style="  padding:5px 10px 6px !important;
 display:flex; flex-direction: row;
 justify-content: flex-start;
 align-items: center;
 gap: 10px 10px;
 flex-wrap: wrap; align-content: flex-start;  flex: 1 1 0%;  " id=ci8418 dibComponent=row   dib-inject-content=replace  ><ng-container [dibPort]="'8418'" ><button mat-mini-fab color=accent  id=ci8465 dibComponent=btnAdd   (click)="navigationService.goTo(
 'product',
 'main',
 '?record=new', 
 { 
 changeUrl: true,
 target: '', 
 mouseEvent: $event,
 originContainer : this
 });"  style="  margin:0px 5px !important;   " aria-label="Add new record using Form"
 [matTooltip]="'Add new record using Form'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   type=button
 ><dib-icon src="/files/dropins/setNgxMaterial/dibAdmin/images/btn_add.svg"></dib-icon></button><button mat-mini-fab color=accent  id=ci8419 dibComponent=btnGridDelete   style="  " aria-label="Delete selected record(s)"
 [matTooltip]="'Delete selected record(s)'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   (click)="deleteSelected()"  type=button
 ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/delete.svg"></dib-icon></button><button 
 mat-mini-fab color=primary  id=ci8420 dibComponent=btnReload   style="  " aria-label="Reload Record(s)"
 [matTooltip]="'Reload Record(s)'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   (click)="reloadContainer()"  type=button
 ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/reload.svg"></dib-icon></button><button 
 mat-mini-fab color=accent  id=ci8457 dibComponent=btnAuditTrail   style="  " aria-label="View audit trail of changes"
 [matTooltip]="'View audit trail of changes'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   (click)="openAuditTrail('155','','')"  type=button
 ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/audit_trail.svg"></dib-icon></button><span  id=ci8426 dibComponent=span   style="
 width:150px !important;   "  [innerHtml]="getHtml('spanGap') | safeHtml"
></span><button mat-mini-fab color=primary  id=ci8424 dibComponent=btnFilterOpen   style="  " aria-label="Display headers for filtering records"
 [matTooltip]="'Display headers for filtering records'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   (click)="toggleSearch()"  type=button
 ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/search.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci8422 dibComponent=btnFilterApply   style="  " aria-label="Apply filter criteria specified in column headers"
 [matTooltip]="'Apply filter criteria specified in column headers'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="searchGrid()"  type=button
 ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/applyFilters.svg"></dib-icon></button><button mat-mini-fab color=primary  id=ci8423 dibComponent=btnFilterClear   style="  " aria-label="Show all records and clear filter criteria"
 [matTooltip]="'Show all records and clear filter criteria'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   *ngIf=showSearch  (click)="clearSearch()"  type=button
 ><dib-icon src="/files/dropins/setNgxMaterial/shared/img/icons/cancelFilters.svg"></dib-icon></button><span  id=ci8421 dibComponent=spacer   style="  flex: 1 1 0%;  " ></span><div class=dib-grid-totals  id=ci8425 dibComponent=gridTotals   style="  display:flex; flex-direction: row;  flex-wrap: nowrap;  "  *ngIf="page.fromRecord > -1"
> Products: {{page.fromRecord}}<span *ngIf='page.fromRecord>0'>&nbsp;to&nbsp;{{page.toRecord}}&nbsp;of&nbsp;{{page.records}}</span>&nbsp;<span *ngIf='page.totalRecords!=page.records'>(Total: {{page.totalRecords}})</span></div></ng-container></div><mat-card   style="  flex: 1 1 0%;  " id=ci8427 dibComponent=card  ><mat-card-content   style="  display:flex; flex-direction: column;  flex-wrap: nowrap;"  ><ng-container [dibPort]="'8427'" ><!-- <div dib-scroll-pager scrollOffset=50 (nextPage)="nextPage()"> --><div #gridScroll fill-height debounceTime=300  [additionalSpace]=5 [footerElement]="footerproducts" ><form [formGroup]="gridForm" autocomplete=off ><ng-container formArrayName=gridRows ><table mat-table [dataSource]="tableDataSource" matSort class="dib-inline-editing "><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox  color=primary
  (click)="$event.preventDefault();masterToggle()"
 [checked]="masterIsChecked"
 [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row"><mat-checkbox
 color=primary
  (click)="$event.stopPropagation()"
 (change)="$event ? selection.toggle(row) : null"
 [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><div 
 style="  display:flex; flex-direction: row;
 justify-content: flex-start;
 align-items: center;
 gap: 10px;
 flex-wrap: nowrap; align-content: flex-start;  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'8429'" ><button mat-mini-fab color=primary  id=ci8430 dibComponent=btnGridEdit   (click)="navigationService.goTo(
 'product',
 'main',
 '?primary_id='+row.id, 
 { 
 changeUrl: true,
 target: '', 
 mouseEvent: $event,
 originContainer : this
 });"  style="  " aria-label="View/edit this record"
 [matTooltip]="'View/edit this record'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button
 ><dib-icon src=edit ></dib-icon></button><button
 mat-mini-fab color=primary  [actionData]=row id=ci8601 dibComponent=button  dibListeners eventList="
 click " [containerPortId]="containerActionReference()" actionId=useBtn   style="  "  type=button
 ><dib-icon src=cloud_download ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><button mat-mini-fab color=primary  dibComponent=btnGridEdit   (click)="navigationService.goTo(
 'product',
 '',
 '?primary_id='+row.id, 
 { 
 changeUrl: true,
 target: '', 
 mouseEvent: $event,
 originContainer : this
 });"  style="  " aria-label="View/edit this record"
 [matTooltip]="'View/edit this record'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button
 ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  [hidden]="true" ><input 
 matInput
 type=number   formControlName=id   required=true  name=id
  [attr.aria-label]="'Id'" ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><mat-icon class=dib_form_input_priority_high  *ngIf="isInvalid('id', rowForm)" matSuffix >priority_high</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8458 dibComponent=inputText   style="  "  item-alias=id  [hidden]="true" ><mat-label >Id</mat-label><input 
 matInput
 type=text   formControlName=id   name=id
  [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=product_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'product_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input 
 matInput
 type=text   formControlName=product_name   maxlength='255'  required=true  name=product_name
  [attr.aria-label]="'Product Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('product_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('product_name','maxlength',rowForm)">Please enter 255 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Product Name
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Product Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8459 dibComponent=inputText   style="  " ><mat-label >Product Name</mat-label><input 
 matInput
 type=text   formControlName=product_name   name=product_name
  [attr.aria-label]="'Product Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=product_category  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'product_category','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-select formControlName=product_category  
 required=true
 ><mat-option *ngFor="let item of lists.list8460.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Product Category
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Product Category</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci8460 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-label>Product Category</mat-label><mat-select formControlName=product_category    ><mat-option *ngFor="let item of lists.list8460.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=product_quantity  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'product_quantity','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input 
 matInput
 type=number   formControlName=product_quantity   required=true  name=product_quantity
  [attr.aria-label]="'Product Quantity'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('product_quantity','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_quantity', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_quantity', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Product Quantity
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Product Quantity</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8461 dibComponent=inputText   style="  " ><mat-label >Product Quantity</mat-label><input 
 matInput
 type=text   formControlName=product_quantity   name=product_quantity
  [attr.aria-label]="'Product Quantity'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_quantity', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_quantity', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=createdAt  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'createdAt','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker8462"></mat-datepicker-toggle><input 
 matInput 
 [ngxMatDatetimePicker]="picker8462"   formControlName=createdAt   required=true  name=createdAt
  [attr.aria-label]="'CreatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdAt', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdAt', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker8462></ngx-mat-datetime-picker><mat-error *ngIf="hasError('createdAt','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> CreatedAt
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >CreatedAt</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8462 dibComponent=inputText   style="  " ><mat-label >CreatedAt</mat-label><input 
 matInput
 type=text   formControlName=createdAt   name=createdAt
  [attr.aria-label]="'CreatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdAt', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdAt', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updatedAt  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'updatedAt','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker8463"></mat-datepicker-toggle><input 
 matInput 
 [ngxMatDatetimePicker]="picker8463"   formControlName=updatedAt   required=true  name=updatedAt
  [attr.aria-label]="'UpdatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updatedAt', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updatedAt', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker8463></ngx-mat-datetime-picker><mat-error *ngIf="hasError('updatedAt','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> UpdatedAt
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >UpdatedAt</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8463 dibComponent=inputText   style="  " ><mat-label >UpdatedAt</mat-label><input 
 matInput
 type=text   formControlName=updatedAt   name=updatedAt
  [attr.aria-label]="'UpdatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updatedAt', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updatedAt', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=createdBy  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'createdBy','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input 
 matInput
 type=number   formControlName=createdBy   required=true  name=createdBy
  [attr.aria-label]="'CreatedBy'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('createdBy','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdBy', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdBy', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> CreatedBy
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >CreatedBy</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8464 dibComponent=inputText   style="  " ><mat-label >CreatedBy</mat-label><input 
 matInput
 type=text   formControlName=createdBy   name=createdBy
  [attr.aria-label]="'CreatedBy'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdBy', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdBy', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=useBtn  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><button
 mat-mini-fab color=primary  [actionData]=row dibComponent=button  dibListeners eventList="
 click " [containerPortId]="containerActionReference()" actionId=useBtn   style="  "  type=button
 ><dib-icon src=cloud_download ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
></th></ng-container><ng-container matColumnDef=price  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'price','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input 
 matInput
 type=number   formControlName=price   name=price
  [attr.aria-label]="'Price'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('price', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('price', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Price  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Price</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8607 dibComponent=inputText   style="  " ><mat-label >Price</mat-label><input 
 matInput
 type=text   formControlName=price   name=price
  [attr.aria-label]="'Price'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('price', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('price', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=totalValue  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; width:120px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><div  dibComponent=sqlText   style="
 width:120px !important;   " ><span *ngIf="!!row && !!row.totalValue_display_value"> {{row.totalValue_display_value}}</span><span *ngIf="!!row && !row.totalValue_display_value"> {{row.totalValue}}</span></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:120px; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > total value  </div></div></th></ng-container><ng-container matColumnDef=totalValue2  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'totalValue2','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input 
 matInput
 type=text   formControlName=totalValue2   name=totalValue2
  [attr.aria-label]="'total value sql'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> total value sql  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >total value sql</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8611 dibComponent=inputText   style="  " ><mat-label >total value sql</mat-label><input 
 matInput
 type=text   formControlName=totalValue2   name=totalValue2
  [attr.aria-label]="'total value sql'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length" style="height:4px"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><ng-container *ngFor="let column of columnHeaders.getKeys()"><tr mat-header-row *matHeaderRowDef="(columnHeaders.getArray(column).items$ | async);"></tr></ng-container><tr mat-header-row [ngStyle]="{visibility : busy? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibBusy']"></tr><tr mat-header-row [ngStyle]="{visibility : tableDataSource.data.length == 0? 'visible' : 'hidden'}" class=dib-grid-loader  *matHeaderRowDef="['_dibNoRecords']"></tr><tr [formGroup]="model.$formGroup" mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async); let rowIndex = index;" (click)="rowClick(row, $event)"></tr></table></ng-container></form><ng-template [ngTemplateOutlet]="_selectedTable" *ngIf=gridShowClipboardDefault ></ng-template></div><div #footerproducts><mat-toolbar *ngIf="gridMultiselect || true"><mat-toolbar-row class = "grid-footer"><mat-checkbox
 class = "mat-body"
 matTooltip = "Clear all"
 position = "above"
 *ngIf=numberOfSelectedItems  
 color=primary
  (click)="$event.preventDefault();clearAll()"
 [checked]="true"
 > {{numberOfSelectedItems + " "}}item{{numberOfSelectedItems>1?"s ":" "}}selected
 </mat-checkbox><button
 *ngIf="selectedDataNotInPage().length>0"
 mat-button  (click)="gridShowClipboardDefault = !gridShowClipboardDefault; gridShowClipboardDefault&&scrollToBottom()"
 ><mat-icon *ngIf="!gridShowClipboardDefault">visibility</mat-icon><mat-icon *ngIf=gridShowClipboardDefault >visibility_off</mat-icon> {{gridShowClipboardDefault?"hide":"show"}}</button><span style ="flex: 1 1 auto"></span><mat-paginator *ngIf=true  #paginator [length]="page.totalRecords" (page)="changePage($event)" style = "background: none"
 [pageSize]="page.pageSize"
 [pageSizeOptions]="[10, 20, 50, 100]" ></mat-paginator></mat-toolbar-row></mat-toolbar></div></ng-container></mat-card-content></mat-card></div></form><ng-template #_selectedTable ><table style ="margin-top:1rem" mat-table [dataSource]="selectionDataSource" class=""><ng-container matColumnDef=hdrActions  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><div 
 style="  display:flex; flex-direction: row;
 justify-content: flex-start;
 align-items: center;
 gap: 10px;
 flex-wrap: nowrap; align-content: flex-start;  flex: 1 1 0%;  " dibComponent=columnHeader  ><ng-container [dibPort]="'8429'" ><button mat-mini-fab color=primary  id=ci8430 dibComponent=btnGridEdit   (click)="navigationService.goTo(
 'product',
 'main',
 '?primary_id='+row.id, 
 { 
 changeUrl: true,
 target: '', 
 mouseEvent: $event,
 originContainer : this
 });"  style="  " aria-label="View/edit this record"
 [matTooltip]="'View/edit this record'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button
 ><dib-icon src=edit ></dib-icon></button><button
 mat-mini-fab color=primary  [actionData]=row id=ci8601 dibComponent=button  dibListeners eventList="
 click " [containerPortId]="containerActionReference()" actionId=useBtn   style="  "  type=button
 ><dib-icon src=cloud_download ></dib-icon></button></ng-container></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
></th></ng-container><ng-container matColumnDef=btnGridEdit  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><button mat-mini-fab color=primary  dibComponent=btnGridEdit   (click)="navigationService.goTo(
 'product',
 '',
 '?primary_id='+row.id, 
 { 
 changeUrl: true,
 target: '', 
 mouseEvent: $event,
 originContainer : this
 });"  style="  " aria-label="View/edit this record"
 [matTooltip]="'View/edit this record'"
 [matTooltipShowDelay]="'300'"
 [matTooltipHideDelay]="'300'"
 [matTooltipPosition]="'below'"
 matTooltipClass=dib-tooltip   ng-click="editRow()"  type=button
 ><dib-icon src=edit ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
></th></ng-container><ng-container matColumnDef=id  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'id','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  "  item-alias=id  [hidden]="true" ><input 
 matInput
 type=number   formControlName=id   required=true  name=id
  [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('id','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Id
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Id</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8458 dibComponent=inputText   style="  "  item-alias=id  [hidden]="true" ><mat-label >Id</mat-label><input 
 matInput
 type=text   formControlName=id   name=id
  [attr.aria-label]="'Id'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('id', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('id', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=product_name  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'product_name','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input 
 matInput
 type=text   formControlName=product_name   maxlength='255'  required=true  name=product_name
  [attr.aria-label]="'Product Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('product_name','required',rowForm)">Please enter a value</mat-error><mat-error *ngIf="hasError('product_name','maxlength',rowForm)">Please enter 255 chars or less</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_name', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_name', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Product Name
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Product Name</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8459 dibComponent=inputText   style="  " ><mat-label >Product Name</mat-label><input 
 matInput
 type=text   formControlName=product_name   name=product_name
  [attr.aria-label]="'Product Name'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_name', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_name', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=product_category  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'product_category','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-select formControlName=product_category  
 required=true
 ><mat-option *ngFor="let item of lists.list8460.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Product Category
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Product Category</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field  id=ci8460 dibComponent=selectEnum   style="  display:flex; flex-direction: column;  "  ><mat-label>Product Category</mat-label><mat-select formControlName=product_category    ><mat-option *ngFor="let item of lists.list8460.items | async" [value]="item.id"> {{item.id_display_value}}</mat-option></mat-select></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=product_quantity  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'product_quantity','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input 
 matInput
 type=number   formControlName=product_quantity   required=true  name=product_quantity
  [attr.aria-label]="'Product Quantity'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('product_quantity','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_quantity', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_quantity', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Product Quantity
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Product Quantity</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8461 dibComponent=inputText   style="  " ><mat-label >Product Quantity</mat-label><input 
 matInput
 type=text   formControlName=product_quantity   name=product_quantity
  [attr.aria-label]="'Product Quantity'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('product_quantity', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('product_quantity', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=createdAt  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'createdAt','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker8462"></mat-datepicker-toggle><input 
 matInput 
 [ngxMatDatetimePicker]="picker8462"   formControlName=createdAt   required=true  name=createdAt
  [attr.aria-label]="'CreatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdAt', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdAt', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker8462></ngx-mat-datetime-picker><mat-error *ngIf="hasError('createdAt','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> CreatedAt
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >CreatedAt</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8462 dibComponent=inputText   style="  " ><mat-label >CreatedAt</mat-label><input 
 matInput
 type=text   formControlName=createdAt   name=createdAt
  [attr.aria-label]="'CreatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdAt', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdAt', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=updatedAt  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'updatedAt','none','datetime')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=timeDatePicker   style="  " ><mat-datepicker-toggle matPrefix [for]="picker8463"></mat-datepicker-toggle><input 
 matInput 
 [ngxMatDatetimePicker]="picker8463"   formControlName=updatedAt   required=true  name=updatedAt
  [attr.aria-label]="'UpdatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()'  ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updatedAt', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updatedAt', rowForm)" matSuffix >done_all</mat-icon><ngx-mat-datetime-picker #picker8463></ngx-mat-datetime-picker><mat-error *ngIf="hasError('updatedAt','required',rowForm)">Please enter a value</mat-error></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> UpdatedAt
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >UpdatedAt</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8463 dibComponent=inputText   style="  " ><mat-label >UpdatedAt</mat-label><input 
 matInput
 type=text   formControlName=updatedAt   name=updatedAt
  [attr.aria-label]="'UpdatedAt'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('updatedAt', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('updatedAt', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=createdBy  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'createdBy','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input 
 matInput
 type=number   formControlName=createdBy   required=true  name=createdBy
  [attr.aria-label]="'CreatedBy'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-error *ngIf="hasError('createdBy','required',rowForm)">Please enter a value</mat-error><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdBy', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdBy', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> CreatedBy
 &nbsp;<span class=required-column  *ngIf=editorOpen >*</span></div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >CreatedBy</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8464 dibComponent=inputText   style="  " ><mat-label >CreatedBy</mat-label><input 
 matInput
 type=text   formControlName=createdBy   name=createdBy
  [attr.aria-label]="'CreatedBy'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('createdBy', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('createdBy', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=useBtn  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><button
 mat-mini-fab color=primary  [actionData]=row dibComponent=button  dibListeners eventList="
 click " [containerPortId]="containerActionReference()" actionId=useBtn   style="  "  type=button
 ><dib-icon src=cloud_download ></dib-icon></button></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
></th></ng-container><ng-container matColumnDef=price  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'price','none','number')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field  dibComponent=inputNumber   style="  " ><input 
 matInput
 type=number   formControlName=price   name=price
  [attr.aria-label]="'Price'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('price', rowForm)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('price', rowForm)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> Price  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >Price</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8607 dibComponent=inputText   style="  " ><mat-label >Price</mat-label><input 
 matInput
 type=text   formControlName=price   name=price
  [attr.aria-label]="'Price'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><mat-icon class=dib_form_input_done  (click)="onSubmit()" *ngIf="view.recordStatus=='update' && notSaved('price', model.$formGroup)" matSuffix >done</mat-icon><mat-icon class=dib_form_input_done_all  *ngIf="view.recordStatus=='update' && isSaved('price', model.$formGroup)" matSuffix >done_all</mat-icon><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=totalValue  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; width:120px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><div  dibComponent=sqlText   style="
 width:120px !important;   " ><span *ngIf="!!row && !!row.totalValue_display_value"> {{row.totalValue_display_value}}</span><span *ngIf="!!row && !row.totalValue_display_value"> {{row.totalValue}}</span></div></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; width:120px; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div > total value  </div></div></th></ng-container><ng-container matColumnDef=totalValue2  ><td mat-cell *matCellDef="let rowForm; let rowIndex = index;" [formGroup]="rowForm"
 style="padding: 2px; "
><ng-container *ngIf="rowForm.getRawValue() as row"><span style="display:flex; flex-direction:row; justify-content:space-between; align-items:stretch;"><span class=dib-cell  
 style="   "
 ><span style="flex: 1 1 0%" *ngIf="excelEditing == false && rowForm.get('__edit').value === false"> 
 {{findColumnDisplayValue(rowIndex, 'totalValue2','none','text')}}</span><span style="flex: 1 1 0%" *ngIf="excelEditing == true || rowForm.get('__edit').value === true"><mat-form-field dibComponent=inputText   style="  " ><input 
 matInput
 type=text   formControlName=totalValue2   name=totalValue2
  [attr.aria-label]="'total value sql'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></span></span><span *ngIf="excelEditing == false && rowForm.get('__edit').value === false"></span></span></ng-container></td><th mat-header-cell *matHeaderCellDef   style="padding:2px; text-align:left; vertical-align:top; "
><div style="display:flex; flex-direction:column; " class=dibGridSearch ><div *ngIf="!showSearch" mat-sort-header> total value sql  </div><div mat-sort-header class=dibGridSearchTitle  *ngIf=showSearch  >total value sql</div><div class=dibGridSearchInput  *ngIf=showSearch  dib-edit [formGroup]="model.$formGroup"><mat-form-field id=ci8611 dibComponent=inputText   style="  " ><mat-label >total value sql</mat-label><input 
 matInput
 type=text   formControlName=totalValue2   name=totalValue2
  [attr.aria-label]="'total value sql'"  (keydown.enter)='searchGrid(false)' (keydown.esc)='clearSearch()' ><!--<mat-hint>Hint</mat-hint>@TODO think about a hints field--></mat-form-field></div></div></th></ng-container><ng-container matColumnDef=_select ><th mat-header-cell *matHeaderCellDef style = "width:80px"><mat-checkbox
 color=primary
  (change)="$event ? masterToggle($event) : null"
 [checked]="masterIsChecked"
 [indeterminate]="masterIsIndeterminate"  ></mat-checkbox></th><td mat-cell *matCellDef="let row" style = "width:80px"><mat-checkbox
 color=primary
  (click)="$event.stopPropagation()"
 (change)="$event ? selection.toggle(row) : null"
 [checked]="isHighlighted(row)"  ></mat-checkbox></td></ng-container><ng-container matColumnDef=_dibBusy ><th mat-header-cell *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><mat-progress-bar *ngIf=busy  mode=indeterminate ></mat-progress-bar></th></ng-container><ng-container matColumnDef=_dibNoRecords ><th mat-header-cell class=dib-no-records-found  *matHeaderCellDef [attr.colspan]="columnsToDisplay.get().length"><span *ngIf="!busy && tableDataSource.data.length == 0">{{translate('global.norecordsfound','No Records Found')}}</span></th></ng-container><tr mat-row [ngClass]="{'dib-grid-selected': isHighlighted(row)}" *matRowDef="let row; columns: (columnsToDisplay.items$ | async)" (click)="rowClick(row, $event)"></tr></table></ng-template>
  `
                        }]
                }], function () { return [{ type: i0.Injector }, { type: i1.HttpClient }, { type: i0.ChangeDetectorRef }, { type: i2.CrudService }, { type: i0.ViewContainerRef }, { type: i2.ScrollDispatcher }, { type: i0.ChangeDetectorRef }, { type: i3.FormBuilder }]; }, { reloadContainer: [] }); })();
            containerModules = [button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, select_1.MatSelectModule];
            productsModule = class productsModule {
                static entry = productsComponent;
                static ɵfac = function productsModule_Factory(t) { return new (t || productsModule)(); };
                static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: productsModule });
                static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
                        { provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] },
                        { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }
                        // { provide: NGX_MAT_DATE_FORMATS, useValue: DATETIMEPICKER_FORMATS },
                    ], imports: [common_1.CommonModule, shared_5.SharedModule, containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] });
            };
            exports_1("default", productsModule);
            (function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(productsModule, [{
                    type: core_4.NgModule,
                    args: [{
                            imports: [common_1.CommonModule, shared_5.SharedModule, ...containerModules, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule],
                            providers: [
                                { provide: core_3.DateAdapter, useClass: shared_6.DateFnsDateAdapter, deps: [core_3.MAT_DATE_LOCALE] },
                                { provide: core_3.MAT_DATE_FORMATS, useValue: shared_6.DATEPICKER_FORMATS }
                                // { provide: NGX_MAT_DATE_FORMATS, useValue: DATETIMEPICKER_FORMATS },
                            ],
                            declarations: [productsComponent],
                            exports: []
                        }]
                }], null, null); })();
            (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(productsModule, { declarations: [productsComponent], imports: [common_1.CommonModule, shared_5.SharedModule, button_1.MatButtonModule, icon_1.MatIconModule, card_1.MatCardModule, select_1.MatSelectModule, table_2.MatTableModule, sort_1.MatSortModule, paginator_1.MatPaginatorModule] }); })();
        }
    };
});
